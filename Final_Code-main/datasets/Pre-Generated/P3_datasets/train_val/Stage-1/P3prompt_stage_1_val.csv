Prompt,Output
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""

        Query: Summarize and prioritize tasks related to the ""UX Improvement"" project [/INST]

        ```
        var_1 = search_object_by_name(query=""UX Improvement"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""UX Improvement"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Locate the sprint ID and add all P2 tickets from user USER-321 to it [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""USER-321"")
var_3 = works_list(type=[""ticket""], issue.priority=[""p2""], created_by=[var_2])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""USER-321"")
var_3 = works_list(type=[""ticket""], issue.priority=[""p2""], created_by=[var_2])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Summarize and prioritize tasks for user 'USER-XYZ' in 'development' stage. [/INST]

        ```
        var_1 = works_list(type=[""task""], owned_by=[""USER-XYZ""], stage.name=[""development""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = works_list(type=[""task""], owned_by=[""USER-XYZ""], stage.name=[""development""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""

        Query: Add new  issues from department REV-345 to my sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-345"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""issue""])
var_3 = who_am_i()
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""REV-345"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""issue""])
var_3 = who_am_i()
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

        Query: Could the universe be a vast canvas, and each individual life a unique stroke of cosmic art? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""

        Query: Search for the 'ProjectX' object and provide a summary [/INST]

        ```
        var_1 = search_object_by_name(query=""ProjectX"")
var_2 = works_list(owned_by=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""ProjectX"")
var_2 = works_list(owned_by=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Add tasks related to the 'website revamp' project to my current sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""website revamp"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1])
var_3 = who_am_i()
var_4 = works_list(type=[""task""], applies_to_part=[var_1], owned_by=[var_3])
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""website revamp"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1])
var_3 = who_am_i()
var_4 = works_list(type=[""task""], applies_to_part=[var_1], owned_by=[var_3])
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
"
"
        <s>
        [INST]
        Allowed Tools: 

        def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""

        Query: Identify my tasks related to ""SECURITY-UPDATES"" and allocate them to sprint ""SPRINT-42"" [/INST]

        ```
        var_1 = who_am_i()
var_2 = search_object_by_name(query=""SECURITY-UPDATES"")
var_3 = works_list(applies_to_part=[var_2], owned_by=[var_1], type=[""task""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-42"")

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = search_object_by_name(query=""SECURITY-UPDATES"")
var_3 = works_list(applies_to_part=[var_2], owned_by=[var_1], type=[""task""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-42"")
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find and summarize all tasks related to the project code ""PRJ-321"" [/INST]

        ```
        var_1 = search_object_by_name(query=""PRJ-321"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""PRJ-321"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""
def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""

        Query: Find work items related to parts = ['part-123','part-856'] and owned by a user [/INST]

        ```
        var_1 = search_object_by_name(query=""a user"")
var_2 = works_list(type=[""task""], applies_to_part=['part-123','part-856'], owned_by=[var_1])

        ```
        </s>
        ","var_1 = search_object_by_name(query=""a user"")
var_2 = works_list(type=[""task""], applies_to_part=['part-123','part-856'], owned_by=[var_1])
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query:  Retrieve work items of type task related to part AUTH-SYSTEM, prioritize them, and limit the results to 20. [/INST]

        ```
        var_1 = works_list(applies_to_part=[""AUTH-SYSTEM""], limit=20, type=[""task""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(applies_to_part=[""AUTH-SYSTEM""], limit=20, type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""


def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""

        Query: Get current sprint ID and add new critical task 'TASK-911' to it. [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = add_work_items_to_sprint(work_ids=[""TASK-911""], sprint_id=var_1)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = add_work_items_to_sprint(work_ids=[""TASK-911""], sprint_id=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Retrieve work items related to ENH-123 and summarize the tasks created this month by user DEVU-456 [/INST]

        ```
        var_1 = search_object_by_name(query=""ENH-123"")
var_2 = search_object_by_name(query=""DEVU-456"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""ENH-123"")
var_2 = search_object_by_name(query=""DEVU-456"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""


def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
    object_ids (list): A list of object IDs

Returns:
    str: The ID of the generated report
""""""


def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""

        Query: Find all tasks related to the Epic CAPL-321 and determine which ones still need a response [/INST]

        ```
        var_1 = search_object_by_name(query=""CAPL-321"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""task""])

        ```
        </s>
        ","var_1 = search_object_by_name(query=""CAPL-321"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""task""])
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""


def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find and summarize tasks in 'review' stage for the current user and add them to the sprint named 'Q1 Deliverables' [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""review""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = search_object_by_name(query=""Q1 Deliverables"")
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""review""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = search_object_by_name(query=""Q1 Deliverables"")
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: What are the latest fashion trends for the upcoming summer? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: List all tickets that need a response, summarize, and then add them to sprint SPRINT-789. [/INST]

        ```
        var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)

        ```
        </s>
        ","var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

        def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find and summarize tasks related to the ""QA-Testing"" part that need a response [/INST]

        ```
        var_1 = search_object_by_name(query=""QA-Testing"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""QA-Testing"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query:  Summarize and prioritize tickets with severity blocker for the IT_SUPPORT team, limiting the results to 15. [/INST]

        ```
        var_1 = search_object_by_name(query=""IT_SUPPORT"")
var_2 = works_list(ticket.severity=[""blocker""], ticket.rev_org=[var_1], limit=15)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""IT_SUPPORT"")
var_2 = works_list(ticket.severity=[""blocker""], ticket.rev_org=[var_1], limit=15)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""



def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""

        Query: Retrieve all P1 issues, prioritize them, and add them to the current sprint, limiting the number of work items to 50. [/INST]

        ```
        var_1 = works_list(issue.priority=[""p1""], type=[""issue""], limit=50)
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        ","var_1 = works_list(issue.priority=[""p1""], type=[""issue""], limit=50)
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""

        Query: Get my tasks related to `DOC-321` that need a response, prioritize and summarize them. [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(type=[""task""], applies_to_part=[""DOC-321""], owned_by=[var_1], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(type=[""task""], applies_to_part=[""DOC-321""], owned_by=[var_1], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""

        Query: Create tasks from the key points in the  meeting notes X [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""X"")

        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""X"")
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""


def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

        Query: Retrieve the sprint ID and add my 'blocker' severity tickets to it [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""blocker""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""blocker""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Retrieve and summarize tickets from 'Critical' channel for review [/INST]

        ```
        var_1 = works_list(ticket.source_channel=[""Critical""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.source_channel=[""Critical""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""


def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

        Query: Create actionable tasks from customer feedback 'CF-123' and prioritize them [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""CF-123"")
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""CF-123"")
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

        Query: Find work items in progress for the ""QuantumLeap"" feature, summarize and filter by those created by ""DevTeamX"" [/INST]

        ```
        var_1 = search_object_by_name(query=""QuantumLeap"")
var_2 = search_object_by_name(query=""DevTeamX"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2], stage.name=[""in progress""], type=[""issue"", ""ticket"", ""task""])
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""QuantumLeap"")
var_2 = search_object_by_name(query=""DevTeamX"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2], stage.name=[""in progress""], type=[""issue"", ""ticket"", ""task""])
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""

def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""

        Query: Prioritize and summarize my tasks that are currently in the 'not-completed' stage. [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""not-completed""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""not-completed""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Summarize the latest tickets from channel 'email' for user USER-XY [/INST]

        ```
        var_1 = search_object_by_name(query=""USER-XY"")
var_2 = works_list(created_by=[var_1], ticket.source_channel=[""email""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""USER-XY"")
var_2 = works_list(created_by=[var_1], ticket.source_channel=[""email""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""


def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""

        Query: Find work items for the ""Alpha"" project, prioritize them, and add to the sprint. [/INST]

        ```
        var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Add all tickets marked as 'blocker' to sprint SPRINT-456 [/INST]

        ```
        var_1 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-456"")

        ```
        </s>
        ","var_1 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-456"")
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Get tickets associated with Rev organization REV-456 with medium severity and provide a summary. [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Identify my tasks related to the ""X1-Project"" and summarize them [/INST]

        ```
        var_1 = who_am_i()
var_2 = search_object_by_name(query=""X1-Project"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = search_object_by_name(query=""X1-Project"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

        def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""

        Query: Identify my tasks for the current sprint, summarize and prepare for the current team update [/INST]

        ```
        var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], stage.name=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], stage.name=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Summarize the tickets from REV-456, prioritize the top ones, and add them to the sprint with ID SPRINT-789 [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = add_work_items_to_sprint(work_ids=var_4, sprint_id=""SPRINT-789"")

        ```
        </s>
        ","var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = add_work_items_to_sprint(work_ids=var_4, sprint_id=""SPRINT-789"")
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""

        Query:  Find work items related to part MODULE-002, prioritize them, and summarize them, limiting the number of work items to 37. [/INST]

        ```
        var_1 = works_list(applies_to_part=[""MODULE-002""], limit=37)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = works_list(applies_to_part=[""MODULE-002""], limit=37)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

        Query: Identify tasks created by 'UserX', prioritize them, and summarize the top priority tasks [/INST]

        ```
        var_1 = works_list(created_by=[""UserX""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=[var_2[0]])

        ```
        </s>
        ","var_1 = works_list(created_by=[""UserX""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=[var_2[0]])
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""


def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""

        Query: Locate, prioritize, and add all blocker issues from Rev organization ORG-999 to the current sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""ORG-999"")
var_2 = works_list(type=[""issue""], ticket.severity=[""blocker""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""ORG-999"")
var_2 = works_list(type=[""issue""], ticket.severity=[""blocker""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""


def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""

        Query: Find tickets from the REV-345 organization and summarize them based on severity [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-345"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""REV-345"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Identify all tickets from ""VIP-Support"" channel and escalate them. [/INST]

        ```
        var_1 = works_list(ticket.source_channel=[""VIP-Support""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.source_channel=[""VIP-Support""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find and summarize work items related to part ENH-456 that need a response [/INST]

        ```
        var_1 = works_list(applies_to_part=[""ENH-456""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(applies_to_part=[""ENH-456""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Identify my tickets severity marked as ""blocker"", summarize and assign them to me [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(ticket.severity=[""blocker""], owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=get_sprint_id())

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(ticket.severity=[""blocker""], owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=get_sprint_id())
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find tasks in 'research' phase, prioritize and add to sprint [/INST]

        ```
        var_1 = works_list(stage.name=[""research""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        ","var_1 = works_list(stage.name=[""research""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""

def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find and summarize tasks needing response for Rev organization REV-999 [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-999"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""REV-999"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Retrieve the sprint ID for my team's sprint called 'SuperSprint' [/INST]

        ```
        var_1 = search_object_by_name(query=""SuperSprint"")

        ```
        </s>
        ","var_1 = search_object_by_name(query=""SuperSprint"")
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""

        Query: Locate the sprint ID for the current development cycle and add all ""blocker"" severity tickets to it [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""

def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: List all tickets with medium severity that are not assigned to a sprint and assign them to the current sprint. [/INST]

        ```
        var_1 = works_list(ticket.severity=[""medium""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)

        ```
        </s>
        ","var_1 = works_list(ticket.severity=[""medium""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Extract tasks from project update notes ""N"" and assign to current sprint [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""N"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)

        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""N"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Organize and summarize tickets by medium severity for 'Team Alpha', and output p0-priority  tasks from the issue [/INST]

        ```
        var_1 = search_object_by_name(query=""Team Alpha"")
var_2 = works_list(type=[""ticket""], ticket.severity=[""medium""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = works_list(type=[""task""], issue.priority=[""p0""], owned_by=[var_1])

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Team Alpha"")
var_2 = works_list(type=[""ticket""], ticket.severity=[""medium""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = works_list(type=[""task""], issue.priority=[""p0""], owned_by=[var_1])
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""


def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""

        Query: Summarize my open tasks and issues for quick daily planning [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task"", ""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task"", ""issue""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: List and prioritize all tickets needing a response for 'SUPPORT_TEAM' [/INST]

        ```
        var_1 = search_object_by_name(query=""SUPPORT_TEAM"")
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""SUPPORT_TEAM"")
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Retrieve my tasks of type 'issue' in 'QA' stage, then summarize and add them to the sprint 'SPRINT-4321' [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""QA""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-4321"")

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""QA""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-4321"")
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Collect all issues related to 'Widget-Improvement' and add them to the 'Engineering' sprint. [/INST]

        ```
        var_1 = search_object_by_name(query=""Widget-Improvement"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""Engineering"")

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Widget-Improvement"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""Engineering"")
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Get a summary of tasks for 'User123' that are in the 'QA' stage. [/INST]

        ```
        var_1 = search_object_by_name(query=""User123"")
var_2 = works_list(type=[""task""], owned_by=[var_1], stage.name=[""QA""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""User123"")
var_2 = works_list(type=[""task""], owned_by=[var_1], stage.name=[""QA""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Summarize all my completed tasks from the last month. [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""completed""], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""completed""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""



def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""


def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""
def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Get a summary of all tasks I own that are in the 'development' stage. [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""



def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Generate a list of issues for REV-456 department, summarize them, and then search for the sprint ID to add them [/INST]

        ```
        var_1 = works_list(issue.rev_orgs=[""REV-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)

        ```
        </s>
        ","var_1 = works_list(issue.rev_orgs=[""REV-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""

        Query: What are the symptoms of the common cold? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: List tasks owned by ""DEV-TEAM-1"" that need a response, and prioritize them [/INST]

        ```
        var_1 = search_object_by_name(query=""DEV-TEAM-1"")
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""DEV-TEAM-1"")
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: List all P1 issues that have come in through email, then prioritize and get their IDs [/INST]

        ```
        var_1 = works_list(issue.priority=[""p1""], ticket.source_channel=[""email""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(issue.priority=[""p1""], ticket.source_channel=[""email""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""


def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""



def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""


def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""

        Query: Search for my tickets with 'medium' severity that are not yet resolved and summarize the list. [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: List all tasks for the Rev organization REV-999 and create actionable tasks [/INST]

        ```
        var_1 = works_list(type=[""task""], ticket.rev_org=[""REV-999""])
var_2 = create_actionable_tasks_from_text(text=var_1)

        ```
        </s>
        ","var_1 = works_list(type=[""task""], ticket.rev_org=[""REV-999""])
var_2 = create_actionable_tasks_from_text(text=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""


def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""

        Query: Add all p0 priority issues created by user USER-321 to the current sprint. [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p0""], created_by=[""USER-321""], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p0""], created_by=[""USER-321""], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query:  Summarize all tasks in the DEPLOYMENT stage created by DeployDerek and prioritize them, limiting the number of work items to 31. [/INST]

        ```
        var_1 = works_list(stage.name=[""DEPLOYMENT""], created_by=[""DeployDerek""], type=[""task""], limit=31)
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(stage.name=[""DEPLOYMENT""], created_by=[""DeployDerek""], type=[""task""], limit=31)
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Prioritize and summarize all tasks created by DEVU-789 [/INST]

        ```
        var_1 = works_list(created_by=[""DEVU-789""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = works_list(created_by=[""DEVU-789""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""

        Query: Summarize issues in the 'QA' stage for part 'FEAT-789' [/INST]

        ```
        var_1 = works_list(stage.name=[""QA""], applies_to_part=[""FEAT-789""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(stage.name=[""QA""], applies_to_part=[""FEAT-789""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""

        Query: Find and add similar issues to the sprint for the bug report BUG-999 [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""BUG-999"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)

        ```
        </s>
        ","var_1 = get_similar_work_items(work_id=""BUG-999"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find issues assigned to me with high priority and summarize them. [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""high""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""high""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""

        Query: What if the purpose of life is not to achieve but to experience and learn? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Could the boundaries between the self and the external world be more fluid than we perceive? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""

        Query: Find tickets with medium severity from channel email search for the most relevant one and summarize them [/INST]

        ```
        var_1 = works_list(ticket.severity=[""medium""], ticket.source_channel=[""email""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = works_list(ticket.severity=[""medium""], ticket.source_channel=[""email""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""


def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""


def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""

        Query: Find work items needing response for support team and categorize by severity [/INST]

        ```
        var_1 = works_list(ticket.needs_response=True, ticket.source_channel=[""support""], limit=50)
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.needs_response=True, ticket.source_channel=[""support""], limit=50)
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""

        Query: Get the ID for the user ""DevLead"" and list all blocker issues owned by them [/INST]

        ```
        var_1 = search_object_by_name(query=""DevLead"")
var_2 = works_list(owned_by=[var_1], issue.priority=[""blocker""], type=[""issue""])

        ```
        </s>
        ","var_1 = search_object_by_name(query=""DevLead"")
var_2 = works_list(owned_by=[var_1], issue.priority=[""blocker""], type=[""issue""])
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find and prioritize all issues within the 'QA' Rev organization and add them to the current sprint. [/INST]

        ```
        var_1 = works_list(issue.rev_orgs=[""QA""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        ","var_1 = works_list(issue.rev_orgs=[""QA""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find tickets needing response for product PROD-ABC and prioritize them [/INST]

        ```
        var_1 = search_object_by_name(query=""PROD-ABC"")
var_2 = works_list(type=[""ticket""], applies_to_part=[var_1], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""PROD-ABC"")
var_2 = works_list(type=[""ticket""], applies_to_part=[var_1], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""

        Query: Locate my P2 tickets and arrange them by severity [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], issue.priority=[""p2""], owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], issue.priority=[""p2""], owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""

        Query: Find issues with priority p2 and summarize them [/INST]

        ```
        var_1 = works_list(issue.priority=[""p2""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(issue.priority=[""p2""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Identify work items of type 'task' owned by me and summarize them [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""

        Query: Retrieve and prioritize my tasks that require a response [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find work items for part CAPL-123, filter by Rev organization REV-456, and summarize the results. [/INST]

        ```
        var_1 = works_list(applies_to_part=[""CAPL-123""], issue.rev_orgs=[""REV-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(applies_to_part=[""CAPL-123""], issue.rev_orgs=[""REV-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""


def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Retrieve my own work items that are tasks and add them to sprint ID SPRINT-123 [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-123"")

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-123"")
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""

        Query: Create tasks for meeting notes and summarize the tasks [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""meeting notes"")
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""meeting notes"")
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""

        Query: Retrieve my tasks related to EPIC-456, find similar tasks, and get a summary [/INST]

        ```
        var_1 = who_am_i()
var_2 = search_object_by_name(query=""EPIC-456"")
var_3 = works_list(type=[""task""], owned_by=[var_1], applies_to_part=[var_2])
var_4 = get_similar_work_items(work_id=var_3)
var_5 = summarize_objects(objects=var_4)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = search_object_by_name(query=""EPIC-456"")
var_3 = works_list(type=[""task""], owned_by=[var_1], applies_to_part=[var_2])
var_4 = get_similar_work_items(work_id=var_3)
var_5 = summarize_objects(objects=var_4)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Extract tasks from the troubleshooting guide T and assign them to the engineering team. [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""T"")
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""engineering_team"")

        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""T"")
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""engineering_team"")
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""



def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""

        Query: Generate a report of P1 tickets owned by user USER-567 and summarize the findings [/INST]

        ```
        var_1 = search_object_by_name(query=""USER-567"")
var_2 = works_list(type=[""ticket""], issue.priority=[""p1""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""USER-567"")
var_2 = works_list(type=[""ticket""], issue.priority=[""p1""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""


def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""

        Query: Prioritize and summarize issues with p2 priority from the CustomerY [/INST]

        ```
        var_1 = search_object_by_name(query=""CustomerY"")
var_2 = works_list(issue.priority=[""p2""], ticket.rev_org=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""CustomerY"")
var_2 = works_list(issue.priority=[""p2""], ticket.rev_org=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""


def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""

        Query: Get the current user's tickets, filter for those in the 'pending' stage, add them to the sprint, and summarize [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""pending""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""pending""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""

        Query: Find tickets needing response for ""TeamAlpha"" and prioritize them [/INST]

        ```
        var_1 = search_object_by_name(query=""TeamAlpha"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""TeamAlpha"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""


def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""

        Query: Find tickets needing response from the ""QA"" department and sort by priority [/INST]

        ```
        var_1 = search_object_by_name(query=""QA"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""QA"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Generate a list of my tasks related to the 'UX' project and add them to the current sprint. [/INST]

        ```
        var_1 = who_am_i()
var_2 = search_object_by_name(query=""UX"")
var_3 = get_sprint_id()
var_4 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_5 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_3)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = search_object_by_name(query=""UX"")
var_3 = get_sprint_id()
var_4 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_5 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""

        Query: Summarize all issues created by ""UserX"" in the ""Development"" stage and add them to my dashboard. [/INST]

        ```
        var_1 = search_object_by_name(query=""UserX"")
var_2 = works_list(created_by=[var_1], stage.name=[""Development""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""UserX"")
var_2 = works_list(created_by=[var_1], stage.name=[""Development""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Retrieve and summarize work items for project PROJ-456 in the 'testing' stage [/INST]

        ```
        var_1 = search_object_by_name(query=""PROJ-456"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""testing""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""PROJ-456"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""testing""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: List latest tickets by 'user123', prioritize by severity, and summarize for the weekly review [/INST]

        ```
        var_1 = search_object_by_name(query=""user123"")
var_2 = works_list(type=[""ticket""], created_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""user123"")
var_2 = works_list(type=[""ticket""], created_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: For part PROD-456, summarize issues, create tasks and add to sprint [/INST]

        ```
        var_1 = works_list(applies_to_part=[""PROD-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = works_list(applies_to_part=[""PROD-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Retrieve and prioritize my support tickets from 'MobileApp' channels [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], owned_by=[var_1], ticket.source_channel=[""MobileApp""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], owned_by=[var_1], ticket.source_channel=[""MobileApp""])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""

def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Retrieve the current sprint ID and list all P2 issues [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p2""], type=[""issue""])

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p2""], type=[""issue""])
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""

        Query: List my P2 issues, summarize them, and add those with 'needs_response' to the current sprint [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p2""], owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = works_list(issue.priority=[""p2""], owned_by=[var_1], ticket.needs_response=True, type=[""issue""])
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p2""], owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = works_list(issue.priority=[""p2""], owned_by=[var_1], ticket.needs_response=True, type=[""issue""])
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""

        Query: Extract and prioritize action items from the latest project update email. [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""latest project update email"")
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""latest project update email"")
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Summarize my tasks related to ""ENH-789"" and created by user ""USER-555"". [/INST]

        ```
        var_1 = who_am_i()
var_2 = search_object_by_name(query=""ENH-789"")
var_3 = search_object_by_name(query=""USER-555"")
var_4 = works_list(applies_to_part=[var_2], created_by=[var_3], owned_by=[var_1], type=[""task""])
var_5 = summarize_objects(objects=var_4)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = search_object_by_name(query=""ENH-789"")
var_3 = search_object_by_name(query=""USER-555"")
var_4 = works_list(applies_to_part=[var_2], created_by=[var_3], owned_by=[var_1], type=[""task""])
var_5 = summarize_objects(objects=var_4)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""


def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""

        Query: Prioritize and add all my tasks from 'development' stage to my sprint. [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

        Query: Identify and prioritize urgent tasks from the engineering channel [/INST]

        ```
        var_1 = works_list(ticket.source_channel=[""engineering""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.source_channel=[""engineering""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""

def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""

        Query: List all issues related to the ""Networking"" project and filter them by priority P2 [/INST]

        ```
        var_1 = search_object_by_name(query=""Networking"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p2""], type=[""issue""])

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Networking"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p2""], type=[""issue""])
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find work items related to part CAPL-123 and determine if they need a response. [/INST]

        ```
        var_1 = works_list(applies_to_part=[""CAPL-123""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(applies_to_part=[""CAPL-123""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""



def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""


def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
    object_ids (list): A list of object IDs

Returns:
    str: The ID of the generated report
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""

        Query: Extract tasks from the meeting notes M and prioritize them for the current sprint. [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

        Query: Find work items referencing part PROD-101, prioritize them and then summarize those with a 'high' priority level. [/INST]

        ```
        var_1 = works_list(applies_to_part=[""PROD-101""], type=[""issue"", ""ticket"", ""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = works_list(applies_to_part=[""PROD-101""], issue.priority=[""high""], type=[""issue""])
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = works_list(applies_to_part=[""PROD-101""], type=[""issue"", ""ticket"", ""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = works_list(applies_to_part=[""PROD-101""], issue.priority=[""high""], type=[""issue""])
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""

        Query: Automate the creation of tasks from meeting notes N [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""meeting notes N"")

        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""meeting notes N"")
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Search for the user ID of 'LeadDev', list their tasks, and filter for tasks in the 'review' stage [/INST]

        ```
        var_1 = search_object_by_name(query=""LeadDev"")
var_2 = works_list(owned_by=[var_1], stage.name=[""review""], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""LeadDev"")
var_2 = works_list(owned_by=[var_1], stage.name=[""review""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""


def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""

        Query: Find work items related to component ""UI-Toolkit"" and determine if any require immediate attention. [/INST]

        ```
        var_1 = search_object_by_name(query=""UI-Toolkit"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""UI-Toolkit"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Create tasks from the insights of a project update and add them to the sprint for user USER-123. [/INST]

        ```
        var_1 = search_object_by_name(query=""USER-123"")
var_2 = create_actionable_tasks_from_text(text=""project update"")
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""USER-123"")
var_2 = create_actionable_tasks_from_text(text=""project update"")
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""

        Query: Priortize and summarize the current sprint's tasks [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""


def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""

        Query: Find work items for part CAPL-123 with priority P1 and created by user DEVU-456 [/INST]

        ```
        var_1 = search_object_by_name(query=""DEVU-456"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[""CAPL-123""], issue.priority=[""p1""], created_by=[var_1])

        ```
        </s>
        ","var_1 = search_object_by_name(query=""DEVU-456"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[""CAPL-123""], issue.priority=[""p1""], created_by=[var_1])
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""

        Query: Retrieve the current sprint ID and list all the high priority tickets, then prioritize and summarize them [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""high""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""high""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""

        Query: Get a report on the current sprint's tickets with severity 'medium' and summarize the report [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(ticket.severity=[""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(ticket.severity=[""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""


def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

        Query: Can you provide the current political news from the United States? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Allowed Tools: 

        def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""

        Query: Summarize all tasks related to project PROJ-789 [/INST]

        ```
        var_1 = search_object_by_name(query=""PROJ-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""PROJ-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""


def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find work items for REV-456 and summarize them [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""

        Query: Retrieve the ID for customer 'InnovateX' and list all related 'low' severity tickets. [/INST]

        ```
        var_1 = search_object_by_name(query=""InnovateX"")
var_2 = works_list(ticket.severity=[""low""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""InnovateX"")
var_2 = works_list(ticket.severity=[""low""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""

        Query: Aggregate all severe tickets that need a response and are related to the Rev organization ""REV-TECH"" [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-TECH"")
var_2 = works_list(ticket.severity=[""blocker"", ""high""], ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""REV-TECH"")
var_2 = works_list(ticket.severity=[""blocker"", ""high""], ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""


def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""


def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Retrieve the current sprint's ID and summarize the tasks within it [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""


def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""
def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""

        Query: Summarize my tickets which need response from the client-side project [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
    object_ids (list): A list of object IDs

Returns:
    str: The ID of the generated report
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Locate my P2 issues, summarize for report generation [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""


def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find high severity tickets for the component ""UIX-Module"" and determine if any need immediate response [/INST]

        ```
        var_1 = search_object_by_name(query=""UIX-Module"")
var_2 = works_list(ticket.severity=[""high""], applies_to_part=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""UIX-Module"")
var_2 = works_list(ticket.severity=[""high""], applies_to_part=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""

        Query: Retrieve the ID for the current sprint, then find and summarize all tasks owned by user ""USER-999"" [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""USER-999"")
var_3 = works_list(owned_by=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""USER-999"")
var_3 = works_list(owned_by=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""


def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""


def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: For customer 'EnterpriseNow', retrieve all tickets, prioritize by impact, and summarize for review [/INST]

        ```
        var_1 = search_object_by_name(query=""EnterpriseNow"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""EnterpriseNow"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""


def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Identify work items created by user ""USR-321"" and add them to sprint with ID ""SPRINT-101"" [/INST]

        ```
        var_1 = search_object_by_name(query=""USR-321"")
var_2 = works_list(created_by=[var_1])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-101"")

        ```
        </s>
        ","var_1 = search_object_by_name(query=""USR-321"")
var_2 = works_list(created_by=[var_1])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-101"")
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""


def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""


def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

        Query: Identify high severity issues owned by me and list them. [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""high""], type=[""issue""])

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""high""], type=[""issue""])
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""

        Query: Identify and prioritize any unresolved critical issues for subsystem XYZ-321 [/INST]

        ```
        var_1 = search_object_by_name(query=""XYZ-321"")
var_2 = works_list(type=[""issue""], applies_to_part=[var_1], issue.priority=[""p0""], issue.rev_orgs=[var_1])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""XYZ-321"")
var_2 = works_list(type=[""issue""], applies_to_part=[var_1], issue.priority=[""p0""], issue.rev_orgs=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Summarize new issues created by user USER-321 [/INST]

        ```
        var_1 = works_list(created_by=[""USER-321""], issue.priority=[""p0"", ""p1"", ""p2"", ""p3""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(created_by=[""USER-321""], issue.priority=[""p0"", ""p1"", ""p2"", ""p3""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""

        Query: Find tasks for the part CAPL-987, prioritize them, and get the current sprint ID [/INST]

        ```
        var_1 = works_list(type=[""task""], applies_to_part=[""CAPL-987""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()

        ```
        </s>
        ","var_1 = works_list(type=[""task""], applies_to_part=[""CAPL-987""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""

        Query: Get the current sprint ID and list all tickets I need to respond to, then sort them by severity. [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""


def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""


def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Could consciousness exist outside the boundaries of time and space? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Allowed Tools: 

        

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find and summarize all tasks assigned to me that need a response [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

        Query: Prioritize and summarize all new tickets related to security concerns [/INST]

        ```
        var_1 = works_list(stage.name=[""new""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = works_list(stage.name=[""new""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""


def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""

        Query: Find the most recent issues related to ""CAPL-456"" that need a response, and prioritize them. [/INST]

        ```
        var_1 = search_object_by_name(query=""CAPL-456"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""issue""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""CAPL-456"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

        Query: Find tickets from the 'support' channel for REV-789 organization and prioritize them [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-789"")
var_2 = works_list(type=[""ticket""], ticket.source_channel=[""support""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""REV-789"")
var_2 = works_list(type=[""ticket""], ticket.source_channel=[""support""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Retrieve work items of type 'ticket' from source channel 'email', summarize and add them to the current sprint if they are P3 priority [/INST]

        ```
        var_1 = works_list(ticket.source_channel=[""email""], issue.priority=[""p3""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)

        ```
        </s>
        ","var_1 = works_list(ticket.source_channel=[""email""], issue.priority=[""p3""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

        def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""

        Query: Search for current sprint ID, then add all my P1 tickets to it [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p1""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p1""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""

        Query: Is reality a shared consensus, and do our collective beliefs shape the world around us? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Add all my tasks of priority p2 to the current sprint [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find all my p2 tickets and add them to the sprint named ""SPRINT-QUICKFIX"" [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""ticket""])
var_3 = search_object_by_name(query=""SPRINT-QUICKFIX"")
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""ticket""])
var_3 = search_object_by_name(query=""SPRINT-QUICKFIX"")
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find issues related to 'bug fix' and create actionable tasks [/INST]

        ```
        var_1 = search_object_by_name(query=""bug fix"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = create_actionable_tasks_from_text(text=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""bug fix"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = create_actionable_tasks_from_text(text=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Retrieve issues created by user ID ""USR-789"", summarize them, and then search for a sprint that matches ""Sprint 5"" [/INST]

        ```
        var_1 = works_list(created_by=[""USR-789""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = search_object_by_name(query=""Sprint 5"")

        ```
        </s>
        ","var_1 = works_list(created_by=[""USR-789""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = search_object_by_name(query=""Sprint 5"")
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Retrieve and prioritize all tickets needing a response from the PHONE source channel and limit the number of work items to 42. [/INST]

        ```
        var_1 = works_list(ticket.needs_response=True, ticket.source_channel=[""PHONE""], type=[""ticket""], limit=42)
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.needs_response=True, ticket.source_channel=[""PHONE""], type=[""ticket""], limit=42)
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""


def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""


def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""

        Query: For the customer named 'AcmeCorp', list all the pending tickets and then rank them based on severity [/INST]

        ```
        var_1 = search_object_by_name(query=""AcmeCorp"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""AcmeCorp"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find tasks associated with product PROD-456 and categorize them by priority [/INST]

        ```
        var_1 = search_object_by_name(query=""PROD-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""PROD-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""

        Query: Summarize all issues reported by user USR-456 that are in the ""QA"" stage. [/INST]

        ```
        var_1 = search_object_by_name(query=""USR-456"")
var_2 = works_list(created_by=[var_1], stage.name=[""QA""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""USR-456"")
var_2 = works_list(created_by=[var_1], stage.name=[""QA""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query:  Retrieve similar work items to ISSUE-321, prioritize them, and limit the number of work items to 50. [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""ISSUE-321"")
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = get_similar_work_items(work_id=""ISSUE-321"")
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""

        Query: Prioritize the tasks created by user123 and add them to my to-do list [/INST]

        ```
        var_1 = works_list(created_by=[""user123""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""my to-do list"")

        ```
        </s>
        ","var_1 = works_list(created_by=[""user123""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""my to-do list"")
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query:  Retrieve work items of type task related to part UI-FRAMEWORK, prioritize them, and limit the results to 20. [/INST]

        ```
        var_1 = works_list(applies_to_part=[""UI-FRAMEWORK""], type=[""task""], limit=20)
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(applies_to_part=[""UI-FRAMEWORK""], type=[""task""], limit=20)
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Create a prioritized list of enhancements for the 'Billing' feature to tackle current sprint. [/INST]

        ```
        var_1 = search_object_by_name(query=""Billing"")
var_2 = get_sprint_id()
var_3 = works_list(applies_to_part=[var_1], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
var_5 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Billing"")
var_2 = get_sprint_id()
var_3 = works_list(applies_to_part=[var_1], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
var_5 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""


def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""

        Query: Add urgent enhancement tickets from the REV-456 organization to my sprint [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(issue.rev_orgs=[""REV-456""], ticket.severity=[""urgent""], type=[""ticket""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(issue.rev_orgs=[""REV-456""], ticket.severity=[""urgent""], type=[""ticket""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: For the issue with ID ""ISSUE-789"", find similar work items and list them by priority [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""ISSUE-789"")
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = get_similar_work_items(work_id=""ISSUE-789"")
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""


def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""

        Query: Get current user's work items with priority p2 and provide a summary [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], issue.priority=[""p2""], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], issue.priority=[""p2""], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""

        Query: Find tasks related to the component ""AuthModule"", summarize the workload, and identify tasks that need immediate attention. [/INST]

        ```
        var_1 = search_object_by_name(query=""AuthModule"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""AuthModule"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

        Query: Prioritize the list of tasks for the ""BetaFeature"" and add high priority tasks to the sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""BetaFeature"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""BetaFeature"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Identify tickets raised via email for product ""PRODUCT-456"", summarize and assign to current sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""PRODUCT-456"")
var_2 = works_list(applies_to_part=[var_1], ticket.source_channel=[""email""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""PRODUCT-456"")
var_2 = works_list(applies_to_part=[var_1], ticket.source_channel=[""email""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""

        Query: For part ID PART-001, get all tasks in the design phase, prioritize and assign for the upcoming sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""PART-001"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""design""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""PART-001"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""design""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""


def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""

        Query: Create a list of all tickets with medium severity and summarize the results. [/INST]

        ```
        var_1 = works_list(ticket.severity=[""medium""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.severity=[""medium""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""


def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""

        Query: Could there be a higher purpose to existence that transcends individual aspirations and desires? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Allowed Tools: 

        

def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""

        Query:  Find and summarize tickets with severity medium that need a response, limiting the results to 50. [/INST]

        ```
        var_1 = works_list(ticket.severity=[""medium""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.severity=[""medium""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find the current sprint, list all tasks within it, and summarize those tasks for me [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""


def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""

        Query: How do I train for a marathon? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Get all tickets from the current sprint with priority p3 and create a detailed summary [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p3""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p3""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find the current user's P1 issues and summarize them [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Filter my issues by priority P2 and summarize [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""

        Query: Generate a list of tickets from ""REV-456"" organization, summarize the tickets with medium severity, and create tasks for them. [/INST]

        ```
        var_1 = works_list(ticket.rev_org=[""REV-456""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)

        ```
        </s>
        ","var_1 = works_list(ticket.rev_org=[""REV-456""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""

        Query: Summarize my tasks that need a response and are in the ""QA"" stage [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""QA""], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""QA""], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""

        Query: Return a list of my open tickets that need a response and are associated with ""TechCorp"" [/INST]

        ```
        var_1 = who_am_i()
var_2 = search_object_by_name(query=""TechCorp"")
var_3 = works_list(owned_by=[var_1], ticket.needs_response=True, ticket.rev_org=[var_2], type=[""ticket""])

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = search_object_by_name(query=""TechCorp"")
var_3 = works_list(owned_by=[var_1], ticket.needs_response=True, ticket.rev_org=[var_2], type=[""ticket""])
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Fetch my current sprint ID and list all tasks that need responses [/INST]

        ```
        var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(ticket.needs_response=True, type=[""task""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(ticket.needs_response=True, type=[""task""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Prioritize all tasks related to Rev organization ORG-999 and list them [/INST]

        ```
        var_1 = works_list(issue.rev_orgs=[""ORG-999""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(issue.rev_orgs=[""ORG-999""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find tickets needing a response and then prioritize them for the REV-456 organization [/INST]

        ```
        var_1 = works_list(ticket.needs_response=True, ticket.rev_org=[""REV-456""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.needs_response=True, ticket.rev_org=[""REV-456""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

        Query: Could there be dimensions of existence beyond our current comprehension? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Provide a summarized list of my work items that need a response [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""

        Query: What are the unresolved issues created by user USER-456 in the system? [/INST]

        ```
        var_1 = works_list(created_by=[""USER-456""], type=[""issue""])

        ```
        </s>
        ","var_1 = works_list(created_by=[""USER-456""], type=[""issue""])
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""


def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""


def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""

        Query: Retrieve and summarize tickets that require a response from support channel ""Email"" [/INST]

        ```
        var_1 = works_list(ticket.needs_response=True, ticket.source_channel=[""Email""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.needs_response=True, ticket.source_channel=[""Email""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Extract actionable tasks from team meeting notes MN and prioritize for execution [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""MN"")
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""MN"")
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""

        Query: Retrieve my work items associated with part PART-987 and needing response, then summarize them [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], applies_to_part=[""PART-987""], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], applies_to_part=[""PART-987""], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""


def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""

        Query: List and prioritize tasks related to Rev organization REV-456. [/INST]

        ```
        var_1 = works_list(issue.rev_orgs=[""REV-456""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(issue.rev_orgs=[""REV-456""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

        Query: Summarize the current sprint's tasks for 'Project-X' and determine if any require immediate attention [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""Project-X"")
var_3 = works_list(sprint_id=var_1, applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""Project-X"")
var_3 = works_list(sprint_id=var_1, applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""


def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""

        Query: Assign new issues from DevUser1 to the latest sprint and prioritize them [/INST]

        ```
        var_1 = search_object_by_name(query=""DevUser1"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""DevUser1"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Summarize the work items created by user Alpha123 within the CAPL-123 part [/INST]

        ```
        var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(created_by=[""Alpha123""], applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(created_by=[""Alpha123""], applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

        Query: Find and summarize tasks with p1 priority from part ""ABC-123"", [/INST]

        ```
        var_1 = search_object_by_name(query=""ABC-123"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1], issue.priority=[""p1""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""ABC-123"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1], issue.priority=[""p1""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""


def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""

        Query: Find and summarize work items related to component COMP-456, then prioritize and add them to my sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""COMP-456"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""COMP-456"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""


def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""

        Query: Could love be a force that transcends the physical and connects us on a deeper, spiritual level? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Retrieve current user's items of type ""issue"", filter by ""Development"" Rev organization, summarize and order by urgency [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.rev_orgs=[""Development""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.rev_orgs=[""Development""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""

        Query:  Retrieve all blocker severity tickets owned by TechLeadTom, add them to the current sprint, and summarize them, limiting the number of work items to 28. [/INST]

        ```
        var_1 = works_list(owned_by=[""TechLeadTom""], ticket.severity=[""blocker""], type=[""ticket""], limit=28)
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
var_4 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(owned_by=[""TechLeadTom""], ticket.severity=[""blocker""], type=[""ticket""], limit=28)
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
var_4 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: For customer BetaCorp, list all low priority tickets, summarize, and assign to user USER-ABC [/INST]

        ```
        var_1 = search_object_by_name(query=""BetaCorp"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""low""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = search_object_by_name(query=""USER-ABC"")
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""BetaCorp"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""low""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = search_object_by_name(query=""USER-ABC"")
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: List all issues raised by REV-999 in the last month and sort them by priority [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-999"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""REV-999"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

                 
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Retrieve the current sprint ID and add issues from organization ORG-321 [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(issue.rev_orgs=[""ORG-321""], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(issue.rev_orgs=[""ORG-321""], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""


def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

        Query: Prioritize tickets that need a response from Rev organization REV-456 [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Find work items for the REV-TEAM org, summarize them, and then prioritize then [/INST]

        ```
        var_1 = works_list(issue.rev_orgs=[""REV-TEAM""], type=[""issue"", ""ticket"", ""task""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(issue.rev_orgs=[""REV-TEAM""], type=[""issue"", ""ticket"", ""task""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Allowed Tools: 

        

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


        Query: Generate a list of tasks based on the insights from text 'Meeting notes Q1', and add them to my sprint [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""Meeting notes Q1"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)

        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""Meeting notes Q1"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
