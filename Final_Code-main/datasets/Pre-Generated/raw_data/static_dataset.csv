Query,Output
"Summarize all tickets that need a response and are associated with the ""MainframeMigration"" part.","var_1 = search_object_by_name(query=""MainframeMigration"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Identify my work items in 'development' stage, fetch similar items, and summarize them","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""issue""])
var_3 = get_similar_work_items(work_id=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Search for the latest sprint, get my tasks, and prepare a status report","var_1 = get_sprint_id()
var_2 = who_am_i()
var_3 = works_list(owned_by=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
Organize my tasks according to their deadline and list them for today's planning meeting,"#Unanswerable_Invalid_Query_Error
"
Find and summarize all tasks related to part ENGINE-4 with a limit of 30 work items.,"var_1 = works_list(applies_to_part=[""ENGINE-4""], limit=30, type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Summarize my tasks related to CAPL-123 that need a response,"var_1 = who_am_i()
var_2 = works_list(applies_to_part=[""CAPL-123""], owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve the ID of the current user, list their tasks of type 'issue', then add any P2 priority issues to the current sprint.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"List tasks in ""QA"" stage and add them to the sprint ""SPRINT-789""","var_1 = works_list(stage.name=[""QA""], type=[""task""])
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-789"")
"
"Identify similar work items to ""ISSUE-999"" and prepare a summary","var_1 = get_similar_work_items(work_id=""ISSUE-999"")
var_2 = summarize_objects(objects=var_1)
"
Find and list all tasks related to the marketing campaign with high urgency.,"var_1 = works_list(issue.priority=[""high""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Find tasks related to project 'Alpha' and assign them to the current sprint.,"var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Find all issues related to the ""DataSync"" project and generate action items for resolution","var_1 = search_object_by_name(query=""DataSync"")
var_2 = works_list(type=[""issue""], applies_to_part=[var_1])
var_3 = create_actionable_tasks_from_text(text=var_2)
"
Generate a list of tasks from the meeting notes E and assign them to the Engineering team with sprint id E-01,"var_1 = create_actionable_tasks_from_text(text=""E"")
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""E-01"")
"
"Find work items related to feature ""FEAT-999"" where I am the owner and summarize them.","var_1 = who_am_i()
var_2 = works_list(applies_to_part=[""FEAT-999""], owned_by=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
How do I change a flat tire on my bicycle?,#Unanswerable_Invalid_Query_Error
What if every decision we make creates a parallel universe with a different outcome?,#Unanswerable_Invalid_Query_Error
"Find tasks associated with the project ""ProjectX"" and summarize them and prioritiize them","var_1 = search_object_by_name(query=""ProjectX"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"Find and summarize tasks related to project Alpha under stage 'development'
","var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""development""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Get similar work items for issue PROJ-101, summarize and prioritize them, then add them to the ongoing sprint","var_1 = get_similar_work_items(work_id=""PROJ-101"")
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Fetch my tickets, summarize and arrange them by urgency.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve and prioritize my works of type 'issue' that are pending in 'QA' stage,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""QA""], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
"Create tasks from insights extracted from the text ""Update server configurations"" and prioritize them","var_1 = create_actionable_tasks_from_text(text=""Update server configurations"")
var_2 = prioritize_objects(objects=var_1)
"
Filter issues requiring a response for Rev organization REV-456 and organize by stage,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(issue.rev_orgs=[var_1], ticket.needs_response=True, type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
Summarize my tasks and add the p0-priority ones to the current sprint,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Find tasks related to project Alpha and sort them by priority,"var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Extract actionable tasks from meeting notes ""M"" and assign them to developer DEV-ID-456","var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""DEV-ID-456"")
"
Find all issues related to part ENH-456 and list them by priority,"var_1 = works_list(applies_to_part=[""ENH-456""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
"
Find and summarize tickets with 'low' severity that are unresolved,"var_1 = works_list(ticket.severity=[""low""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Find tickets related to the 'frontend' part with 'low' severity and order them by priority,"var_1 = search_object_by_name(query=""frontend"")
var_2 = works_list(applies_to_part=[var_1], ticket.severity=[""low""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
"Find all tasks related to the ""Backend"" part and sort them by priority","var_1 = search_object_by_name(query=""Backend"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Retrieve and add any P2 tasks I own to the current sprint,"var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p2""], owned_by=[var_1], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Extract actionable tasks from a document titled ""Project Roadmap"" and prioritize the resulting tasks.","var_1 = create_actionable_tasks_from_text(text=""Project Roadmap"")
var_2 = prioritize_objects(objects=var_1)
"
Add P2 issues from REV organization to sprint,"var_1 = search_object_by_name(query=""REV organization"")
var_2 = get_sprint_id()
var_3 = works_list(issue.priority=[""p2""], issue.rev_orgs=[var_1], type=[""issue""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)
"
Summarize and prioritize tasks for the 'frontend' team under the 'design' stage,"var_1 = works_list(owned_by=[""frontend""], stage.name=[""design""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Find and summarize tasks related to the 'Backend' part that need a response,"var_1 = search_object_by_name(query=""Backend"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
Prioritize and summarize tasks owned by ProjectManager in the PLANNING stage and limit the number of work items to 28.,"var_1 = works_list(owned_by=[""ProjectManager""], stage.name=[""PLANNING""], type=[""task""], limit=28)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Search for work items by user USER-XYZ, filter by tasks, and return a prioritized list","var_1 = search_object_by_name(query=""USER-XYZ"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Get the current sprint ID, look up work items by type 'ticket' for user DEVU-456, and add them to the sprint.","var_1 = get_sprint_id()
var_2 = works_list(created_by=[""DEVU-456""], type=[""ticket""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"Prioritize the list of issues under ""Backend"" part and then summarize them","var_1 = works_list(applies_to_part=[""Backend""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Find my issues related to Rev organization REV-321 and summarize them,"var_1 = who_am_i()
var_2 = works_list(issue.rev_orgs=[""REV-321""], owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Find tasks related to ""ZetaProject"", prioritize, and summarize for reporting","var_1 = search_object_by_name(query=""ZetaProject"")
var_2 = works_list(type=[""task""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Determine my current sprint and list all tickets that need a response, then add p0 priority issues to the sprint","var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(ticket.needs_response=True, type=[""ticket""])
var_4 = works_list(issue.priority=[""p0""], type=[""issue""])
var_5 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_2)
"
"Find work items created by user ID 'USER-789', summarize, and add to sprint with ID SPRINT-321","var_1 = works_list(created_by=[""USER-789""], type=[""issue"", ""ticket"", ""task""])
var_2 = summarize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-321"")
"
Summarize tickets from 'phone' channel for Rev organization REV-789,"var_1 = works_list(ticket.rev_org=[""REV-789""], ticket.source_channel=[""phone""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"List all p2 tickets, get similar work items, and prioritize them.","var_1 = works_list(issue.priority=[""p2""], type=[""ticket""])
var_2 = get_similar_work_items(work_id=var_1)
var_3 = prioritize_objects(objects=var_2)
"
List work items created by user 'USER-XYZ' and sort them by priority,"var_1 = search_object_by_name(query=""USER-XYZ"")
var_2 = works_list(created_by=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
"
Get the current sprint ID and add work items from the CAPL-456 part to it,"var_1 = search_object_by_name(query=""CAPL-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Summarize my completed issues and extract actionable items.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""completed""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = create_actionable_tasks_from_text(text=var_3)
"
"Find and list tasks related to billing issues, then prioritize this list","var_1 = works_list(type=[""task""], type=[""billing""])
var_2 = prioritize_objects(objects=var_1)
"
"Summarize my tickets with ""medium"" severity and response needed","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""medium""], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Find and prioritize P1 tickets related to Rev organization ORG-101,"var_1 = works_list(issue.priority=[""p1""], ticket.rev_org=[""ORG-101""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
Assign new tasks from the text file T to the current sprint,"var_1 = create_actionable_tasks_from_text(text=""T"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Prioritize tickets from channel 'email' for part PROD-789 and get current user's ID,"var_1 = search_object_by_name(query=""PROD-789"")
var_2 = works_list(ticket.source_channel=[""email""], applies_to_part=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = who_am_i()
"
Summarize and prioritize tickets from the social media channel for better customer engagement,"var_1 = works_list(ticket.source_channel=[""social media""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Prioritize and add to the current sprint all tickets that need a response from the customer 'BigEnterprises',"var_1 = search_object_by_name(query=""BigEnterprises"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"For 'FEATURE-321' tagged issues, filter out the high priority ones and get a summary for a quick review.","var_1 = search_object_by_name(query=""FEATURE-321"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""high""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Find work items of type 'task' under REV-321, summarize and add to sprint 555","var_1 = works_list(owned_by=[""REV-321""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""555"")
"
Retrieve work items related to the CAPL-999 part and create tasks from their summary,"var_1 = works_list(applies_to_part=[""CAPL-999""])
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)
"
Summarize my tasks that need a response and are in 'development' stage,"var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1], ticket.needs_response=True, stage.name=[""development""])
var_3 = summarize_objects(objects=var_2)
"
What if time is not a linear progression but a complex web of interconnected moments?,#Unanswerable_Invalid_Query_Error
Find all issues created by DEVU-456 and return a prioritized list,"var_1 = works_list(created_by=[""DEVU-456""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
"
Prioritize and summarize my tasks,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Retrieve and list issues in 'QA' stage for current user,"var_1 = who_am_i()
var_2 = works_list(stage.name=[""QA""], owned_by=[var_1], type=[""issue""])
"
Provide a prioritized list of all tasks that need a response and are created by user USER-321,"var_1 = works_list(created_by=[""USER-321""], ticket.needs_response=True, type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
Retrieve and prioritize issues from Rev organization REV-456 with priority p2 and then add them to sprint SPRINT-789,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(issue.priority=[""p2""], issue.rev_orgs=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-789"")
"
Determine my tasks in the 'development' stage and organize them by urgency,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Generate a summary of issues tagged with 'Urgent-Fix' and assign them to the 'Hotfix' sprint.,"var_1 = search_object_by_name(query=""Urgent-Fix"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""Hotfix"")
"
"Summarize all tickets from the SALES source channel and prioritize them, limiting the number of work items to 30.","var_1 = works_list(ticket.source_channel=[""SALES""], type=[""ticket""], limit=30)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Add P0 and P1 priority issues from REV-TEAM-99 to the current sprint,"var_1 = search_object_by_name(query=""REV-TEAM-99"")
var_2 = works_list(issue.rev_orgs=[var_1], issue.priority=[""p0"", ""p1""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Find all tasks related to feature FEAT-XYZ, summarize their current status","var_1 = works_list(type=[""task""], applies_to_part=[""FEAT-XYZ""])
var_2 = summarize_objects(objects=var_1)
"
Add all P2 issues from customer BigCorp to the sprint and list them,"var_1 = search_object_by_name(query=""BigCorp"")
var_2 = works_list(issue.rev_orgs=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Is there a purpose to suffering, or is it an inherent aspect of the human experience?",#Unanswerable_Invalid_Query_Error
Summarize work items for parts FEAT-999 and ENH-999 created by user DEVU-999,"var_1 = works_list(applies_to_part=[""FEAT-999"", ""ENH-999""], created_by=[""DEVU-999""])
var_2 = summarize_objects(objects=var_1)
"
"Find and summarize tasks related to project ALPHA, then add urgent tasks to the sprint.","var_1 = search_object_by_name(query=""ALPHA"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
"
Fetch and prioritize tasks for user USER-789 in 'development' stage,"var_1 = works_list(owned_by=[""USER-789""], stage.name=[""development""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
"What if the purpose of life is not to find meaning but to create it, shaping our own existential narrative?",#Unanswerable_Invalid_Query_Error
Create actionable tasks from the team meeting notes M and prioritize them for the current sprint,"var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Retrieve and summarize all open tickets for the current sprint,"var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve the current sprint ID, list all tasks due this week, and add them to the sprint.","var_1 = get_sprint_id()
var_2 = works_list(type=[""task""], stage.name=[""due this week""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
How do I apply for a job at Google?,#Unanswerable_Invalid_Query_Error
"Is reality a fixed construct, or does it adapt and evolve based on our collective consciousness?",#Unanswerable_Invalid_Query_Error
Find work items related to 'FeatureX' and add them to sprint 'Sprint-22',"var_1 = search_object_by_name(query=""FeatureX"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""Sprint-22"")
"
"Generate a list of tickets from the Engineering department, prioritize them by severity, and add themto the upcoming sprint","var_1 = works_list(issue.rev_orgs=[""Engineering""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Identify my tasks that are in 'development' stage, filter for high priority, and add them to sprint SPRINT-101","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], issue.priority=[""high""], type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-101"")
"
Summarize tasks for the 'NextGen' project and prioritize for the sprint,"var_1 = search_object_by_name(query=""NextGen"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
"
What if our thoughts have a tangible impact on the physical world?,#Unanswerable_Invalid_Query_Error
Find all tasks related to project AlphaGo and categorize them by priority,"var_1 = search_object_by_name(query=""AlphaGo"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
"For my tickets marked as 'blocker', create a prioritized list and add it to the current sprint.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""blocker""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Identify tickets that need a response for ""Gamma Initiative"" and create a summary","var_1 = search_object_by_name(query=""Gamma Initiative"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Find work items related to ""ENH-456"", prioritize them, and add to the current sprint.","var_1 = search_object_by_name(query=""ENH-456"")
var_2 = get_similar_work_items(work_id=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
What are the best practices for organic gardening?,#Unanswerable_Invalid_Query_Error
Summarize and prioritize tasks assigned to 'DEVU-789' that are in the 'development' stage.,"var_1 = search_object_by_name(query=""DEVU-789"")
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"Identify work items related to ""Feature-999"", summarize them, and add them to the current sprint","var_1 = search_object_by_name(query=""Feature-999"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
Identify and summarize work items similar to ID ISSUE-999,"var_1 = get_similar_work_items(work_id=""ISSUE-999"")
var_2 = summarize_objects(objects=var_1)
"
Find work items of type 'issue'  and add those to the current sprint which belong to CAPL-789,"var_1 = works_list(applies_to_part=[""CAPL-789""], type=[""issue""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Look through all my issues and add any P1 issues to the current sprint,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Summarize all high severity tickets created by CustomerSuccessTeam and limit the number of work items to 24.,"var_1 = works_list(created_by=[""CustomerSuccessTeam""], ticket.severity=[""high""], type=[""ticket""], limit=24)
var_2 = summarize_objects(objects=var_1)
"
Find and summarize all tasks in 'QA Testing' stage for part 'TEST-987'.,"var_1 = search_object_by_name(query=""TEST-987"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""QA Testing""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find work items for part CAPL-123, filter by Rev organization REV-ORG-456, and summarize the results","var_1 = search_object_by_name(query=""REV-ORG-456"")
var_2 = works_list(applies_to_part=[""CAPL-123""], issue.rev_orgs=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve my work of the type ""issue"" and ""task"", add them to the current sprint, and then get a summary of the sprint contents.","var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], type=[""issue"", ""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = summarize_objects(objects=var_2)
"
Prioritize and summarize my tasks related to the Rev organization REV-678,"var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1], issue.rev_orgs=[""REV-678""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Create a summary of tickets needing response from the support team,"var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Create tasks from meeting notes ""M"" and get the current sprint ID","var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = get_sprint_id()
"
"Retrieve and summarize my tasks, then prioritize them before the current team meeting","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
Identify and summarize all tasks that need a response for the REV-321 project,"var_1 = search_object_by_name(query=""REV-321"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve and summarize issues owned by ProductManagerX and limit the results to 35.,"var_1 = works_list(owned_by=[""ProductManagerX""], type=[""issue""], limit=35)
var_2 = summarize_objects(objects=var_1)
"
Find issues linked to project PROJ-456 with priority P1 and summarize them,"var_1 = search_object_by_name(query=""PROJ-456"")
var_2 = works_list(issue.rev_orgs=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Add my recently created high priority tickets to the current sprint,"var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(created_by=[var_1], issue.priority=[""high""], type=[""ticket""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)
"
Retrieve a list of tickets with 'blocker' severity from REV-456 and summarize them for review,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.severity=[""blocker""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Add all P2 issues created by user User123 to the sprint,"var_1 = works_list(created_by=[""User123""], issue.priority=[""p2""], type=[""issue""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"Add all 'blocker' severity tickets created by user ""DEVU-456"" to the current sprint","var_1 = search_object_by_name(query=""DEVU-456"")
var_2 = works_list(created_by=[var_1], ticket.severity=[""blocker""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Find and summarize all tasks in the 'QA' stage for the 'MobileApp' project,"var_1 = search_object_by_name(query=""MobileApp"")
var_2 = works_list(stage.name=[""QA""], applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve all blocker issues for component 'COMP-321', summarize and categorize by type","var_1 = search_object_by_name(query=""COMP-321"")
var_2 = works_list(type=[""issue""], applies_to_part=[var_1], ticket.severity=[""blocker""])
var_3 = summarize_objects(objects=var_2)
"
"Prioritize tasks related to ""PROJ-1122"" and generate a summary","var_1 = search_object_by_name(query=""PROJ-1122"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Add all P1 enhancement issues created by user DEVU-456 to the sprint,"var_1 = search_object_by_name(query=""DEVU-456"")
var_2 = works_list(created_by=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Extract actionable items from the meeting notes 'MeetingXyz' and assign them,"var_1 = create_actionable_tasks_from_text(text=""MeetingXyz"")
"
"Retrieve all tasks created by ManagerMike and add them to the current sprint, limiting the number of work items to 35.","var_1 = works_list(created_by=[""ManagerMike""], limit=35, type=[""task""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Create tasks from meeting notes and summarize the newly created tasks,"var_1 = create_actionable_tasks_from_text(text=""meeting notes"")
var_2 = summarize_objects(objects=var_1)
"
Prioritize and summarize issues related to 'ProjectY' for the current sprint planning.,"var_1 = search_object_by_name(query=""ProjectY"")
var_2 = works_list(type=[""issue""], applies_to_part=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Find work items related to ""ENH-123"" created by ""DEVU-456"" and summarize them","var_1 = search_object_by_name(query=""DEVU-456"")
var_2 = works_list(created_by=[var_1], applies_to_part=[""ENH-123""], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve the ID of the sprint for this month and list all P2 tickets owned by me in that sprint.,"var_1 = get_sprint_id()
var_2 = who_am_i()
var_3 = works_list(issue.priority=[""p2""], owned_by=[var_2], stage.name=[var_1], type=[""ticket""])
"
Get the current sprint ID,"var_1 = get_sprint_id()
"
"For the given text 'M', create tasks and immediately prioritize them for execution.","var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = prioritize_objects(objects=var_1)
"
" Locate tickets with high severity from the MARKETING rev organization, summarize them, and limit the number of work items to 15.","var_1 = search_object_by_name(query=""MARKETING"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""high""], limit=15, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Search for issues reported by customer CustomerID-6789 and summarize the critical ones.,"var_1 = search_object_by_name(query=""CustomerID-6789"")
var_2 = works_list(created_by=[var_1], ticket.severity=[""blocker""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Summarize my tasks related to the ""Backend-Optimization"" and prioritize them","var_1 = who_am_i()
var_2 = search_object_by_name(query=""Backend-Optimization"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)
"
Create a list of issues for part PROD-456 and sort by priority,"var_1 = works_list(applies_to_part=[""PROD-456""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
"
"Retrieve my P1 tickets, and provide a summary for them ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""p1""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
My girlfriend cheated on me. What should I do?,#Unanswerable_Invalid_Query_Error
"Search for a user by name 'Jane Doe', get all their tasks, prioritize them, and get a summary.","var_1 = search_object_by_name(query=""Jane Doe"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Find and summarize all 'blocker' severity tickets,"var_1 = works_list(type=[""ticket""], ticket.severity=[""blocker""])
var_2 = summarize_objects(objects=var_1)
"
Summarize the current sprint's tasks and add new task from meeting notes T to the current sprint,"var_1 = get_sprint_id()
var_2 = works_list(type=[""task""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = create_actionable_tasks_from_text(text=""T"")
var_5 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_1)
"
Summarize my tasks from the current sprint that are related to project PROJ-456,"var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = search_object_by_name(query=""PROJ-456"")
var_4 = works_list(owned_by=[var_1], applies_to_part=[var_3], type=[""task""])
var_5 = summarize_objects(objects=var_4)
"
" Find issues with priority P2 related to part CLOUD-SERVICES, summarize them, and limit the results to 28.","var_1 = works_list(applies_to_part=[""CLOUD-SERVICES""], issue.priority=[""p2""], type=[""issue""], limit=28)
var_2 = summarize_objects(objects=var_1)
"
Create a list of tasks based on meeting notes and summarize the new tasks,"var_1 = create_actionable_tasks_from_text(text=""meeting notes"")
var_2 = summarize_objects(objects=var_1)
"
"For the Rev organization 'REV-789', list all tasks, prioritize them, and summarize for the report ","var_1 = search_object_by_name(query=""REV-789"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Add all tasks related to the Epic EPIC-789 to the current sprint,"var_1 = search_object_by_name(query=""EPIC-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Locate work items for the 'QA-Testing' stage and assign to John Doe.,"var_1 = search_object_by_name(query=""John Doe"")
var_2 = works_list(stage.name=[""QA-Testing""], type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"Find all work items with type ""issue"" that involve Rev organization ""REV-456"", prioritize and add to sprint ""SPRINT-123""","var_1 = works_list(issue.rev_orgs=[""REV-456""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-123"")
"
"Find and summarize all tickets needing a response from the customer with the ID ""CUSTOMER-456""","var_1 = search_object_by_name(query=""CUSTOMER-456"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Find tasks similar to the one with ID ""BUG-456"" and summarize them for the weekly review","var_1 = get_similar_work_items(work_id=""BUG-456"")
var_2 = summarize_objects(objects=var_1)
"
List my tasks and arrange them by priority,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Summarize my tasks related to the ""Widget"" project and determine if any need my response","var_1 = who_am_i()
var_2 = search_object_by_name(query=""Widget"")
var_3 = works_list(type=[""task""], owned_by=[var_1], applies_to_part=[var_2], ticket.needs_response=True)
var_4 = summarize_objects(objects=var_3)
"
Fetch tickets from the email channel for organization ORG-456 and prioritize them,"var_1 = works_list(ticket.source_channel=[""email""], ticket.rev_org=[""ORG-456""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
Identify tasks for ENH-456 and summarize them,"var_1 = works_list(applies_to_part=[""ENH-456""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Summarize tasks related to the Epic EPIC-456,"var_1 = search_object_by_name(query=""EPIC-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Find and summarize all p2 issues that need a response under REV-456,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(issue.priority=[""p2""], ticket.needs_response=True, issue.rev_orgs=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
" Prioritize and add to the current sprint all tasks related to part DATA-PIPELINE, limiting the results to 25.","var_1 = works_list(applies_to_part=[""DATA-PIPELINE""], type=[""task""], limit=25)
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Add all my tasks related to the 'UX-Redesign' project to the current sprint,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""UX-Redesign"")
var_3 = works_list(applies_to_part=[var_2], owned_by=[var_1], type=[""task""])
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Create a list of tasks based on the discussion points from the last team meeting and add them to my task list.,"var_1 = create_actionable_tasks_from_text(text=""discussion points from the last team meeting"")
var_2 = who_am_i()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"Identify and summarize all tickets without a response that are tagged with ""Blocker""","var_1 = works_list(ticket.needs_response=True, ticket.severity=[""blocker""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Find and summarize all ""ticket"" type work items related to ""ProjectZ"" and add them to the sprint","var_1 = search_object_by_name(query=""ProjectZ"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
"Search for tasks from the ""Customer Feedback"" channel and list them by their creation date","var_1 = works_list(type=[""task""], ticket.source_channel=[""Customer Feedback""])
"
"Find all tasks related to the ""BackendOptimization"" project and then add high-priority ones to the active sprint.","var_1 = search_object_by_name(query=""BackendOptimization"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"For issues raised via email, get their IDs, summarize them, and identify if any are similar to ""ISSUE-999"".","var_1 = works_list(ticket.source_channel=[""email""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_similar_work_items(work_id=""ISSUE-999"")
"
"Summarize the recent work created by user ""DevX"" and identify which items need a response.","var_1 = search_object_by_name(query=""DevX"")
var_2 = works_list(created_by=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Create a summary report of all issues created by user 'Alex' that are in the 'QA Testing' stage,"var_1 = search_object_by_name(query=""Alex"")
var_2 = works_list(created_by=[var_1], stage.name=[""QA Testing""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
List and prioritize all P1 tickets for the Rev organization REV-TEAM-456,"var_1 = search_object_by_name(query=""REV-TEAM-456"")
var_2 = works_list(issue.rev_orgs=[var_1], issue.priority=[""p1""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
"For the customer ""ClientX"", find all open tickets, prioritize by their severity, and assign to the sprint X","var_1 = search_object_by_name(query=""ClientX"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = search_object_by_name(query=""X"")
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
List and summarize all issues marked as p0 in priority that I own,"var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p0""], owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve and summarize my work items with priority 'p2' that are pending in 'QA' stage,"var_1 = who_am_i()
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], owned_by=[var_1], issue.priority=[""p2""], stage.name=[""QA""])
var_3 = summarize_objects(objects=var_2)
"
" Prioritize and summarize tickets that need a response from the CUSTOMER_SERVICE team, limiting the results to 22.","var_1 = search_object_by_name(query=""CUSTOMER_SERVICE"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], limit=22)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Retrieve and sort issues of type 'task' that need a response,"var_1 = works_list(ticket.needs_response=True, type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
Summarize all P1 tickets from the support channel 'email' that are pending review,"var_1 = works_list(ticket.severity=[""p1""], ticket.source_channel=[""email""], stage.name=[""pending review""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
List and summarize my tasks associated with Rev organization REV-456,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""REV-456"")
var_3 = works_list(owned_by=[var_1], ticket.rev_org=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
Summarize the open issues from the Engineering team with priority P2,"var_1 = works_list(issue.priority=[""p2""], stage.name=[""open""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Retrieve work items for part CAPL-123, filter by P1 priority, and summarize the results","var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p1""], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
Prioritize and add new feature requests to the product backlog.,"var_1 = works_list(type=[""new feature request""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
List all high severity tickets coming in from slack from customer Cust123 and generate a summary of them.,"var_1 = search_object_by_name(query=""Cust123"")
var_2 = works_list(ticket.severity=[""high""], ticket.source_channel=[""slack""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Find tasks for the ""Alpha"" project and sort them by priority","var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Prioritize and summarize my open tickets,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Can you translate the phrase ""Hello, how are you?"" into French?",#Unanswerable_Invalid_Query_Error
"What is the plot summary of the novel ""1984"" by George Orwell?",#Unanswerable_Invalid_Query_Error
Find all P1 tasks related to the REV-456 organization and organize them by priority,"var_1 = works_list(issue.rev_orgs=[""REV-456""], issue.priority=[""p1""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
"
Summarize the work items that are at the 'review' stage and created by user USR-123
","var_1 = works_list(stage.name=[""review""], created_by=[""USR-123""])
var_2 = summarize_objects(objects=var_1)
"
Add recent issues created by user USER-456 to the current sprint,"var_1 = works_list(created_by=[""USER-456""], type=[""issue""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"Is there a balance between order and chaos, or is one ultimately dominant?",#Unanswerable_Invalid_Query_Error
"Retrieve all tickets needing a response, summarize by the issue and identify if any are critical","var_1 = works_list(type=[""ticket""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)
"
Create a summary of all p1 tickets owned by user DEVU-456,"var_1 = works_list(owned_by=[""DEVU-456""], ticket.severity=[""p1""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Summarize my tasks which need a response and prioritize them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Retrieve the current sprint ID and assign newly created tasks from the brainstorming session notes,"var_1 = create_actionable_tasks_from_text(text=""brainstorming session notes"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Identify my p1 issues within Rev organization 'REV-789' and summarize for today's meeting,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""REV-789"")
var_3 = works_list(owned_by=[var_1], issue.priority=[""p1""], issue.rev_orgs=[var_2], type=[""issue""])
var_4 = summarize_objects(objects=var_3)
"
List all P2 priority tickets from the product PROD-789 and add them to the current sprint.,"var_1 = search_object_by_name(query=""PROD-789"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p2""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Add my new high severity tickets with part 'part-123' to the current sprint,"var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], ticket.severity=[""high""], applies_to_part=['part-123'], owned_by=[var_1])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Search for part ID ""PartX"" and list all associated tasks","var_1 = search_object_by_name(query=""PartX"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
"
Summarize my tasks that need a response in the 'development' stage.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Could the complexity of the universe be a reflection of the intricacies of the human mind?,#Unanswerable_Invalid_Query_Error
Create a list of P1 issues created by user USR-321 and summarize them,"var_1 = search_object_by_name(query=""USR-321"")
var_2 = works_list(type=[""issue""], issue.priority=[""p1""], created_by=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Prioritize issues reported by 'ClientA' and create tasks for any p0 priority issues mentioned in their feedback.,"var_1 = search_object_by_name(query=""ClientA"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = create_actionable_tasks_from_text(text=var_3)
"
What if the concept of good and evil is a dynamic balance rather than a fixed dichotomy?,#Unanswerable_Invalid_Query_Error
"Prioritize tasks for ""User-321"" and filter by type ""issue""","var_1 = who_am_i()
var_2 = works_list(created_by=[""User-321""], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
"Identify my tasks, filter for tasks at 'review' stage, and return them in order of priority.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""review""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Summarize the work items for 'Client-X' and identify the most critical tasks to address.,"var_1 = search_object_by_name(query=""Client-X"")
var_2 = works_list(created_by=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
Identify the current sprint ID and add issues with priority p2 to it,"var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p2""], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
Create tasks for issues that need response and are created by user USR-456,"var_1 = works_list(ticket.needs_response=True, created_by=[""USR-456""], type=[""issue""])
var_2 = create_actionable_tasks_from_text(text=var_1)
"
Get a summary of all my issues that are currently in the 'Development' stage,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""Development""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Add my tickets with 'blocker' severity to the current sprint,"var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], owned_by=[var_1], ticket.severity=[""blocker""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Retrieve and summarize all low severity tickets from the Rev organization REV-456,"var_1 = works_list(issue.rev_orgs=[""REV-456""], ticket.severity=[""low""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
" Retrieve similar work items to TASK-234, summarize them, and limit the number of work items to 50.","var_1 = get_similar_work_items(work_id=""TASK-234"")
var_2 = summarize_objects(objects=var_1)
"
"Identify and add all unresolved issues from the ""Backend"" team to the upcoming sprint.","var_1 = search_object_by_name(query=""Backend"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Retrieve work items of type 'issue' from Rev organization 'REV-999' and summarize them,"var_1 = works_list(issue.rev_orgs=[""REV-999""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Identify and add work items requiring a response to the ""Urgent-Queries"" sprint","var_1 = search_object_by_name(query=""Urgent-Queries"")
var_2 = works_list(ticket.needs_response=True, type=[""work""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
Find and summarize work items related to project Alpha123,"var_1 = search_object_by_name(query=""Alpha123"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
Locate and summarize my tasks that need responses within the 'customer_support' stage,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""customer_support""], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Find and prioritize tasks from customer feedback file and summarize the prioritized list,"var_1 = create_actionable_tasks_from_text(text=""customer feedback file"")
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Extract tasks from meeting notes ""MeetingNotes-1234"" and summarize for project management review","var_1 = create_actionable_tasks_from_text(text=""MeetingNotes-1234"")
var_2 = summarize_objects(objects=var_1)
"
Find issues for component COMP-321 and order them by urgency,"var_1 = works_list(applies_to_part=[""COMP-321""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
"
"Get tickets needing response, sort them by priority and assign them to the sprint with ID ""SPRINT-321""","var_1 = works_list(type=[""ticket""], ticket.needs_response=True)
var_2 = prioritize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-321"")
"
What if there are alternate versions of ourselves living in parallel universes?,#Unanswerable_Invalid_Query_Error
"For the user currently logged in, retrieve the list of tickets with medium severity and summarize.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Identify and add all blocker tickets to the sprint for ""ComponentZ""","var_1 = search_object_by_name(query=""ComponentZ"")
var_2 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Find all P2 issues I own, add them to my sprint, and summarize the sprint contents","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = summarize_objects(objects=var_2)
"
Locate and summarize all tasks in the POST_DEPLOYMENT stage owned by ReleaseManager with a limit of 22 work items.,"var_1 = search_object_by_name(query=""ReleaseManager"")
var_2 = works_list(owned_by=[var_1], stage.name=[""POST_DEPLOYMENT""], type=[""task""], limit=22)
var_3 = summarize_objects(objects=var_2)
"
Create actionable tasks from customer feedback 'CF-123' and prioritize them,"var_1 = create_actionable_tasks_from_text(text=""CF-123"")
var_2 = prioritize_objects(objects=var_1)
"
How do I fix a leaky faucet in my bathroom?,#Unanswerable_Invalid_Query_Error
Find tasks related to the CAPL-123 part and created by user DEVU-456; then order them by priority.,"var_1 = search_object_by_name(query=""DEVU-456"")
var_2 = works_list(type=[""task""], applies_to_part=[""CAPL-123""], created_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
"Find all tasks related to the ""BetaFeature"" project, prioritize them, and provide a summarized report.","var_1 = search_object_by_name(query=""BetaFeature"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
" Prioritize all issues with the p1 priority from the EpsilonEnterprise part and add them to the current sprint, limiting the number of work items to 36.","var_1 = works_list(applies_to_part=[""EpsilonEnterprise""], issue.priority=[""p1""], type=[""issue""], limit=36)
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Find similar work items to WORK-001, summarize them, and then add them to the current sprint","var_1 = get_similar_work_items(work_id=""WORK-001"")
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
Identify and summarize P1 issues for the current sprint,"var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p1""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Find work items related to parts = ['part-123','part-856'] and owned by a user","var_1 = search_object_by_name(query=""a user"")
var_2 = works_list(type=[""task""], applies_to_part=['part-123','part-856'], owned_by=[var_1])
"
Find tasks related to the project 'Alpha' and sort them by importance,"var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Retrieve my tasks that need a response and summarize them for quick review.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Priortize my tasks and summarize them for the weekly report.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Retrieve and summarize the work items for part 'SYS-789' that need a response.,"var_1 = search_object_by_name(query=""SYS-789"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Create a list of my tasks that need a response and summarize them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve my open tickets, summarize them , and find a sprint for potential inclusion","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
"
Identify and summarize Rev organization issues for REV-456,"var_1 = works_list(issue.rev_orgs=[""REV-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Create tasks from customer feedback text 'FeedbackText' and prioritize them,"var_1 = create_actionable_tasks_from_text(text=""FeedbackText"")
var_2 = prioritize_objects(objects=var_1)
"
"Find work items related to the ""Widget"" component, prioritize, and summarize them for a status report.","var_1 = search_object_by_name(query=""Widget"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"For the customer AcmeCorp, find all tasks related to the ""launch"" stage and summarize the progress","var_1 = search_object_by_name(query=""AcmeCorp"")
var_2 = works_list(ticket.rev_org=[var_1], stage.name=[""launch""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Prioritize and summarize my issues that are in 'feedback' stage,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""feedback""], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Add my tasks related to project ENH-123 to the sprint with ID SPRINT-456,"var_1 = who_am_i()
var_2 = works_list(type=[""task""], applies_to_part=[""ENH-123""], owned_by=[var_1])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-456"")
"
"Find and summarize tasks related to the ""AlphaProject""","var_1 = search_object_by_name(query=""AlphaProject"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
" Locate tickets with medium severity from the IT_SUPPORT rev organization, summarize them, and limit the number of work items to 15.","var_1 = search_object_by_name(query=""IT_SUPPORT"")
var_2 = works_list(ticket.severity=[""medium""], ticket.rev_org=[var_1], type=[""ticket""], limit=15)
var_3 = summarize_objects(objects=var_2)
"
Find and prioritize all tickets needing response from user ID USER-456,"var_1 = search_object_by_name(query=""USER-456"")
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
"Add tasks related to the ""CAPL-789"" part to the sprint ""Sprint-123""","var_1 = search_object_by_name(query=""CAPL-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""Sprint-123"")
"
Find tickets from the 'support' channel for REV-789 organization and prioritize them,"var_1 = search_object_by_name(query=""REV-789"")
var_2 = works_list(type=[""ticket""], ticket.source_channel=[""support""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
" Prioritize all tickets created by CustomerCareChris that need a response and summarize them, limiting the number of work items to 32.","var_1 = works_list(created_by=[""CustomerCareChris""], ticket.needs_response=True, type=[""ticket""], limit=32)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"For the Rev organization ""REV-TECH"", list and prioritize all low severity tickets.","var_1 = search_object_by_name(query=""REV-TECH"")
var_2 = works_list(ticket.severity=[""low""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
Identify work items in the 'development' stage for user ID USR-456 and provide a summary,"var_1 = works_list(owned_by=[""USR-456""], stage.name=[""development""], type=[""issue"", ""ticket"", ""task""])
var_2 = summarize_objects(objects=var_1)
"
"Create tasks from insights in document ""Doc-102"" and summarize them","var_1 = create_actionable_tasks_from_text(text=""Doc-102"")
var_2 = summarize_objects(objects=var_1)
"
Add top priority tasks to my current sprint for part ENH-789,"var_1 = search_object_by_name(query=""ENH-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=[var_3[0]], sprint_id=var_4)
"
Get current user's tickets with medium severity and create a summary,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Identify my work items in the 'QA' stage and summarize them for team review,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""QA""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Get the ID of the sprint planning meeting notes object ""M"" and prioritize it","var_1 = search_object_by_name(query=""M"")
var_2 = prioritize_objects(objects=[var_1])
"
Get tickets associated with Rev organization REV-456 with medium severity and provide a summary.,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Summarize and prioritize all tickets related to the Rev organization REV-TEAM,"var_1 = works_list(ticket.rev_org=[""REV-TEAM""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Create tasks for action items mentioned in the following meeting notes ""M"" and list them by priority.","var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = prioritize_objects(objects=var_1)
"
"For the customer ""EagleEnterprises"", collect all P1 issues, prioritize them, and prepare for the current sprint planning.","var_1 = search_object_by_name(query=""EagleEnterprises"")
var_2 = works_list(issue.priority=[""p1""], issue.rev_org=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Find similar tasks to TASK-321, summarize and rank them by priority","var_1 = get_similar_work_items(work_id=""TASK-321"")
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
Get the current sprint ID and add all my P1 priority issues within it.,"var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p1""], owned_by=[var_1], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Determine the current user's tasks that are marked as 'urgent', then add them to the sprint ending this Friday","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""urgent""], type=[""task""])
var_3 = search_object_by_name(query=""sprint ending this Friday"")
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Get the current sprint ID and then add tasks T1, T2, and T3 to it","var_1 = get_sprint_id()
var_2 = add_work_items_to_sprint(work_ids=[""T1"", ""T2"", ""T3""], sprint_id=var_1)
"
"Find all tasks related to the ""DEV-OPS"" project and list them by ascending priority","var_1 = search_object_by_name(query=""DEV-OPS"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Assign high severity tickets to the current sprint for user 'USR-456'.,"var_1 = works_list(type=[""ticket""], ticket.severity=[""high""], owned_by=[""USR-456""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Create a report of issues related to enhancement ENH-999 and owned by developer DEVO-789,"var_1 = search_object_by_name(query=""ENH-999"")
var_2 = works_list(created_by=[""DEVO-789""], applies_to_part=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Add issues belonging to the 'QA' stage to the current sprint,"var_1 = works_list(type=[""issue""], stage.name=[""QA""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"Find tickets by severity 'medium' for Rev organization REV-456, then prioritize and summarize these tickets","var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(type=[""ticket""], ticket.rev_org=[var_1], ticket.severity=[""medium""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Retrieve and summarize tasks related to project Alpha,"var_1 = search_object_by_name(query=""project Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Summarize all tasks that are in the 'development' stage and owned by me,"var_1 = who_am_i()
var_2 = works_list(type=[""task""], stage.name=[""development""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Find all my tasks related to the ENH-456 enhancement and list them in order of priority.,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""ENH-456"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
"
Identify and prioritize urgent tasks from the engineering channel,"var_1 = works_list(ticket.source_channel=[""engineering""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
Summarize all tasks related to CAPL-123 categorized by type,"var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"For part ID PART-001, get all tasks in the design phase, prioritize and assign for the upcoming sprint","var_1 = search_object_by_name(query=""PART-001"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""design""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Retrieve the current sprint's ID and summarize the tasks within it,"var_1 = get_sprint_id()
var_2 = works_list(type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find all tasks related to part ENH-321, summarize, and prioritize them for the current sprint","var_1 = search_object_by_name(query=""ENH-321"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
"
"Retrieve the ID of the ""Gamma Project"" sprint and add task ""TASK-789"" to it.","var_1 = search_object_by_name(query=""Gamma Project"")
var_2 = add_work_items_to_sprint(work_ids=[""TASK-789""], sprint_id=var_1)
"
Search for the sprint ID and add my P1 issues to it,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Summarize the current sprint's tasks for 'Project Delta',"var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""Project Delta"")
var_3 = works_list(stage.name=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
"Check for any tickets from ""TopClient"" that need a response and summon a summary","var_1 = search_object_by_name(query=""TopClient"")
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"Could emotions be a guiding force, revealing deeper truths about our desires and fears?",#Unanswerable_Invalid_Query_Error
Find high priority tasks for component ABC-123 and organize by due date,"#Unanswerable_Invalid_Query_Error
"
"Find work items related to multiple parts 'PART-101', 'PART-202', 'PART-303', and sort them according to priority","var_1 = works_list(applies_to_part=[""PART-101"", ""PART-202"", ""PART-303""], type=[""issue"", ""ticket"", ""task""])
var_2 = prioritize_objects(objects=var_1)
"
"List work items labeled as ""bugfix"" and sort them by priority for the upcoming patch release","var_1 = works_list(type=[""issue"", ""ticket"", ""task""], type=[""bugfix""])
var_2 = prioritize_objects(objects=var_1)
"
Find and summarize tasks needing response for Rev organization REV-999,"var_1 = search_object_by_name(query=""REV-999"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Get the current user ID and list their issues that are in 'review' stage,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""review""], type=[""issue""])
"
"Find and summarize work items related to component COMP-456, then prioritize and add them to my sprint","var_1 = search_object_by_name(query=""COMP-456"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
"
Retrieve my tasks created last week and prioritize them.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Prioritize and summarize all issues created by SystemArchitect with a limit of 35 work items.,"var_1 = search_object_by_name(query=""SystemArchitect"")
var_2 = works_list(created_by=[var_1], type=[""issue""], limit=35)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Retrieve tasks marked as 'task' type and belonging to the Rev organization REV-ABC, then add these to the current sprint.","var_1 = search_object_by_name(query=""REV-ABC"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Find my tickets with ‘P1’ severity and summarize them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""p1""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Fetch tickets related to Feature Alpha, prioritize based on medium severity, and assign them to the engineering lead","var_1 = search_object_by_name(query=""Feature Alpha"")
var_2 = works_list(ticket.severity=[""medium""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = search_object_by_name(query=""engineering lead"")
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Summarize all the tasks assigned to me and then get work items similar to those tasks,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_similar_work_items(work_id=var_2)
"
"Find tickets requiring response from the ""Support"" Rev organization and summarize them","var_1 = search_object_by_name(query=""Support"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve and summarize tickets from 'Critical' channel for review,"var_1 = works_list(ticket.source_channel=[""Critical""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Identify work created by user ""USR-99"", check for any response needed, and prioritize those items","var_1 = works_list(created_by=[""USR-99""], ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])
var_2 = prioritize_objects(objects=var_1)
"
" Prioritize all work items related to part COMPONENT-123 and summarize them, limiting the number of work items to 18.","var_1 = works_list(applies_to_part=[""COMPONENT-123""], limit=18)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"For the 'Engineering' team, find all tasks in the 'Review' stage, prioritize and add to the current sprint.","var_1 = search_object_by_name(query=""Engineering"")
var_2 = works_list(type=[""task""], stage.name=[""Review""], owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"List and summarize all blocker tickets, then add the top priority ones to the sprint","var_1 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"List and prioritize tasks in the ""QA-Testing"" stage for part ""UIX-456""","var_1 = search_object_by_name(query=""UIX-456"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""QA-Testing""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Summarize tasks related to the 'Epic-WorldDomination',"var_1 = search_object_by_name(query=""Epic-WorldDomination"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Summarize my tickets in 'waiting for customer' stage and check if they belong to organization REV-456,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""REV-456"")
var_3 = works_list(owned_by=[var_1], stage.name=[""waiting for customer""], ticket.rev_org=[var_2], type=[""ticket""])
var_4 = summarize_objects(objects=var_3)
"
"What if our perception of reality is shaped by the limitations of our senses, and there are aspects of existence beyond our comprehension?",#Unanswerable_Invalid_Query_Error
"Retrieve and summarize all ""P0"" level issues assigned to me.","var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p0""], owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Return the current sprint ID and then list all tasks related to the project 'Widget Revamp',"var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""Widget Revamp"")
var_3 = works_list(applies_to_part=[var_2], type=[""task""])
"
"Find work items for ""ENH-456"" and summarize them","var_1 = search_object_by_name(query=""ENH-456"")
var_2 = works_list(applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"Search for a work item with ID ITEM-321, summarize it, and identify p0-priority tasks related to it","var_1 = search_object_by_name(query=""ITEM-321"")
var_2 = summarize_objects(objects=[var_1])
var_3 = works_list(issue.priority=[""p0""], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
"
Retrieve the ID for customer 'InnovateX' and list all related 'low' severity tickets.,"var_1 = search_object_by_name(query=""InnovateX"")
var_2 = works_list(ticket.severity=[""low""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve my tasks of type 'issue' and summarize them,"var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"For the user 'USER-789', get all P2 issues, summarize them and then add these to the sprint with ID 'SPRINT-456'","var_1 = search_object_by_name(query=""USER-789"")
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-456"")
"
"Extract tasks from the ""project update"" notes and add them to the sprint for execution","var_1 = create_actionable_tasks_from_text(text=""project update"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Add all p0 issues to the sprint for urgent resolution,"var_1 = works_list(issue.priority=[""p0""], type=[""issue""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"Create tasks from notes taken during the ""Project Kickoff"" meeting and add them to current sprint","var_1 = create_actionable_tasks_from_text(text=""Project Kickoff meeting notes"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Extract tasks from the troubleshooting guide T and assign them to the engineering team.,"var_1 = create_actionable_tasks_from_text(text=""T"")
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""engineering_team"")
"
Identify all tasks related to 'Backend-Optimization' and list them by the due date.,"var_1 = search_object_by_name(query=""Backend-Optimization"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])"
Search for my tickets with 'medium' severity that are not yet resolved and summarize the list.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Search for the user ID of 'LeadDev' and list all work items they created,"var_1 = search_object_by_name(query=""LeadDev"")
var_2 = works_list(created_by=[var_1])
"
"Fill my current sprint with new tasks from meeting notes ""M""","var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Collect all issues related to 'Widget-Improvement' and add them to the 'Engineering' sprint.,"var_1 = search_object_by_name(query=""Widget-Improvement"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""Engineering"")
"
"Get tickets requiring response, summarize them, and add them to the support team's current sprint","var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Summarize the current sprint's tasks related to Project X,"var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""Project X"")
var_3 = works_list(applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
"Find work items for the ""Alpha"" project, prioritize them, and add to the sprint.","var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Summarize the work items related to part CAPL-123 that are in the 'development' stage,"var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""development""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Identify and summarize work items created by user 'User123' that are awaiting response,"var_1 = search_object_by_name(query=""User123"")
var_2 = works_list(created_by=[var_1], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
"Search for current sprint ID, then add all my P1 tickets to it","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p1""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Summarize all tickets that require a response from the engineering team,"var_1 = search_object_by_name(query=""engineering team"")
var_2 = works_list(ticket.needs_response=True, owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Get work items in ""DEVELOPMENT"" stage for the ""NEW-FEATURE"" part and summarize the progress","var_1 = search_object_by_name(query=""NEW-FEATURE"")
var_2 = works_list(stage.name=[""DEVELOPMENT""], applies_to_part=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Find tickets for component X requiring attention,"var_1 = works_list(applies_to_part=[""component X""], ticket.needs_response=True, type=[""ticket""])
"
"Retrieve the current sprint ID and then get all tasks created by user USER-XYZ, prioritize them and add to the current sprint","var_1 = get_sprint_id()
var_2 = works_list(created_by=[""USER-XYZ""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
"
Summarize the p1 priority issues created by UserXYZ and check if they are in the current sprint,"var_1 = works_list(type=[""issue""], issue.priority=[""p1""], created_by=[""UserXYZ""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
"
"Find all work items for the CAPL-123 part, then summarize and prioritize them.","var_1 = works_list(applies_to_part=[""CAPL-123""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
"Extract actionable tasks from the provided meeting notes ""M"" and add them to sprint ID SPRINT-456","var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-456"")
"
"Prioritize the tasks for the ""GammaOps"" team and add them to the ongoing sprint","var_1 = search_object_by_name(query=""GammaOps"")
var_2 = works_list(type=[""task""], owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Find and summarize tasks related to ""Project X"" for the current sprint","var_1 = search_object_by_name(query=""Project X"")
var_2 = get_sprint_id()
var_3 = works_list(applies_to_part=[var_1], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
Generate a list of my tickets that need a response and summarize them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Check my ownership of issues and get a summary for issues in 'test' stage,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""test""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Add P1 and P2 issues to current sprint for part CAPL-456,"var_1 = works_list(applies_to_part=[""CAPL-456""], issue.priority=[""p1"", ""p2""], type=[""issue""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
" Find and summarize tickets with severity medium that need a response, limiting the results to 50.","var_1 = works_list(ticket.severity=[""medium""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)
"
Prioritize tickets from the REV-345 organization that need a response and summarize the prioritized list,"var_1 = works_list(ticket.rev_org=[""REV-345""], ticket.needs_response=True, type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Find tasks related to REV-456, list them by priority, and add them to the sprint identified by ID SPRINT-789","var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-789"")
"
Find and prioritize tasks related to the 'ENH-123' part and add them to my current sprint,"var_1 = works_list(applies_to_part=[""ENH-123""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = who_am_i()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=get_sprint_id())
"
"Identify work items linked to part PROD-456, filter by Rev organization ORG-678, and provide a summary.","var_1 = search_object_by_name(query=""ORG-678"")
var_2 = works_list(applies_to_part=[""PROD-456""], issue.rev_orgs=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Check for any tickets that have been marked as 'blocker' and summarize them,"var_1 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Summarize the latest tasks for the CAPL-789 feature and check if any need responses,"var_1 = search_object_by_name(query=""CAPL-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
Find tickets needing response for product PROD-ABC and prioritize them,"var_1 = search_object_by_name(query=""PROD-ABC"")
var_2 = works_list(type=[""ticket""], applies_to_part=[var_1], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)
"
"Find work items related to ENH-456, filter by priority p2, and provide a summary","var_1 = search_object_by_name(query=""ENH-456"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Search for the highest priority tasks for 'UserX' and prepare them for the current sprint planning.,"var_1 = search_object_by_name(query=""UserX"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
" Prioritize all work items in the DEVELOPMENT stage owned by DevDerek and summarize them, limiting the number of work items to 22.","var_1 = works_list(owned_by=[""DevDerek""], stage.name=[""DEVELOPMENT""], limit=22)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Find work items for part PROD-321 that need a response, then summarize them","var_1 = search_object_by_name(query=""PROD-321"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
Add my 'urgent-fix' issues to the current sprint and prioritize the sprint items,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""urgent-fix""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = prioritize_objects(objects=var_2)
"
Organize work items by type for the 'Neptune' project and display them in a summarized form,"var_1 = search_object_by_name(query=""Neptune"")
var_2 = works_list(applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"Prioritize tickets from ""SupportChannel"" and assign them to current sprint","var_1 = works_list(ticket.source_channel=[""SupportChannel""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
What are the health benefits of practicing yoga?,#Unanswerable_Invalid_Query_Error
Prioritize and summarize tasks from the 'BetaFeature' sprint for a status update.,"var_1 = search_object_by_name(query=""BetaFeature"")
var_2 = works_list(stage.name=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Add all my P1 tickets from REV-XYZ org to the sprint and prioritize them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p1""], ticket.rev_org=[""REV-XYZ""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Summarize all issues with tag 'Backend' and priority 'p2',"var_1 = works_list(issue.priority=[""p2""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Find tasks related to the project PRJ-789, summarize the tasks, then sort them according to priority.","var_1 = search_object_by_name(query=""PRJ-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"Summarize my tasks, prioritize them and add them to the sprint","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Find work related to ""ENH-456"" and summarize it","var_1 = search_object_by_name(query=""ENH-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Generate a list of tasks from the meeting notes 'M' and assign to the team members,"var_1 = create_actionable_tasks_from_text(text=""M"")
"
Retrieve current sprint and generate summary of all P2 issues assigned to me,"var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""issue""])
var_4 = summarize_objects(objects=var_3)
"
Find and summarize work items related to part PROD-789 created by user USER-456,"var_1 = search_object_by_name(query=""USER-456"")
var_2 = search_object_by_name(query=""PROD-789"")
var_3 = works_list(created_by=[var_1], applies_to_part=[var_2], type=[""work""])
var_4 = summarize_objects(objects=var_3)
"
Retrieve the current sprint ID and list all tasks within it.,"var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], type=[""task""])
"
List out all medium severity tickets and add them to the latest sprint,"var_1 = works_list(ticket.severity=[""medium""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Add my recently prioritized tickets to the current sprint,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Retrieve my tasks, filter by 'in-progress' stage, and summarize","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""in-progress""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Identify all 'blocker' level tickets from the 'support' channel and them to sprint.,"var_1 = works_list(ticket.severity=[""blocker""], ticket.source_channel=[""support""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Identify and summarize all P2 issues related to the REV-456 organization,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(type=[""issue""], issue.priority=[""p2""], issue.rev_orgs=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"For parts ENH-123 and PROD-123, filter issues in stages 'development' and 'testing', then get the sprint ID and add these issues to the sprint","var_1 = works_list(applies_to_part=[""ENH-123"", ""PROD-123""], stage.name=[""development"", ""testing""], type=[""issue""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"Could love be a force that transcends the physical and connects us on a deeper, spiritual level?",#Unanswerable_Invalid_Query_Error
"Assign p0, p1 priority tickets to engineer ENG-456 for the current sprint","var_1 = search_object_by_name(query=""ENG-456"")
var_2 = works_list(type=[""ticket""], ticket.severity=[""p0"", ""p1""], owned_by=[var_1])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Find and summarize tasks related to feature FEAT-456 that need a response,"var_1 = search_object_by_name(query=""FEAT-456"")
var_2 = works_list(ticket.needs_response=True, applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Identify my tickets that need responses, get the current sprint, and add these tasks to it","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Generate a list of tickets from the 'email' source channel under 'medium' severity and provide a summary,"var_1 = works_list(ticket.source_channel=[""email""], ticket.severity=[""medium""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Summarize the current sprint's work items for ""MobileApp"" part and then add a new task ""Update UI""","var_1 = get_sprint_id()
var_2 = works_list(applies_to_part=[""MobileApp""], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = create_actionable_tasks_from_text(text=""Update UI"")
"
Find and summarize all issues with medium severity that I own,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""medium""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve current sprint's ID and add newly created P2 tickets to it,"var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p2""], type=[""ticket""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"Search for an object with the name ""CriticalServer"" and return the highest confidence match","var_1 = search_object_by_name(query=""CriticalServer"")
"
"Generate a list of tasks from the discussion notes ""M"" and prioritize them for adding to the sprint.","var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Retrieve my work items with the 'blocker' severity that need a response and summarize them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""blocker""], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
"Check for any tickets needing response from the ""QA"" team and prioritize them for this sprint","var_1 = search_object_by_name(query=""QA"")
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Find and summarize work items for the ""Alpha"" project with low priority","var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""low""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Can you provide a recipe for chocolate chip cookies?,#Unanswerable_Invalid_Query_Error
"Find work items related to the ""FEATURE-999"" part that need a response, then prioritize and summarize them.","var_1 = works_list(applies_to_part=[""FEATURE-999""], ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Add CAPL-123 related p2 tickets to the sprint,"var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p2""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Is consciousness a product of the brain, or does the brain serve as a conduit for a greater consciousness?",#Unanswerable_Invalid_Query_Error
" Summarize all tasks created by DevDana and add them to the current sprint, limiting the number of work items to 42.","var_1 = works_list(created_by=[""DevDana""], limit=42, type=[""task""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Identify tasks related to the 'Alpha' feature that are in the 'development' stage and add them to sprint 'S123',"var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""development""], type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""S123"")
"
Find tasks related to ENH-456 and summarize them,"var_1 = search_object_by_name(query=""ENH-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
List all issues raised by REV-999 in the last month and sort them by priority,"var_1 = search_object_by_name(query=""REV-999"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
Summarize and prioritize issues created by user USER-XYZ,"var_1 = works_list(created_by=[""USER-XYZ""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Identify work items in 'development' stage for the Rev organization ""ORG-567"", prioritize and summarize them","var_1 = works_list(stage.name=[""development""], issue.rev_orgs=[""ORG-567""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Prioritize all tasks related to Rev organization ORG-999 and list them,"var_1 = works_list(issue.rev_orgs=[""ORG-999""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
Get the ID for the current sprint and list all low severity tickets for it,"var_1 = get_sprint_id()
var_2 = works_list(ticket.severity=[""low""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Find work related to the ""ProjectX"" enhancement and get a summary","var_1 = search_object_by_name(query=""ProjectX"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Get the current sprint ID and list all medium severity tickets assigned to it,"var_1 = get_sprint_id()
var_2 = works_list(ticket.severity=[""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Find high priority tasks related to the ""Backend"" component and list them by priority","var_1 = works_list(type=[""task""], issue.priority=[""high""], applies_to_part=[""Backend""])
var_2 = prioritize_objects(objects=var_1)
"
Summarize the latest 'P1' issues from 'Support-Team' and assign them to current sprint for resolution,"var_1 = search_object_by_name(query=""Support-Team"")
var_2 = works_list(issue.rev_orgs=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
Retrieve all P2 priority enhancement issues and summarize for the weekly review,"var_1 = works_list(type=[""issue""], issue.priority=[""p2""], type=[""enhancement""])
var_2 = summarize_objects(objects=var_1)
"
Retrieve and prioritize tasks created by user USER-321 that need a response,"var_1 = works_list(created_by=[""USER-321""], ticket.needs_response=True, type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
Find P2 issues related to project Alpha and summarize them,"var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(type=[""issue""], issue.priority=[""p2""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Summarize tasks related to PROJ-2040 and involving user USER-001,"var_1 = search_object_by_name(query=""PROJ-2040"")
var_2 = works_list(owned_by=[""USER-001""], applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve my issues that need to be worked on for the REV-789 org and summarize them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.rev_orgs=[""REV-789""], ticket.needs_response=True, type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Find and summarize all tickets related to the ""Alpha Project"" which need a response","var_1 = search_object_by_name(query=""Alpha Project"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve all work of type 'issue' and 'ticket' for the user 'DEVU-321', summarize and prioritize them.","var_1 = works_list(owned_by=[""DEVU-321""], type=[""issue"", ""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
" Retrieve all high severity tickets from the WEB source channel, prioritize them, and add them to the current sprint, limiting the number of work items to 17.","var_1 = search_object_by_name(query=""WEB"")
var_2 = works_list(ticket.severity=[""high""], ticket.source_channel=[var_1], limit=17, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Find tickets requiring response about ""Network Outage"" issue and determine their severity","var_1 = search_object_by_name(query=""Network Outage"")
var_2 = works_list(ticket.needs_response=True, owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Find all tasks related to the component ""COMP-456"" and summarise them","var_1 = search_object_by_name(query=""COMP-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find and summarize all tasks related to the ""AlphaProject"" currently in the ""development"" stage","var_1 = search_object_by_name(query=""AlphaProject"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""development""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Find tickets needing response for REV-456 and filter by 'low' severity,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""low""], ticket.needs_response=True, type=[""ticket""])
"
"List all open issues assigned to me from the ""NextGen"" project and add them to the sprint for resolution.","var_1 = who_am_i()
var_2 = search_object_by_name(query=""NextGen"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""issue""])
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Get a summary of all tasks I own that are in the 'development' stage.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find work items related to ""ENH-987"" and assign them to the current sprint","var_1 = search_object_by_name(query=""ENH-987"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Identify and prioritize tasks related to the Rev ""HelloWorld"" while limiting the number of items to 20","var_1 = search_object_by_name(query=""HelloWorld"")
var_2 = works_list(issue.rev_orgs=[var_1], limit=20, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Find tickets from 'TechCorp' with medium severity and update their stage to 'In Progress',"#Unanswerable_Invalid_Query_Error
"
Retrieve a list of tasks associated with part PROD-321 and filter for those created by user UXD-321,"var_1 = search_object_by_name(query=""PROD-321"")
var_2 = search_object_by_name(query=""UXD-321"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2], type=[""task""])
"
"Find current sprint ID, then list and prioritize my ticket type works with severity 'medium'.","var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], ticket.severity=[""medium""], type=[""ticket""])
var_4 = prioritize_objects(objects=var_3)
"
"For the upcoming release, filter all issues tagged with ""UX-Update"", prioritize and summarize","var_1 = works_list(applies_to_part=[""UX-Update""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"What if the universe is a grand symphony, and each celestial body contributes to the cosmic melody?",#Unanswerable_Invalid_Query_Error
"For customer BetaCorp, extract all open tickets, prioritize for this week's review, and return ticket IDs","var_1 = search_object_by_name(query=""BetaCorp"")
var_2 = works_list(type=[""ticket""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
Organize my critical tasks and summarize them,"var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1], ticket.severity=[""critical""])
var_3 = summarize_objects(objects=var_2)
"
Get a list of all medium severity tickets created by user 'User12345',"var_1 = works_list(created_by=[""User12345""], ticket.severity=[""medium""], type=[""ticket""])
"
Retrieve and summarize my issues requiring a response,"var_1 = who_am_i()
var_2 = works_list(type=[""issue""], owned_by=[var_1], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
Find all issues from 'RevOrg-456' in 'support' stage and add to current sprint,"var_1 = works_list(issue.rev_orgs=[""RevOrg-456""], stage.name=[""support""], type=[""issue""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Summarize my tasks related to enhancement ENH-321 and categorize them by their current stage,"var_1 = search_object_by_name(query=""ENH-321"")
var_2 = who_am_i()
var_3 = works_list(type=[""task""], applies_to_part=[var_1], owned_by=[var_2])
var_4 = summarize_objects(objects=var_3)
"
Generate a list of all tasks that need a response and prioritize them,"var_1 = works_list(ticket.needs_response=True, type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
Add UltimateCustomer's new high-priority tasks to the sprint after summarizing them,"var_1 = search_object_by_name(query=""UltimateCustomer"")
var_2 = works_list(ticket.rev_org=[var_1], issue.priority=[""p0""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
Find and summarize all issues created by DevTeam5 with a limit of 30 work items.,"var_1 = works_list(created_by=[""DevTeam5""], type=[""issue""], limit=30)
var_2 = summarize_objects(objects=var_1)
"
Summarize and prioritize tickets for sprint addition for user USER-321,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Prioritize all tasks owned by user QAExpert and summarize them, limiting the number of work items to 40.","var_1 = search_object_by_name(query=""QAExpert"")
var_2 = works_list(owned_by=[var_1], type=[""task""], limit=40)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Retrieve and summarize all P1 issues assigned to 'Engineer42',"var_1 = search_object_by_name(query=""Engineer42"")
var_2 = works_list(owned_by=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Prioritize tasks related to customer complaints and summarize them for review,"var_1 = works_list(type=[""task""], ticket.source_channel=[""customer complaints""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Summarize the recent tasks created by user DEVU-789 and identify if any of them need a response.,"var_1 = search_object_by_name(query=""DEVU-789"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve my low-priority tasks and arrange them by due date,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""])"
Retrieve the sprint ID for my team's sprint called 'SuperSprint',"var_1 = search_object_by_name(query=""SuperSprint"")
"
"Get my tasks related to `DOC-321` that need a response, prioritize and summarize them.","var_1 = who_am_i()
var_2 = works_list(type=[""task""], applies_to_part=[""DOC-321""], owned_by=[var_1], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Find issues for CAPL-123 that need a response and summarize them,"var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Summarize all medium severity tickets and check if any requires immediate response,"var_1 = works_list(ticket.severity=[""medium""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"For customer BetaCorp, list all low priority tickets, summarize, and assign to user USER-ABC","var_1 = search_object_by_name(query=""BetaCorp"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""low""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = search_object_by_name(query=""USER-ABC"")
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
Find tasks related to the billing feature and organize them for the upcoming sprint,"var_1 = search_object_by_name(query=""billing feature"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Find open issues assigned to user USER-321 and list them by priority,"var_1 = works_list(owned_by=[""USER-321""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
"
Summarize my tasks related to ENH-123 and determine if any require immediate response,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], applies_to_part=[""ENH-123""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Create actionable tasks from the notes of ""ThetaMeeting"" and add them to my dashboard","var_1 = search_object_by_name(query=""ThetaMeeting"")
var_2 = create_actionable_tasks_from_text(text=var_1)
var_3 = who_am_i()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Identify my P2 issues and summarize for the weekly review,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Assign p3 priority issues to the current sprint for the ""frontend"" team","var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p3""], owned_by=[""frontend""], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"Prioritize tickets from REV-123 organization, excluding blocker severity, and summarize the results","var_1 = works_list(issue.rev_orgs=[""REV-123""], ticket.severity=[""high"", ""medium"", ""low""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Find and summarize issues created by user USER-321,"var_1 = search_object_by_name(query=""USER-321"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Find P1 issues and summarize them,"var_1 = works_list(issue.priority=[""p1""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Summarize tasks in the DESIGN stage related to part UX-IMPROVEMENT and limit the number of work items to 26.,"var_1 = works_list(stage.name=[""DESIGN""], applies_to_part=[""UX-IMPROVEMENT""], type=[""task""], limit=26)
var_2 = summarize_objects(objects=var_1)
"
Retrieve a list of work items related to part PROD-321 and filter them by those created by user USER-456,"var_1 = works_list(applies_to_part=[""PROD-321""], created_by=[""USER-456""], type=[""issue"", ""ticket"", ""task""])
var_2 = summarize_objects(objects=var_1)
"
Find all tasks related to the Epic CAPL-321 and determine which ones still need a response,"var_1 = search_object_by_name(query=""CAPL-321"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""task""])
"
Prioritize tickets with severity 'blocker' and associate them with sprint SPRINT-456,"var_1 = works_list(type=[""ticket""], ticket.severity=[""blocker""])
var_2 = prioritize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-456"")
"
"Summarize the work items related to the ""DEV-OPS"" project and list them by priority","var_1 = search_object_by_name(query=""DEV-OPS"")
var_2 = works_list(owned_by=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Identify work items created by user ""User987"" in ""Development"" stage and summarize the result","var_1 = search_object_by_name(query=""User987"")
var_2 = works_list(created_by=[var_1], stage.name=[""Development""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Summarize the work items for the customer BigEnterprise,"var_1 = search_object_by_name(query=""BigEnterprise"")
var_2 = works_list(ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"Summarize and prioritize issues with priority P1 from the QA team, limiting the results to 25.","var_1 = search_object_by_name(query=""QA team"")
var_2 = works_list(issue.priority=[""p1""], created_by=[var_1], limit=25, type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
" Find and summarize tickets with severity high that need a response, limiting the results to 50.","var_1 = works_list(ticket.severity=[""high""], ticket.needs_response=True, limit=50, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Summarize the current sprint's work items and get similar items for ""TASK-321""","var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_similar_work_items(work_id=""TASK-321"")
"
Find tickets raised via email about billing tickets with high severity,"var_1 = works_list(ticket.source_channel=[""email""], ticket.severity=[""high""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Summarize the work items assigned to me that are marked as ""blocker"" severity","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""blocker""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Find work items related to part XYZ-001, summarize them, and prioritize them, limiting the number of work items to 25.","var_1 = works_list(applies_to_part=[""XYZ-001""], limit=25)
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
Summarize tickets with medium severity from the Engineering department,"var_1 = search_object_by_name(query=""Engineering"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Summarize the work items that are open tickets with the label ""urgent"" and involve the part ""SYS-567"".","var_1 = search_object_by_name(query=""SYS-567"")
var_2 = works_list(applies_to_part=[var_1], ticket.severity=[""urgent""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
" Summarize all tasks in the PLANNING stage created by PlannerPam and add them to the current sprint, limiting the number of work items to 12.","var_1 = works_list(created_by=[""PlannerPam""], stage.name=[""PLANNING""], limit=12, type=[""task""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Locate my tasks with 'awaiting_feedback' status and prepare a concise report.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""awaiting_feedback""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
How many calories are burned by running for 30 minutes?,#Unanswerable_Invalid_Query_Error
"Get a list of tasks from ""Beta Launch"" phase and check if any are overdue.","var_1 = search_object_by_name(query=""Beta Launch"")
var_2 = works_list(stage.name=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
" Prioritize all work items owned by TeamLead and summarize them, limiting the number of work items to 22.","var_1 = works_list(owned_by=[""TeamLead""], limit=22)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Search for my tasks labeled as 'urgent' and create a prioritized list.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""urgent""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
" Prioritize all issues with the p2 priority from the AlphaTeam rev organization and summarize them, limiting the number of work items to 26.","var_1 = search_object_by_name(query=""AlphaTeam"")
var_2 = works_list(issue.priority=[""p2""], issue.rev_orgs=[var_1], limit=26, type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Identify and list tasks by user ""DEVX-456"" that need response and are in ""review"" stage","var_1 = works_list(created_by=[""DEVX-456""], stage.name=[""review""], ticket.needs_response=True, type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Filter my tickets that are in the 'Resolved' stage and prioritize them,"var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], owned_by=[var_1], stage.name=[""Resolved""])
var_3 = prioritize_objects(objects=var_2)
"
"Create actionable tasks from the meeting notes ""M"" and summarize the new tasks","var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = summarize_objects(objects=var_1)
"
"Identify my tasks for sprint ending soon, prioritize, and summarize for planning","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Add all p0 priority issues created by user USER-321 to the current sprint.,"var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p0""], created_by=[""USER-321""], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
Find work items for part CAPL-123 with priority P1 and created by user DEVU-456,"var_1 = search_object_by_name(query=""DEVU-456"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[""CAPL-123""], issue.priority=[""p1""], created_by=[var_1])
"
"Retrieve and summarize tasks related to ""Project-X"" for a user","var_1 = search_object_by_name(query=""Project-X"")
var_2 = who_am_i()
var_3 = works_list(type=[""task""], applies_to_part=[var_1], owned_by=[var_2])
var_4 = summarize_objects(objects=var_3)
"
Summarize all tickets that need a response and are associated with the Rev organization ORG-789,"var_1 = search_object_by_name(query=""ORG-789"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Identify tickets that have been reopened multiple times and prioritize them for review,"var_1 = works_list(ticket.source_channel=[""reopened""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
Locate and summarize all tasks with the work type issue created by ProductOwner and limit the number of work items to 12.,"var_1 = works_list(created_by=[""ProductOwner""], type=[""issue""], limit=12)
var_2 = summarize_objects(objects=var_1)
"
Summarize the work items for customer GreatClient across all channels,"var_1 = search_object_by_name(query=""GreatClient"")
var_2 = works_list(ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Find and summarize my issues that are ready for 'QA',"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""QA""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Organize my `p1` issues into the `QA-Testing` stage and prioritize them.,"var_1 = who_am_i()
var_2 = works_list(type=[""issue""], owned_by=[var_1], stage.name=[""QA-Testing""], issue.priority=[""p1""])
var_3 = prioritize_objects(objects=var_2)
"
Retrieve and prioritize tickets from channel 'email' for analysis.,"var_1 = works_list(ticket.source_channel=[""email""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
" Retrieve similar work items to ISSUE-321, prioritize them, and limit the number of work items to 50.","var_1 = get_similar_work_items(work_id=""ISSUE-321"")
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Summarize tasks from the engineering team and filter by those needing a response,"var_1 = works_list(ticket.needs_response=True, type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
List all tickets needing a response from the 'email' channel and summarize them for review,"var_1 = works_list(ticket.needs_response=True, ticket.source_channel=[""email""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Locate work items related to 'CAPL-456' with 'medium' severity and add them to my sprint.,"var_1 = search_object_by_name(query=""CAPL-456"")
var_2 = works_list(applies_to_part=[var_1], ticket.severity=[""medium""], type=[""issue"", ""ticket"", ""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Find the current sprint's ID and then add all ""task"" type work items to it","var_1 = get_sprint_id()
var_2 = works_list(type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"Create a summary of all work items regarding ""Security Patch"" and assess their impact.","var_1 = search_object_by_name(query=""Security Patch"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Create a summary of P2 issues that need response for Rev organization REV-999,"var_1 = works_list(issue.priority=[""p2""], issue.rev_orgs=[""REV-999""], ticket.needs_response=True, type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Create a report of tickets with medium severity that I need to respond to,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""medium""], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Combine tickets from customer ""BetaCorp"" and issues from ""FeatureX"" into the upcoming sprint","var_1 = search_object_by_name(query=""BetaCorp"")
var_2 = search_object_by_name(query=""FeatureX"")
var_3 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_4 = works_list(applies_to_part=[var_2], type=[""issue""])
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_3 + var_4, sprint_id=var_5)
"
"Retrieve work items created by UserX and filter them by ""high"" severity","var_1 = works_list(created_by=[""UserX""], ticket.severity=[""high""], type=[""issue"", ""ticket"", ""task""])
"
Priortize my tasks and add to the active sprint,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Identify my tickets that need a response and prioritize,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
Summarize the work items created by user USER-321 that are in the 'development' stage,"var_1 = works_list(created_by=[""USER-321""], stage.name=[""development""], type=[""issue"", ""ticket"", ""task""])
var_2 = summarize_objects(objects=var_1)
"
Add all tasks related to the Rev organization REV-321 to the current sprint,"var_1 = search_object_by_name(query=""REV-321"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Find work items related to part CAPL-123 and determine if they need a response.,"var_1 = works_list(applies_to_part=[""CAPL-123""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)
"
Find out if there are any tasks similar to 'TASK-306' and prioritize and summarize them for review.,"var_1 = get_similar_work_items(work_id=""TASK-306"")
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Identify high severity issues owned by me and list them.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""high""], type=[""issue""])
"
What if our understanding of the cosmos is limited by the constraints of our three-dimensional perception?,#Unanswerable_Invalid_Query_Error
"List all ""issue"" type work items with priority ""p2"" and are related to the ""Beta"" part","var_1 = search_object_by_name(query=""Beta"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p2""], type=[""issue""])
"
"Find similar items to TASK-321, prioritize them, and obtain the sprint ID where they should be added.","var_1 = get_similar_work_items(work_id=""TASK-321"")
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
"
"Generate a report on the current sprint's tasks, including those related to user ""DevOps-42""","var_1 = search_object_by_name(query=""DevOps-42"")
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
"For customer 'EnterpriseNow', retrieve all tickets, prioritize by impact, and summarize for review","var_1 = search_object_by_name(query=""EnterpriseNow"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Display tasks for user DEVU-789 and filter those associated with Rev organization REV-456,"var_1 = search_object_by_name(query=""DEVU-789"")
var_2 = works_list(created_by=[var_1], issue.rev_orgs=[""REV-456""], type=[""task""])
"
What are the latest fashion trends for the upcoming summer?,#Unanswerable_Invalid_Query_Error
Summarize the current sprint's progress based on completed work items,"#Unanswerable_Invalid_Query_Error
"
" Find work items related to part MODULE-002, prioritize them, and summarize them, limiting the number of work items to 37.","var_1 = works_list(applies_to_part=[""MODULE-002""], limit=37)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Search for work items associated with ""Project-X"", create tasks for them, and add to my sprint","var_1 = search_object_by_name(query=""Project-X"")
var_2 = works_list(applies_to_part=[var_1])
var_3 = create_actionable_tasks_from_text(text=var_2)
var_4 = who_am_i()
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_5)
"
"Find the current sprint, list all tasks within it, and summarize those tasks for me","var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Search for objects by name ""Project X"" and return a list of similar work items","var_1 = search_object_by_name(query=""Project X"")
var_2 = get_similar_work_items(work_id=var_1)
"
Identify work items for customer BetaCorp and sort by priority,"var_1 = search_object_by_name(query=""BetaCorp"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
"Find and summarize issues regarding ""Security Patch"" for the ""QA"" team.","var_1 = search_object_by_name(query=""Security Patch"")
var_2 = search_object_by_name(query=""QA"")
var_3 = works_list(applies_to_part=[var_1], issue.rev_orgs=[var_2], type=[""issue""])
var_4 = summarize_objects(objects=var_3)
"
Locate the sprint ID and add all P2 tickets from user USER-321 to it,"var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""USER-321"")
var_3 = works_list(type=[""ticket""], issue.priority=[""p2""], created_by=[var_2])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
"
"Locate, prioritize, and add all blocker issues from Rev organization ORG-999 to the current sprint","var_1 = search_object_by_name(query=""ORG-999"")
var_2 = works_list(type=[""issue""], ticket.severity=[""blocker""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
" Find work items created by User789, prioritize them, and add them to the current sprint, limiting the results to 45.","var_1 = works_list(created_by=[""User789""], limit=45)
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Retrieve and prioritize tasks from user DEVU-456 for the current sprint,"var_1 = works_list(created_by=[""DEVU-456""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Retrieve and prioritize all tickets for 'Beta' component created by user 'USR-456',"var_1 = search_object_by_name(query=""Beta"")
var_2 = works_list(created_by=[""USR-456""], applies_to_part=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
Find P2 issues owned by DEVU-456 and limit the number of issues to 72,"var_1 = works_list(owned_by=[""DEVU-456""], issue.priority=[""p2""], type=[""issue""], limit=72)
"
Search for object named 'ProjectAlpha' and return work items tagged with high severity and owned by myself,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""ProjectAlpha"")
var_3 = works_list(ticket.severity=[""high""], owned_by=[var_1], ticket.rev_org=[var_2], type=[""ticket""])
var_4 = summarize_objects(objects=var_3)
"
Extract and prioritize action items from the latest project update email.,"var_1 = create_actionable_tasks_from_text(text=""latest project update email"")
var_2 = prioritize_objects(objects=var_1)
"
Prioritize tasks related to 'Project-X' and list in order of urgency,"var_1 = search_object_by_name(query=""Project-X"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Summarize and prioritize all P2 issues in the QA stage,"var_1 = works_list(stage.name=[""QA""], issue.priority=[""p2""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Retrieve and summarize tickets associated with the ""LegacySystem"" part that are marked as ""blocker"".","var_1 = works_list(applies_to_part=[""LegacySystem""], ticket.severity=[""blocker""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"List all ""medium"" priority issues and sort them by creation date",#Unanswerable_Invalid_Query_Error
"Retrieve and summarize all issues tied to the ""release-9.1"" milestone and tagged with ""urgent""","var_1 = search_object_by_name(query=""release-9.1"")
var_2 = works_list(type=[""issue""], applies_to_part=[var_1], ticket.severity=[""urgent""])
var_3 = summarize_objects(objects=var_2)
"
Create a summary of issues created by user DEVU-456 and prioritize them,"var_1 = works_list(created_by=[""DEVU-456""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Summarize issues created by user ""USR-789""","var_1 = search_object_by_name(query=""USR-789"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"For the 'Development' Rev organization, extract similar work items to ISSU-789 and provide a summarized view","var_1 = search_object_by_name(query=""Development"")
var_2 = get_similar_work_items(work_id=""ISSU-789"")
var_3 = summarize_objects(objects=var_2)
"
Find and summarize tickets with blocker severity from the CHAT source channel and limit the number of work items to 40.,"var_1 = works_list(ticket.severity=[""blocker""], ticket.source_channel=[""CHAT""], type=[""ticket""], limit=40)
var_2 = summarize_objects(objects=var_1)
"
"Summarize my tasks and filter for those in ""development"" stage","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Identify and prioritize all P1 issues for the current sprint,"var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p1""], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
"
Generate a list of issues to be addressed in the 'DeltaSquad' meeting and ticket severity  Blocker,"var_1 = works_list(type=[""issue""], stage.name=[""DeltaSquad""], ticket.severity=[""blocker""])
var_2 = summarize_objects(objects=var_1)
"
Summarize the current user's tasks related to project Alpha and organize them by priority,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""Alpha"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)
"
" Retrieve and summarize work items of type issue for the CUSTOMER_RELATIONS rev organization, limiting the results to 18.","var_1 = works_list(issue.rev_orgs=[""CUSTOMER_RELATIONS""], type=[""issue""], limit=18)
var_2 = summarize_objects(objects=var_1)
"
Prioritize tasks of type 'issue' and summarize them,"var_1 = works_list(type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Add my issues of ""p2"" priority from the ""Widget-Beta"" part to the cutt sprint","var_1 = who_am_i()
var_2 = search_object_by_name(query=""Widget-Beta"")
var_3 = works_list(owned_by=[var_1], issue.priority=[""p2""], applies_to_part=[var_2], type=[""issue""])
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Search for the 'EpicPlanningTool' and create tasks for new feature requests,"var_1 = search_object_by_name(query=""EpicPlanningTool"")
var_2 = create_actionable_tasks_from_text(text=""new feature requests"")
"
"Could there be multiple layers of reality, each influencing the others in ways we cannot fathom?",#Unanswerable_Invalid_Query_Error
"Add top priority tickets from ""REV-Engineering"" to my sprint","var_1 = search_object_by_name(query=""REV-Engineering"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Generate a list of tasks for the new feature ideas from the brainstorming session,"var_1 = create_actionable_tasks_from_text(text=""new feature ideas from the brainstorming session"")
var_2 = summarize_objects(objects=var_1)
"
"Retrieve the current sprint ID and list all the high priority tickets, then prioritize and summarize them","var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""high""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Fetch all work items related to the product code PROD-321, prioritize them by severity, and summarize the top 5 for review","var_1 = search_object_by_name(query=""PROD-321"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = var_3[:5]
var_5 = summarize_objects(objects=var_4)
"
"Could the universe be a vast, intricate simulation created by a higher intelligence?",#Unanswerable_Invalid_Query_Error
Prioritize and summarize tasks created by LeadArchitect and limit the number of work items to 28.,"var_1 = search_object_by_name(query=""LeadArchitect"")
var_2 = works_list(created_by=[var_1], limit=28, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Extract tasks from the document ""MeetingNotes"" and schedule them for review in the current team meeting","var_1 = create_actionable_tasks_from_text(text=""MeetingNotes"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"Find work items from ""UI/UX Enhancement"" and add them to the current sprint","var_1 = search_object_by_name(query=""UI/UX Enhancement"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Retrieve and display the sprint ID for my reference,"var_1 = get_sprint_id()
"
"Find all issues related to the project ""PROJ-789"" which apply to part ""XTS-123"", summarize and prioritize them.","var_1 = search_object_by_name(query=""PROJ-789"")
var_2 = works_list(applies_to_part=[""XTS-123""], owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
Identify tasks related to part CAPL-456 that need a response,"var_1 = works_list(applies_to_part=[""CAPL-456""], ticket.needs_response=True, type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Prioritize and add all my tasks from 'development' stage to my sprint.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Find and summarize all issues from the ""Development"" department with p2 priority","var_1 = works_list(issue.rev_orgs=[""Development""], issue.priority=[""p2""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Generate a summary report for tickets created by user USER-321 that require responses,"var_1 = works_list(created_by=[""USER-321""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Find all tasks related to the 'DEVOPS-420' project, summarize their status, and identify the urgent ones.","var_1 = search_object_by_name(query=""DEVOPS-420"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
Generate a list of my tasks that need response and prioritize them for today's review.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Retrieve all tasks created by user USER-999, prioritize them, and add to my sprint.","var_1 = works_list(created_by=[""USER-999""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = who_am_i()
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
"Find all tasks related to project Alpha, summarize and order by priority","var_1 = search_object_by_name(query=""project Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Create actionable tasks from customer feedback ""CF"" and add them to the sprint","var_1 = create_actionable_tasks_from_text(text=""CF"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Identify work tickets for feature CAPL-567 and categorize by severity,"var_1 = search_object_by_name(query=""CAPL-567"")
var_2 = works_list(applies_to_part=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
"List all P1 issues that have come in through email, then prioritize and get their IDs","var_1 = works_list(issue.priority=[""p1""], ticket.source_channel=[""email""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
"
"Locate work items owned by user DEV-999, filter for tasks at 'QA' stage, summarize and prioritize them","var_1 = search_object_by_name(query=""DEV-999"")
var_2 = works_list(owned_by=[var_1], stage.name=[""QA""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
Retrieve and summarize tasks related to component XCOMP-321 by engineer Eng123,"var_1 = search_object_by_name(query=""XCOMP-321"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1], created_by=[""Eng123""])
var_3 = summarize_objects(objects=var_2)
"
"List all issues owned by user DEVU-789 in the development stage, prioritize issues with priority p2.","var_1 = search_object_by_name(query=""DEVU-789"")
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], issue.priority=[""p2""], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
Find and summarize tasks in 'review' stage for the current user and add them to the sprint named 'Q1 Deliverables',"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""review""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = search_object_by_name(query=""Q1 Deliverables"")
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
Retrieve and prioritize my tasks that require a response,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
" Summarize all P2 issues owned by EngineerEmma and add them to the current sprint, limiting the number of work items to 14.","var_1 = works_list(owned_by=[""EngineerEmma""], issue.priority=[""p2""], type=[""issue""], limit=14)
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"Find and summarize work related to the ""Backlog Cleanup"" project.","var_1 = search_object_by_name(query=""Backlog Cleanup"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
" Summarize and prioritize issues with priority P2 for the HR rev organization, limiting the results to 30.","var_1 = search_object_by_name(query=""HR"")
var_2 = works_list(issue.priority=[""P2""], issue.rev_orgs=[var_1], limit=30)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Retrieve my tasks, filter by issue type, summarize, and then prioritize by deadline","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_3)
"
"List all tickets of 'medium' severity which are not yet assigned and assign them to team member ""DEV123""","var_1 = works_list(type=[""ticket""], ticket.severity=[""medium""], owned_by=[None])
var_2 = search_object_by_name(query=""DEV123"")
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Get the current user's ID and return a list of their work,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""issue"", ""ticket"", ""task""])
"
"List all issues marked as p2 priority and under ""Beta"" part, summarize and check for similar issues in the system","var_1 = works_list(issue.priority=[""p2""], applies_to_part=[""Beta""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_similar_work_items(work_id=var_1[0]) "
Identify and prioritize tasks related to the 'Frontend' component and prepare them for the current sprint,"var_1 = search_object_by_name(query=""Frontend"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Generate a report of all issues with 'API' in their name and identify duplicates,"var_1 = search_object_by_name(query=""API"")
var_2 = get_similar_work_items(work_id=var_1)
"
"Is there an inherent order to the universe, or is chaos the true nature of existence?",#Unanswerable_Invalid_Query_Error
"For the Rev organization ""REV-XYZ"", list all tasks, filter by critical stage, and summarize the workload.","var_1 = search_object_by_name(query=""REV-XYZ"")
var_2 = works_list(issue.rev_orgs=[var_1], stage.name=[""critical""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"For the current user, filter tasks that need a response, summarize and get the sprint ID to plan accordingly","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
"
"Get a list of issues I created that are in the 'backlog' stage, and summarize the list","var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], stage.name=[""backlog""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Prioritize work items owned by me and created this month,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""issue"", ""ticket"", ""task""]) 
var_3 = prioritize_objects(objects=var_2)
"
Identify and summarize P2 issues from Rev organization REV-TEAM1,"var_1 = works_list(issue.rev_orgs=[""REV-TEAM1""], issue.priority=[""p2""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
" Locate and summarize tickets from the IN_PERSON source channel with severity blocker, limiting the results to 40.","var_1 = works_list(ticket.source_channel=[""IN_PERSON""], ticket.severity=[""blocker""], limit=40, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Find all tasks related to the 'Analytics' project, sort them by priority, and then summarize","var_1 = search_object_by_name(query=""Analytics project"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Find work items for component 'UIX-987' and list them by priority,"var_1 = works_list(applies_to_part=[""UIX-987""], type=[""issue"", ""ticket"", ""task""])
var_2 = prioritize_objects(objects=var_1)
"
" Summarize issues created by User123 and add them to the current sprint, limiting the results to 10.","var_1 = search_object_by_name(query=""User123"")
var_2 = works_list(created_by=[var_1], type=[""issue""], limit=10)
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
Find and summarize tasks related to part 'UIX-456' that I created,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""UIX-456"")
var_3 = works_list(type=[""task""], created_by=[var_1], applies_to_part=[var_2])
var_4 = summarize_objects(objects=var_3)
"
"Identify all P2 issues under current user's ownership, filter them by ""QA"" team, and add to sprint ""SPRINT-321"".","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], issue.rev_orgs=[""QA""], type=[""issue""])
var_3 = search_object_by_name(query=""SPRINT-321"")
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Create tasks from the insights of the latest team meeting notes,"var_1 = create_actionable_tasks_from_text(text=""latest team meeting notes"")
"
Summarize tasks in the IMPLEMENTATION stage related to part DATABASE-2 and limit the number of work items to 30.,"var_1 = works_list(stage.name=[""IMPLEMENTATION""], applies_to_part=[""DATABASE-2""], type=[""task""], limit=30)
var_2 = summarize_objects(objects=var_1)
"
Retrieve and summarize tasks of type 'issue' and 'ticket' for CAPL-567,"var_1 = search_object_by_name(query=""CAPL-567"")
var_2 = works_list(type=[""issue"", ""ticket""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Add all high severity tickets from Rev organization REV-456 to the current sprint,"var_1 = works_list(issue.rev_orgs=[""REV-456""], ticket.severity=[""high""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
List all tasks of type 'issue' assigned to me and order them by priority,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
"Check for any tickets from REV-TEAM needing response, summarize the urgent ones","var_1 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.rev_org=[""REV-TEAM""])
var_2 = summarize_objects(objects=var_1)
"
"Summarize the current sprint's work items for the ""Backend"" team","var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], owned_by=[""Backend""], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
Organize my P2 tickets by priority and add them to the sprint,"var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], issue.priority=[""p2""], owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Retrieve issues related to REV-123 with priority P2, summarize and add to sprint","var_1 = search_object_by_name(query=""REV-123"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
"Retrieve the current sprint's work items, prioritize them, and get a summary.","var_1 = get_sprint_id()
var_2 = works_list(stage.name=[""sprint""], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Filter tickets that require a response and are from the source channel 'email', then prioritize and summarize these tickets.","var_1 = works_list(ticket.needs_response=True, ticket.source_channel=[""email""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Find and summarize all tasks related to the project code ""PRJ-321""","var_1 = search_object_by_name(query=""PRJ-321"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find work items in the ""QA_Review"" stage for the ""WidgetImprovement"" feature and prioritize them.","var_1 = search_object_by_name(query=""WidgetImprovement"")
var_2 = works_list(stage.name=[""QA_Review""], applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Identify and summarize tickets related to ""CAPL-789"" that are blocker severity","var_1 = works_list(applies_to_part=[""CAPL-789""], ticket.severity=[""blocker""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Retrieve the current sprint ID and add issue ""ISSUE-999"" to it","var_1 = get_sprint_id()
var_2 = add_work_items_to_sprint(work_ids=[""ISSUE-999""], sprint_id=var_1)
"
"Find tasks in 'research' phase, prioritize and add to sprint","var_1 = works_list(stage.name=[""research""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Retrieve work items of type ""task"" and summarize","var_1 = works_list(type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
"Search for issues created by user ""USER-789"", get their sprint ID, and add all tasks of type ""issue"" to that sprint.","var_1 = search_object_by_name(query=""USER-789"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Summarize and prioritize my P1 issues, then assign the most critical to me","var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p1""], owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
Find tickets needing a response from Rev organization REV-456 and prioritize them.,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
"Summarize the work related to part ""GADG-321"" and created by user ""ENG-456""","var_1 = search_object_by_name(query=""GADG-321"")
var_2 = search_object_by_name(query=""ENG-456"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2], type=[""issue"", ""ticket"", ""task""])
var_4 = summarize_objects(objects=var_3)
"
Identify and summarize all issues owned by user DEVU-789 in the 'development' stage,"var_1 = works_list(owned_by=[""DEVU-789""], stage.name=[""development""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Summarize my assigned tasks and filter them by part PROD-456,"var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1], applies_to_part=[""PROD-456""])
var_3 = summarize_objects(objects=var_2)
"
Find work items for REV-456 and summarize them,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Add all tasks created by user USR-321 to the current sprint,"var_1 = who_am_i()
var_2 = works_list(created_by=[""USR-321""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Identify and prioritize urgent enhancements requested by VIP clients,"var_1 = works_list(issue.priority=[""urgent""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Retrieve the current user's ID and summarize their tasks.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Locate tasks with the work type ticket owned by HelpdeskAgent and summarize them with a limit of 35 work items.,"var_1 = search_object_by_name(query=""HelpdeskAgent"")
var_2 = works_list(owned_by=[var_1], type=[""ticket""], limit=35)
var_3 = summarize_objects(objects=var_2)
"
Find high priority tasks assigned to user USER-321 and organize them by priority,"var_1 = works_list(owned_by=[""USER-321""], issue.priority=[""p0"", ""p1""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
Add new high priority tickets to the sprint for review,"var_1 = works_list(issue.priority=[""p0""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Retrieve the current sprint ID and summarize the tasks assigned to me within it,"var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
Find tasks related to feature Y and update their progress in the system,"var_1 = search_object_by_name(query=""feature Y"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
"
"For the current user, get all tasks in the 'development' stage, filter them by type 'task', and summarize the output.","var_1 = who_am_i()
var_2 = works_list(stage.name=[""development""], owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Summarize the tasks related to the ""Project-X"" sprint and prioritize them","var_1 = search_object_by_name(query=""Project-X"")
var_2 = works_list(stage.name=[""sprint""], applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"Assign the high severity tickets to developer ""DEV-321""","#Unanswerable_Invalid_Query_Error
"
"Extract tasks from meeting notes ""Project Kickoff"" and assign them to user USER-321.","var_1 = create_actionable_tasks_from_text(text=""Project Kickoff"")
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""USER-321"")
"
Identify and prioritize issues created by user USER-XYZ,"var_1 = works_list(type=[""issue""], created_by=[""USER-XYZ""])
var_2 = prioritize_objects(objects=var_1)
"
Search for a part named 'WidgetA' and list all tasks associated with it,"var_1 = search_object_by_name(query=""WidgetA"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
"
Filter my issues by priority P2 and summarize,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Identify and summarize high priority tasks for the engineering team,"var_1 = works_list(created_by=[""engineering""], issue.priority=[""p0"", ""p1""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
"Retrieve my tasks from ""QA-Testing"" and ""Documentation"" parts and list them by high priority","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], applies_to_part=[""QA-Testing"", ""Documentation""], issue.priority=[""high""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
How do I troubleshoot a computer that won't turn on?,#Unanswerable_Invalid_Query_Error
Summarize my resolved tickets and identify if any follow-up tasks are needed,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""resolved""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Generate a list of issues for 'Product XYZ' and prepare a prioritized summary,"var_1 = search_object_by_name(query=""Product XYZ"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Summarize my issues with p2 priority,"var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p2""], owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Generate tasks from the discussion notes in the document Doc567 and add them to my sprint,"var_1 = create_actionable_tasks_from_text(text=""Doc567"")
var_2 = who_am_i()
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
Prioritize tickets needing response from 'TechCorp' and list them,"var_1 = search_object_by_name(query=""TechCorp"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
" Find similar tasks to TASK-234, summarize them, and prioritize them, limiting the number of work items to 33.","var_1 = get_similar_work_items(work_id=""TASK-234"")
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
Identify and summarize all tasks overdue for completion,"var_1 = works_list(stage.name=[""overdue""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
" Find similar tickets to TICK-456, prioritize them, and add them to the current sprint, limiting the number of work items to 20.","var_1 = get_similar_work_items(work_id=""TICK-456"")
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Get current user's P1 issues from Rev organization REV-999 and summarize them,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""REV-999"")
var_3 = works_list(issue.priority=[""p1""], owned_by=[var_1], issue.rev_orgs=[var_2], type=[""issue""])
var_4 = summarize_objects(objects=var_3)
"
Get the ID of the sprint containing the work item TASK-321,"var_1 = get_similar_work_items(work_id=""TASK-321"")
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Find tasks related to ""Critical Update"" and add them to my current sprint","var_1 = search_object_by_name(query=""Critical Update"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1])
var_3 = get_sprint_id()
var_4 = who_am_i()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Add high priority issues to my sprint, excluding those related to part PROD-456.","var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], issue.priority=[""p0""], type=[""issue""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)
"
Find the current sprint ID,"var_1 = get_sprint_id()
"
Prioritize my tasks that need a response and summarize the results,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Identify work items related to the ""Hardware Upgrade"" task and summarize the tickets within it","var_1 = search_object_by_name(query=""Hardware Upgrade"")
var_2 = works_list(applies_to_part=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Could there be hidden dimensions or realms beyond our current perception?,#Unanswerable_Invalid_Query_Error
Find and prioritize tasks assigned to me that are related to ENH-999,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""ENH-999"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
"
"List all my work items that need a response, summarize them, and then generate tasks from this summary.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
var_4 = create_actionable_tasks_from_text(text=var_3)
"
Create tasks from meeting notes Notes and prioritize them,"var_1 = create_actionable_tasks_from_text(text=""Notes"")
var_2 = prioritize_objects(objects=var_1)
"
"Find tickets that need a response, prioritize by severity, and assign them to the support team's current sprint","var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Give me a summary of all tickets that need a response from the Rev organization REV-999,"var_1 = search_object_by_name(query=""REV-999"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Find all tickets requiring response for 'REV-999', create a summary, and locate the ones with 'blocker' severity.","var_1 = works_list(ticket.needs_response=True, ticket.rev_org=[""REV-999""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = works_list(ticket.severity=[""blocker""], ticket.rev_org=[""REV-999""], type=[""ticket""])
"
"Generate a summary for all the Rev organization ""REV-999"" tickets and categorize them by severity","var_1 = search_object_by_name(query=""REV-999"")
var_2 = works_list(type=[""ticket""], ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Generate a report of P1 tickets owned by user USER-567 and summarize the findings,"var_1 = search_object_by_name(query=""USER-567"")
var_2 = works_list(type=[""ticket""], issue.priority=[""p1""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Get the current user's ID and display all their tickets,"var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
"
List all tasks for the current user and organize them by priority,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Extract urgent issues from the transcript of the latest project meeting and prioritize them,"var_1 = create_actionable_tasks_from_text(text=""latest project meeting transcript"")
var_2 = prioritize_objects(objects=var_1)
"
"Search for work items from 'REV-321', prioritize and add to sprint 'SPRINT-789'","var_1 = works_list(owned_by=[""REV-321""], type=[""issue"", ""ticket"", ""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-789"")
"
Get a report on the current sprint's tickets with severity 'medium' and summarize the report,"var_1 = get_sprint_id()
var_2 = works_list(ticket.severity=[""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Summarize issues created by me with 'p0' priority for reporting,"var_1 = who_am_i()
var_2 = works_list(type=[""issue""], created_by=[var_1], issue.priority=[""p0""])
var_3 = summarize_objects(objects=var_2)
"
"Identify all tickets assigned to me in ""Development"" stage with medium severity and prioritize them","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""Development""], ticket.severity=[""medium""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
"Identify work items created by ""Manager123"" in the ""QA"" stage and provide their summary","var_1 = works_list(created_by=[""Manager123""], stage.name=[""QA""])
var_2 = summarize_objects(objects=var_1)
"
Add issues related to 'Feature-A' and 'Feature-B' to my current sprint,"var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(applies_to_part=[""Feature-A"", ""Feature-B""], owned_by=[var_1], type=[""issue""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)
"
"Retrieve the latest tickets from the Sales department, summarize them for the weekly sales meeting","var_1 = search_object_by_name(query=""Sales department"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"For the issue with ID ""ISSUE-789"", find similar work items and list them by priority","var_1 = get_similar_work_items(work_id=""ISSUE-789"")
var_2 = prioritize_objects(objects=var_1)
"
Add newly created P2 tickets to the sprint for monitoring,"var_1 = get_sprint_id()
var_2 = works_list(type=[""ticket""], issue.priority=[""p2""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
Summarize P2 tickets this month for team X and prioritize,"var_1 = search_object_by_name(query=""team X"")
var_2 = works_list(type=[""ticket""], issue.priority=[""p2""], issue.rev_orgs=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Could the universe be a vast canvas, and each individual life a unique stroke of cosmic art?",#Unanswerable_Invalid_Query_Error
"Find work items for part CAPL-123, filter by Rev organization REV-456, and summarize the results.","var_1 = works_list(applies_to_part=[""CAPL-123""], issue.rev_orgs=[""REV-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"For the 'CustomerX' issue, get similar work items, add them to a new task list, and prioritize it based on severity","var_1 = search_object_by_name(query=""CustomerX"")
var_2 = get_similar_work_items(work_id=var_1)
var_3 = prioritize_objects(objects=var_2)
"
" Prioritize all work items in the TESTING stage and summarize them, limiting the number of work items to 29.","var_1 = works_list(stage.name=[""TESTING""], limit=29)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Find tickets related to the ""DevOps"" project and give the ""high"" and ""blocker"" severity ones ","var_1 = search_object_by_name(query=""DevOps"")
var_2 = works_list(ticket.severity=[""high"", ""blocker""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Find issues related to ""ProjectX"" and determine if any require urgent responses","var_1 = search_object_by_name(query=""ProjectX"")
var_2 = works_list(type=[""issue""], applies_to_part=[var_1], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
"Analyze customer complaints from 'FeedbackForm-999', prioritize them, and assign to current sprint.","var_1 = search_object_by_name(query=""FeedbackForm-999"")
var_2 = create_actionable_tasks_from_text(text=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Retrieve and summarize tickets in need of response from Rev organization REV-999,"var_1 = works_list(ticket.rev_org=[""REV-999""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Summarize my tasks related to ""ENH-789"" and created by user ""USER-555"".","var_1 = who_am_i()
var_2 = search_object_by_name(query=""ENH-789"")
var_3 = search_object_by_name(query=""USER-555"")
var_4 = works_list(applies_to_part=[var_2], created_by=[var_3], owned_by=[var_1], type=[""task""])
var_5 = summarize_objects(objects=var_4)
"
Find and prioritize tasks related to the REV-456 Rev organization and add them to the current sprint.,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Find similar issues to ISSU-123, summarize them, and add them to the current sprint, limiting the number of work items to 10.","var_1 = get_similar_work_items(work_id=""ISSU-123"")
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Extract actionable tasks from the project kickoff notes T and prioritize them,"var_1 = create_actionable_tasks_from_text(text=""project kickoff notes T"")
var_2 = prioritize_objects(objects=var_1)
"
Generate a report of all CAPL-456 related tickets with medium severity and identify which need responses,"var_1 = works_list(ticket.severity=[""medium""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Create tasks from my project notes and summarize the new work items,"var_1 = who_am_i()
var_2 = create_actionable_tasks_from_text(text=var_1)
var_3 = summarize_objects(objects=var_2)
"
What are the best strategies for investing in the stock market?,#Unanswerable_Invalid_Query_Error
"For all ""blocker"" severity tickets, summarize and identify similar work items.","var_1 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_similar_work_items(work_id=var_1[0])
"
"Retrieve similar work items to ""TASK-321"", add them to the sprint, and summarize","var_1 = get_similar_work_items(work_id=""TASK-321"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
var_4 = summarize_objects(objects=var_1)
"
"Fetch and summarize my tasks related to the ""user experience"" part","var_1 = who_am_i()
var_2 = search_object_by_name(query=""user experience"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
Could there be a higher purpose to existence that transcends individual aspirations and desires?,#Unanswerable_Invalid_Query_Error
Provide a summary of all issues raised by user 'UserX' that need a response,"var_1 = works_list(type=[""issue""], created_by=[""UserX""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)
"
Get tasks under 'QA' stage and summarize tasks for user 'TestLead',"var_1 = search_object_by_name(query=""TestLead"")
var_2 = works_list(owned_by=[var_1], stage.name=[""QA""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Get a list of P1 issues and summarize them for reporting,"var_1 = works_list(issue.priority=[""p1""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Find tickets that need a response, sort by severity, and summarize for quick review","var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Retrieve and summarize tasks related to the ""AlphaProject"" and then prioritize these tasks","var_1 = search_object_by_name(query=""AlphaProject"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"Generate a list of all tasks under the ""QA-Testing"" stage and add them to the sprint for review","var_1 = works_list(stage.name=[""QA-Testing""], type=[""task""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Get current sprint ID and add new critical task 'TASK-911' to it.,"var_1 = get_sprint_id()
var_2 = add_work_items_to_sprint(work_ids=[""TASK-911""], sprint_id=var_1)
"
Add new high-priority tasks to my current sprint and provide a summary,"var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1], issue.priority=[""p0""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = summarize_objects(objects=var_3)
"
Summarize all tickets needing a response and sort them by their source channel,"var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Identify and summarize tickets that need a response for user Q,"var_1 = search_object_by_name(query=""user Q"")
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Get the summary of tickets created by me with severity ""blocker"" and link them to the part ""PROD-999""","var_1 = who_am_i()
var_2 = search_object_by_name(query=""PROD-999"")
var_3 = works_list(created_by=[var_1], ticket.severity=[""blocker""], applies_to_part=[var_2], type=[""ticket""])
var_4 = summarize_objects(objects=var_3)
"
Retrieve and summarize tasks in 'development' stage for part PROD-789,"var_1 = works_list(stage.name=[""development""], applies_to_part=[""PROD-789""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Search for P1 issues related to the 'User Experience' part and provide a summary,"var_1 = search_object_by_name(query=""User Experience"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
" Retrieve work items of type task related to part DB-REFORM, prioritize them, and limit the results to 20.","var_1 = search_object_by_name(query=""DB-REFORM"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""], limit=20)
var_3 = prioritize_objects(objects=var_2)
"
"Identify my issues in 'development' stage, summarize and add to my current sprint.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
" Find work items created by User456, prioritize them, and add them to the current sprint, limiting the results to 45.","var_1 = search_object_by_name(query=""User456"")
var_2 = works_list(created_by=[var_1], limit=45)
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Get a list of all ""issue"" type work items in the ""QA"" stage and get their sprint ID.","var_1 = works_list(stage.name=[""QA""], type=[""issue""])
var_2 = get_sprint_id()
"
" Summarize all P3 issues under the BetaProject part and add them to the current sprint, limiting the number of work items to 28.","var_1 = works_list(applies_to_part=[""BetaProject""], issue.priority=[""p3""], limit=28, type=[""issue""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"For the user DEVU-456, find all their 'task' type work items and generate a summary","var_1 = works_list(type=[""task""], owned_by=[""DEVU-456""])
var_2 = summarize_objects(objects=var_1)
"
"Is the pursuit of knowledge a noble endeavor, or does it lead to existential discontent?",#Unanswerable_Invalid_Query_Error
Find work items similar to task Task-234 and add them to the current sprint,"var_1 = get_similar_work_items(work_id=""Task-234"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Retrieve current sprint ID and add any new high priority tickets to it,"var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p0""], ticket.severity=[""high""], type=[""ticket""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"Get the work items for part ""PART-987"" with priority ""p2"", then add them to the sprint with ID ""SPRINT-456""","var_1 = works_list(applies_to_part=[""PART-987""], issue.priority=[""p2""], type=[""issue""])
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-456"")
"
Create tasks from the insights of meeting notes 'MeetingNote-432' and assign them to team 'Team-56'.,"var_1 = search_object_by_name(query=""MeetingNote-432"")
var_2 = create_actionable_tasks_from_text(text=var_1)
var_3 = search_object_by_name(query=""Team-56"")
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Retrieve my items of type 'issue', prioritize them, and associate them with customer ""CLIENT-789""","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = search_object_by_name(query=""CLIENT-789"")
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Find my issues with an upper limit of 30, summarize the contents followed by addition to the sprint","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p0"", ""p1"", ""p2""], limit=30, type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
Search for a work item with the name 'QuickFix' and prioritize the similar items found,"var_1 = search_object_by_name(query=""QuickFix"")
var_2 = get_similar_work_items(work_id=var_1)
var_3 = prioritize_objects(objects=var_2)
"
"Prioritize all issues, and tickets that need a response and are in the 'testing' stage","var_1 = works_list(ticket.needs_response=True, stage.name=[""testing""], type=[""issue"", ""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
Add all blocker tickets created by user USER-567 to the current sprint,"var_1 = works_list(created_by=[""USER-567""], ticket.severity=[""blocker""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Summarize tasks for `ENH-789` and check if any high severity tickets are present.,"var_1 = works_list(type=[""task""], applies_to_part=[""ENH-789""], ticket.severity=[""high""])
var_2 = summarize_objects(objects=var_1)
"
Search work items created by user USER-XYZ in the QA stage,"var_1 = search_object_by_name(query=""USER-XYZ"")
var_2 = works_list(created_by=[var_1], stage.name=[""QA""], type=[""issue"", ""ticket"", ""task""])
"
What if the purpose of life is not to achieve but to experience and learn?,#Unanswerable_Invalid_Query_Error
"Is there a universal moral compass, or is morality a cultural construct?",#Unanswerable_Invalid_Query_Error
Summarize my P1 issues and check if any need responses from the 'Support' channel,"var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p1""], owned_by=[var_1], ticket.source_channel=[""Support""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Summarize the current sprint's work items and find similar tasks to improve efficiency,"var_1 = get_sprint_id()
var_2 = works_list()
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"List all tickets that need a response, summarize, and then add them to sprint SPRINT-789.","var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
Extract actionable tasks from meeting notes 'MeetingNotesA' and prioritize them.,"var_1 = create_actionable_tasks_from_text(text=""MeetingNotesA"")
var_2 = prioritize_objects(objects=var_1)
"
"Find the ID of the current user, list their work items in 'development' stage, and summarize the tasks","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Prioritize my tasks and filter by Rev organization REV-TEAM,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.rev_orgs=[""REV-TEAM""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Retrieve my tasks awaiting response and organize them by urgency,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Find issues related to component X and organize them by priority,"var_1 = search_object_by_name(query=""component X"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
"Generate a list of tasks for the ""Product Launch"" project and summarize them","var_1 = search_object_by_name(query=""Product Launch"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Provide a summarized list of my work items that need a response,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve the current sprint ID and get a summary of all tickets from the social media channel,"var_1 = get_sprint_id()
var_2 = works_list(ticket.source_channel=[""social media""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Generate a list of P1 tickets from the 'support' Rev organization and add them to my sprint.,"var_1 = search_object_by_name(query=""support"")
var_2 = works_list(issue.rev_orgs=[var_1], issue.priority=[""p1""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Find issues related to project Alpha, filter by p3 priority, and list work created by user USER-XYZ","var_1 = search_object_by_name(query=""project Alpha"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p3""], created_by=[""USER-XYZ""], type=[""issue""])
"
"Could the universe be a vast tapestry of interconnected stories, with each life contributing to the narrative?",#Unanswerable_Invalid_Query_Error
Summarize all tickets with 'medium' severity that require a response and are assigned to the 'Customer Support' team,"var_1 = works_list(ticket.severity=[""medium""], ticket.needs_response=True, owned_by=[""Customer Support""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Summarize my tickets which need response from the client-side project,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Return the ID of the current user and list all of their issues with the stage name ""in-progress""","var_1 = who_am_i()
var_2 = works_list(stage.name=[""in-progress""], owned_by=[var_1], type=[""issue""])
"
"Generate a report of the current sprint's work items, summarize the progress, and identify any blockers.","var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
Create a prioritized list of enhancements for the 'Billing' feature to tackle current sprint.,"var_1 = search_object_by_name(query=""Billing"")
var_2 = get_sprint_id()
var_3 = works_list(applies_to_part=[var_1], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
var_5 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_2)
"
"For issues in the ""QA"" stage, identify those related to ""CAPL-789"" and summarize the issues with priority ""p2"".","var_1 = search_object_by_name(query=""CAPL-789"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""QA""], issue.priority=[""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"What if our dreams are glimpses into parallel dimensions, and the dream world is as real as waking life?",#Unanswerable_Invalid_Query_Error
Can you provide the history of the Great Wall of China?,#Unanswerable_Invalid_Query_Error
"Is the concept of good and evil a human construct, or does it have a universal basis?",#Unanswerable_Invalid_Query_Error
"Find all tasks related to the ""Backlog"" stage, filter them by ""p0"" priority, and then summarize the list.","var_1 = works_list(type=[""task""], stage.name=[""Backlog""], issue.priority=[""p0""])
var_2 = summarize_objects(objects=var_1)
"
Summarize the open issues for component COMP-321,"var_1 = search_object_by_name(query=""COMP-321"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Summarize tickets that are associated with 'ProjectX' and have a source channel of 'email',"var_1 = search_object_by_name(query=""ProjectX"")
var_2 = works_list(ticket.source_channel=[""email""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Find the current sprint ID and list all my issues with priority P2,"var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(type=[""issue""], issue.priority=[""p2""], owned_by=[var_1])
"
Add urgent enhancement tickets from the REV-456 organization to my sprint,"var_1 = get_sprint_id()
var_2 = works_list(issue.rev_orgs=[""REV-456""], ticket.severity=[""urgent""], type=[""ticket""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"Identify my tasks with low priority and add them to the sprint with ID ""SPRINT-456""","var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1], issue.priority=[""p3""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-456"")
"
"Find similar work items to TASK-321, summarize and associate them with Rev organization ORG-789","var_1 = get_similar_work_items(work_id=""TASK-321"")
var_2 = search_object_by_name(query=""ORG-789"")
var_3 = works_list(issue.rev_orgs=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
Find and summarize all blocker severity issues,"var_1 = works_list(issue_severity=[""blocker""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Could the concept of good and evil be fluid, evolving with the changing dynamics of society?",#Unanswerable_Invalid_Query_Error
Prioritize tickets related to the 'QA' stage and summarize the top-priority ones,"var_1 = works_list(stage.name=[""QA""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=[var_2[0]])
"
"What if the universe is a living, evolving entity, and we are just small components of its existence?",#Unanswerable_Invalid_Query_Error
Priortize and summarize the current sprint's tasks,"var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
What are the visa requirements for traveling to Japan?,#Unanswerable_Invalid_Query_Error
"Summarize my tasks with ""medium"" severity and find similar work items","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""medium""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_similar_work_items(work_id=var_2)
"
"Find and list tasks related to the project ""ProjectX"" and categorize them by status","var_1 = search_object_by_name(query=""ProjectX"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
"
Summarize and prioritize tasks for user 'USER-XYZ' in 'development' stage.,"var_1 = works_list(type=[""task""], owned_by=[""USER-XYZ""], stage.name=[""development""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Summarize all tickets that need a response from the WEB source channel and limit the number of work items to 45.,"var_1 = works_list(ticket.source_channel=[""WEB""], ticket.needs_response=True, limit=45, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
" Retrieve all blocker severity tickets owned by TechLeadTom, add them to the current sprint, and summarize them, limiting the number of work items to 28.","var_1 = works_list(owned_by=[""TechLeadTom""], ticket.severity=[""blocker""], type=[""ticket""], limit=28)
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
var_4 = summarize_objects(objects=var_1)
"
"Check for tickets that need a response, summarize them, and prioritize.","var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
Prioritize tickets from Rev organization REV-456 that need a response and add them to the current sprint,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Find all issues related to the Rev organization REV-999 with priority P2, summarize them","var_1 = works_list(issue.rev_orgs=[""REV-999""], issue.priority=[""p2""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Create tasks from project update notes P and assign to development team,"var_1 = create_actionable_tasks_from_text(text=""P"")
var_2 = search_object_by_name(query=""development team"")"
"Find tickets related to 'GammaServices' with a source channel of email, summarize for easy viewing ","var_1 = search_object_by_name(query=""GammaServices"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.source_channel=[""email""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"For ""Gamma"" feature, get the issues, summarize, and add to my sprint if they are high priority","var_1 = search_object_by_name(query=""Gamma"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""high""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = who_am_i()
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_5)
"
What are the upcoming video game releases for this year?,#Unanswerable_Invalid_Query_Error
"Find work items related to component ""UI-Enhancements"", summarize the work, and identify the top priority tasks","var_1 = search_object_by_name(query=""UI-Enhancements"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
Retrieve and summarize work items for project PROJ-456 in the 'testing' stage,"var_1 = search_object_by_name(query=""PROJ-456"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""testing""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Summarize and sort my p0, 01 priority issues","var_1 = who_am_i()
var_2 = works_list(type=[""issue""], issue.priority=[""p0"", ""p1""], owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Identify my tasks, prioritize them, and return a summarized list","var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
What are the safety precautions for hiking in bear country?,#Unanswerable_Invalid_Query_Error
Retrieve the ID of the sprint named 'Sprint 42' and add newly created tickets to it,"var_1 = search_object_by_name(query=""Sprint 42"")
var_2 = works_list(created_by=[who_am_i()], type=[""ticket""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"Is reality a stable construct, or does it shift based on our observations and beliefs?",#Unanswerable_Invalid_Query_Error
Summarize the tasks for the upcoming product launch and prioritize them.,"var_1 = search_object_by_name(query=""upcoming product launch"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"Summarize CAPL-123 related work, get the user's ID, and check for similar work items","var_1 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[""CAPL-123""])
var_2 = summarize_objects(objects=var_1)
var_3 = who_am_i()
var_4 = get_similar_work_items(work_id=var_3)
"
What are my all issues in the triage stage under part FEAT-123? Summarize them.,"var_1 = who_am_i()
var_2 = works_list(stage.name=[""triage""], applies_to_part=[""FEAT-123""], owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Summarize my tasks for the 'NextGen' project and list them by their importance.,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""NextGen"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)
"
"Is the search for meaning a universal human quest, or is it a subjective pursuit?",#Unanswerable_Invalid_Query_Error
"For the ""CustomerX"" issue, get similar work items, add any P0 issues to the current sprint","var_1 = search_object_by_name(query=""CustomerX"")
var_2 = get_similar_work_items(work_id=var_1)
var_3 = works_list(issue.priority=[""p0""], type=[""issue""])
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Generate a list of tasks from the discussion notes T and prioritize them,"var_1 = create_actionable_tasks_from_text(text=""T"")
var_2 = prioritize_objects(objects=var_1)
"
"Retrieve the current sprint ID and add all tasks labeled as ""documentation"" to it","var_1 = get_sprint_id()
var_2 = works_list(type=[""documentation""], type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
Create tasks for notes from meeting M and add them to sprint S12345,"var_1 = create_actionable_tasks_from_text(text=""notes from meeting M"")
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""S12345"")
"
Find similar work items to TASK-321 and summarize their details,"var_1 = get_similar_work_items(work_id=""TASK-321"")
var_2 = summarize_objects(objects=var_1)
"
Prioritize and add to the sprint all tasks I own in the 'in progress' stage,"var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], stage.name=[""in progress""], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
var_5 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_2)
"
Find tasks related to project Alpha and categorize them by priority,"var_1 = search_object_by_name(query=""project Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
" Summarize and prioritize tickets with severity blocker for the PROJECT_MANAGEMENT team, limiting the results to 15.","var_1 = works_list(ticket.severity=[""blocker""], ticket.rev_org=[""PROJECT_MANAGEMENT""], type=[""ticket""], limit=15)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Prioritize tasks related to the 'Frontend' part and summarize them,"var_1 = search_object_by_name(query=""Frontend"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Prioritize and add to sprint all blocker tickets from the REV-789 organization,"var_1 = search_object_by_name(query=""REV-789"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""blocker""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
" Retrieve similar work items to TICKET-456, prioritize them, and limit the number of work items to 33.","var_1 = get_similar_work_items(work_id=""TICKET-456"")
var_2 = prioritize_objects(objects=var_1)
"
" Summarize all P1 issues from the IotaInitiative rev organization and add them to the current sprint, limiting the number of work items to 30.","var_1 = works_list(issue.rev_orgs=[""IotaInitiative""], issue.priority=[""p1""], type=[""issue""], limit=30)
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"Generate a list of tasks based on the insights from text 'Meeting notes Q1', and add them to my sprint","var_1 = create_actionable_tasks_from_text(text=""Meeting notes Q1"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"Find the current user's tickets with 'medium' severity, summarize, and then add them to the sprint with ID SPRINT-789","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-789"")
"
Summarize all issues related to part CAPL-123 with priority P2,"var_1 = works_list(type=[""issue""], applies_to_part=[""CAPL-123""], issue.priority=[""p2""])
var_2 = summarize_objects(objects=var_1)
"
" Retrieve all tasks created by ManagerMia, prioritize them, and add them to the current sprint, limiting the number of work items to 25.","var_1 = works_list(created_by=[""ManagerMia""], type=[""task""], limit=25)
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Find p3 priority issues for user USER-987 and order them by priority,"var_1 = search_object_by_name(query=""USER-987"")
var_2 = works_list(type=[""issue""], created_by=[var_1], issue.priority=[""p3""])
var_3 = prioritize_objects(objects=var_2)
"
"Find the most recent issues related to ""CAPL-456"" that need a response, and prioritize them.","var_1 = search_object_by_name(query=""CAPL-456"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
Add work items related to ENH-789 to the sprint after summarizing them,"var_1 = search_object_by_name(query=""ENH-789"")
var_2 = works_list(applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=get_sprint_id())
"
"Retrieve my work items for PROD-234, and summarize the top priority items","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], applies_to_part=[""PROD-234""], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
List p3 priority tickets for response and add to sprint,"var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p3""], ticket.needs_response=True, type=[""ticket""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"Hello, how are you?",#Unanswerable_Invalid_Query_Error
Assign tickets from customer ACME with low severity to the current sprint,"var_1 = search_object_by_name(query=""ACME"")
var_2 = works_list(ticket.severity=[""low""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Summarize tickets needing response for ""REV-321""","var_1 = search_object_by_name(query=""REV-321"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Identify and summarize the most urgent tickets for the 'Support' team.,"var_1 = search_object_by_name(query=""Support"")
var_2 = works_list(type=[""ticket""], ticket.severity=[""blocker"", ""high""], ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Summarize all issues in the CODE_REVIEW stage created by SeniorDev and limit the number of work items to 28.,"var_1 = search_object_by_name(query=""SeniorDev"")
var_2 = works_list(created_by=[var_1], stage.name=[""CODE_REVIEW""], type=[""issue""], limit=28)
var_3 = summarize_objects(objects=var_2)
"
"Could the universe be a vast library of information, and each life a unique book waiting to be explored?",#Unanswerable_Invalid_Query_Error
"Find and summarize all tickets related to ""CAPL-987"" and then prioritize and add to sprint ""Sprint-22""","var_1 = search_object_by_name(query=""CAPL-987"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = add_work_items_to_sprint(work_ids=var_4, sprint_id=""Sprint-22"")
"
Retrieve all Rev organization related tickets and summarize,"var_1 = works_list(issue.rev_orgs=[""Rev organization""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"For user DEVU-789, summarize tasks with 'low' priority that are associated with Rev organization 'REV-456'","var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(type=[""task""], owned_by=[""DEVU-789""], ticket.severity=[""low""], ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Summarize my tasks in 'review' stage for part 'API-789',"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""review""], applies_to_part=[""API-789""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Find tasks related to the CAPL-999 part that I own and get a summary,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], applies_to_part=[""CAPL-999""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve a list of tasks related to the 'QA-Testing' process and identify any that are overdue.,"var_1 = works_list(type=[""task""])
var_2 = prioritize_objects(objects=var_1) "
"Identify all tickets from ""VIP-Support"" channel and escalate them.","var_1 = works_list(ticket.source_channel=[""VIP-Support""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
Get a summary of my completed tasks from the last sprint for performance review,"var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], stage.name=[""completed""], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
"Find similar tasks to TASK-321, summarize them and associate them with part PART-456","var_1 = get_similar_work_items(work_id=""TASK-321"")
var_2 = summarize_objects(objects=var_1)
var_3 = search_object_by_name(query=""PART-456"")
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
Find issues that need responses for project Alpha123 and summarize them,"var_1 = search_object_by_name(query=""Alpha123"")
var_2 = works_list(ticket.needs_response=True, applies_to_part=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Locate all issues from the customer ""AcmeCorp"" and summarize them for reporting","var_1 = search_object_by_name(query=""AcmeCorp"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Get work items of type ‘task’ and prioritize them,"var_1 = works_list(type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
Prioritize and summarize tasks from source channel 'email' for user DEVU-456,"var_1 = works_list(created_by=[""DEVU-456""], ticket.source_channel=[""email""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Is life a journey with a predetermined destination, or do we forge our own paths?",#Unanswerable_Invalid_Query_Error
Summarize and prioritize all tickets from the CUSTOMER_SERVICE source channel with a limit of 25 work items.,"var_1 = works_list(ticket.source_channel=[""CUSTOMER_SERVICE""], limit=25, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
List my tasks with a 'high' priority and summarize them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""high""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Get all tickets from the current sprint with priority p3 and create a detailed summary,"var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p3""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve and summarize work items created by a user from the REV-456 organization,"var_1 = search_object_by_name(query=""a user"")
var_2 = works_list(type=[""task""], issue.rev_orgs=[""REV-456""], created_by=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Add new high-priority tickets from REV-456 to my sprint,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.severity=[""high""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Generate a list of ""issue"" type work items for the ""QA"" team and summarize","var_1 = works_list(created_by=[""QA""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Summarize tasks related to part ENH-123 created by user UXD-456,"var_1 = search_object_by_name(query=""ENH-123"")
var_2 = works_list(created_by=[""UXD-456""], applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve current sprint ID and add all my tasks with ""medium"" severity to it.","var_1 = who_am_i()
var_2 = works_list(type=[""task""], ticket.severity=[""medium""], owned_by=[var_1])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Get a list of all open issues from the customer 'MegaCorp', summarize and then add to the backlog","var_1 = search_object_by_name(query=""MegaCorp"")
var_2 = works_list(type=[""issue""], ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"For the user ID ""USER-321"", summarize their tasks in the ""QA"" stage","var_1 = works_list(stage.name=[""QA""], owned_by=[""USER-321""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
"Find tasks related to project X, prioritize them, and add to sprint","var_1 = search_object_by_name(query=""Project X"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Add tasks related to ENH-789 for user USR-101 to the current sprint,"var_1 = works_list(applies_to_part=[""ENH-789""], owned_by=[""USR-101""], type=[""task""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Find and prioritize tasks related to ENH-789 and add to sprint,"var_1 = search_object_by_name(query=""ENH-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Find work items for component COMP-321 that need a response,"var_1 = search_object_by_name(query=""COMP-321"")
var_2 = works_list(ticket.needs_response=True, applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Extract tasks from the development team discussions and classify them by type,"var_1 = create_actionable_tasks_from_text(text=""development team discussions"")
var_2 = prioritize_objects(objects=var_1)
"
Summarize the tasks assigned to me with priority p2 and filter by part PROD-456,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""PROD-456"")
var_3 = works_list(owned_by=[var_1], issue.priority=[""p2""], applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
"Get the current sprint ID and list all tickets I need to respond to, then sort them by severity.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
"
Generate a list of issues needing response for team Beta123,"var_1 = works_list(issue.rev_orgs=[""Beta123""], ticket.needs_response=True, type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Create tasks from the action items discussed in the project ""PROJECT-A"" meeting notes","var_1 = create_actionable_tasks_from_text(text=""action items discussed in the project PROJECT-A meeting notes"")
"
"For tickets from channel 'email' with 'medium' severity, prioritize and summarize","var_1 = works_list(ticket.source_channel=[""email""], ticket.severity=[""medium""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Find and add similar issues to the sprint for the bug report BUG-999,"var_1 = get_similar_work_items(work_id=""BUG-999"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Find tickets related to ENH-456 and categorize by severity,"var_1 = search_object_by_name(query=""ENH-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""ticket""])
"
Extract tasks from the meeting notes M and prioritize them for the current sprint.,"var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Summarize the current sprint's work items created by user USER-321.,"var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""USER-321"")
var_3 = works_list(created_by=[var_2], type=[""work""])
var_4 = summarize_objects(objects=var_3)
"
"What are the top-rated tourist attractions in Rome, Italy?",#Unanswerable_Invalid_Query_Error
" Find work items related to part FEATURE-789, add them to the current sprint, and prioritize them, limiting the number of work items to 11.","var_1 = works_list(applies_to_part=[""FEATURE-789""], limit=11)
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
var_4 = prioritize_objects(objects=var_1)
"
Create a summary of my tasks that are overdue and prioritize them for completion,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
List all items of type 'issue' I own and summarize them for the current sprint,"var_1 = who_am_i()
var_2 = works_list(type=[""issue""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve and prioritize all 'blocker' severity tickets, then add them to sprint SPRINT-456","var_1 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-456"")
"
Fetch work items for part ENH-789 and filter for issues created by user USER-XYZ,"var_1 = search_object_by_name(query=""USER-XYZ"")
var_2 = works_list(type=[""issue""], applies_to_part=[""ENH-789""], created_by=[var_1])
"
"Identify and list all tasks for the component ""UI-FRAMEWORK"" in the design stage","var_1 = search_object_by_name(query=""UI-FRAMEWORK"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""design""], type=[""task""])
"
Identify and summarize tickets in need of a response from users in organization REV-456,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
"
" Retrieve and summarize work items of type issue for the LEGAL rev organization, limiting the results to 18.","var_1 = works_list(issue.rev_orgs=[""LEGAL""], type=[""issue""], limit=18)
var_2 = summarize_objects(objects=var_1)
"
"Find the current sprint ID and list all tasks within it, then summarize those tasks and search for any similar to ""TASK-456"".","var_1 = get_sprint_id()
var_2 = works_list(stage.name=[""current""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = search_object_by_name(query=""TASK-456"")
var_5 = get_similar_work_items(work_id=var_4)
"
Generate a summary of all tickets I own from the source channel 'email',"var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], owned_by=[var_1], ticket.source_channel=[""email""])
var_3 = summarize_objects(objects=var_2)
"
Locate and summarize tickets from 'email' channel with medium severity,"var_1 = works_list(ticket.source_channel=[""email""], ticket.severity=[""medium""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Find and prioritize tickets owned by me with 'blocker' severity,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""blocker""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Summarize and prioritize all P2 tickets that were created by DEVU-123 and are associated with REV-456.,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(type=[""ticket""], issue.priority=[""p2""], created_by=[""DEVU-123""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Retrieve and prioritize my support tickets from 'MobileApp' channels,"var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], owned_by=[var_1], ticket.source_channel=[""MobileApp""])
var_3 = prioritize_objects(objects=var_2)
"
Retrieve the sprint ID and add my 'blocker' severity tickets to it,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""blocker""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Retrieve and summarize all P0 issues under the ENGINEERING rev organization with a limit of 20 work items.,"var_1 = search_object_by_name(query=""ENGINEERING"")
var_2 = works_list(issue.priority=[""p0""], issue.rev_orgs=[var_1], type=[""issue""], limit=20)
var_3 = summarize_objects(objects=var_2)
"
Find all tasks related to the EPIC-456 and determine their current progress stages,"var_1 = works_list(type=[""task""], applies_to_part=[""EPIC-456""])
var_2 = summarize_objects(objects=var_1)
"
Retrieve a list of P2 issues that were created by user USER-456 and summarize the results,"var_1 = works_list(created_by=[""USER-456""], issue.priority=[""p2""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Generate tasks from meeting notes X and get the sprint ID,"var_1 = create_actionable_tasks_from_text(text=""X"")
var_2 = get_sprint_id()
"
Generate a list of tasks from the executive meeting notes and summarize the outcomes.,"var_1 = create_actionable_tasks_from_text(text=""executive meeting notes"")
var_2 = summarize_objects(objects=var_1)
"
"Summarize my tasks that need a response and are in the ""QA"" stage","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""QA""], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Create a summary of tickets needing response for the Rev organization REV-TECH,"var_1 = search_object_by_name(query=""REV-TECH"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve current sprint ID and append to it tasks related to part ENH-456 that need a response.,"var_1 = get_sprint_id()
var_2 = works_list(type=[""task""], applies_to_part=[""ENH-456""], ticket.needs_response=True)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"Search for the customer ""MegaCorp"" and extract all tasks related to their tickets","var_1 = search_object_by_name(query=""MegaCorp"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Get the ID of the current user and list their tasks with priority p2 under part TASK-789,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""TASK-789"")
var_3 = works_list(owned_by=[var_1], issue.priority=[""p2""], applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
"Prioritize and summarize all tickets from the ""TECH-SUPPORT"" channel","var_1 = works_list(ticket.source_channel=[""TECH-SUPPORT""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Find my tasks that are in the backlog stage and organize them by priority.,"var_1 = who_am_i()
var_2 = works_list(stage.name=[""backlog""], owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Find work items related to ""CAPL-123"" and prioritize the ones with a response needed","var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(ticket.needs_response=True, applies_to_part=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
"Summarize the tickets from REV-456, prioritize the top ones, and add them to the sprint with ID SPRINT-789","var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = add_work_items_to_sprint(work_ids=var_4, sprint_id=""SPRINT-789"")
"
Identify my tasks due and add them to my sprint dashboard,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Create tasks from meeting notes and assign them to DevTeam123.,"var_1 = create_actionable_tasks_from_text(text=""meeting notes"")
var_2 = search_object_by_name(query=""DevTeam123"")
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Create tasks from meeting notes M and prioritize for sprint planning,"var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Generate a summary of all p3 priority issues from ""Engineering"" organization","var_1 = works_list(issue.priority=[""p3""], issue.rev_orgs=[""Engineering""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Determine the sprint ID for the current set of work items and add them to the sprint,"var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"List all ""medium"" severity tickets owned by user ""DEVU-456"" and prioritize them","var_1 = works_list(type=[""ticket""], ticket.severity=[""medium""], owned_by=[""DEVU-456""])
var_2 = prioritize_objects(objects=var_1)
"
Retrieve current user ID and list their P1 tasks,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p1""], type=[""task""])
"
" Find work items owned by CoderCarl, prioritize them, and add them to the current sprint, limiting the number of work items to 13.","var_1 = works_list(owned_by=[""CoderCarl""], limit=13)
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Prioritize tasks created by ""USER-789"" and filter by ""issue.rev_orgs"" with value ""ORG-101""","var_1 = search_object_by_name(query=""USER-789"")
var_2 = works_list(created_by=[var_1], issue.rev_orgs=[""ORG-101""], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
"For the Rev organization ""ORG-321"", list all tickets that need a response and are from the email channel","var_1 = search_object_by_name(query=""ORG-321"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, ticket.source_channel=[""email""], type=[""ticket""])
"
Summarize tasks related to project PROJ-456 and check for any that need response,"var_1 = search_object_by_name(query=""PROJ-456"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Prioritize all tasks related to CAPL-789 and add them to the sprint with ID SPRINT-456,"var_1 = search_object_by_name(query=""CAPL-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-456"")
"
"List my tasks related to the project ""Alpha"" that are in the ""development"" stage and need a response","var_1 = who_am_i()
var_2 = search_object_by_name(query=""Alpha"")
var_3 = works_list(owned_by=[var_1], stage.name=[""development""], ticket.needs_response=True, applies_to_part=[var_2], type=[""task""])
"
"Get the ID for the user ""DevLead"" and list all blocker issues owned by them","var_1 = search_object_by_name(query=""DevLead"")
var_2 = works_list(owned_by=[var_1], issue.priority=[""blocker""], type=[""issue""])
"
"Find work items for the REV-TEAM org, summarize them, and then prioritize then","var_1 = works_list(issue.rev_orgs=[""REV-TEAM""], type=[""issue"", ""ticket"", ""task""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
" Summarize and prioritize tickets from the CHAT source channel with severity low, limiting the results to 27.","var_1 = works_list(ticket.source_channel=[""CHAT""], ticket.severity=[""low""], type=[""ticket""], limit=27)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Identify my tickets severity marked as ""blocker"", summarize and assign them to me","var_1 = who_am_i()
var_2 = works_list(ticket.severity=[""blocker""], owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=get_sprint_id())
"
"Identify all P3 priority tasks from the ""DEV-TEAM-ALPHA"" and sort by priority.","var_1 = search_object_by_name(query=""DEV-TEAM-ALPHA"")
var_2 = works_list(issue.priority=[""p3""], owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Find and prioritize all my tickets related to the rev organization REV-TEAM,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""REV-TEAM"")
var_3 = works_list(owned_by=[var_1], ticket.rev_org=[var_2], type=[""ticket""])
var_4 = prioritize_objects(objects=var_3)
"
"Identify and summarize the prioritized tickets for ""TechCorp""","var_1 = search_object_by_name(query=""TechCorp"")
var_2 = works_list(type=[""ticket""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Find and add all blocker tickets to the sprint for the 'QA' team,"var_1 = works_list(owned_by=[""QA""], ticket.severity=[""blocker""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
What if our understanding of reality is limited by the capacity of our sensory perception?,#Unanswerable_Invalid_Query_Error
Summarize and prioritize all tickets needing response from Rev organization REV-321,"var_1 = search_object_by_name(query=""REV-321"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Identify my work items needing a response, prioritize them, and add to sprint","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Retrieve my work items with 'blocker' severity and sort them by urgency,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""blocker""], type=[""issue"", ""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
Identify and summarize my P2 issues that belong to the 'QA' Rev organization,"var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p2""], issue.rev_orgs=[""QA""], owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
" Find and summarize tickets with severity low that need a response, limiting the results to 50.","var_1 = works_list(ticket.needs_response=True, ticket.severity=[""low""], type=[""ticket""], limit=50)
var_2 = summarize_objects(objects=var_1)
"
Filter issues for part PROD-456 with priority P1 and generated by Rev organization REV-ABC,"var_1 = search_object_by_name(query=""REV-ABC"")
var_2 = works_list(type=[""issue""], issue.priority=[""p1""], issue.rev_orgs=[var_1], applies_to_part=[""PROD-456""])
"
" Summarize and prioritize issues with priority P0 for the ENGINEERING rev organization, limiting the results to 30.","var_1 = works_list(issue.rev_orgs=[""ENGINEERING""], issue.priority=[""p0""], type=[""issue""], limit=30)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Get the current sprint ID for my reference,"var_1 = get_sprint_id()
"
"Is knowledge a burden, and is ignorance a form of blissful innocence?",#Unanswerable_Invalid_Query_Error
"Get all work items similar to TKT-123, summarize them, and prioritize them","var_1 = get_similar_work_items(work_id=""TKT-123"")
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
"Summarize the work items of type ""task"" owned by user ""USER-789"" and return the ID of the most similar work item to ""TASK-101"".","var_1 = works_list(type=[""task""], owned_by=[""USER-789""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_similar_work_items(work_id=""TASK-101"")
"
Identify and prioritize tickets from Rev organization REV-321 and add them to my sprint,"var_1 = search_object_by_name(query=""REV-321"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"For the sprint with ID SPRINT-999, add all blocker tickets that need a response","var_1 = works_list(ticket.severity=[""blocker""], ticket.needs_response=True, type=[""ticket""])
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-999"")
"
Retrieve the sprint ID and add all my tasks with 'blocker' severity to it,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""blocker""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Summarize the current sprint's tasks and issues assigned to ""TEAM-ABC""","var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], owned_by=[""TEAM-ABC""], type=[""task"", ""issue""])
var_3 = summarize_objects(objects=var_2)
"
Prioritize and summarize issues I created with 'p2' priority,"var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Identify and summarize all blocker tickets for the ""BetaFeature"" component.","var_1 = search_object_by_name(query=""BetaFeature"")
var_2 = works_list(ticket.severity=[""blocker""], applies_to_part=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Prioritize my tasks and allocate them to sprint ""Sprint_56""","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""Sprint_56"")
"
"Retrieve my work items in ""review"" stage, summarize, and prioritize them","var_1 = who_am_i()
var_2 = works_list(stage.name=[""review""], owned_by=[var_1], type=[""work""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_3)
"
Retrieve tickets with 'medium' severity that need a response and summarize the workload.,"var_1 = works_list(type=[""ticket""], ticket.severity=[""medium""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)
"
Generate summary report for my issues in 'development' stage,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Get my tasks in 'development' stage, prioritize them, and then summarize","var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1], stage.name=[""development""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Retrieve and summarize all Rev organization issues in need of a response,"var_1 = works_list(type=[""issue""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)
"
"List all tasks related to ""Project-X"" and sort them by priority","var_1 = search_object_by_name(query=""Project-X"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Prioritize issues by ""High Impact"" users and add them to my workload","var_1 = search_object_by_name(query=""High Impact"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = who_am_i()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Find and summarize issues that need a response for the current user,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve my tasks, summarize them, and prioritize issues for this week","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = works_list(owned_by=[var_1], type=[""issue""])
var_5 = prioritize_objects(objects=var_4)
"
Create tasks for P1 issues related to CAPL-456 and add them to sprint SPRINT-456,"var_1 = search_object_by_name(query=""CAPL-456"")
var_2 = works_list(issue.priority=[""p1""], applies_to_part=[var_1], type=[""issue""])
var_3 = create_actionable_tasks_from_text(text=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-456"")
"
Summarize tickets that need a response and are of medium severity,"var_1 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.severity=[""medium""])
var_2 = summarize_objects(objects=var_1)
"
Identify and prioritize any unresolved critical issues for subsystem XYZ-321,"var_1 = search_object_by_name(query=""XYZ-321"")
var_2 = works_list(type=[""issue""], applies_to_part=[var_1], issue.priority=[""p0""], issue.rev_orgs=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
"What if consciousness is a fundamental aspect of the universe, akin to space and time?",#Unanswerable_Invalid_Query_Error
Create a summary of work items of type 'issue' with 'p2' priority from the Rev organization 'REV-XYZ',"var_1 = search_object_by_name(query=""REV-XYZ"")
var_2 = works_list(issue.rev_orgs=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve my most urgent tickets that need responses and order them by priority,"var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
Extract and summarize key points from the latest development meeting notes T,"var_1 = create_actionable_tasks_from_text(text=""T"")
var_2 = summarize_objects(objects=var_1)
"
"Create tasks from the ""B"" kick-off meeting notes and prioritize them for this week's sprint","var_1 = create_actionable_tasks_from_text(text=""B kick-off meeting notes"")
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Identify and summarize low priority tasks in the design phase for the project PROJ-789,"var_1 = works_list(type=[""task""], stage.name=[""design""], ticket.severity=[""low""], applies_to_part=[""PROJ-789""])
var_2 = summarize_objects(objects=var_1)
"
"Identify tasks I own that need a response, summarize them for quick review","var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
What are the symptoms of the common cold?,#Unanswerable_Invalid_Query_Error
Create a list of all tickets with medium severity and summarize the results.,"var_1 = works_list(ticket.severity=[""medium""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Find open issues assigned to me and summarise them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Locate all tickets from Rev organization REV-456 and summarize them,"var_1 = works_list(issue.rev_orgs=[""REV-456""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Create a summary report of all tasks completed by the user USER-456,"var_1 = search_object_by_name(query=""USER-456"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Identify and list P2 issues related to ENH-456 and summarize for review,"var_1 = search_object_by_name(query=""ENH-456"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Generate a list of my P3 tickets, summarize and identify similar work items","var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], issue.priority=[""p3""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_similar_work_items(work_id=var_2[0])
"
Summarize my tasks related to the 'Revolution' project,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""Revolution"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
Retrieve and categorize work items from user USER-456,"var_1 = search_object_by_name(query=""USER-456"")
var_2 = works_list(created_by=[var_1], type=[""issue"", ""ticket"", ""task""])
"
Find similar work items to PROD-456 and provide a summary,"var_1 = search_object_by_name(query=""PROD-456"")
var_2 = get_similar_work_items(work_id=var_1)
var_3 = summarize_objects(objects=var_2)
"
Find tickets with medium severity from channel email search for the most relevant one and summarize them,"var_1 = works_list(ticket.severity=[""medium""], ticket.source_channel=[""email""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"For tickets marked 'blocker', find similar work items, and summarize","var_1 = works_list(type=[""ticket""], ticket.severity=[""blocker""])
var_2 = get_similar_work_items(work_id=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Identify my work items that need a response, summarize and prioritize them for today's review","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
" Locate issues in the Ready for Deployment stage, summarize them, and add them to the current sprint, limiting the results to 12.","var_1 = works_list(stage.name=[""Ready for Deployment""], limit=12, type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
Retrieve my tickets that need a response and summarize them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Find tasks related to component X and organize them by priority,"var_1 = search_object_by_name(query=""component X"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Identify and summarize the tasks associated with the component ""COMP-123"" that are in the ""testing"" stage","var_1 = search_object_by_name(query=""COMP-123"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1], stage.name=[""testing""])
var_3 = summarize_objects(objects=var_2)
"
"Locate work items related to the ""BetaLaunch"" part, add them to sprint ""SPRINT-789"", and then summarize and prioritize those in the ""development"" stage.","var_1 = search_object_by_name(query=""BetaLaunch"")
var_2 = works_list(applies_to_part=[var_1])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-789"")
var_4 = works_list(stage.name=[""development""], applies_to_part=[var_1])
var_5 = summarize_objects(objects=var_4)
var_6 = prioritize_objects(objects=var_4)
"
Find work items needing response for support team and categorize by severity,"var_1 = works_list(ticket.needs_response=True, ticket.source_channel=[""support""], limit=50)
var_2 = prioritize_objects(objects=var_1)
"
Retrieve my own work items that are tasks and add them to sprint ID SPRINT-123,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-123"")
"
"Locate the sprint ID for the current development cycle and add all ""blocker"" severity tickets to it","var_1 = get_sprint_id()
var_2 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
" Retrieve all tickets that need a response and are owned by SupportSam, summarize them, and add them to the current sprint, limiting the number of work items to 24.","var_1 = works_list(owned_by=[""SupportSam""], ticket.needs_response=True, limit=24, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
Find tickets that need a response for part CAPL-321 and provide a summary.,"var_1 = works_list(applies_to_part=[""CAPL-321""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Find work items for parts FEAT-987 and CAPL-456 created by user ENG-789,"var_1 = search_object_by_name(query=""ENG-789"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[""FEAT-987"", ""CAPL-456""], created_by=[var_1])
"
"For the user DEVU-999, list all issues related to product PROD-999 and prioritize them for the sprint","var_1 = search_object_by_name(query=""PROD-999"")
var_2 = works_list(applies_to_part=[var_1], owned_by=[""DEVU-999""], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Find and sort my tasks that need a response,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Identify issues owned by me that need a response, and return a prioritized list","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
"For the part PROD-321, list all issues and prioritize them by severity","var_1 = works_list(applies_to_part=[""PROD-321""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
"
"Add all P1 issues related to service ""ServiceY"" to the upcoming sprint","var_1 = search_object_by_name(query=""ServiceY"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Identify all tasks under the 'QA' stage, filter by high severity, and summarize them","var_1 = works_list(stage.name=[""QA""], ticket.severity=[""high""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Search for work items tagged with 'urgent' and add them to my active sprint,"var_1 = search_object_by_name(query=""urgent"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"List work items for user USER-123 for the current sprint, then summarize and prioritize them","var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], type=[""issue"", ""ticket"", ""task""])
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)
"
"Extract tasks from the notes ""N"" and prioritize them","var_1 = create_actionable_tasks_from_text(text=""N"")
var_2 = prioritize_objects(objects=var_1)
"
Retrieve current sprint ID,"var_1 = get_sprint_id()
"
Prioritize and summarize all new tickets related to security concerns,"var_1 = works_list(stage.name=[""new""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Find work items created by me that need responses and summarize them,"var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
Find issues related to the REV-Engineering department and summarize them.,"var_1 = search_object_by_name(query=""REV-Engineering"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Assign newly created p0 priority tasks to the sprint SPRINT-321,"var_1 = works_list(type=[""task""], issue.priority=[""p0""])
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-321"")
"
Identify my work items with p1 priority and add them to sprint SPR-456.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPR-456"")
"
"Search for the user ID of 'LeadDev', list their tasks, and filter for tasks in the 'review' stage","var_1 = search_object_by_name(query=""LeadDev"")
var_2 = works_list(owned_by=[var_1], stage.name=[""review""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find tickets related to ""ENH-456"" and filter them by ""blocker"" severity. Summarize the results.","var_1 = search_object_by_name(query=""ENH-456"")
var_2 = works_list(applies_to_part=[var_1], ticket.severity=[""blocker""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Summarize tasks that need a response, prioritize them, and add them to the current sprint, limiting the results to 20.","var_1 = works_list(ticket.needs_response=True, type=[""task""], limit=20)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
"Identify issues in 'development' stage for parts FEAT-789, summarize and assign priority","var_1 = works_list(applies_to_part=[""FEAT-789""], stage.name=[""development""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
Can you provide the current political news from the United States?,#Unanswerable_Invalid_Query_Error
Get the current user's tickets that need a response and organize them by severity,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
Find issues of type 'bug' and summarize for review,"var_1 = works_list(type=[""issue""], applies_to_part=[""bug""])
var_2 = summarize_objects(objects=var_1)
"
"Find and summarize work items related to ""ENH-789"" and identify their severity","var_1 = search_object_by_name(query=""ENH-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""work""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve the current sprint ID and add new work items W1, W2, and W3 to it","var_1 = get_sprint_id()
var_2 = add_work_items_to_sprint(work_ids=[""W1"", ""W2"", ""W3""], sprint_id=var_1)
"
"Add tasks related to ""TASK-432"" to current sprint","var_1 = get_similar_work_items(work_id=""TASK-432"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Find tickets requiring a response from the 'SUPPORT' team and rank them by urgency,"var_1 = search_object_by_name(query=""SUPPORT"")
var_2 = works_list(ticket.needs_response=True, owned_by=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
Retrieve tickets from source channel 'email' for REV-456 and summarize the info.,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.source_channel=[""email""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"List all medium severity tickets, filter them by source channel 'email', and summarize the results","var_1 = works_list(ticket.severity=[""medium""], ticket.source_channel=[""email""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"What if time is an illusion, and all moments coexist simultaneously?",#Unanswerable_Invalid_Query_Error
Summarize tasks that need a response and are owned by user USR-321,"var_1 = works_list(owned_by=[""USR-321""], ticket.needs_response=True, type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Summarize all P2 issues from Rev organization 'ORG-678' and assign them to developer 'DEVA-456'.,"var_1 = search_object_by_name(query=""ORG-678"")
var_2 = works_list(issue.priority=[""p2""], issue.rev_orgs=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = search_object_by_name(query=""DEVA-456"")
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
Find issues related to 'bug fix' and create actionable tasks,"var_1 = search_object_by_name(query=""bug fix"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = create_actionable_tasks_from_text(text=var_2)
"
Locate my P2 tickets and arrange them by severity,"var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], issue.priority=[""p2""], owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
Can you provide me with the latest stock prices for company XYZ?,#Unanswerable_Invalid_Query_Error
How do I meditate to reduce stress?,#Unanswerable_Invalid_Query_Error
"Summarize my tasks related to the Epic ""EPIC-456"" and created by user ""USER-789""","var_1 = search_object_by_name(query=""EPIC-456"")
var_2 = search_object_by_name(query=""USER-789"")
var_3 = works_list(type=[""task""], applies_to_part=[var_1], created_by=[var_2])
var_4 = summarize_objects(objects=var_3)
"
"Get a summary of tasks with medium severity from the ""Support"" channel","var_1 = works_list(ticket.severity=[""medium""], ticket.source_channel=[""Support""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Find the current user's P1 issues and summarize them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Summarize all tickets that need a response and are marked as 'medium' severity.,"var_1 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.severity=[""medium""])
var_2 = summarize_objects(objects=var_1)
"
"Find work items for part number ""PART-987"" with P2 priority, prioritize, and summarize them","var_1 = works_list(applies_to_part=[""PART-987""], issue.priority=[""p2""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
What if our perception of the world is a projection of our inner thoughts and emotions?,#Unanswerable_Invalid_Query_Error
"Find tasks related to the product ""WidgetPro"" and summarise them","var_1 = search_object_by_name(query=""WidgetPro"")
var_2 = works_list(applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Retrieve the current sprint's ID and list all P2 tickets that need a response,"var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p2""], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Fetch tasks created by user USER-321 and sort them by priority,"var_1 = works_list(created_by=[""USER-321""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Look up the ID of the user 'UserX' and summarize all their owned work items,"var_1 = search_object_by_name(query=""UserX"")
var_2 = works_list(owned_by=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
" Locate tasks in the Testing stage, summarize them, and add them to the current sprint, limiting the results to 10.","var_1 = works_list(stage.name=[""Testing""], type=[""task""], limit=10)
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"Summarize all ""blocker"" severity tickets for the current user.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""blocker""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Summarize tickets needing response from Rev organization REV-ENGINEERING and sort them by priority,"var_1 = works_list(ticket.rev_org=[""REV-ENGINEERING""], ticket.needs_response=True, type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Summarize issues in the 'QA' stage for part 'FEAT-789',"var_1 = works_list(stage.name=[""QA""], applies_to_part=[""FEAT-789""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
" Summarize and prioritize tickets with severity high from the MARKETING rev organization, limiting the results to 27.","var_1 = search_object_by_name(query=""MARKETING"")
var_2 = works_list(ticket.severity=[""high""], ticket.rev_org=[var_1], limit=27)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Extract tasks from the team meeting notes M and assign them to the engineering team,"var_1 = create_actionable_tasks_from_text(text=""M"")
"
Find and prioritize all issues within the 'QA' Rev organization and add them to the current sprint.,"var_1 = works_list(issue.rev_orgs=[""QA""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Get tickets needing response and prioritize them for 'Team-A',"var_1 = search_object_by_name(query=""Team-A"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
"Find work items for part PROD-456 that need a response, summarize, and prioritize them","var_1 = search_object_by_name(query=""PROD-456"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_3)
"
"Create a report of tickets from ""Support"" channel that are pending in ""Review"" stage","var_1 = works_list(stage.name=[""Review""], ticket.source_channel=[""Support""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Add all my tickets with medium severity to the current sprint,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""medium""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Find work items related to part CAPL-456, summarize them, and determine the current sprint","var_1 = works_list(applies_to_part=[""CAPL-456""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
"
"Get the current user's work items that are tickets and need response, then add those to the current sprint","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Add all ""p0"" priority tickets to the sprint for the ""BetaTeam""","var_1 = search_object_by_name(query=""BetaTeam"")
var_2 = works_list(ticket.severity=[""p0""], owned_by=[var_1], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Find issues related to the ""ENH-456"" enhancement and determine if any require urgent responses","var_1 = search_object_by_name(query=""ENH-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Identify my work items in 'development' stage and add them to sprint SPRINT-456.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""issue"", ""ticket"", ""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-456"")
"
"Retrieve all P1 issues, prioritize them, and add them to the current sprint, limiting the number of work items to 50.","var_1 = works_list(issue.priority=[""p1""], type=[""issue""], limit=50)
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Prioritize and summarize the tasks created by user USER-789 that are also owned by them,"var_1 = works_list(created_by=[""USER-789""], owned_by=[""USER-789""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Retrieve the current sprint ID and add issues from organization ORG-321,"var_1 = get_sprint_id()
var_2 = works_list(issue.rev_orgs=[""ORG-321""], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"Search for work items created by 'User42' and filter by 'issue' priority = p0, then add to the sprint","var_1 = search_object_by_name(query=""User42"")
var_2 = works_list(created_by=[var_1], issue.priority=[""p0""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Find work items for the ""Engineering"" part and sort them by priority","var_1 = search_object_by_name(query=""Engineering"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
"
Identify all issues from the 'QA' team that are blockers,"var_1 = search_object_by_name(query=""QA"")
var_2 = works_list(created_by=[var_1], issue.priority=[""blocker""], type=[""issue""])
"
What are the most common phobias people have?,#Unanswerable_Invalid_Query_Error
" Retrieve all low severity tickets from the CHAT source channel, prioritize them, and summarize them, limiting the number of work items to 23.","var_1 = works_list(ticket.severity=[""low""], ticket.source_channel=[""CHAT""], limit=23)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Find all P2 issues reported by REV-789 and prepare them to be discussed in the current sprint meeting,"var_1 = search_object_by_name(query=""REV-789"")
var_2 = works_list(created_by=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
How do I backup my computer files to an external hard drive?,#Unanswerable_Invalid_Query_Error
"Find work items for the ""AlphaProject"" part and summarize them","var_1 = search_object_by_name(query=""AlphaProject"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
"Summarize work items related to the ""QA-Testing"" part and filter by issues created by user ""QAUser-456""","var_1 = search_object_by_name(query=""QA-Testing"")
var_2 = search_object_by_name(query=""QAUser-456"")
var_3 = works_list(created_by=[var_2], applies_to_part=[var_1], type=[""issue""])
var_4 = summarize_objects(objects=var_3)
"
Locate all issues from 'RevolutionaryAI' in stage 'development'.,"var_1 = search_object_by_name(query=""RevolutionaryAI"")
var_2 = works_list(issue.rev_orgs=[var_1], stage.name=[""development""], type=[""issue""])
"
Locate tickets of medium severity and generate a report,"var_1 = works_list(ticket.severity=[""medium""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Retrieve the current sprint ID and then get a list of tasks I own with priority p2,"var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""task""])
"
"List all 'blocker' severity tickets, filter by source channel 'email', and prioritize them","var_1 = works_list(ticket.severity=[""blocker""], ticket.source_channel=[""email""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
"Find similar work items to the task TASK-321, summarize the findings, and identify any tasks that need immediate response.","var_1 = get_similar_work_items(work_id=""TASK-321"")
var_2 = summarize_objects(objects=var_1)
var_3 = works_list(ticket.needs_response=True, type=[""task""])
"
"Find my work items in ""QA"" stage and prioritize them","var_1 = who_am_i()
var_2 = works_list(stage.name=[""QA""], owned_by=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
"
Locate work items in 'development' stage owned by user DEVU-789 and sort them by severity,"var_1 = works_list(owned_by=[""DEVU-789""], stage.name=[""development""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
" Retrieve similar work items to ISSUE-789, prioritize them, and limit the number of work items to 45.","var_1 = get_similar_work_items(work_id=""ISSUE-789"")
var_2 = prioritize_objects(objects=var_1)
"
Could there be a cosmic intelligence guiding the unfolding of the universe?,#Unanswerable_Invalid_Query_Error
Retrieve work items related to ENH-123 and summarize the tasks created this month by user DEVU-456,"var_1 = search_object_by_name(query=""ENH-123"")
var_2 = search_object_by_name(query=""DEVU-456"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
Find and summarize tickets with high severity from the EMAIL source channel and limit the number of work items to 15.,"var_1 = works_list(ticket.severity=[""high""], ticket.source_channel=[""EMAIL""], type=[""ticket""], limit=15)
var_2 = summarize_objects(objects=var_1)
"
Generate a list of tasks for the UX improvements mentioned in the document UX_Strategy.pdf and assign them to the design sprint,"var_1 = create_actionable_tasks_from_text(text=""UX_Strategy.pdf"")
var_2 = search_object_by_name(query=""design sprint"")
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Find and prioritize tasks related to project PROJ-456 and add them to my sprint,"var_1 = search_object_by_name(query=""PROJ-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = who_am_i()
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_5)
"
Retrieve and summarize tickets with 'blocker' severity that are unresolved,"var_1 = works_list(ticket.severity=[""blocker""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Retrieve work items of type 'ticket' from source channel 'email', summarize and add them to the current sprint if they are P3 priority","var_1 = works_list(ticket.source_channel=[""email""], issue.priority=[""p3""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
Find work items for part CAPL-123 created by user USER-456 and retrieve their summaries,"var_1 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[""CAPL-123""], created_by=[""USER-456""])
var_2 = summarize_objects(objects=var_1)
"
"Prioritize tickets related to Rev organization REV-321, filter by severity 'blocker' and summarize the list","var_1 = search_object_by_name(query=""REV-321"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""blocker""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Find and summarize all blocker severity tickets for the current sprint,"var_1 = get_sprint_id()
var_2 = works_list(type=[""ticket""], ticket.severity=[""blocker""], stage.name=[""current sprint""])
var_3 = summarize_objects(objects=var_2)
"
Create a summary report for tickets needing a response from 'Team Alpha',"var_1 = search_object_by_name(query=""Team Alpha"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Find and prioritize all tickets needing a response for user SupportAgent007 and limit the number of work items to 37.,"var_1 = search_object_by_name(query=""SupportAgent007"")
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, limit=37, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
Find work items with tag 'urgent-fix' and add them to my active sprint,"var_1 = search_object_by_name(query=""urgent-fix"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=[var_1], sprint_id=var_2)
"
Find work items in 'development' stage for product 'XLR8-200',"var_1 = search_object_by_name(query=""XLR8-200"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""development""], type=[""issue"", ""ticket"", ""task""])
"
Find and summarize tasks related to ProjectX,"var_1 = search_object_by_name(query=""ProjectX"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Find work related to CAPL-123 with p0 priority and summarize them,"var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p0""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"For customer ""InnovCorp"", get all issues and tasks, then create a list of tasks based on their requirements.","var_1 = search_object_by_name(query=""InnovCorp"")
var_2 = works_list(type=[""issue"", ""task""], ticket.rev_org=[var_1])
var_3 = create_actionable_tasks_from_text(text=var_2)
"
Filter work items by 'issue.rev_orgs' for organization 'ORG-789' and summarize the result,"var_1 = works_list(issue.rev_orgs=[""ORG-789""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Retrieve similar work items to ISSUE-123, prioritize them, and limit the results to 45.","var_1 = get_similar_work_items(work_id=""ISSUE-123"")
var_2 = prioritize_objects(objects=var_1)
"
Create a report of all open tickets from the Tech Support channel,"var_1 = works_list(ticket.source_channel=[""Tech Support""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Summarize new issues created by user USER-321,"var_1 = works_list(created_by=[""USER-321""], issue.priority=[""p0"", ""p1"", ""p2"", ""p3""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Search for all tickets with ""medium"" severity from the ""email"" channel and get their work IDs","var_1 = works_list(ticket.severity=[""medium""], ticket.source_channel=[""email""], type=[""ticket""])
"
"Find work items created by user ""User123"" in the ""Testing"" phase and add them to the sprint for this month.","var_1 = search_object_by_name(query=""User123"")
var_2 = works_list(created_by=[var_1], stage.name=[""Testing""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Prioritize and summarize issues with p2 priority from the CustomerY,"var_1 = search_object_by_name(query=""CustomerY"")
var_2 = works_list(issue.priority=[""p2""], ticket.rev_org=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Find work items for the ""Alpha"" component, created by user ""DEVU-456"", and then prioritize and summarize these items.","var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], created_by=[""DEVU-456""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Identify and prioritize tasks for fixing critical bugs,"var_1 = works_list(ticket.severity=[""blocker""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
Search for object by name 'Widget X' and provide a summary,"var_1 = search_object_by_name(query=""Widget X"")
var_2 = works_list(applies_to_part=[var_1], type=[""work""])
var_3 = summarize_objects(objects=var_2)
"
Find all tasks related to the 'Launch Project' and return their summary,"var_1 = search_object_by_name(query=""Launch Project"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find work items for part CAPL-123, filter by Rev organization REV-321, and provide a summary","var_1 = works_list(applies_to_part=[""CAPL-123""], issue.rev_orgs=[""REV-321""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Summarize and prioritize tasks in 'development' stage for part 'UI-999',"var_1 = search_object_by_name(query=""UI-999"")
var_2 = works_list(type=[""task""], stage.name=[""development""], applies_to_part=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_2)
"
Prioritize the tasks created by user123 and add them to my to-do list,"var_1 = works_list(created_by=[""user123""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""my to-do list"")
"
"Find and prioritize tasks for part ""PROD-789""","var_1 = search_object_by_name(query=""PROD-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Identify my tasks that are in the 'development' stage, prioritize, and prepare them for the review phase","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Summarize all open tasks for the ""Alpha"" project and identify those that require immediate attention.","var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"Find tasks related to the component ""AuthModule"", summarize the workload, and identify tasks that need immediate attention.","var_1 = search_object_by_name(query=""AuthModule"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"Assign new tasks in the sprint for the user ""USER-XYZ"" based on the analysis of the recent project report T","var_1 = create_actionable_tasks_from_text(text=""T"")
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=get_sprint_id())
"
Automate the creation of tasks from meeting notes N,"var_1 = create_actionable_tasks_from_text(text=""meeting notes N"")
"
"Retrieve a list of work items associated with the part ""PART-789"" and filter them by those created by user ""DEV-456"". Then, prioritize these items.","var_1 = works_list(applies_to_part=[""PART-789""], created_by=[""DEV-456""])
var_2 = prioritize_objects(objects=var_1)
"
"Retrieve tickets with ""medium"" severity that require a response and are related to the organization ""ORG-321"".","var_1 = search_object_by_name(query=""ORG-321"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""medium""], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Locate and prioritize all issues in the REVIEW stage and limit the number of work items to 19.,"var_1 = works_list(stage.name=[""REVIEW""], type=[""issue""], limit=19)
var_2 = prioritize_objects(objects=var_1)
"
"Generate a list of issues for REV-456 department, summarize them, and then search for the sprint ID to add them","var_1 = works_list(issue.rev_orgs=[""REV-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"Find all tasks related to part CAPL-987 that need a response, prioritize them, and add them to the current sprint.","var_1 = search_object_by_name(query=""CAPL-987"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
List all tasks owned by DEVU-321 that are in the 'in-progress' stage and summarize them.,"var_1 = works_list(owned_by=[""DEVU-321""], stage.name=[""in-progress""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Summarize tasks related to project Alpha and created by user Alice.,"var_1 = search_object_by_name(query=""Alice"")
var_2 = search_object_by_name(query=""project Alpha"")
var_3 = works_list(created_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
Prioritize tasks related to project Alpha and present a summary,"var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Link the newly identified urgent issues to the current sprint cycle,"var_1 = works_list(issue.priority=[""p0"", ""p1""], type=[""issue""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"For the 'Zeta' project, identify all tasks in 'review' stage and summarize them for the weekly report","var_1 = search_object_by_name(query=""Zeta"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""review""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find and summarize tasks related to the ""QA-Testing"" part that need a response","var_1 = search_object_by_name(query=""QA-Testing"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
Prioritize tickets from source channel 'email' and filter by user AGENT-007,"var_1 = works_list(owned_by=[""AGENT-007""], ticket.source_channel=[""email""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
"Retrieve and summarize all tasks for the ""Q4 Marketing Campaign"", then add to sprint and get my user ID","var_1 = search_object_by_name(query=""Q4 Marketing Campaign"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
var_6 = who_am_i()
"
Summarize my open tasks and issues for quick daily planning,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task"", ""issue""])
var_3 = summarize_objects(objects=var_2)
"
"For the ""UXImprovements"" initiative, prioritize any new tasks and integrate them into the current workflow.","var_1 = search_object_by_name(query=""UXImprovements"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Prioritize work items for Rev organization ""REV-TEAM"" and list them","var_1 = works_list(issue.rev_orgs=[""REV-TEAM""], type=[""issue"", ""ticket"", ""task""])
var_2 = prioritize_objects(objects=var_1)
"
Could there be entities or beings existing beyond our sensory perception?,#Unanswerable_Invalid_Query_Error
"Identify tickets raised via email for product ""PRODUCT-456"", summarize and assign to current sprint","var_1 = search_object_by_name(query=""PRODUCT-456"")
var_2 = works_list(applies_to_part=[var_1], ticket.source_channel=[""email""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
Identify work items of type 'task' owned by me and summarize them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Search for a user named DevLead, list all tickets they own, and summarize the tickets from the channel 'email'","var_1 = search_object_by_name(query=""DevLead"")
var_2 = works_list(owned_by=[var_1], ticket.source_channel=[""email""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Filter and summarize all P1 issues I’m working on,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Identify my tasks that need response and summarize for today's review meeting,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Fetch issues I created last month with p2 priority, summarize, and export them to a report","var_1 = who_am_i()
var_2 = works_list(type=[""issue""], created_by=[var_1], issue.priority=[""p2""])
var_3 = summarize_objects(objects=var_2)
"
" Retrieve and prioritize tasks created by DevOpsTeam, and add them to the current sprint, limiting the results to 33.","var_1 = works_list(created_by=[""DevOpsTeam""], type=[""task""], limit=33)
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Identify work items related to the 'Customer Engagement' project and create a prioritized list,"var_1 = search_object_by_name(query=""Customer Engagement"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
"
Add issues related to part CAPL-9876 for Rev organization REV-789 to current sprint,"var_1 = search_object_by_name(query=""CAPL-9876"")
var_2 = search_object_by_name(query=""REV-789"")
var_3 = works_list(applies_to_part=[var_1], issue.rev_orgs=[var_2], type=[""issue""])
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Extract tasks from project update notes ""N"" and assign to current sprint","var_1 = create_actionable_tasks_from_text(text=""N"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Find and prioritize tasks related to ENH-999 and link them to the current sprint,"var_1 = search_object_by_name(query=""ENH-999"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
List all blocker and high severity tickets for the product PROD-789 and summarize the impact,"var_1 = works_list(applies_to_part=[""PROD-789""], ticket.severity=[""blocker"", ""high""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Generate a list of tickets needing response from ""TechSupport"" organization and summarize them","var_1 = search_object_by_name(query=""TechSupport"")
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Find tickets from user DEVU-456 that need a response and summarize them,"var_1 = works_list(created_by=[""DEVU-456""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Find my tickets that need a response, summarize them","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Identify tasks linked to the product CORE-789, determine their urgency, and summarize the urgent ones","var_1 = search_object_by_name(query=""CORE-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
What are the historical events that happened on this day?,#Unanswerable_Invalid_Query_Error
Prioritize tickets from REV-456 that are marked as blockers and summarize for review,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""blocker""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Is there a purpose to the vastness of the cosmos, or is it a canvas for the expression of infinite possibilities?",#Unanswerable_Invalid_Query_Error
Find work items for part CAPL-123 created by user DEVU-456 and filter by p2 priority,"var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = search_object_by_name(query=""DEVU-456"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2], issue.priority=[""p2""], type=[""issue""])
"
"Could the concept of good and evil be subjective, varying from one perspective to another?",#Unanswerable_Invalid_Query_Error
Prioritize my tasks and add them to sprint SPRINT-999,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-999"")
"
Get issues owned by me with the 'in-progress' stage and summarize them for review,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""in-progress""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"For the user story USE-456, find similar work items and collate them into a report","var_1 = search_object_by_name(query=""USE-456"")
var_2 = get_similar_work_items(work_id=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Generate a summary of all p0 issues from the ""Networking"" part category.","var_1 = works_list(applies_to_part=[""Networking""], issue.priority=[""p0""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Retrieve and summarize tickets from ""HighTechCorp"" that need an urgent response.","var_1 = search_object_by_name(query=""HighTechCorp"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Find work items related to the ""Widget"" component and summarize them.","var_1 = search_object_by_name(query=""Widget"")
var_2 = works_list(type=[""issue""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"For the user ""QA-Expert"", list all issues across all parts, then create actionable tasks from a text snippet ""Check for UI consistency on new release"".","var_1 = search_object_by_name(query=""QA-Expert"")
var_2 = works_list(owned_by=[var_1], type=[""issue""])
var_3 = create_actionable_tasks_from_text(text=""Check for UI consistency on new release"")
"
"Identify tickets that need a response, are in the 'development' stage, and are owned by user USER-789; then prioritize these tasks.","var_1 = search_object_by_name(query=""USER-789"")
var_2 = works_list(type=[""ticket""], owned_by=[var_1], stage.name=[""development""], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)
"
Find tickets from the REV-345 organization and summarize them based on severity,"var_1 = search_object_by_name(query=""REV-345"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Search for customer 'EnterpriseClient' and list their associated issues, then summarize the list.","var_1 = search_object_by_name(query=""EnterpriseClient"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve tickets with medium severity from ""SALES-DEPT"" and prioritize them","var_1 = search_object_by_name(query=""SALES-DEPT"")
var_2 = works_list(ticket.severity=[""medium""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
Summarize the tasks I created,"var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Create a summary of tickets from the ""Data Integrity"" task force and give all except high severity tickerts","var_1 = search_object_by_name(query=""Data Integrity"")
var_2 = works_list(applies_to_part=[var_1], ticket.severity=[""low"", ""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Summarize tickets requiring response for Rev organization ""REV-321""","var_1 = works_list(ticket.rev_org=[""REV-321""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Summarize high severity tickets from the customer UltimateCustomer,"var_1 = search_object_by_name(query=""UltimateCustomer"")
var_2 = works_list(ticket.severity=[""high""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve current user's tasks, filter for tasks in 'review' stage, prioritize and summarize them.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""review""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Summarize the work items related to the ""Backend"" and ""Frontend"" parts created by user ""DevX""","var_1 = search_object_by_name(query=""DevX"")
var_2 = works_list(applies_to_part=[""Backend"", ""Frontend""], created_by=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find tickets needing response from the ""QA"" department and sort by priority","var_1 = search_object_by_name(query=""QA"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
Summarize the current sprint's tasks for user USER-ABC,"var_1 = search_object_by_name(query=""USER-ABC"")
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
"Could the laws of physics be subjective, dependent on the perspective of the observer?",#Unanswerable_Invalid_Query_Error
Summarize tasks related to ENH-123 that need a response.,"var_1 = search_object_by_name(query=""ENH-123"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Find tasks related to part PROD-4321 and organize them by priority,"var_1 = works_list(applies_to_part=[""PROD-4321""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
"Retrieve current sprint ID, then get and summarize all tickets with ""blocker"" severity","var_1 = get_sprint_id()
var_2 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Generate tasks based on insights from meeting notes 'Meeting X', then assign them to user DEVU-456.","var_1 = create_actionable_tasks_from_text(text=""Meeting X"")
var_2 = works_list(created_by=[""DEVU-456""])
"
"What if reality is a constantly shifting mosaic, and our understanding of it is always incomplete?",#Unanswerable_Invalid_Query_Error
Determine the current user's completed tasks and summarize the results,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""completed""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Summarize the work items created by user UXD-789 and filter by the Rev organization 'REV-ABC',"var_1 = search_object_by_name(query=""REV-ABC"")
var_2 = works_list(created_by=[""UXD-789""], issue.rev_orgs=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Prioritize tasks from 'DEV_TEAM' and add them to sprint SPRINT-321,"var_1 = search_object_by_name(query=""DEV_TEAM"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-321"")
"
What are the different types of coffee brewing methods?,#Unanswerable_Invalid_Query_Error
Find and prioritize tasks associated with part BACKEND-001 and limit the number of work items to 35.,"var_1 = works_list(applies_to_part=[""BACKEND-001""], type=[""task""], limit=35)
var_2 = prioritize_objects(objects=var_1)
"
Find and summarize all tasks assigned to me that need a response,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Find and summarize all tasks owned by user QAExpert in the TESTING stage with a limit of 35 work items.,"var_1 = search_object_by_name(query=""QAExpert"")
var_2 = works_list(owned_by=[var_1], stage.name=[""TESTING""], limit=35, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Find and summarize tasks that need a response and are associated with Rev organization REV-321,"var_1 = search_object_by_name(query=""REV-321"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Identify tickets needing response from support team member USR-789 and sort them by severity.,"var_1 = works_list(owned_by=[""USR-789""], ticket.needs_response=True, type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
"Identify my tasks related to the ""X1-Project"" and summarize them","var_1 = who_am_i()
var_2 = search_object_by_name(query=""X1-Project"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
"Retrieve work items created by user USER-XYZ, summarize the tasks, and filter for items in the 'testing' stage","var_1 = works_list(created_by=[""USER-XYZ""], stage.name=[""testing""])
var_2 = summarize_objects(objects=var_1)
"
Identify and summarize the tasks assigned to user USER-123 in the 'QA' stage,"var_1 = works_list(owned_by=[""USER-123""], stage.name=[""QA""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Summarize the top priority tasks and add them to the sprint with ID SPRINT-456,"var_1 = prioritize_objects(objects=[])
var_2 = summarize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-456"")
"
Retrieve and summarize tasks that need response and are in the 'development' stage.,"var_1 = works_list(stage.name=[""development""], ticket.needs_response=True, type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
"Identify tickets requiring response for ""CriticalUpdate"" and summarize them","var_1 = search_object_by_name(query=""CriticalUpdate"")
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Find current user's tasks related to the project 'AlphaProject' and prepare a report,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""AlphaProject"")
var_3 = works_list(type=[""task""], owned_by=[var_1], applies_to_part=[var_2])
var_4 = summarize_objects(objects=var_3)
"
"Locate the current sprint and add any urgent tasks created by user ""UserABC"" to it","var_1 = search_object_by_name(query=""UserABC"")
var_2 = get_sprint_id()
var_3 = works_list(created_by=[var_1], ticket.severity=[""blocker""], type=[""task""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)
"
Retrieve current sprint's ID for linking new urgent tasks,"var_1 = get_sprint_id()
"
"Retrieve and prioritize all tickets from ""CustomerX"" that came through email","var_1 = search_object_by_name(query=""CustomerX"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.source_channel=[""email""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Add my P1 issues to the current sprint after prioritizing them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Find work items for the ""Development"" part and summarize them","var_1 = search_object_by_name(query=""Development"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
"Get current user's tasks in ""Review"" stage and summarize","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""Review""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Summarize tasks created by user USR-321 and filter by task type,"var_1 = works_list(created_by=[""USR-321""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
"Create tasks from the engineering meeting notes and add them to the sprint for the ""Backend Team""","var_1 = create_actionable_tasks_from_text(text=""engineering meeting notes"")
var_2 = search_object_by_name(query=""Backend Team"")
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Find and summarize my tasks related to Project Alpha,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""Project Alpha"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
Retrieve my medium tickets and add them to sprint 'S12345',"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""medium""], type=[""ticket""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""S12345"")
"
Assign all tickets from 'Critical-Client' that need a response,"var_1 = search_object_by_name(query=""Critical-Client"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Retrieve tickets created by user USR-456 from the 'development' stage, and give the ones that need urgent response ","var_1 = search_object_by_name(query=""USR-456"")
var_2 = works_list(created_by=[var_1], stage.name=[""development""], ticket.needs_response=True, type=[""ticket""])
"
"Summarize all issues reported by user USR-456 that are in the ""QA"" stage.","var_1 = search_object_by_name(query=""USR-456"")
var_2 = works_list(created_by=[var_1], stage.name=[""QA""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve all tickets from Rev organization ""ORG-789"" that are marked as ""blocker"" severity and summarize them","var_1 = works_list(issue.rev_orgs=[""ORG-789""], ticket.severity=[""blocker""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Summarize all issues created by ""UserX"" in the ""Development"" stage and add them to my dashboard.","var_1 = search_object_by_name(query=""UserX"")
var_2 = works_list(created_by=[var_1], stage.name=[""Development""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Add tasks related to the 'website revamp' project to my current sprint,"var_1 = search_object_by_name(query=""website revamp"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1])
var_3 = who_am_i()
var_4 = works_list(type=[""task""], applies_to_part=[var_1], owned_by=[var_3])
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
"
Summarize the latest tickets from channel 'email' for user USER-XY,"var_1 = search_object_by_name(query=""USER-XY"")
var_2 = works_list(created_by=[var_1], ticket.source_channel=[""email""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Find work tickets related to CAPL-123 with medium severity and summarize them,"var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(type=[""ticket""], applies_to_part=[var_1], ticket.severity=[""medium""])
var_3 = summarize_objects(objects=var_2)
"
"For the customer ""TechCorp"", list all P2 issues, and summarize them.","var_1 = search_object_by_name(query=""TechCorp"")
var_2 = works_list(ticket.rev_org=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Who won the Best Actor Oscar at the last Academy Awards?,#Unanswerable_Invalid_Query_Error
What are the new features in the latest iPhone model?,#Unanswerable_Invalid_Query_Error
Retrieve and summarize work items in the 'development' stage for part CAPL-456,"var_1 = works_list(stage.name=[""development""], applies_to_part=[""CAPL-456""], type=[""issue"", ""ticket"", ""task""])
var_2 = summarize_objects(objects=var_1)
"
Generate a summary report for 'Backend-Team' tasks in 'testing' stage with low priority,"var_1 = search_object_by_name(query=""Backend-Team"")
var_2 = works_list(created_by=[var_1], stage.name=[""testing""], issue.priority=[""p3""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find the Rev organization ID for ""ORG-XYZ"", list all tickets from that organization, then summarize and prioritize the tickets with severity ""medium"".","var_1 = search_object_by_name(query=""ORG-XYZ"")
var_2 = works_list(type=[""ticket""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Retrieve and summarize all tickets that require a response,"var_1 = works_list(type=[""ticket""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)
"
"For user ""DEVU-456"", list all their P2 issues and summarize them for a status report.","var_1 = search_object_by_name(query=""DEVU-456"")
var_2 = works_list(created_by=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Summarize work items created by DEV-999 and filter for those in the 'testing' stage,"var_1 = search_object_by_name(query=""DEV-999"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], created_by=[var_1], stage.name=[""testing""])
var_3 = summarize_objects(objects=var_2)
"
" Summarize all medium severity tickets from the PHONE source channel and add them to the current sprint, limiting the number of work items to 44.","var_1 = works_list(ticket.severity=[""medium""], ticket.source_channel=[""PHONE""], limit=44)
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
List and prioritize all tasks associated with the current sprint for user USER-ID-123,"var_1 = get_sprint_id()
var_2 = works_list(owned_by=[""USER-ID-123""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"For the user 'DEVU-456', list their issues and tasks, prioritize them, and add to sprint 'SPRINT-42'","var_1 = works_list(created_by=[""DEVU-456""], type=[""issue"", ""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-42"")
"
Generate tasks from the discussion summary 'Meeting with Team X' and prioritize them,"var_1 = create_actionable_tasks_from_text(text=""Meeting with Team X"")
var_2 = prioritize_objects(objects=var_1)
"
"Is there a limit to human progress, beyond which our advancements become a detriment?",#Unanswerable_Invalid_Query_Error
"List and prioritize all ""blocker"" severity tickets from ""DevOps"" team","var_1 = search_object_by_name(query=""DevOps"")
var_2 = works_list(ticket.severity=[""blocker""], owned_by=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
Add tasks for customer follow-ups mentioned in document 'Notes-123' to my task list,"var_1 = create_actionable_tasks_from_text(text=""Notes-123"")
var_2 = who_am_i()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Identify the most urgent tasks from my inbox and create a summary,"var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Retrieve the p2 priority issues, assigned to the current user and summarize them","var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p2""], owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Add all my P2 tickets related to REV-456 to the current sprint,"var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], issue.priority=[""p2""], issue.rev_orgs=[""REV-456""], type=[""ticket""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)
"
Find all tasks related to the 'Q4 Product Launch' and organize them by priority,"var_1 = search_object_by_name(query=""Q4 Product Launch"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Find similar tasks to TASK-321, summarize them and find the current sprint to organize them","var_1 = get_similar_work_items(work_id=""TASK-321"")
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = prioritize_objects(objects=var_1)
var_5 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_3)
"
"Generate a list of work items owned by user ""DEV_LEAD_456"" and filter for those in ""QAReview""","var_1 = works_list(owned_by=[""DEV_LEAD_456""], stage.name=[""QAReview""], type=[""work""])
var_2 = summarize_objects(objects=var_1)
"
"Retrieve and summarize tasks created by user ""User123""","var_1 = works_list(created_by=[""User123""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Add high-priority tasks from the 'Epsilon' project to my sprint and summarize sprint contents,"var_1 = search_object_by_name(query=""Epsilon"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p0"", ""p1""], owned_by=[who_am_i()], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = works_list(owned_by=[who_am_i()], stage.name=[""sprint""])
var_6 = summarize_objects(objects=var_5)
"
"List my tasks that need a response, get the sprint ID, and add those tasks to my current sprint.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Retrieve and categorize issues from ""QA-Team"" that are in ""QATesting"" stage","var_1 = works_list(created_by=[""QA-Team""], stage.name=[""QATesting""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
"
Find tickets needing response from Rev organization ORG-321 and prioritize them,"var_1 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.rev_org=[""ORG-321""])
var_2 = prioritize_objects(objects=var_1)
"
Create actionable tasks from the weekly meeting notes and summarize the actions,"var_1 = create_actionable_tasks_from_text(text=""weekly meeting notes"")
var_2 = summarize_objects(objects=var_1)
"
Identify my tasks that are in the 'development' stage and add them to my current sprint,"var_1 = who_am_i()
var_2 = works_list(stage.name=[""development""], owned_by=[var_1], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
" Retrieve work items of type task related to part UI-FRAMEWORK, prioritize them, and limit the results to 20.","var_1 = works_list(applies_to_part=[""UI-FRAMEWORK""], type=[""task""], limit=20)
var_2 = prioritize_objects(objects=var_1)
"
Summarize the tasks I own that are in the 'To-Do' stage and add them to the current sprint.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""To-Do""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Get current user's medium tickets and summarize by source channel,","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
" Summarize and prioritize tickets with severity blocker for the IT_SUPPORT team, limiting the results to 15.","var_1 = search_object_by_name(query=""IT_SUPPORT"")
var_2 = works_list(ticket.severity=[""blocker""], ticket.rev_org=[var_1], limit=15)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Check for any unresolved issues from ""Critical-Subsystem"" and prioritize them for the current sprint","var_1 = search_object_by_name(query=""Critical-Subsystem"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Get similar tasks to 'TASK-321' for analysis,"var_1 = get_similar_work_items(work_id=""TASK-321"")
"
"Summarize and prioritize tasks created by user ""DevLeader"" for the ""Frontend Overhaul""","var_1 = search_object_by_name(query=""Frontend Overhaul"")
var_2 = works_list(created_by=[""DevLeader""], applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_3)
"
"Prioritize all my tasks and add p0, p1 priority tasks to this sprint","var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Extract action items from meeting notes T and prioritize them for the team,"var_1 = create_actionable_tasks_from_text(text=""T"")
var_2 = prioritize_objects(objects=var_1)
"
Generate a report of all issues raised by REV-TECH org and list issues needing a response,"var_1 = search_object_by_name(query=""REV-TECH"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = works_list(issue.rev_orgs=[var_1], ticket.needs_response=True, type=[""issue""])
"
"Retrieve my tickets marked as ""blocker"" and arrange them by priority.","var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], owned_by=[var_1], ticket.severity=[""blocker""])
var_3 = prioritize_objects(objects=var_2)
"
"Create actionable tasks from the meeting notes ""M"" and assign them to the current sprint","var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"Locate work items that need a response, summarize them for a quick review, and then identify my own work items in the list.","var_1 = works_list(ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)
var_3 = who_am_i()
var_4 = works_list(ticket.needs_response=True, owned_by=[var_3])
"
Get the sprint ID of the current sprint cycle,"var_1 = get_sprint_id()
"
"List all tasks in DEV stage, summarize them and add to sprint for user CURRENT-USER","var_1 = who_am_i()
var_2 = works_list(stage.name=[""DEV""], owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
Add tasks related to the feature BigLaunch to my current sprint,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""BigLaunch"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Find all tasks related to the project 'Alpha' and sort them by priority,"var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Identify and summarize tickets marked as ""blocker"" that need a response","var_1 = works_list(ticket.severity=[""blocker""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Summarize and prioritize tasks related to the ""UX Improvement"" project","var_1 = search_object_by_name(query=""UX Improvement"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
Retrieve and prioritize all tickets needing a response from the PHONE source channel and limit the number of work items to 42.,"var_1 = works_list(ticket.needs_response=True, ticket.source_channel=[""PHONE""], type=[""ticket""], limit=42)
var_2 = prioritize_objects(objects=var_1)
"
"Retrieve the ID of the current sprint, find all issues labeled p2, add them to the sprint, and summarize these added issues.","var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p2""], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
var_4 = summarize_objects(objects=var_2)
"
Retrieve my REV-123 related tickets and summarize for the weekly review,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.rev_org=[""REV-123""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Who won the Indian Elections last time?,#Unanswerable_Invalid_Query_Error
Summarize my tasks and prioritize them before adding to the current sprint,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = summarize_objects(objects=var_3)
"
"Search for the user ID of ""John Doe"" and retrieve all tasks owned by this user","var_1 = search_object_by_name(query=""John Doe"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Create tasks for the reported issues in the component COMP-999,"var_1 = search_object_by_name(query=""COMP-999"")
var_2 = create_actionable_tasks_from_text(text=var_1)
"
"Identify my work items ticket with low severity, summarize, and get similar work items for cross-reference ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""low""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_similar_work_items(work_id=var_2)
"
Sort and display my tasks in current sprint by priority,"var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(type=[""task""], owned_by=[var_1], stage.name=[var_2])
var_4 = prioritize_objects(objects=var_3)
"
" Find similar issues to ISSU-456, summarize them, and prioritize them, limiting the number of work items to 35.","var_1 = get_similar_work_items(work_id=""ISSU-456"")
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
"Find tasks related to the ""Enhancement"" part and arrange them by priority","var_1 = search_object_by_name(query=""Enhancement"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Summarize the current user's tasks and sort them by priority,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Find and summarize all P2 issues under the SALES rev organization with a limit of 20 work items.,"var_1 = works_list(issue.priority=[""P2""], issue.rev_orgs=[""SALES""], limit=20, type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Update my task list with items from the Engineering Rev organization E,"var_1 = who_am_i()
var_2 = works_list(issue.rev_orgs=[""Engineering""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Extract tasks from the engineering meeting notes and assign them to the engineering team.,"var_1 = create_actionable_tasks_from_text(text=""engineering meeting notes"")
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""ENG-TEAM-ID"")
"
"Find and summarize all work items tagged with ""Urgent-Update"" from the last week.","var_1 = works_list(created_by=[""last week""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Summarize all tickets marked as 'needs response' from the customer service channel,"var_1 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.source_channel=[""customer service""])
var_2 = summarize_objects(objects=var_1)
"
"List all tickets and tasks for user ""DEVU-456"" and prioritize them.","var_1 = search_object_by_name(query=""DEVU-456"")
var_2 = works_list(created_by=[var_1], type=[""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
"
Check for tickets from 'REV-789' in 'customer support' channel and prioritize them.,"var_1 = search_object_by_name(query=""REV-789"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.source_channel=[""customer support""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
"Find all tasks related to the project ""Alpha"" and categorize them based on urgency","var_1 = search_object_by_name(query=""project Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Identify blockers for the sprint related to the feature PRODUCT-789 and prioritize them,"var_1 = works_list(type=[""issue""], applies_to_part=[""PRODUCT-789""], ticket.severity=[""blocker""])
var_2 = prioritize_objects(objects=var_1)
"
Identify my tasks that are of p0 priority and add to sprint SPRINT-456,"var_1 = who_am_i()
var_2 = works_list(type=[""task""], issue.priority=[""p0""], owned_by=[var_1])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-456"")
"
"Identify my tasks in ""QA-Testing"" stage and assign to the upcoming sprint","var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1], stage.name=[""QA-Testing""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Prioritize tickets from REV-321 that need a response and are marked as 'blocker',"var_1 = works_list(issue.rev_orgs=[""REV-321""], ticket.needs_response=True, ticket.severity=[""blocker""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
Can you provide the schedule for the upcoming FIFA World Cup?,#Unanswerable_Invalid_Query_Error
" Summarize all tickets from the EMAIL source channel that need a response and prioritize them, limiting the number of work items to 16.","var_1 = works_list(ticket.source_channel=[""EMAIL""], ticket.needs_response=True, limit=16, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
Create tasks for each actionable item from the email content 'E' and summarize these tasks,"var_1 = create_actionable_tasks_from_text(text='E')
var_2 = summarize_objects(objects=var_1)
"
Summarize issues similar to don:core:dvrv-us-1:devo/0:issue/1,"var_1 = get_similar_work_items(work_id=""don:core:dvrv-us-1:devo/0:issue/1"")
var_2 = summarize_objects(objects=var_1)
"
Find and summarize the latest tasks associated with Rev organization REV-XYZ for quick review,"var_1 = search_object_by_name(query=""REV-XYZ"")
var_2 = works_list(type=[""task""], ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"Search for ""CriticalComponent"" and prioritize all tasks related to it","var_1 = search_object_by_name(query=""CriticalComponent"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Search for all tickets with ""high"" severity for ""GammaService"" and organize them by priority","var_1 = search_object_by_name(query=""GammaService"")
var_2 = works_list(ticket.severity=[""high""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
Summarize the work items with 'blocker' severity and then search for a user named DevLead,"var_1 = works_list(type=[""issue"", ""ticket""], ticket.severity=[""blocker""])
var_2 = summarize_objects(objects=var_1)
var_3 = search_object_by_name(query=""DevLead"")
"
Retrieve and prioritize my tasks that need a response and are associated with 'REV-123' and/or 'REV-213'  organizations,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, ticket.rev_org=[""REV-123"", ""REV-213""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Summarize issues that need a response and are from Rev organization ORG-999,"var_1 = works_list(issue.rev_orgs=[""ORG-999""], ticket.needs_response=True, type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Retrieve my tasks for the ""Research"" stage and filter by type ""issue"".","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""Research""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Find tasks related to ""FEATURE-789"" and summarize them","var_1 = search_object_by_name(query=""FEATURE-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Summarize the work items for part CAPL-123 that require a response,"var_1 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[""CAPL-123""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)
"
Summarize work items related to ENH-456 by Developer X,"var_1 = search_object_by_name(query=""Developer X"")
var_2 = works_list(created_by=[var_1], applies_to_part=[""ENH-456""], type=[""work""])
var_3 = summarize_objects(objects=var_2)
"
Summarize tickets for a part 'UI-999' that are marked as 'blocker',"var_1 = search_object_by_name(query=""UI-999"")
var_2 = works_list(applies_to_part=[var_1], ticket.severity=[""blocker""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Add my issues marked as ""blocker"" to the sprint ending this Friday.","var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], issue.priority=[""blocker""], type=[""issue""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)
"
Add my newly created issues to the current sprint and summarize for management review,"var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = summarize_objects(objects=var_2)
"
"Identify my tickets which have not received a response, prioritize, and add them to the sprint","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Filter tasks by part ""PROJ-321"" and type ""task"", then get the current sprint ID and add these tasks to it.","var_1 = search_object_by_name(query=""PROJ-321"")
var_2 = get_sprint_id()
var_3 = works_list(applies_to_part=[var_1], type=[""task""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)
"
Find and summarize all tickets from Rev organization REV-555 that need a response,"var_1 = works_list(ticket.rev_org=[""REV-555""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Summarize all tasks that need a response and are in a 'QA' stage,"var_1 = works_list(stage.name=[""QA""], ticket.needs_response=True, type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Find and prioritize work items created by user USER-456,"var_1 = works_list(created_by=[""USER-456""])
var_2 = prioritize_objects(objects=var_1)
"
"Find work items related to component ""UI-Toolkit"" and determine if any require immediate attention.","var_1 = search_object_by_name(query=""UI-Toolkit"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Add tasks related to PROD-789 with p2 priority to the current sprint,"var_1 = search_object_by_name(query=""PROD-789"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p2""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Summarize tickets with 'medium' severity assigned to REV-789 organization.,"var_1 = search_object_by_name(query=""REV-789"")
var_2 = works_list(ticket.severity=[""medium""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Find issues with priority p2 and summarize them,"var_1 = works_list(issue.priority=[""p2""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Summarize tasks under product PROD-456 that need a response,"var_1 = search_object_by_name(query=""PROD-456"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Get the current user's issues with priority 'p2' that are in the 'development' stage, and summarize the list.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], stage.name=[""development""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
" Locate issues in the Backlog stage, summarize them, and add them to the current sprint, limiting the results to 12.","var_1 = works_list(stage.name=[""Backlog""], type=[""issue""], limit=12)
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
Find all tasks related to the product code PROD-101 and organize them by priority,"var_1 = search_object_by_name(query=""PROD-101"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Get a list of issues I own that are marked as 'blocker', summarize them for reporting","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""blocker""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Could the universe have a purpose, or is it an intricate dance of chaotic randomness?",#Unanswerable_Invalid_Query_Error
"Fetch and summarize issues related to component ""UI-FRAMEWORK""","var_1 = search_object_by_name(query=""UI-FRAMEWORK"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Summarize the current user's tasks related to project X and list them by priority,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""Project X"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)
"
Prioritize p0 issue reported by Rev organization REV-456 and filter by tasks,"var_1 = works_list(issue.rev_orgs=[""REV-456""], issue.priority=[""p0""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
Generate a list of tickets from the Rev organization REV-456 and prioritize them,"var_1 = works_list(ticket.rev_org=[""REV-456""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
List the tickets I need to respond to and give the high severity ones,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, ticket.severity=[""high""], type=[""ticket""])
"
"Filter and summarize my ""low"" severity tickets","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""low""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Prioritize my tasks, get similar ones for cross-reference, and add new insights from notes T as tasks to the current sprint","var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_similar_work_items(work_id=var_2[0])
var_5 = create_actionable_tasks_from_text(text=""T"")
var_6 = get_sprint_id()
var_7 = add_work_items_to_sprint(work_ids=var_5, sprint_id=var_6)
"
Retrieve the ID of the current sprint and list all tasks assigned to user USER-123 that are prioritized,"var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""USER-123"")
var_3 = works_list(owned_by=[var_2], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
"
Identify urgent tasks created by user DEVU-456 and add them to my current sprint for immediate action,"var_1 = who_am_i()
var_2 = works_list(created_by=[""DEVU-456""], ticket.severity=[""blocker""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Identify and prioritize unresolved issues for user DEVU-321,"var_1 = works_list(created_by=[""DEVU-321""], issue.rev_orgs=[""unresolved""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
"
"Search for customer 'Enterprise123', list their P2 issues, and summarize","var_1 = search_object_by_name(query=""Enterprise123"")
var_2 = works_list(issue.priority=[""p2""], ticket.rev_org=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Summarize the latest issues reported by ""NovaTech"" ","var_1 = search_object_by_name(query=""NovaTech"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Add all my ""ENH-789"" enhancement tickets to the sprint and prioritize them.","var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], owned_by=[var_1], applies_to_part=[""ENH-789""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = prioritize_objects(objects=var_2)
"
Aggregate customer feedback from project Alpha and assign tasks to team members,"var_1 = create_actionable_tasks_from_text(text=""project Alpha"")
var_2 = prioritize_objects(objects=var_1)
"
"Prioritize and summarize tickets with ""Low"" severity for component ""UI-Framework""","var_1 = search_object_by_name(query=""UI-Framework"")
var_2 = works_list(ticket.severity=[""low""], applies_to_part=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Identify and sort all P2 priority issues reported by user USER-456,"var_1 = works_list(type=[""issue""], issue.priority=[""p2""], created_by=[""USER-456""])
var_2 = prioritize_objects(objects=var_1)
"
Identify and summarize tasks I own that need a response and are associated with Rev organization REV-321,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""REV-321"")
var_3 = works_list(owned_by=[var_1], ticket.needs_response=True, ticket.rev_org=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
"Find tasks for the part CAPL-987, prioritize them, and get the current sprint ID","var_1 = works_list(type=[""task""], applies_to_part=[""CAPL-987""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
"
"Find and list work items related to ""CAPL-456"" and created by ""DEVB-789""","var_1 = search_object_by_name(query=""CAPL-456"")
var_2 = works_list(applies_to_part=[var_1], created_by=[""DEVB-789""], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
" Retrieve and prioritize tasks created by QA-LEAD, and add them to the current sprint, limiting the results to 33.","var_1 = works_list(created_by=[""QA-LEAD""], type=[""task""], limit=33)
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"List and prioritize all tickets from ""HighImpactClient"" needing a response","var_1 = search_object_by_name(query=""HighImpactClient"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
"For my task with ID ""TASK-321"", find similar work items, summarize the findings.","var_1 = get_similar_work_items(work_id=""TASK-321"")
var_2 = summarize_objects(objects=var_1)
"
Find and prioritize issues reported by user USR-321,"var_1 = search_object_by_name(query=""USR-321"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
Identify and summarize issues that need a response and are in the 'testing' stage,"var_1 = works_list(stage.name=[""testing""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)
"
Add my tasks related to CAPL-789 to the current sprint,"var_1 = who_am_i()
var_2 = works_list(applies_to_part=[""CAPL-789""], owned_by=[var_1], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Retrieve high priority issues from the 'QA' stage and summarize for quick review,"var_1 = works_list(stage.name=[""QA""], issue.priority=[""p0""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Find tasks related to the ""Alpha"" project and arrange them by urgency.","var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"For the feature FEAT-999, find similar work items, prioritize them, and add them to the sprint","var_1 = search_object_by_name(query=""FEAT-999"")
var_2 = get_similar_work_items(work_id=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"List all enhancement requests by the Engineering team E, summarize for quarterly planning","var_1 = search_object_by_name(query=""Engineering team E"")
var_2 = works_list(created_by=[var_1], type=[""enhancement request""])
var_3 = summarize_objects(objects=var_2)
"
Determine my work items due this week and add them to my calendar,"#Unanswerable_Invalid_Query_Error
"
"Retrieve all tasks created by user USER-321, filter for stage 'development', and add to sprint SPRINT-ID-123.","var_1 = works_list(type=[""task""], created_by=[""USER-321""], stage.name=[""development""])
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-ID-123"")
"
" Retrieve all blocker severity tickets under the DeltaDivision rev organization, summarize them, and prioritize them, limiting the number of work items to 27.","var_1 = works_list(issue.rev_orgs=[""DeltaDivision""], ticket.severity=[""blocker""], limit=27)
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
Identify all tickets needing a response for the service SERV-789 and assign them to the current sprint,"var_1 = search_object_by_name(query=""SERV-789"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Create a summary report for all 'p3' priority issues in the 'design' stage,"var_1 = works_list(type=[""issue""], issue.priority=[""p3""], stage.name=[""design""])
var_2 = summarize_objects(objects=var_1)
"
"Find work issues for component `UIX-987` with priority `p2`, summarize them, and then add to the current sprint.","var_1 = works_list(type=[""issue""], applies_to_part=[""UIX-987""], issue.priority=[""p2""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"Find all tasks related to the ""Backend Refactor"" project, summarize them, and identify high-priority tasks","var_1 = search_object_by_name(query=""Backend Refactor"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"Find tasks related to the ""Backlog"" stage for projects ""PROJ-321"" and ""PROJ-XYZ""","var_1 = works_list(stage.name=[""Backlog""], applies_to_part=[""PROJ-321"", ""PROJ-XYZ""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Filter issues by type 'task' for user DEVU-456 and summarize the results,"var_1 = works_list(created_by=[""DEVU-456""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
"Generate a list of P1 tickets in need of response from the ""Support"" team and summarize the findings.","var_1 = search_object_by_name(query=""Support"")
var_2 = works_list(issue.priority=[""p1""], ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Assign all blocker severity tickets to the sprint named ""Sprint 42""","var_1 = search_object_by_name(query=""Sprint 42"")
var_2 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"Locate and summarize my open tasks related to customer ""AcmeCorp""","var_1 = who_am_i()
var_2 = search_object_by_name(query=""AcmeCorp"")
var_3 = works_list(type=[""task""], owned_by=[var_1], ticket.rev_org=[var_2])
var_4 = summarize_objects(objects=var_3)
"
Prioritize and summarize my tasks that are currently in the 'not-completed' stage.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""not-completed""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Identify work items related to CAPL-123 that require a response and summarize them,"var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
"Can you give me the synopsis of the movie ""Inception""?",#Unanswerable_Invalid_Query_Error
Find high severity tickets for the UltimateWidget project and summarize them,"var_1 = search_object_by_name(query=""UltimateWidget"")
var_2 = works_list(ticket.severity=[""high""], applies_to_part=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Find and summarize tickets that need a response and are of medium severity,"var_1 = works_list(ticket.needs_response=True, ticket.severity=[""medium""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Can you explain the theory of relativity by Albert Einstein?,#Unanswerable_Invalid_Query_Error
Find work items for part CAPL-123 and identify those needing a response,"var_1 = works_list(applies_to_part=[""CAPL-123""], ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])
"
Add issues to the current sprint that are created by user UX123 and have a priority p2,"var_1 = who_am_i()
var_2 = works_list(created_by=[""UX123""], issue.priority=[""p2""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Analyze customer feedback 'FDBK-4321', extract tasks from it, and add those tasks to the engineering backlog.","var_1 = search_object_by_name(query=""FDBK-4321"")
var_2 = create_actionable_tasks_from_text(text=var_1)
var_3 = who_am_i()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Identify and summarize work items needing a response for Rev organization REV-ENGINEERING.,"var_1 = works_list(ticket.needs_response=True, ticket.rev_org=[""REV-ENGINEERING""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Retrieve and summarize my tickets that need a response,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Create tasks from meeting notes and assign high priority,"var_1 = create_actionable_tasks_from_text(text=""meeting notes"")
var_2 = prioritize_objects(objects=var_1)
"
"Retrieve Rev organization REV-321 related tickets, summarize, and prioritize them","var_1 = search_object_by_name(query=""REV-321"")
var_2 = works_list(type=[""ticket""], ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
Find and prioritize all issues in the DESIGN_REVIEW stage and limit the number of work items to 22.,"var_1 = works_list(stage.name=[""DESIGN_REVIEW""], type=[""issue""], limit=22)
var_2 = prioritize_objects(objects=var_1)
"
"Find and prioritize tasks created by user USER-XYZ, then summarize and add them to the sprint ID SPRINT-456","var_1 = search_object_by_name(query=""USER-XYZ"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-456"")
"
Prioritize tickets from 'TechSupport' channel and list them by severity 'blocker',"var_1 = works_list(ticket.source_channel=[""TechSupport""], ticket.severity=[""blocker""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
Find issues created by user USER-456 in the 'testing' stage and summarize them.,"var_1 = search_object_by_name(query=""USER-456"")
var_2 = works_list(created_by=[var_1], stage.name=[""testing""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"For part PROD-456, summarize issues, create tasks and add to sprint","var_1 = works_list(applies_to_part=[""PROD-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Summarize tasks linked to part PROD-432 and created by user USER-XYZ,"var_1 = search_object_by_name(query=""PROD-432"")
var_2 = search_object_by_name(query=""USER-XYZ"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
" Find similar tasks to TASK-567, prioritize them, and summarize them, limiting the number of work items to 43.","var_1 = get_similar_work_items(work_id=""TASK-567"")
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Find and summarize all P3 issues owned by TechLead and limit the number of work items to 30.,"var_1 = works_list(owned_by=[""TechLead""], issue.priority=[""p3""], type=[""issue""], limit=30)
var_2 = summarize_objects(objects=var_1)
"
"Find work items created by user USR-456 in the ""Review"" stage and summarize them.","var_1 = search_object_by_name(query=""USR-456"")
var_2 = works_list(created_by=[var_1], stage.name=[""Review""], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find work items associated with REV-Engineering, prioritize and add them to the sprint","var_1 = search_object_by_name(query=""REV-Engineering"")
var_2 = works_list(issue.rev_orgs=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Identify work items by user User-XYZ, summarize them, after checking if any requires a response","var_1 = search_object_by_name(query=""User-XYZ"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], created_by=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = works_list(type=[""issue"", ""ticket"", ""task""], created_by=[var_1], ticket.needs_response=True)
"
"For the current user, retrieve and summarize all tickets from ""BetaCorp"" with medium severity that came through email","var_1 = who_am_i()
var_2 = search_object_by_name(query=""BetaCorp"")
var_3 = works_list(owned_by=[var_1], ticket.severity=[""medium""], ticket.source_channel=[""email""], ticket.rev_org=[var_2], type=[""ticket""])
var_4 = summarize_objects(objects=var_3)
"
Find and prioritize tickets related to specific component COMP-321,"var_1 = search_object_by_name(query=""COMP-321"")
var_2 = works_list(type=[""ticket""], applies_to_part=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
"What if our dreams are messages from a deeper part of ourselves, offering insights into our true nature?",#Unanswerable_Invalid_Query_Error
"Retrieve work items created by user DevLead and add them to the current sprint, limiting the number of work items to 20.","var_1 = search_object_by_name(query=""DevLead"")
var_2 = works_list(created_by=[var_1], limit=20)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Retrieve and summarize my work items of type 'issue' that are related to the 'QA' part,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""QA"")
var_3 = works_list(type=[""issue""], owned_by=[var_1], applies_to_part=[var_2])
var_4 = summarize_objects(objects=var_3)
"
Find tickets needing a response and list them by priority,"var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
Identify and summarize the top priority tickets from Rev organization REV-999,"var_1 = works_list(ticket.rev_org=[""REV-999""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=[var_2[0]]) 
"
What is the fastest route from New York to Los Angeles by car?,#Unanswerable_Invalid_Query_Error
"Can you provide the lyrics to the song ""Bohemian Rhapsody"" by Queen?",#Unanswerable_Invalid_Query_Error
"Is there a purpose to the vastness of the cosmos, or is it a canvas for the expression of infinite possibilities?",#Unanswerable_Invalid_Query_Error
"Retrieve my tickets needing response from the helpdesk channel, prioritize and summarize them","var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], owned_by=[var_1], ticket.needs_response=True, ticket.source_channel=[""helpdesk""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Find similar tasks to 'TASK-321' and generate a summary,"var_1 = get_similar_work_items(work_id=""TASK-321"")
var_2 = summarize_objects(objects=var_1)
"
Generate a list of my tasks related to the 'UX' project and add them to the current sprint.,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""UX"")
var_3 = get_sprint_id()
var_4 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_5 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_3)
"
"Locate and summarize all tasks associated with ""FeatureY"" and created by user ""EngLead123"".","var_1 = search_object_by_name(query=""FeatureY"")
var_2 = search_object_by_name(query=""EngLead123"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
Summarize tasks for project Y created by user Z,"var_1 = search_object_by_name(query=""project Y"")
var_2 = search_object_by_name(query=""user Z"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
"What if our existence is a result of a cosmic coincidence, and life is a rare anomaly in the universe?",#Unanswerable_Invalid_Query_Error
"Identify work items created by user ""USR-321"" and add them to sprint with ID ""SPRINT-101""","var_1 = search_object_by_name(query=""USR-321"")
var_2 = works_list(created_by=[var_1])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-101"")
"
" Retrieve all medium severity tickets, prioritize them, and summarize them, limiting the number of work items to 19.","var_1 = works_list(ticket.severity=[""medium""], limit=19, type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Summarize issues from ""RevOrg-Main"" and give a summary of the p3 issues","var_1 = works_list(issue.rev_orgs=[""RevOrg-Main""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = works_list(issue.priority=[""p3""], issue.rev_orgs=[""RevOrg-Main""], type=[""issue""])
var_4 = summarize_objects(objects=var_3)
"
Retrieve the current sprint ID and list all P2 issues,"var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p2""], type=[""issue""])
"
"Find similar issues to PROD-789, summarize them, and add them to the current sprint if priority is P1","var_1 = get_similar_work_items(work_id=""PROD-789"")
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Find and summarize tasks with p1 priority from part ""ABC-123"",","var_1 = search_object_by_name(query=""ABC-123"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1], issue.priority=[""p1""])
var_3 = summarize_objects(objects=var_2)
"
Summarize works of type 'issue' for user USER-123,"var_1 = works_list(created_by=[""USER-123""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Retrieve and summarize issues owned by LeadDevOps and limit the results to 35.,"var_1 = search_object_by_name(query=""LeadDevOps"")
var_2 = works_list(owned_by=[var_1], type=[""issue""], limit=35)
var_3 = summarize_objects(objects=var_2)
"
"Get the current user's tasks, list them in order of urgency and summarize them","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Retrieve the ID of the current user, search work items by user ID, and return only issues that are in the 'review' stage.","var_1 = who_am_i()
var_2 = works_list(type=[""issue""], owned_by=[var_1], stage.name=[""review""])
"
Retrieve my tasks for the current sprint and provide a summary,"var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
Find work items related to multiple parts and determine if any need responses,"var_1 = works_list(ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])
"
"Extract actionable tasks from meeting notes ""ProjectX"" and summarize them for review","var_1 = create_actionable_tasks_from_text(text=""ProjectX"")
var_2 = summarize_objects(objects=var_1)
"
Summarize the current sprint's tasks for my team,"var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve and prioritize all tasks related to the 'UX' part that need a response,"var_1 = works_list(applies_to_part=[""UX""], ticket.needs_response=True, type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
Summarize the work items from the 'development' stage for the 'Widget-Enhancement' part,"var_1 = search_object_by_name(query=""Widget-Enhancement"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""development""])
var_3 = summarize_objects(objects=var_2)
"
Summarize the tasks related to project 'Alpha',"var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Identify and summarize all blocker tickets assigned to user USER-321,"var_1 = search_object_by_name(query=""USER-321"")
var_2 = works_list(owned_by=[var_1], ticket.severity=[""blocker""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Find all tasks related to the component 'UIUX-100' and list them according to their urgency.,"var_1 = search_object_by_name(query=""UIUX-100"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
Retrieve current user's tasks related to CAPL-123 and provide a summary,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""CAPL-123"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
What if our emotions are not just personal experiences but a shared energy connecting all living beings?,#Unanswerable_Invalid_Query_Error
"Search for user ""DeveloperX"", list their issues that need response, and get a summary","var_1 = search_object_by_name(query=""DeveloperX"")
var_2 = works_list(created_by=[var_1], ticket.needs_response=True, type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve the current sprint's ID and add newly created tickets by 'DEVU-456' to it.,"var_1 = get_sprint_id()
var_2 = works_list(created_by=[""DEVU-456""], type=[""ticket""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
List all tasks for the Rev organization REV-999 and create actionable tasks,"var_1 = works_list(type=[""task""], ticket.rev_org=[""REV-999""])
var_2 = create_actionable_tasks_from_text(text=var_1)
"
Prioritize my tasks and issues for the Engineering part ENG-4455,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], applies_to_part=[""ENG-4455""], type=[""task"", ""issue""])
var_3 = prioritize_objects(objects=var_2)
"
"Generate a list of all tasks and tickets requiring a response, then prioritize and summarize them","var_1 = works_list(ticket.needs_response=True, type=[""task"", ""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Find and summarize work items of type 'issue' with priority p1 under the 'development' stage,"var_1 = works_list(issue.priority=[""p1""], stage.name=[""development""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Fetch work items related to part CAPL-123 created by user DEVU-456 and summarize the results,"var_1 = works_list(applies_to_part=[""CAPL-123""], created_by=[""DEVU-456""])
var_2 = summarize_objects(objects=var_1)
"
Retrieve the current sprint ID and list all blocker severity tickets within it.,"var_1 = get_sprint_id()
var_2 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Prioritize and summarize tasks related to a sprint 'ABC-123' and user 'USER-123',"var_1 = search_object_by_name(query=""USER-123"")
var_2 = works_list(type=[""task""], owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Given a customer meeting transcript ""T"", create action items and add them to my current sprint","var_1 = create_actionable_tasks_from_text(text=""T"")
var_2 = who_am_i()
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"Find all tickets raised via email, prioritize by severity and summarize ","var_1 = works_list(type=[""ticket""], ticket.source_channel=[""email""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Summarize and prioritize tasks from recent sprint planning Planning,"var_1 = create_actionable_tasks_from_text(text=""Planning"")
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
"Retrieve the current sprint's tasks and filter by the ""Development"" stage","var_1 = get_sprint_id()
var_2 = works_list(stage.name=[""Development""])
var_3 = prioritize_objects(objects=var_2)
"
Where is your brain stored?,#Unanswerable_Invalid_Query_Error
"I need to know my tasks that require a response, can you prioritize them and show me a summary?","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Give me a summary of tickets needing response for the ""Beta"" department","var_1 = search_object_by_name(query=""Beta"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Generate tasks from the engineering meeting notes M and prioritize them for the upcoming sprint,"var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Summarize the current user's P1 tickets that need a response,"var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], issue.priority=[""p1""], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Add my newly created tasks to the sprint and prioritize them,"var_1 = who_am_i()
var_2 = create_actionable_tasks_from_text(text=""X"")
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = prioritize_objects(objects=var_2)
"
"Organize and prioritize new feature requests from ""Product Team A"" for the current quarter planning.","var_1 = search_object_by_name(query=""Product Team A"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Retrieve my tasks in 'development' stage and summarize for a quick review,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Locate and add ""Bug-Fix"" tasks to the sprint for component ""COMP-789""","var_1 = search_object_by_name(query=""COMP-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Identify severe tickets that require immediate attention and provide a summary for the engineering team.,"var_1 = works_list(ticket.severity=[""blocker"", ""high""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Is knowledge a limitation, and ignorance a form of liberation?",#Unanswerable_Invalid_Query_Error
Extract tasks from project update notes N and summarize them.,"var_1 = create_actionable_tasks_from_text(text=""N"")
var_2 = summarize_objects(objects=var_1)
"
"Search for the part named 'Widget-456', get the issues related to it, and summarize them","var_1 = search_object_by_name(query=""Widget-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Identify issues owned by user ""User456"" in ""development"" stage and sort by priority","var_1 = search_object_by_name(query=""User456"")
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
"Locate my tasks related to 'ENH-456', summarize and check for any required responses","var_1 = who_am_i()
var_2 = search_object_by_name(query=""ENH-456"")
var_3 = works_list(type=[""task""], owned_by=[var_1], applies_to_part=[var_2])
var_4 = summarize_objects(objects=var_3)
var_5 = works_list(type=[""task""], owned_by=[var_1], applies_to_part=[var_2], ticket.needs_response=True)
"
"Get a list of issues for product PROD-456 that I have created, and provide a summary of those issues.","var_1 = who_am_i()
var_2 = search_object_by_name(query=""PROD-456"")
var_3 = works_list(created_by=[var_1], applies_to_part=[var_2], type=[""issue""])
var_4 = summarize_objects(objects=var_3)
"
"For the upcoming release, compile all tickets marked as ""blocker"", summarize them, and allocate them to the release sprint.","var_1 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
Summarize the work done by user USER-321,"var_1 = works_list(created_by=[""USER-321""])
var_2 = summarize_objects(objects=var_1)
"
Summarize all tickets in 'pending' stage for the REV-456 organization and sort them by severity.,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1], stage.name=[""pending""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve and prioritize all tasks in review stage, then summarize","var_1 = works_list(stage.name=[""review""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Create tasks from the key points in the  meeting notes X,"var_1 = create_actionable_tasks_from_text(text=""X"")
"
Summarize all tasks related to the product 'WidgetMaster' that were created last week.,"#Unanswerable_Invalid_Query_Error
"
" Locate issues in the Pending stage, summarize them, and add them to the current sprint, limiting the results to 12.","var_1 = works_list(stage.name=[""Pending""], limit=12)
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
Generate a list of tasks from department meeting notes and prioritize them by deadline,"var_1 = create_actionable_tasks_from_text(text=""department meeting notes"")
var_2 = prioritize_objects(objects=var_1)
"
"Identify tasks assigned to the DevOps team, excluding 'done' stage, and summarize action items","var_1 = works_list(owned_by=[""DevOps""], stage.name=[""done""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Find all tasks associated with my user that are marked as 'blocker' and prepare them for the current sprint,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""blocker""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Find and summarize all P3 issues owned by JuniorDev and limit the number of work items to 25.,"var_1 = search_object_by_name(query=""JuniorDev"")
var_2 = works_list(owned_by=[var_1], issue.priority=[""p3""], type=[""issue""], limit=25)
var_3 = summarize_objects(objects=var_2)
"
List all tasks under CAPL-321 and sort them by priority,"var_1 = search_object_by_name(query=""CAPL-321"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Summarize and prioritize tasks for user USER-XYZ and add to current sprint,"var_1 = search_object_by_name(query=""USER-XYZ"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Summarize my issues of type 'issue' and 'ticket',"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""issue"", ""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Summarize my tasks in the 'development' stage,"var_1 = who_am_i()
var_2 = works_list(stage.name=[""development""], owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Identify and summarize high priority tasks that need a response,"var_1 = works_list(issue.priority=[""high""], ticket.needs_response=True, type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Find and provide a summary of tasks assigned to user User987 that need a response,"var_1 = works_list(owned_by=[""User987""], ticket.needs_response=True, type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
"Summarize all P1 and P2 tickets from ""Support"" department","var_1 = search_object_by_name(query=""Support"")
var_2 = works_list(issue.priority=[""p1"", ""p2""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Identify and summarize all P1 tickets assigned to the DevOps team,"var_1 = works_list(ticket.severity=[""p1""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Find work items in 'development' stage for part PROD-123, sort them by priority, and summarize","var_1 = works_list(type=[""issue"", ""ticket"", ""task""], stage.name=[""development""], applies_to_part=[""PROD-123""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Find work items for the 'QA' stage and summarize by type,"var_1 = works_list(stage.name=[""QA""], type=[""work""])
var_2 = summarize_objects(objects=var_1)
"
"Find tasks related to product enhancement, summarize","var_1 = works_list(type=[""task""], applies_to_part=[""product enhancement""])
var_2 = summarize_objects(objects=var_1)
"
" Retrieve all high severity tickets under the FeatureX part, add them to the current sprint, and summarize them, limiting the number of work items to 20.","var_1 = works_list(applies_to_part=[""FeatureX""], ticket.severity=[""high""], type=[""ticket""], limit=20)
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
var_4 = summarize_objects(objects=var_1)
"
Summarize and prioritize tickets associated with a particular source channel 'email',"var_1 = works_list(ticket.source_channel=[""email""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Generate a list of issues related to part PROD-321 that are in the 'QA' stage, and then summarize them","var_1 = works_list(applies_to_part=[""PROD-321""], stage.name=[""QA""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Summarize and prioritize tickets from channel EMAIL linked to part FEAT-999,"var_1 = search_object_by_name(query=""FEAT-999"")
var_2 = works_list(type=[""ticket""], ticket.source_channel=[""EMAIL""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"Get the current user's tickets, filter for those in the 'pending' stage, add them to the sprint, and summarize","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""pending""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = summarize_objects(objects=var_2)
"
Add all P1 issues to the sprint from the customer AcmeCorp,"var_1 = search_object_by_name(query=""AcmeCorp"")
var_2 = get_sprint_id()
var_3 = works_list(ticket.rev_org=[var_1], issue.priority=[""p1""], type=[""issue""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)
"
Generate a report of my resolved issues,"var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], stage.name=[""resolved""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve and prioritize all P2 tickets related to the REV-987 organization before the current team meeting.,"var_1 = works_list(issue.rev_orgs=[""REV-987""], issue.priority=[""p2""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
"Find tasks related to project Alpha123, summarize, and sort by priority","var_1 = search_object_by_name(query=""Alpha123"")
var_2 = works_list(type=[""task""], ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
Prioritize and summarize tasks for the Engineering team,"var_1 = works_list(created_by=[""Engineering""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Retrieve and summarize all low severity tickets created by ClientCoordinator and limit the number of work items to 30.,"var_1 = search_object_by_name(query=""ClientCoordinator"")
var_2 = works_list(created_by=[var_1], ticket.severity=[""low""], type=[""ticket""], limit=30)
var_3 = summarize_objects(objects=var_2)
"
"List my P2 issues, summarize them, and add those with 'needs_response' to the current sprint","var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p2""], owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = works_list(issue.priority=[""p2""], owned_by=[var_1], ticket.needs_response=True, type=[""issue""])
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
"
What are the cultural norms for greeting people in India?,#Unanswerable_Invalid_Query_Error
Summarize all issues in the DEPLOYMENT stage owned by DeployManager and limit the number of work items to 17.,"var_1 = search_object_by_name(query=""DeployManager"")
var_2 = works_list(owned_by=[var_1], stage.name=[""DEPLOYMENT""], limit=17, type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Locate work items owned by ManagerX in the Review stage, summarize them, and limit the results to 40.","var_1 = search_object_by_name(query=""ManagerX"")
var_2 = works_list(owned_by=[var_1], stage.name=[""Review""], limit=40)
var_3 = summarize_objects(objects=var_2)
"
Prioritize and summarize all tasks created by DEVU-789,"var_1 = works_list(created_by=[""DEVU-789""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Identify my work items that need a response and summarize them,"var_1 = who_am_i()
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], owned_by=[var_1], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
Add my urgent tickets to the sprint and get a summary,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""urgent""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = summarize_objects(objects=var_2)
"
Retrieve my tasks with priority P1 and summarize them,"var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p1""], owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Extract actionable tasks from the meeting notes ""M"" and assign to ""Delta"" team members","var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = search_object_by_name(query=""Delta"")
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
" Find work items with issue priority P3, summarize them, and add them to the current sprint, limiting the results to 28.","var_1 = works_list(issue.priority=[""P3""], limit=28)
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"Get work items for parts 'PROD-456' and 'PROD-789', summarize them, and filter by users 'DEVU-123', 'DEVU-789'","var_1 = works_list(applies_to_part=[""PROD-456"", ""PROD-789""], type=[""issue"", ""ticket"", ""task""])
var_2 = summarize_objects(objects=var_1)
var_3 = works_list(created_by=[""DEVU-123"", ""DEVU-789""], type=[""issue"", ""ticket"", ""task""])
"
Create tasks from developmentmeetingnotes and prioritize them,"var_1 = create_actionable_tasks_from_text(text=""developmentmeetingnotes"")
var_2 = prioritize_objects(objects=var_1)
"
List and prioritize tasks that need response in the support stage,"var_1 = works_list(stage.name=[""support""], ticket.needs_response=True, type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
Prioritize my tasks for the 'Backend' stage and summarize the top ones,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""Backend""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Retrieve and summarize REV-999 associated issues with p2 priority,"var_1 = works_list(issue.rev_orgs=[""REV-999""], issue.priority=[""p2""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Summarize my tasks in 'development' stage and filter for those associated with REV-456,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1], stage.name=[""development""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Identify tasks of type ""issue"" for user ""DevY"" and add them to the current sprint","var_1 = search_object_by_name(query=""DevY"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
" Retrieve all tasks in the DESIGN stage, summarize them, and prioritize them, limiting the number of work items to 38.","var_1 = works_list(stage.name=[""DESIGN""], type=[""task""], limit=38)
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
"Given the text 'Meeting summary regarding project Alpha', extract action items and prioritize them for the current sprint.","var_1 = create_actionable_tasks_from_text(text='Meeting summary regarding project Alpha')
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Search for user Alice's ID and summarize her issues with priority p2.,"var_1 = search_object_by_name(query=""Alice"")
var_2 = works_list(created_by=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
" Retrieve work items of type task related to part AUTH-SYSTEM, prioritize them, and limit the results to 20.","var_1 = works_list(applies_to_part=[""AUTH-SYSTEM""], limit=20, type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
Summarize my P1 issues,"var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p1""], owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve the current sprint ID, list all tasks within it, and then provide a summary of these tasks.","var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find all tasks related to the ""AlphaProject"" and filter them by priority P2","var_1 = search_object_by_name(query=""AlphaProject"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p2""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Summarize tasks from the 'QA Team' and list them by priority for the upcoming sprint,"var_1 = works_list(created_by=[""QA Team""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"For user DEVU-456, summarize their tickets and issues with 'blocker' severity","var_1 = works_list(created_by=[""DEVU-456""], ticket.severity=[""blocker""], type=[""ticket"", ""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Retrieve all tickets marked as ""blocker"" from ""SalesTeam"" and generate a list of summary points.","var_1 = search_object_by_name(query=""SalesTeam"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""blocker""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
" Summarize and prioritize issues with priority P3 for the SALES rev organization, limiting the results to 30.","var_1 = works_list(issue.priority=[""P3""], issue.rev_orgs=[""SALES""], limit=30, type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
Could there be dimensions of existence beyond our current comprehension?,#Unanswerable_Invalid_Query_Error
"Hi, my name is Arya. What's yours?",#Unanswerable_Invalid_Query_Error
Find and summarize all blocker severity tickets under the OPERATIONS rev organization with a limit of 20 work items.,"var_1 = search_object_by_name(query=""OPERATIONS"")
var_2 = works_list(ticket.severity=[""blocker""], ticket.rev_org=[var_1], type=[""ticket""], limit=20)
var_3 = summarize_objects(objects=var_2)
"
"Find tickets from REV-456, summarize and prioritize them","var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
Create a list of issues for 'QA' stage and add them to my sprint,"var_1 = who_am_i()
var_2 = works_list(stage.name=[""QA""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Find work items in progress for the ""QuantumLeap"" feature, summarize and filter by those created by ""DevTeamX""","var_1 = search_object_by_name(query=""QuantumLeap"")
var_2 = search_object_by_name(query=""DevTeamX"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2], stage.name=[""in progress""], type=[""issue"", ""ticket"", ""task""])
var_4 = summarize_objects(objects=var_3)
"
" Find similar tickets to TICK-123, summarize them, and add them to the current sprint, limiting the number of work items to 41.","var_1 = get_similar_work_items(work_id=""TICK-123"")
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
Locate and prioritize all P1 issues owned by LeadDeveloper and limit the number of work items to 18.,"var_1 = works_list(owned_by=[""LeadDeveloper""], issue.priority=[""p1""], type=[""issue""], limit=18)
var_2 = prioritize_objects(objects=var_1)
"
"Summarize the current status of tickets related to the ""Database Upgrade"" project.","var_1 = search_object_by_name(query=""Database Upgrade"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Find work items related to CAPL-123 that need a response and are owned by user DEVU-456,"var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], owned_by=[""DEVU-456""], ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])
"
"Find work items referencing part PROD-101, prioritize them and then summarize those with a 'high' priority level.","var_1 = works_list(applies_to_part=[""PROD-101""], type=[""issue"", ""ticket"", ""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = works_list(applies_to_part=[""PROD-101""], issue.priority=[""high""], type=[""issue""])
var_4 = summarize_objects(objects=var_3)
"
Find tasks related to project Alpha and summarize them,"var_1 = search_object_by_name(query=""project Alpha"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Prioritize tickets related to 'Project-X' and filter for 'high' severity,"var_1 = search_object_by_name(query=""Project-X"")
var_2 = works_list(ticket.severity=[""high""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
Retrieve work items created by user DevLead and summarize the top 20.,"var_1 = search_object_by_name(query=""DevLead"")
var_2 = works_list(created_by=[var_1], limit=20)
var_3 = summarize_objects(objects=var_2)
"
"List latest tickets by 'user123', prioritize by severity, and summarize for the weekly review","var_1 = search_object_by_name(query=""user123"")
var_2 = works_list(type=[""ticket""], created_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Retrieve work items related to the ""BetaFeature"" and sort them by priority","var_1 = search_object_by_name(query=""BetaFeature"")
var_2 = works_list(applies_to_part=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
"Retrieve and summarize all tasks related to ""Data-Integrity"" from the current sprint","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""Data-Integrity"")
var_3 = works_list(applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
"For part ID PART-001, get all tasks in the design phase, prioritize and assign for the current sprint","var_1 = works_list(applies_to_part=[""PART-001""], stage.name=[""design""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Create a summary of tickets for the 'BackendTeam' and prioritize by filtering for severity,"var_1 = search_object_by_name(query=""BackendTeam"")
var_2 = works_list(ticket.severity=[""blocker"", ""high"", ""medium"", ""low""], owned_by=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
Find tickets associated with REV-456 that are marked as blockers and organize them by priority,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""blocker""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
Identify and summarize work tickets owned by USER-789 with severity 'medium' in the 'QA' stage,"var_1 = works_list(owned_by=[""USER-789""], ticket.severity=[""medium""], stage.name=[""QA""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Find all tasks related to the Epic EPIC-456 and organize them by priority,"var_1 = search_object_by_name(query=""EPIC-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Find tasks associated with product PROD-456 and categorize them by priority,"var_1 = search_object_by_name(query=""PROD-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Summarize my tasks related to the 'BetaLaunch' project,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""BetaLaunch"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
Create tasks for issues in the 'development' stage from text note N and prioritize them,"var_1 = create_actionable_tasks_from_text(text=""N"")
var_2 = works_list(stage.name=[""development""], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
"Retrieve tickets that need a response and are associated with ""REV-456"", then add them to the current sprint","var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Extract tasks from the engineering meeting notes T and summarize the action items,"var_1 = create_actionable_tasks_from_text(text=""T"")
var_2 = summarize_objects(objects=var_1)
"
"Retrieve and summarize work items in the ""development"" stage for ""ENH-123""","var_1 = search_object_by_name(query=""ENH-123"")
var_2 = works_list(stage.name=[""development""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"Get tickets that need response for ""Beta"" project and summarize them.","var_1 = search_object_by_name(query=""Beta"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
" Summarize all issues with the p3 priority from the ZetaZone rev organization and add them to the current sprint, limiting the number of work items to 39.","var_1 = works_list(issue.rev_orgs=[""ZetaZone""], issue.priority=[""p3""], type=[""issue""], limit=39)
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"Retrieve my P2 tickets related to REV-999, summarize and prioritize them","var_1 = who_am_i()
var_2 = search_object_by_name(query=""REV-999"")
var_3 = works_list(type=[""ticket""], issue.priority=[""p2""], owned_by=[var_1], ticket.rev_org=[var_2])
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)
"
Identify my tasks in the 'development' stage and list them,"var_1 = who_am_i()
var_2 = works_list(stage.name=[""development""], owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Locate and prioritize all tasks that need a response and are associated with part MODULE-12 with a limit of 40 work items.,"var_1 = works_list(applies_to_part=[""MODULE-12""], ticket.needs_response=True, type=[""task""], limit=40)
var_2 = prioritize_objects(objects=var_1)
"
"For customer ""DynamicDuo"", find tickets, prioritize, and add to sprint","var_1 = search_object_by_name(query=""DynamicDuo"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Get my work items and filter those in the ""planning"" stage","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""planning""], type=[""task""])
"
"For the new ""UX Improvement"" initiative, find related tasks and create a summary for the design team meeting.","var_1 = search_object_by_name(query=""UX Improvement"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Add my P2 issues to the sprint REV-345,"var_1 = who_am_i()
var_2 = works_list(type=[""issue""], issue.priority=[""p2""], owned_by=[var_1])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""REV-345"")
"
"Gather my tasks with p0 priority, summarize for reporting.","var_1 = who_am_i()
var_2 = works_list(type=[""task""], issue.priority=[""p0""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
"
List and prioritize all tickets needing a response for 'SUPPORT_TEAM',"var_1 = search_object_by_name(query=""SUPPORT_TEAM"")
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
"Find tasks related to the project ""Alpha"" that need a response and provide a summary","var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(ticket.needs_response=True, applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find the top priority tasks related to the ""DATABASE-REFRESH"" part and summarize them","var_1 = works_list(applies_to_part=[""DATABASE-REFRESH""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"From a provided string ""New feature proposal"", create tasks and return a prioritized list of these tasks","var_1 = create_actionable_tasks_from_text(text=""New feature proposal"")
var_2 = prioritize_objects(objects=var_1)
"
" Locate and summarize tickets from the WEB source channel with severity low, limiting the results to 40.","var_1 = search_object_by_name(query=""WEB"")
var_2 = works_list(ticket.source_channel=[var_1], ticket.severity=[""low""], limit=40)
var_3 = summarize_objects(objects=var_2)
"
Find all tasks related to project 'Phoenix' and sort them by priority,"var_1 = search_object_by_name(query=""Phoenix"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Create tasks for meeting notes and summarize the tasks,"var_1 = create_actionable_tasks_from_text(text=""meeting notes"")
var_2 = summarize_objects(objects=var_1)
"
"Identify the work items owned by the current user and filter them by stage ""Development"" for summarization.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""Development""], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
"Is the search for meaning a never-ending quest, or can one find ultimate fulfillment?",#Unanswerable_Invalid_Query_Error
"Assign p0, p1 priority issues to developer Dev123","var_1 = search_object_by_name(query=""Dev123"")
var_2 = works_list(type=[""issue""], issue.priority=[""p0"", ""p1""], owned_by=[var_1])
"
Find all tasks related to the component COMP-789 and determine who is responsible for them,"var_1 = search_object_by_name(query=""COMP-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
"
Summarize tasks related to part FRONTEND-3 in the DEVELOPMENT stage and limit the number of work items to 25.,"var_1 = works_list(stage.name=[""DEVELOPMENT""], applies_to_part=[""FRONTEND-3""], type=[""task""], limit=25)
var_2 = summarize_objects(objects=var_1)
"
Summarize all tickets from channel 'forum' for the 'BetaTesting' part,"var_1 = search_object_by_name(query=""BetaTesting"")
var_2 = works_list(applies_to_part=[var_1], ticket.source_channel=[""forum""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Identify and summarize work items similar to 'TASK-789',"var_1 = get_similar_work_items(work_id=""TASK-789"")
var_2 = summarize_objects(objects=var_1)
"
"Retrieve and list work items for part 'BETA-789' that need a response, then prioritize them","var_1 = works_list(applies_to_part=[""BETA-789""], ticket.needs_response=True, type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
Retrieve and prioritize my items of type 'issue' that are in 'development' stage,"var_1 = who_am_i()
var_2 = works_list(type=[""issue""], owned_by=[var_1], stage.name=[""development""])
var_3 = prioritize_objects(objects=var_2)
"
"Retrieve and summarize all issues from source channel ""Email""","var_1 = works_list(ticket.source_channel=[""Email""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Identify my issues with priority ""p1"" and summarize them","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve work items owned by USER-456, prioritize them, and summarize the top priorities","var_1 = works_list(type=[""issue"", ""ticket"", ""task""], owned_by=[""USER-456""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Find all tasks related to the project ""ProjectX"" and provide a summary","var_1 = search_object_by_name(query=""ProjectX"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve the current sprint ID and add any newly created p3 issues to it,"var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p3""], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
Retrieve and summarize tickets needing a response that are related to organization ORG-999,"var_1 = search_object_by_name(query=""ORG-999"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Find tasks related to the part ""PROD-321"" and filter those that need a response.","var_1 = works_list(applies_to_part=[""PROD-321""], ticket.needs_response=True, type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
Summarize the current sprint's work items for the 'GammaRelease' and for tickets needing response,"var_1 = get_sprint_id()
var_2 = works_list(type=[""ticket""], stage.name=[""GammaRelease""], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
Generate a list of tickets with a severity of 'blocker' and create a summary for the sprint planning,"var_1 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Add new high priority issues to current sprint,"var_1 = works_list(issue.priority=[""high""], type=[""issue""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"Retrieve all tickets from customer MegaCorp needing response, prioritize, and summarize for a quick review","var_1 = search_object_by_name(query=""MegaCorp"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Create a summary of open tickets that need response,"var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Find issues with priority P2 for the REV-123 organization and list them,"var_1 = search_object_by_name(query=""REV-123"")
var_2 = works_list(issue.priority=[""p2""], issue.rev_orgs=[var_1], type=[""issue""])
"
" Find similar issues to ISSU-789, add them to the current sprint, and summarize them, limiting the number of work items to 21.","var_1 = get_similar_work_items(work_id=""ISSU-789"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
var_4 = summarize_objects(objects=var_1)
"
"List all tasks owned by user DEVU-456, filter by stage 'development', and add to sprint SPRINT-123","var_1 = works_list(owned_by=[""DEVU-456""], stage.name=[""development""], type=[""task""])
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-123"")
"
"Create a list of new tasks from notes taken during the ""Gamma"" project meeting.","var_1 = create_actionable_tasks_from_text(text=""Gamma project meeting"")
"
"Find all P2 tickets related to ""CustomerX"" and then summarize the results.","var_1 = search_object_by_name(query=""CustomerX"")
var_2 = works_list(issue.rev_orgs=[var_1], issue.priority=[""p2""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Could emotions be a language that transcends verbal communication?,#Unanswerable_Invalid_Query_Error
"Prioritize my tickets related to the ""support"" type and summarize the top priority ones","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.source_channel=[""support""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Extract action items from the latest team meeting notes X and assign to the team members,"var_1 = create_actionable_tasks_from_text(text=""X"")
"
Search for my tasks in 'development' stage and add them to the sprint,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Summarize my resolved tickets and find similar tasks that need my attention,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""resolved""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_similar_work_items(work_id=var_2)
"
Find and prioritize issues reported by user User123 add to my current sprint,"var_1 = search_object_by_name(query=""User123"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Filter and prioritize my tasks in 'Development' stage then assign them to the current sprint,"var_1 = who_am_i()
var_2 = works_list(stage.name=[""Development""], owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=get_sprint_id())
"
"Find and summarize work items related to the ""Analytics"" project created by user ""ANALYT-321""","var_1 = search_object_by_name(query=""Analytics"")
var_2 = works_list(created_by=[""ANALYT-321""], applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve the list of my tasks under stage ""processing"", summarize them and add them to the current sprint.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""processing""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
"Summarize all tasks with the type 'ticket' from the source channel 'email' for the part ""PART-321""","var_1 = search_object_by_name(query=""PART-321"")
var_2 = works_list(applies_to_part=[var_1], ticket.source_channel=[""email""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Assign work items of type 'task' to current sprint if they are in 'review' stage,"var_1 = works_list(type=[""task""], stage.name=[""review""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Prioritize and assign to current sprint all tasks with source channel 'email',"var_1 = works_list(ticket.source_channel=[""email""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Find work items related to ""FeatureY"" and summarize the associated tickets","var_1 = search_object_by_name(query=""FeatureY"")
var_2 = works_list(applies_to_part=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Find and summarize tasks related to project Alpha,"var_1 = search_object_by_name(query=""Project Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Find and summarize issues for a specific Rev organization,"var_1 = search_object_by_name(query=""specific Rev organization"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Generate a list of blocker tickets and summarize them for review,"var_1 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Find all tickets related to 'Network Upgrade' and add them to my active sprint for tracking,"var_1 = search_object_by_name(query=""Network Upgrade"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Find and summarize my tasks related to the 'Backend Refactor' project,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""Backend Refactor"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
"Retrieve my work items associated with part PART-987 and needing response, then summarize them","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], applies_to_part=[""PART-987""], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
Summarize the work done by user UserX on high severity tickets last week,"var_1 = works_list(created_by=[""UserX""], ticket.severity=[""high""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Find and summarize all tasks related to CAPL-456 that are not yet completed.,"var_1 = search_object_by_name(query=""CAPL-456"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""not completed""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Summarize my work items of type ""issue""","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Can you provide the biography of Marie Curie?,#Unanswerable_Invalid_Query_Error
List new tickets from the Rev organization REV-321 and summarize the impact,"var_1 = search_object_by_name(query=""REV-321"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"For issues labeled 'p0', get similar work items and summarize them","var_1 = works_list(issue.priority=[""p0""], type=[""issue""])
var_2 = get_similar_work_items(work_id=var_1[0])
var_3 = summarize_objects(objects=var_2)
"
"Find and summarize work items in the Development stage for part API-987, limiting the results to 50.","var_1 = works_list(stage.name=[""Development""], applies_to_part=[""API-987""])
var_2 = summarize_objects(objects=var_1)
"
"Find all issues created by user USER-123 in the ""Testing"" stage and get their IDs","var_1 = works_list(created_by=[""USER-123""], stage.name=[""Testing""], type=[""issue""])
"
"Create a list of work items from the insights found in the document ""Doc-567"" and assign them to team ""TEAM-234""","var_1 = create_actionable_tasks_from_text(text=""Doc-567"")
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""TEAM-234"")
"
"Retrieve my work items that need a response, prioritize them, and summarize","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket"", ""issue"", ""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Prioritize tasks that I created, which are not yet in any sprint, and add them to the current sprint","var_1 = who_am_i()
var_2 = works_list(created_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Is beauty an objective reality, or does it exist only in the eye of the beholder?",#Unanswerable_Invalid_Query_Error
Find work items related to project PROJ-456 that need a response and are in the 'development' stage,"var_1 = search_object_by_name(query=""PROJ-456"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, stage.name=[""development""], type=[""work""])
var_3 = summarize_objects(objects=var_2)
"
"Generate a list of tasks based on the document ""Project Outline"", prioritize them, and identify similar existing tasks","var_1 = create_actionable_tasks_from_text(text=""Project Outline"")
var_2 = prioritize_objects(objects=var_1)
var_3 = get_similar_work_items(work_id=var_1[0])
"
"Find similar issues to ENG-432, summarize them, and then find work items similar to the summary","var_1 = get_similar_work_items(work_id=""ENG-432"")
var_2 = summarize_objects(objects=var_1)
var_3 = get_similar_work_items(work_id=var_2)
"
Create tasks from the insights of a project update and add them to the sprint for user USER-123.,"var_1 = search_object_by_name(query=""USER-123"")
var_2 = create_actionable_tasks_from_text(text=""project update"")
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Collect my issues from Rev organization REV-321 and summarize the urgent ones,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""REV-321"")
var_3 = works_list(owned_by=[var_1], issue.rev_orgs=[var_2], type=[""issue""])
var_4 = summarize_objects(objects=var_3)
"
Summarize my tasks related to CAPL-456 and check if they need responses,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""CAPL-456"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
Fetch and prioritize my tickets from 'Email' source channel that are in 'pending' stage,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.source_channel=[""Email""], stage.name=[""pending""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
Determine the user ID of the current user and list their tasks in progress,"var_1 = who_am_i()
var_2 = works_list(stage.name=[""in progress""], owned_by=[var_1], type=[""task""])
"
"Find open tasks related to the ""BackendOptimization"" project and assign them to the current sprint","var_1 = search_object_by_name(query=""BackendOptimization"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""open""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Search for the 'ProjectX' object and provide a summary,"var_1 = search_object_by_name(query=""ProjectX"")
var_2 = works_list(owned_by=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
Search and summarize all open issues from user 'USER-456' in the 'QA' stage,"var_1 = search_object_by_name(query=""USER-456"")
var_2 = works_list(type=[""issue""], created_by=[var_1], stage.name=[""QA""])
var_3 = summarize_objects(objects=var_2)
"
"Search for a user by the name ""Alex Developer"", retrieve all their created issues, and summarize those issues.","var_1 = search_object_by_name(query=""Alex Developer"")
var_2 = works_list(type=[""issue""], created_by=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Prioritize tasks created by user USER-789 and summarize the results,"var_1 = works_list(created_by=[""USER-789""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Search for tickets associated with the Rev organization REV-999, filter for medium severity, and summarize the results","var_1 = search_object_by_name(query=""REV-999"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve issues created by user ID ""USR-789"", summarize them, and then search for a sprint that matches ""Sprint 5""","var_1 = works_list(created_by=[""USR-789""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = search_object_by_name(query=""Sprint 5"")
"
"Identify tickets from the ""email"" channel with the ""medium"" severity and summarize for review","var_1 = works_list(type=[""ticket""], ticket.source_channel=[""email""], ticket.severity=[""medium""])
var_2 = summarize_objects(objects=var_1)
"
Add all P1 tickets to the sprint for the Rev organization REV-TEAM,"var_1 = works_list(issue.priority=[""p1""], ticket.rev_org=[""REV-TEAM""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Create a summary of issues in 'QA Testing' stage for part 'UIX-456'.,"var_1 = works_list(type=[""issue""], stage.name=[""QA Testing""], applies_to_part=[""UIX-456""])
var_2 = summarize_objects(objects=var_1)
"
Retrieve the sprint ID and use it to add task TASK-789 to the sprint,"var_1 = get_sprint_id()
var_2 = add_work_items_to_sprint(work_ids=[""TASK-789""], sprint_id=var_1)
"
"Add issues related to the ""DEVOPS-321"" project that need a response to the current sprint.","var_1 = search_object_by_name(query=""DEVOPS-321"")
var_2 = works_list(type=[""issue""], ticket.needs_response=True, ticket.rev_org=[var_1])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Identify the most recent sprint and summarize work items associated with it,"var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], type=[""work""])
var_3 = summarize_objects(objects=var_2)
"
"List all issues related to the ""Networking"" project and filter them by priority P2","var_1 = search_object_by_name(query=""Networking"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p2""], type=[""issue""])
"
"Find and prioritize tasks related to project Gamma, then summarize","var_1 = search_object_by_name(query=""Gamma"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Find all p1 priority issues related to component COMP-789 and summarize them,"var_1 = search_object_by_name(query=""COMP-789"")
var_2 = works_list(issue.priority=[""p1""], applies_to_part=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Summarize work items from sprint SPR-123 and filter for high severity issues,"var_1 = works_list(ticket.severity=[""high""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Retrieve the sprint ID and list all my tasks created this sprint,"var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], type=[""task""])
"
"For the 'Innovation' project, list all issues, prioritize, and create a summary report","var_1 = search_object_by_name(query=""Innovation"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Filter work items in 'development' stage and sort them by priority,"var_1 = works_list(stage.name=[""development""], type=[""issue"", ""ticket"", ""task""])
var_2 = prioritize_objects(objects=var_1)
"
Find and summarize all tasks related to part CAPL-987 created by user DEVU-456,"var_1 = search_object_by_name(query=""CAPL-987"")
var_2 = search_object_by_name(query=""DEVU-456"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
Find work items with tag 'backend' and prioritize them for the current sprint.,"var_1 = works_list(applies_to_part=[""backend""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Prioritize p0 issues from REV-789 organization and filter those that are of type 'ticket',"var_1 = works_list(issue.rev_orgs=[""REV-789""], issue.priority=[""p0""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
Find and summarize all blocker level issues assigned to user USER-456,"var_1 = works_list(owned_by=[""USER-456""], ticket.severity=[""blocker""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Retrieve work items based on 'CAPL-123' part, filter for 'blocker' severity tickets, and generate a summary","var_1 = works_list(applies_to_part=[""CAPL-123""], ticket.severity=[""blocker""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Could the laws of nature be influenced by a higher intelligence, guiding the evolution of the cosmos?",#Unanswerable_Invalid_Query_Error
Retrieve the current sprint ID and list my issues with priority P1 to be added to it,"var_1 = who_am_i()
var_2 = works_list(type=[""issue""], issue.priority=[""p1""], owned_by=[var_1])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Identify my tasks, sort by priority, and summarize","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Add high-priority tasks to my list for the current sprint,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p0""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Add newly created issues from project ""PROJ-789"" to my current sprint.","var_1 = search_object_by_name(query=""PROJ-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Summarize the work items owned by user USER-456 and filter for tasks in the 'development' stage,"var_1 = works_list(owned_by=[""USER-456""], stage.name=[""development""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
"List tasks owned by ""DEV-TEAM-1"" that need a response, and prioritize them","var_1 = search_object_by_name(query=""DEV-TEAM-1"")
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Create a summary report for 'blocker' severity tickets from 'MainStream' channel,"var_1 = search_object_by_name(query=""MainStream"")
var_2 = works_list(ticket.severity=[""blocker""], ticket.source_channel=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Find work items for parts FEAT-999 and CAPL-777 created by user DEVU-321,"var_1 = works_list(applies_to_part=[""FEAT-999"", ""CAPL-777""], created_by=[""DEVU-321""])
"
"Retrieve and summarize all tickets marked as blocker severity associated with ""REV-Engineering"".","var_1 = search_object_by_name(query=""REV-Engineering"")
var_2 = works_list(ticket.severity=[""blocker""], ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"List all tasks within the ""Development"" stage for the ""WebApp"" project and determine which ones are overdue.","#Unanswerable_Invalid_Query_Error
"
" Retrieve all P0 issues from the GammaProject rev organization, summarize them, and add them to the current sprint, limiting the number of work items to 34.","var_1 = search_object_by_name(query=""GammaProject"")
var_2 = works_list(issue.priority=[""p0""], issue.rev_orgs=[var_1], limit=34, type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
Add all 'p0' priority issues to the sprint for team REV-TEAM-123,"var_1 = works_list(issue.priority=[""p0""], issue.rev_orgs=[""REV-TEAM-123""], type=[""issue""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Find and summarize new tickets from 'WebPortal' channel for analysis,"var_1 = works_list(ticket.source_channel=[""WebPortal""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Find tickets needing response and prioritize them,"var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
Find and summarize all issues related to part ENH-999 that are in the 'development' stage,"var_1 = works_list(applies_to_part=[""ENH-999""], stage.name=[""development""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"For issues owned by user DEVU-789 and in the 'QA' stage, create a summary.","var_1 = works_list(type=[""issue""], owned_by=[""DEVU-789""], stage.name=[""QA""])
var_2 = summarize_objects(objects=var_1)
"
"Filter my P2 tickets, prioritize them, and retrieve the sprint ID.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""p2""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
"
Retrieve and summarize all tickets that have not received a response.,"var_1 = works_list(ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)
"
"Is reality a shared illusion, and do we collectively agree on its parameters?",#Unanswerable_Invalid_Query_Error
Find all tasks related to component COMP-789 and arrange them by their stages,"var_1 = works_list(applies_to_part=[""COMP-789""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
"Retrieve my tasks that are in the 'development' stage, then summarize and prioritize them","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"Locate my tasks with critical priority, extract a summary, and then add any new tasks to this week's sprint","var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], issue.priority=[""critical""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
" Locate and summarize tasks with the issue type for the FINANCE rev organization, limiting the results to 18.","var_1 = search_object_by_name(query=""FINANCE"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""task""], limit=18)
var_3 = summarize_objects(objects=var_2)
"
"Find tickets needing a response, summarize, and prioritize for the REV-456 organization","var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
Search and list out issues linked to the 'XYZ-Feature' and summarize them for review,"var_1 = search_object_by_name(query=""XYZ-Feature"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
List all tickets requiring a response and add them to sprint SPRINT-456,"var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-456"")
"
Assign issues created by USER-456 that need a response to the current sprint,"var_1 = works_list(created_by=[""USER-456""], ticket.needs_response=True, type=[""issue""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Retrieve and prioritize all medium severity tickets under the TECH_SUPPORT rev organization with a limit of 20 work items.,"var_1 = works_list(ticket.rev_org=[""TECH_SUPPORT""], ticket.severity=[""medium""], type=[""ticket""], limit=20)
var_2 = prioritize_objects(objects=var_1)
"
"Find and prioritize tickets from ""HighTech Corp"" that are in the ""pending"" stage","var_1 = search_object_by_name(query=""HighTech Corp"")
var_2 = works_list(ticket.rev_org=[var_1], stage.name=[""pending""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Provide a summary of tasks related to the ""Alpha"" project that are currently in the ""Testing"" stage","var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(stage.name=[""Testing""], applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"List all issue items I own that are in the 'development' stage, prioritize them, and then add them to the sprint 'S1234'.","var_1 = who_am_i()
var_2 = works_list(stage.name=[""development""], owned_by=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""S1234"")
"
"Summarize all issues from ""Engineering Team A"", while limiting the issues to 30 in number","var_1 = search_object_by_name(query=""Engineering Team A"")
var_2 = works_list(created_by=[var_1], limit=30, type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Prioritize all p0, p2 issues for ""WidgetX"" for the user ""USR-321""","var_1 = search_object_by_name(query=""WidgetX"")
var_2 = works_list(issue.priority=[""p0"", ""p2""], applies_to_part=[var_1], owned_by=[""USR-321""], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
What are the differences between red and white wine?,#Unanswerable_Invalid_Query_Error
"Search for the ID of ""LeadEngineer"" and then display list of their tasks","var_1 = search_object_by_name(query=""LeadEngineer"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve work items related to ENH-123 and summarize them.,"var_1 = search_object_by_name(query=""ENH-123"")
var_2 = works_list(applies_to_part=[var_1], type=[""work""])
var_3 = summarize_objects(objects=var_2)
"
"Find and summarize all tasks related to the ""Backend Refactoring"" project","var_1 = search_object_by_name(query=""Backend Refactoring"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Check for tickets with severity 'blocker' and assign them to the sprint for immediate attention,"var_1 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Retrieve the sprint ID and provide a summary of all issues assigned to me.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
"
Find tasks owned by DEVU-456 in the 'testing' stage and create a summary.,"var_1 = works_list(owned_by=[""DEVU-456""], stage.name=[""testing""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Retrieve the current sprint ID,"var_1 = get_sprint_id()
"
Find all tasks related to the project 'OmegaLaunch' and identify those needing a response.,"var_1 = search_object_by_name(query=""OmegaLaunch"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""task""])
"
List and summarize all tickets needing a response from the Rev organization REV-AI,"var_1 = search_object_by_name(query=""REV-AI"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"List my P2 tickets, summarize, and prioritize them for this week's review","var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], issue.priority=[""p2""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
How do I train for a marathon?,#Unanswerable_Invalid_Query_Error
What are the ingredients in a margarita cocktail?,#Unanswerable_Invalid_Query_Error
Summarize tickets needing response from Rev organization REV-456,"var_1 = works_list(ticket.rev_org=[""REV-456""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Find and organize all 'Client-Support' tickets based on severity and provide a detailed summary.,"var_1 = search_object_by_name(query=""Client-Support"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Add all my P2 issues to the sprint for ""NewFeature123""","var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""issue""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)
"
Identify work items owned by user USER-789 that need a response and prioritize these items.,"var_1 = search_object_by_name(query=""USER-789"")
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)
"
Retrieve current sprint's ID and list all P2 issues,"var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p2""], type=[""issue""])
"
"Is there a limit to human understanding, or can we continue to unravel the mysteries of existence indefinitely?",#Unanswerable_Invalid_Query_Error
"Prioritize issues created by user ""USER-234"" and add to current sprint for quick resolution","var_1 = works_list(created_by=[""USER-234""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Is the concept of self an illusion, and are we interconnected with all living things?",#Unanswerable_Invalid_Query_Error
List my tasks related to the 'QA-Testing' part and add them to the current sprint,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""QA-Testing"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Prioritize and summarize my tasks that need a response,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Get current user's work items with priority p2 and provide a summary,"var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], issue.priority=[""p2""], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
Add new  issues from department REV-345 to my sprint,"var_1 = search_object_by_name(query=""REV-345"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""issue""])
var_3 = who_am_i()
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
Retrieve the ID of the current sprint and list all tasks in this sprint needing a response,"var_1 = get_sprint_id()
var_2 = works_list(ticket.needs_response=True, type=[""task""])
"
"Find issues related to ""FEAT-999"" that are at the ""development"" stage and created by user ""DEV-321"".","var_1 = search_object_by_name(query=""FEAT-999"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""development""], created_by=[""DEV-321""], type=[""issue""])
"
"Retrieve tickets needing response from the Rev organization ""REV-TEAM"" and summarize the blocker ones","var_1 = works_list(ticket.needs_response=True, ticket.rev_org=[""REV-TEAM""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1) "
Summarize the issues that I have created and are in the 'Testing' stage,"var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], stage.name=[""Testing""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Find tasks related to the ""Alpha Project"" and arrange them by priority","var_1 = search_object_by_name(query=""Alpha Project"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Identify and summarize tasks related to 'Project X' that need a response,"var_1 = search_object_by_name(query=""Project X"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
"Extract tasks from the engineering meeting notes and assign them to ""EngSprint-22""","var_1 = search_object_by_name(query=""engineering meeting notes"")
var_2 = create_actionable_tasks_from_text(text=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""EngSprint-22"")
"
"Retrieve tickets from ""TechSupport"" channel, filter those needing response, and summarize","var_1 = works_list(ticket.source_channel=[""TechSupport""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
What are the unresolved issues created by user USER-456 in the system?,"var_1 = works_list(created_by=[""USER-456""], type=[""issue""])
"
"Prioritize and add tickets from ""ChatSupport"" to the sprint","var_1 = works_list(type=[""ticket""], ticket.source_channel=[""ChatSupport""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
What is the current weather forecast for the city of Paris?,#Unanswerable_Invalid_Query_Error
"Add all tasks related to ""ProjectZ"" into the current sprint after prioritization","var_1 = search_object_by_name(query=""ProjectZ"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Find and summarize all issues with priority P2 in the 'QA' stage,"var_1 = works_list(issue.priority=[""p2""], stage.name=[""QA""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Retrieve the current sprint ID and add p3 issues from the ""GammaModule"".","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""GammaModule"")
var_3 = works_list(issue.priority=[""p3""], applies_to_part=[var_2], type=[""issue""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
"
"Identify tickets from ""New Product Launch"" requiring a response, prioritize them, and get the ID of the current user handling them","var_1 = search_object_by_name(query=""New Product Launch"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = who_am_i()
"
Find and summarize the tasks related to project Alpha that need a response,"var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find p3 priority issues for revision organization ""REV-456"" and summarize them","var_1 = works_list(issue.priority=[""p3""], issue.rev_orgs=[""REV-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Retrieve my tickets that need a response and sort them by severity,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
What if the purpose of life is not to find answers but to embrace the beauty of uncertainty?,#Unanswerable_Invalid_Query_Error
"Find tickets from the REV-999 organization that need a response, prioritize, and summarize them","var_1 = works_list(issue.rev_orgs=[""REV-999""], ticket.needs_response=True, type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Create a summary of urgent issues from ""CriticalComponents"" and assign them to the current sprint","var_1 = search_object_by_name(query=""CriticalComponents"")
var_2 = works_list(issue.rev_orgs=[var_1], issue.priority=[""p0""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
"Analyze work items for ENH-789, summarize and create actionable tasks","var_1 = works_list(applies_to_part=[""ENH-789""])
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)
"
Retrieve and categorize issues created by 'UserX' related to part 'UIUX-789',"var_1 = search_object_by_name(query=""UserX"")
var_2 = search_object_by_name(query=""UIUX-789"")
var_3 = works_list(created_by=[var_1], applies_to_part=[var_2], type=[""issue""])
"
"Identify tickets related to ""Server Crash"" incident, prioritize them by impact and list the IDs.","var_1 = search_object_by_name(query=""Server Crash"")
var_2 = works_list(type=[""ticket""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
"Return a list of my open tickets that need a response and are associated with ""TechCorp""","var_1 = who_am_i()
var_2 = search_object_by_name(query=""TechCorp"")
var_3 = works_list(owned_by=[var_1], ticket.needs_response=True, ticket.rev_org=[var_2], type=[""ticket""])
"
Find tickets that have not been assigned and are from the 'frontend' department,"var_1 = works_list(type=[""ticket""], owned_by=[], ticket.source_channel=[""frontend""])
var_2 = summarize_objects(objects=var_1)
"
Find p0 priority tasks assigned to user USER-456 and summarize them,"var_1 = works_list(issue.priority=[""p0""], owned_by=[""USER-456""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
"Display work items in ""QA"" stage for parts ""API-456"" and ""LIB-789"" and then prioritize them according to severity.","var_1 = works_list(stage.name=[""QA""], applies_to_part=[""API-456"", ""LIB-789""])
var_2 = prioritize_objects(objects=var_1)
"
Fetch my current sprint ID and list all tasks that need responses,"var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(ticket.needs_response=True, type=[""task""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)
"
"Search for a part named 'Widget123', get all related tasks, and add them to the sprint with ID SPRINT-789","var_1 = search_object_by_name(query=""Widget123"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-789"")
"
"Create and prioritize tasks for the upcoming feature launch based on the description ""Launch Plan""","var_1 = create_actionable_tasks_from_text(text=""Launch Plan"")
var_2 = prioritize_objects(objects=var_1)
"
List and prioritize all tasks needing response for user USER-999,"var_1 = who_am_i()
var_2 = works_list(ticket.needs_response=True, owned_by=[""USER-999""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Summarize all 'issue' type work items owned by 'TeamAlpha' and filter by 'p2' priority.,"var_1 = search_object_by_name(query=""TeamAlpha"")
var_2 = works_list(type=[""issue""], owned_by=[var_1], issue.priority=[""p2""])
var_3 = summarize_objects(objects=var_2)
"
Find and list all tasks in the 'development' stage for component 'COMP-321',"var_1 = search_object_by_name(query=""COMP-321"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""development""], type=[""task""])
"
Retrieve the ID of the ongoing sprint and list all tickets that need a response,"var_1 = get_sprint_id()
var_2 = works_list(ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve and prioritize all low severity tickets under the CUSTOMER_RELATIONS rev organization with a limit of 20 work items.,"var_1 = search_object_by_name(query=""CUSTOMER_RELATIONS"")
var_2 = works_list(ticket.severity=[""low""], ticket.rev_org=[var_1], type=[""ticket""], limit=20)
var_3 = prioritize_objects(objects=var_2)
"
"Find work items created by user DEVU-456, prioritize them, and add to sprint SPR-ID-789.","var_1 = works_list(created_by=[""DEVU-456""], type=[""issue"", ""ticket"", ""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPR-ID-789"")
"
"Generate a list of all my P3 tickets, summarize them, and schedule a meeting to discuss them.","var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p3""], owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Create a report of all open tickets from ""RevolutionaryTech"" and their current status","var_1 = search_object_by_name(query=""RevolutionaryTech"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"What if our perception of time is a construct, and past, present, and future exist simultaneously?",#Unanswerable_Invalid_Query_Error
Review all tickets marked as 'medium' severity that came through 'email' and summarize for the weekly meeting,"var_1 = works_list(ticket.severity=[""medium""], ticket.source_channel=[""email""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Retrieve my tasks of type 'issue' in 'QA' stage, then summarize and add them to the sprint 'SPRINT-4321'","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""QA""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-4321"")
"
"Identify work items related to the component 'COMP-321', filter them for P2 issues, and generate their summary.","var_1 = works_list(applies_to_part=[""COMP-321""], issue.priority=[""p2""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Get a list of similar work items to ENH-999 and summarize them for review,"var_1 = get_similar_work_items(work_id=""ENH-999"")
var_2 = summarize_objects(objects=var_1)
"
"Identify my tasks of type 'issue', summarize and prioritize them","var_1 = who_am_i()
var_2 = works_list(type=[""issue""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_3)
"
"Summarize and prioritize all open issues from the ""DeltaInitiative"" project","var_1 = search_object_by_name(query=""DeltaInitiative"")
var_2 = works_list(type=[""issue""], issue.rev_orgs=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Summarize my tasks related to the ""BetaLaunch"" project created by ""Beta""","var_1 = search_object_by_name(query=""BetaLaunch"")
var_2 = who_am_i()
var_3 = works_list(created_by=[""Beta""], owned_by=[var_2], applies_to_part=[var_1], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
"Retrieve my tasks related to EPIC-456, find similar tasks, and get a summary","var_1 = who_am_i()
var_2 = search_object_by_name(query=""EPIC-456"")
var_3 = works_list(type=[""task""], owned_by=[var_1], applies_to_part=[var_2])
var_4 = get_similar_work_items(work_id=var_3)
var_5 = summarize_objects(objects=var_4)
"
Identify work items of type 'issue' for part 'CAPL-456' and then summarize them for a quick report,"var_1 = works_list(applies_to_part=[""CAPL-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"List all tasks labeled as ""task"" for the ""ENH-999"" enhancement and summarize the list.","var_1 = search_object_by_name(query=""ENH-999"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve and summarize my p0 issues for a quick review,"var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p0""], owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Generate tasks based on meeting notes 'MeetingX123', then find and add them to the sprint dedicated to 'ProductY'.","var_1 = create_actionable_tasks_from_text(text=""MeetingX123"")
var_2 = search_object_by_name(query=""ProductY"")
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Summarize all tasks related to project PROJ-789,"var_1 = search_object_by_name(query=""PROJ-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Get the ID of the current sprint and summarize its work items,"var_1 = get_sprint_id()
var_2 = works_list(type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve my tasks of type ""issue"" and add them to the sprint ID ""SPRINT-42"".","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-42"")
"
"Get the ID of the current user and retrieve their owned issues from Rev organization REV-999, then prioritize.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.rev_orgs=[""REV-999""], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
Could reality be a collective dream shared by all living beings?,#Unanswerable_Invalid_Query_Error
Find all tasks related to the Epic EPIC-321 and sort them by priority.,"var_1 = search_object_by_name(query=""EPIC-321"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Create tasks for notes T from the meeting with entity XYZ, summarize these tasks","var_1 = create_actionable_tasks_from_text(text=""T"")
var_2 = summarize_objects(objects=var_1)
"
Find tickets needing a response and then prioritize them for the REV-456 organization,"var_1 = works_list(ticket.needs_response=True, ticket.rev_org=[""REV-456""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
Identify and summarize all issues raised by user 'USER-456',"var_1 = works_list(created_by=[""USER-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Retrieve work items of type 'task' for a component and prioritize by due date,"var_1 = search_object_by_name(query=""component"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
Generate a list of medium severity tickets and add them to sprint spr5,"var_1 = works_list(ticket.severity=[""medium""], type=[""ticket""])
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""spr5"")
"
"Get my P1 issues, prioritize them and summarize for quick review","var_1 = who_am_i()
var_2 = works_list(type=[""issue""], issue.priority=[""p1""], owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Retrieve current sprint ID and list of all tasks within it,"var_1 = get_sprint_id()
"
Identify and summarize all issues reported by user USER-XYZ,"var_1 = works_list(created_by=[""USER-XYZ""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Prioritize tasks with 'blocker' severity and summarize the result,"var_1 = works_list(type=[""task""], ticket.severity=[""blocker""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Identify similar issues to TKT-123, prioritize, and summarize for review","var_1 = get_similar_work_items(work_id=""TKT-123"")
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Could the boundaries between the physical and metaphysical realms be more porous than we realize?,#Unanswerable_Invalid_Query_Error
Retrieve the current sprint ID and display it,"var_1 = get_sprint_id()
"
"Organize and summarize tickets by medium severity for 'Team Alpha', and output p0-priority  tasks from the issue","var_1 = search_object_by_name(query=""Team Alpha"")
var_2 = works_list(type=[""ticket""], ticket.severity=[""medium""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = works_list(type=[""task""], issue.priority=[""p0""], owned_by=[var_1])
"
" Locate tasks in the Design stage, summarize them, and add them to the current sprint, limiting the results to 10.","var_1 = works_list(stage.name=[""Design""], type=[""task""], limit=10)
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
Generate a list of issues raised from 'Email' channel for 'GlobalTech' and prioritize them for review.,"var_1 = search_object_by_name(query=""GlobalTech"")
var_2 = works_list(type=[""issue""], ticket.source_channel=[""Email""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
"Prioritize the list of tasks for the ""BetaFeature"" and add high priority tasks to the sprint","var_1 = search_object_by_name(query=""BetaFeature"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Identify my open tickets and summarize them by severity,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Find work items that need a response and filtered by low severity for user ""DevX""","var_1 = search_object_by_name(query=""DevX"")
var_2 = works_list(type=[""ticket""], created_by=[var_1], ticket.needs_response=True, ticket.severity=[""low""])
var_3 = summarize_objects(objects=var_2)
"
How do I make a budget for my monthly expenses?,#Unanswerable_Invalid_Query_Error
Aggregate all tickets requiring a response for the engineering team,"var_1 = works_list(ticket.needs_response=True, owned_by=[""engineering team""], type=[""ticket""])
"
"Retrieve similar work items to ISSUE-123, summarize them, and limit the number of work items to 40.","var_1 = get_similar_work_items(work_id=""ISSUE-123"")
var_2 = summarize_objects(objects=var_1)
"
"Locate my P2 issues, summarize for report generation","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve all tasks that need a response, prioritize them, and assign to the sprint with ID ""SPRINT-321"".","var_1 = works_list(ticket.needs_response=True, type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-321"")
"
Retrieve and summarize all tickets needing a response for user DEVU-123,"var_1 = search_object_by_name(query=""DEVU-123"")
var_2 = works_list(ticket.needs_response=True, owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve the current user's tickets that need a response and sort them by severity,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
Find and summarize tasks related to 'Project-X' that need a response,"var_1 = search_object_by_name(query=""Project-X"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Filter by tickets of medium severity and summarize the work items for the 'Engineering' stage,"var_1 = works_list(ticket.severity=[""medium""], stage.name=[""Engineering""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Find and summarize all 'medium' priority tickets associated with 'Team-Rocket' that need a response,"var_1 = search_object_by_name(query=""Team-Rocket"")
var_2 = works_list(issue.priority=[""medium""], ticket.needs_response=True, issue.rev_orgs=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
List all tasks of type 'issue' that are in the 'QA' stage and summarize them,"var_1 = works_list(stage.name=[""QA""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Is reality a singular entity, or are there multiple layers of existence coexisting simultaneously?",#Unanswerable_Invalid_Query_Error
List and prioritize tasks related to Rev organization REV-456.,"var_1 = works_list(issue.rev_orgs=[""REV-456""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
"Summarize the tasks related to the ""AlphaProject"" and identify them after prioritizing","var_1 = search_object_by_name(query=""AlphaProject"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Find tasks related to the Epic Story ID ES-789 and determine if any need a response,"var_1 = search_object_by_name(query=""ES-789"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1], ticket.needs_response=True)
"
Add all tasks I've created this week to the current sprint,"var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Summarize all tasks in the QA_VERIFICATION stage created by QualityAnalyst and limit the number of work items to 17.,"var_1 = works_list(created_by=[""QualityAnalyst""], stage.name=[""QA_VERIFICATION""], type=[""task""], limit=17)
var_2 = summarize_objects(objects=var_1)
"
Retrieve and summarize P3 issues from source channel 'email' for the current sprint,"var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p3""], ticket.source_channel=[""email""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Find and add medium severity tickets from the REV-Support team to the sprint,"var_1 = search_object_by_name(query=""REV-Support"")
var_2 = works_list(ticket.severity=[""medium""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"List my issues tagged as 'p0', summarize, and get current sprint ID","var_1 = who_am_i()
var_2 = works_list(type=[""issue""], issue.priority=[""p0""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
"
"Get similar work items to PROJ-321, create a prioritized list, and then add them to my sprint","var_1 = get_similar_work_items(work_id=""PROJ-321"")
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Retrieve tickets that require a response, summarize them","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Search for the most recent sprint ID and add new high-priority tickets to it,"var_1 = get_sprint_id()
var_2 = works_list(ticket.severity=[""high""], type=[""ticket""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"Is there a purpose to existence, or do we create our own meaning in a seemingly indifferent universe?",#Unanswerable_Invalid_Query_Error
"Find tasks related to the ""AlphaProject"" and arrange them by their due dates.","var_1 = search_object_by_name(query=""AlphaProject"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
"
"Retrieve current user's items of type ""issue"", filter by ""Development"" Rev organization, summarize and order by urgency","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.rev_orgs=[""Development""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
" Retrieve and summarize tasks created by ENG-TEAM-A, and prioritize them for the current sprint, limiting the results to 33.","var_1 = search_object_by_name(query=""ENG-TEAM-A"")
var_2 = works_list(created_by=[var_1], type=[""task""], limit=33)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
"
" Retrieve similar work items to TASK-567, prioritize them, and limit the number of work items to 33.","var_1 = get_similar_work_items(work_id=""TASK-567"")
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Retrieve and summarize all tickets from the 'billing' category that are unresolved,"var_1 = works_list(ticket.severity=[""blocker"", ""high"", ""medium"", ""low""], ticket.source_channel=[""billing""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Check for any P1 issues related to channel ""ServiceY"" and prioritize them","var_1 = works_list(issue.priority=[""p1""], ticket.source_channel=[""ServiceY""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
"
Discover current sprint ID and return it,"var_1 = get_sprint_id()
"
"Retrieve my most urgent tickets, summarize them, and identify if any need immediate response.","var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], owned_by=[var_1], ticket.severity=[""blocker"", ""high""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve the ID for the latest sprint and list all the tasks under REV-456,"var_1 = get_sprint_id()
var_2 = works_list(owned_by=[""REV-456""], type=[""task""])
"
Identify high priority tasks for component COMP-789 and assign to the current sprint,"var_1 = search_object_by_name(query=""COMP-789"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p0""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Return a list of work issues for CAPL-123 with priority p1, summarize and add them to the sprint","var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
"Find high severity tickets for the component ""UIX-Module"" and determine if any need immediate response","var_1 = search_object_by_name(query=""UIX-Module"")
var_2 = works_list(ticket.severity=[""high""], applies_to_part=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Is free will an illusion, and are our choices predetermined?",#Unanswerable_Invalid_Query_Error
"Summarize and prioritize tasks for REV-001 organization, then add them to the sprint.","var_1 = search_object_by_name(query=""REV-001"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
"
Summarize tasks related to project Alpha and created by user USER-321,"var_1 = search_object_by_name(query=""Alpha"")
var_2 = search_object_by_name(query=""USER-321"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
Summarize my tickets from customer Acme Inc. and add to sprint if they are P1,"var_1 = search_object_by_name(query=""Acme Inc."")
var_2 = works_list(ticket.rev_org=[var_1], issue.priority=[""p1""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
Find tasks related to a specific project and filter them by the 'development' stage,"var_1 = search_object_by_name(query=""specific project"")
var_2 = works_list(type=[""task""], stage.name=[""development""], applies_to_part=[var_1])
"
"Find work items for part ""PROD-321"" with p0 priority issues, summarize, and add to current sprint","var_1 = search_object_by_name(query=""PROD-321"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p0""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
Extract tasks from the project notes P and categorize them by type,"var_1 = create_actionable_tasks_from_text(text=""P"")
var_2 = prioritize_objects(objects=var_1)
"
Assign new issues from DevUser1 to the latest sprint and prioritize them,"var_1 = search_object_by_name(query=""DevUser1"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Find and prioritize work items for ""Engineering"" department and summarize them","var_1 = search_object_by_name(query=""Engineering"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], issue.rev_orgs=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Search for the user Beta456, list their work items related to the task type, and summarize the results","var_1 = search_object_by_name(query=""Beta456"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
What are the side effects of the medication ibuprofen?,#Unanswerable_Invalid_Query_Error
List all issues labeled p0 from the Rev organization 'REV-URGENT' and sort them by priority,"var_1 = works_list(issue.rev_orgs=[""REV-URGENT""], issue.priority=[""p0""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
"
"Retrieve the ID for ""FrontEndRefactor"" project and prioritize related tasks","var_1 = search_object_by_name(query=""FrontEndRefactor"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Find tickets from Rev organization ORG-XYZ, having high severity, and then summarize the ones created by user USER-456.","var_1 = search_object_by_name(query=""ORG-XYZ"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""high""], type=[""ticket""])
var_3 = works_list(created_by=[""USER-456""], type=[""ticket""])
var_4 = summarize_objects(objects=var_3)
"
"Summarize all my tickets from ""Chat Support"" source and prioritize them","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.source_channel=[""Chat Support""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"Find work items associated with feature PROD-999, prioritize them, and get the sprint ID","var_1 = works_list(applies_to_part=[""PROD-999""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
"
List and summarize all tickets needing a response by the end of the week.,"#Unanswerable_Invalid_Query_Error
"
Retrieve and prioritize my tasks related to the 'AlphaProject',"var_1 = who_am_i()
var_2 = search_object_by_name(query=""AlphaProject"")
var_3 = works_list(type=[""task""], owned_by=[var_1], applies_to_part=[var_2])
var_4 = prioritize_objects(objects=var_3)
"
Summarize and prioritize tickets with 'medium' severity from the 'email' channel,"var_1 = works_list(type=[""ticket""], ticket.severity=[""medium""], ticket.source_channel=[""email""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
Find and summarize all high severity tickets needing a response for REV-456 organization,"var_1 = works_list(issue.rev_orgs=[""REV-456""], ticket.severity=[""high""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Find work items related to ""CAPL-123"" that need a response, and list them in order of priority","var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)
"
"Get similar work items to ""OMEGA-321"", summarize, and prioritize them for the current sprint","var_1 = get_similar_work_items(work_id=""OMEGA-321"")
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Identify and prioritize tasks from team members, add them to the sprint, and check my user ID","var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Find and summarize tasks related to the 'backend' part that are in the 'development' stage,"var_1 = search_object_by_name(query=""backend"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""development""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
What are the rules for playing the board game Monopoly?,#Unanswerable_Invalid_Query_Error
Assign all issues from the external vendor TechSolutions to my sprint for resolution,"var_1 = search_object_by_name(query=""TechSolutions"")
var_2 = works_list(type=[""issue""], ticket.rev_org=[var_1])
var_3 = who_am_i()
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
Prioritize my tasks related to the 'Backend Refactoring' part and summarize the top 3,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""Backend Refactoring"")
var_3 = works_list(applies_to_part=[var_2], owned_by=[var_1], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4[:3])
"
Prioritize my tasks and issues for this sprint,"var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], type=[""task"", ""issue""])
var_4 = prioritize_objects(objects=var_3)
"
"Display my tasks in ""QA Testing"" stage and add them to the sprint ""S1234""","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""QA Testing""], type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""S1234"")
"
"Locate and summarize all tasks related to the 'Backend' part that need a response, then add them to my active sprint","var_1 = who_am_i()
var_2 = works_list(ticket.needs_response=True, applies_to_part=[""Backend""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
What are the nutritional facts for an avocado?,#Unanswerable_Invalid_Query_Error
Assign all my work that need a response to the current sprint,"var_1 = who_am_i()
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], owned_by=[var_1], ticket.needs_response=True)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Find all issues related to the part 'UI-Widget' and provide a summarized report,"var_1 = works_list(applies_to_part=[""UI-Widget""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Retrieve the current sprint ID and summarize tickets that need a response from the customer service channel ""ChanX""","var_1 = get_sprint_id()
var_2 = who_am_i()
var_3 = works_list(owned_by=[var_2], ticket.needs_response=True, ticket.source_channel=[""ChanX""], type=[""ticket""])
var_4 = summarize_objects(objects=var_3)
"
"Fetch work items owned by USER-789, filter for 'blocker' severity tickets, prioritize and add to the current sprint","var_1 = works_list(owned_by=[""USER-789""], ticket.severity=[""blocker""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Get a summary of work items related to part CAPL-456 created by user USER-789,"var_1 = search_object_by_name(query=""CAPL-456"")
var_2 = search_object_by_name(query=""USER-789"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2], type=[""issue"", ""ticket"", ""task""])
var_4 = summarize_objects(objects=var_3)
"
Find work items by part identifiers and summarize,"var_1 = works_list(type=[""issue"", ""ticket"", ""task""])
var_2 = summarize_objects(objects=var_1)
"
"For tickets marked as 'urgent' by customer 'HighStakes', prioritize and assign to current sprint","var_1 = search_object_by_name(query=""HighStakes"")
var_2 = works_list(ticket.severity=[""urgent""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"What if our thoughts have the power to shape the fabric of reality, influencing the course of events?",#Unanswerable_Invalid_Query_Error
Get a list of all P1 issues reported by user USER-XYZ and identify any duplicates.,"var_1 = search_object_by_name(query=""USER-XYZ"")
var_2 = works_list(type=[""issue""], created_by=[var_1], issue.priority=[""p1""])
var_3 = get_similar_work_items(work_id=var_2)
"
Retrieve a list of work items related to part CAPL-123 and filter them for those created by user DEVU-456,"var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = search_object_by_name(query=""DEVU-456"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2], type=[""task""])
"
Add my P1 and P2 issues to the current sprint and summarize it,"var_1 = who_am_i()
var_2 = works_list(type=[""issue""], issue.priority=[""p1"", ""p2""], owned_by=[var_1])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = summarize_objects(objects=var_2)
"
What if our emotions are not just personal experiences but a shared energy connecting all living beings?,#Unanswerable_Invalid_Query_Error
Get current user's tasks in 'QA' stage and summarize for the weekly report,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""QA""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Summarize the current sprint's tasks for ""Gamma"" project and prioritize them.","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""Gamma"")
var_3 = works_list(stage.name=[""sprint""], applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)
"
Identify tasks I own that need a response,"var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
"Generate a list of items with type ""issue"" that have not been assigned to any sprint yet.","var_1 = works_list(stage.name=[""unscheduled""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Retrieve work items for CAPL-567, summarize, and add to sprint 67890","var_1 = search_object_by_name(query=""CAPL-567"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""67890"")
"
Summarize the current sprint's tasks for 'Project-X' and determine if any require immediate attention,"var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""Project-X"")
var_3 = works_list(sprint_id=var_1, applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)
"
Summarize my task list and add any P1 issues to the sprint for immediate resolution.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = works_list(issue.priority=[""p1""], owned_by=[var_1], type=[""issue""])
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
"
Create a list of action items from the meeting notes and add to my 'To-Do' tasks,"var_1 = create_actionable_tasks_from_text(text=""meeting notes"")
"
"Summarize my tasks that are in the 'review' stage and filter by ""p0"" priority","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""review""], issue.priority=[""p0""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve the sprint ID for my team's current sprint, then add all my p1 tasks to this sprint.","var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(type=[""task""], issue.priority=[""p1""], owned_by=[var_1])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)
"
Summarize my tasks related to part ENH-789,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], applies_to_part=[""ENH-789""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Summarize all tickets from the REV-456 organization that need a response.,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Summarize all tasks created by user USER-456 and check if any require a response.,"var_1 = works_list(created_by=[""USER-456""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Summarize the tasks related to 'Project-X',"var_1 = search_object_by_name(query=""Project-X"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find work items related to specific parts 'PART-456', 'PART-789' and get their summary","var_1 = works_list(applies_to_part=[""PART-456"", ""PART-789""], type=[""issue"", ""ticket"", ""task""])
var_2 = summarize_objects(objects=var_1)
"
Fetch the current sprint ID and list all tasks assigned to the user DEVU-456,"var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""DEVU-456"")
var_3 = works_list(owned_by=[var_2], type=[""task""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
"
"Is consciousness a byproduct of evolution, or is it a fundamental aspect of the universe?",#Unanswerable_Invalid_Query_Error
" Summarize all tasks in the DEPLOYMENT stage created by DeployDerek and prioritize them, limiting the number of work items to 31.","var_1 = works_list(stage.name=[""DEPLOYMENT""], created_by=[""DeployDerek""], type=[""task""], limit=31)
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
"For the Rev organization REV-ENGINEERING, list all tasks, then prioritize them, and finally, summarize the prioritized list.","var_1 = search_object_by_name(query=""REV-ENGINEERING"")
var_2 = works_list(type=[""task""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Extract tasks from project meeting notes and assign priority before adding to the sprint,"var_1 = create_actionable_tasks_from_text(text=""project meeting notes"")
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Locate issues with priority P1 for the FINANCE rev organization, summarize them, and limit the number of work items to 18.","var_1 = works_list(issue.priority=[""P1""], issue.rev_orgs=[""FINANCE""], limit=18, type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"For the work item ""FEATURE-789"", find similar items, summarize, and find the one with the highest severity","var_1 = get_similar_work_items(work_id=""FEATURE-789"")
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
"Find tickets needing response, summarize, and assign high priority","var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_2)
"
List issues with the source channel 'email' for the user currently logged in,"var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], ticket.source_channel=[""email""], type=[""issue""])
"
"Summarize all issues in the REVIEW stage and prioritize them, limiting the number of work items to 45.","var_1 = works_list(stage.name=[""REVIEW""], limit=45, type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
Find all tickets with medium severity that I'm responsible for and list them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""medium""], type=[""ticket""])
"
"Aggregate all severe tickets that need a response and are related to the Rev organization ""REV-TECH""","var_1 = search_object_by_name(query=""REV-TECH"")
var_2 = works_list(ticket.severity=[""blocker"", ""high""], ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
List all tasks assigned to user USER-321 that need a response,"var_1 = works_list(owned_by=[""USER-321""], ticket.needs_response=True, type=[""task""])
"
Create tasks based on the highlighted issues from the latest code review notes,"var_1 = create_actionable_tasks_from_text(text=""highlighted issues from the latest code review notes"")
"
Summarize tickets associated with REV-456 that need a response,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve and prioritize work items for ""UserX"" in the ""development"" stage","var_1 = works_list(owned_by=[""UserX""], stage.name=[""development""], type=[""issue"", ""ticket"", ""task""])
var_2 = prioritize_objects(objects=var_1)
"
Identify work items related to customer AcmeCorp and organize them by type,"var_1 = search_object_by_name(query=""AcmeCorp"")
var_2 = works_list(ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
"Find work items for the ""backend"" component with severity ""medium"" and summarize them.","var_1 = search_object_by_name(query=""backend"")
var_2 = works_list(applies_to_part=[var_1], ticket.severity=[""medium""], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
Get a list of work items I've created with high priority and summarize them,"var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], issue.priority=[""high""], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve and summarize tasks related to Project Alpha,"var_1 = search_object_by_name(query=""Project Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find my tasks that need response, prioritize them, and assign to the current sprint","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Search for a work item with the name ""QuickFix"" and then summarize all work items related to the found item","var_1 = search_object_by_name(query=""QuickFix"")
var_2 = get_similar_work_items(work_id=var_1)
var_3 = summarize_objects(objects=var_2)
"
"Find all tickets from ""CustomerX"", list them by P1 priority, then add them to my current sprint","var_1 = search_object_by_name(query=""CustomerX"")
var_2 = works_list(ticket.rev_org=[var_1], issue.priority=[""p1""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Find similar tasks to TASK-789, get their IDs and create a summary report","var_1 = get_similar_work_items(work_id=""TASK-789"")
var_2 = summarize_objects(objects=var_1)
"
" Find issues with priority P1 related to part NET-SEC, summarize them, and limit the results to 28.","var_1 = works_list(applies_to_part=[""NET-SEC""], issue.priority=[""p1""], type=[""issue""], limit=28)
var_2 = summarize_objects(objects=var_1)
"
"Find all tasks related to the ""AlphaProject"" and summarize them","var_1 = search_object_by_name(query=""AlphaProject"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Add all blocker severity tickets to my current sprint after you prioritize them.,"var_1 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Find work items related to CAPL-123, filter by user DEVU-456, and sort them by priority
","var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], owned_by=[""DEVU-456""])
var_3 = prioritize_objects(objects=var_2)
"
Identify and add high priority tasks to the sprint for the 'QA-Testing' stage,"var_1 = works_list(stage.name=[""QA-Testing""], issue.priority=[""p0""], type=[""task""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Summarize the work items related to the 'NextGen' project and identify similar issues,"var_1 = search_object_by_name(query=""NextGen"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_similar_work_items(work_id=var_1)
"
Could morality exist independently of cultural and societal influences?,#Unanswerable_Invalid_Query_Error
Summarize all tickets that need a response for component X and add to sprint,"var_1 = search_object_by_name(query=""component X"")
var_2 = works_list(type=[""ticket""], applies_to_part=[var_1], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
" Summarize and prioritize tickets from the EMAIL source channel with severity medium, limiting the results to 27.","var_1 = works_list(ticket.source_channel=[""EMAIL""], ticket.severity=[""medium""], type=[""ticket""], limit=27)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Find and summarize work items created by 'USR-789' for the 'Delta' project,"var_1 = search_object_by_name(query=""Delta"")
var_2 = works_list(created_by=[""USR-789""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve and prioritize tasks created by user ""USER-321"" and add them to the sprint.","var_1 = works_list(created_by=[""USER-321""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Find and summarize work items in the 'development' stage for part 'WidgetX' that need a response.,"var_1 = search_object_by_name(query=""WidgetX"")
var_2 = works_list(type=[""issue""], stage.name=[""development""], applies_to_part=[var_1], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
" Prioritize and summarize tickets that need a response with severity medium, limiting the results to 22.","var_1 = works_list(ticket.needs_response=True, ticket.severity=[""medium""], type=[""ticket""], limit=22)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Find work items with p2 priority in the 'development' stage and sort them by priority,"var_1 = works_list(issue.priority=[""p2""], stage.name=[""development""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
"
"Find all P2 issues for the current user, summarize them, and add them to the sprint for part PART-789.","var_1 = who_am_i()
var_2 = search_object_by_name(query=""PART-789"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], issue.priority=[""p2""], type=[""issue""])
var_4 = summarize_objects(objects=var_3)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_5)
"
Summarize all tasks created by user USER-456 related to part PART-789 and list them by type,"var_1 = search_object_by_name(query=""USER-456"")
var_2 = works_list(created_by=[var_1], applies_to_part=[""PART-789""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"For the current user, list all tasks, summarize, and add to the sprint","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
Find work items of type 'task' related to the product 'PROD-321' and summarize them.,"var_1 = search_object_by_name(query=""PROD-321"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find work items for the ""Alpha"" project, filter by tasks, and get the list of high priority tasks","var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Search for a customer named ""InnovateInc"" and list all the tasks that are in the ""Development"" stage, then summarize these tasks for reporting.","var_1 = search_object_by_name(query=""InnovateInc"")
var_2 = works_list(ticket.rev_org=[var_1], stage.name=[""Development""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find tasks associated with the feature PROD-321, prioritize them, and add them to my sprint","var_1 = search_object_by_name(query=""PROD-321"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = who_am_i()
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_5)
"
"Identify the current sprint, list all tasks owned by me, and add them to the sprint","var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], type=[""task""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)
"
"Retrieve the sprint ID, then find and prioritize all issues related to Rev organization REV-321","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""REV-321"")
var_3 = works_list(type=[""issue""], ticket.rev_org=[var_2])
var_4 = prioritize_objects(objects=var_3)
"
List tasks created by user DEVU-456 and add them to sprint SPRINT-789,"var_1 = search_object_by_name(query=""DEVU-456"")
var_2 = works_list(type=[""task""], created_by=[var_1])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-789"")
"
Add all new enhancement issues to the sprint for review,"var_1 = works_list(type=[""issue""], stage.name=[""new""], issue.priority=[""enhancement""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Determine the work tickets associated with the 'beta-feature' and organize them by severity.,"var_1 = search_object_by_name(query=""beta-feature"")
var_2 = works_list(applies_to_part=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
"Find work items for the ""beta-feature"" project and arrange them by priority","var_1 = search_object_by_name(query=""beta-feature"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
"
Generate a list of P1 priority issues for user USER-XYZ and summarize the result,"var_1 = works_list(created_by=[""USER-XYZ""], issue.priority=[""p1""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Find issues for part PROD-432 that need a response, prioritize them, and get the sprint ID","var_1 = search_object_by_name(query=""PROD-432"")
var_2 = works_list(type=[""issue""], applies_to_part=[var_1], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
"
Find tickets needing response for REV-456 and add them to my sprint,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Generate a list of current sprint tasks and provide a summarized report,"var_1 = get_sprint_id()
var_2 = works_list(type=[""task""], stage.name=[""current sprint""])
var_3 = summarize_objects(objects=var_2)
"
"Identify tasks for ""EpsilonExpansion"" requiring response, summarize and add to my tasks","var_1 = search_object_by_name(query=""EpsilonExpansion"")
var_2 = works_list(type=[""task""], ticket.needs_response=True, ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = who_am_i()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
Fetch work items for 'QA' stage under part TEST-789 and summarize,"var_1 = works_list(stage.name=[""QA""], applies_to_part=[""TEST-789""], type=[""issue"", ""ticket"", ""task""])
var_2 = summarize_objects(objects=var_1)
"
How do I reset my password for my email account?,#Unanswerable_Invalid_Query_Error
Return the work items assigned to developer Dev123 in the 'Development' stage and add them to my current sprint,"var_1 = search_object_by_name(query=""Dev123"")
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], stage.name=[""Development""], type=[""issue"", ""ticket"", ""task""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)
"
"Find tickets with severity 'medium', summarize and identify similar work items for PROD-456","var_1 = search_object_by_name(query=""PROD-456"")
var_2 = works_list(ticket.severity=[""medium""], applies_to_part=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_similar_work_items(work_id=var_1)
"
Find tasks related to product component COMP-456 and list them in order of priority,"var_1 = search_object_by_name(query=""COMP-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Add all my P2 tickets to the current sprint and prioritize them,"var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p2""], owned_by=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
List all the P2 issues assigned to me in the 'QA' stage and prioritize them for this week's focus,"var_1 = who_am_i()
var_2 = works_list(type=[""issue""], issue.priority=[""p2""], owned_by=[var_1], stage.name=[""QA""])
var_3 = prioritize_objects(objects=var_2)
"
Search for issues related to 'Database Optimization' and summarize the findings,"var_1 = search_object_by_name(query=""Database Optimization"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Create tasks based on the discussion points from the latest project meeting ""M"" and assign them to the current sprint","var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Could there be a cosmic order that governs the unfolding of events in the universe?,#Unanswerable_Invalid_Query_Error
Summarize my tickets from the 'development' stage and prioritize them,"var_1 = who_am_i()
var_2 = works_list(stage.name=[""development""], owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"Identify work items in ""QA"" phase for product ""PROD-456"" and prioritize them for the current sprint.","var_1 = search_object_by_name(query=""PROD-456"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""QA""], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Create tasks from project kickoff notes and add them to the team's sprint,"var_1 = create_actionable_tasks_from_text(text=""project kickoff notes"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"Find and summarize work items for component ""UIX-987"" with priority P2","var_1 = search_object_by_name(query=""UIX-987"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Summarize the issues related to REV-456 and filter for P2 priority,"var_1 = works_list(issue.rev_orgs=[""REV-456""], issue.priority=[""p2""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"Find similar work items to ""TASK-789"", summarize the findings, and prioritize for this week's focus","var_1 = get_similar_work_items(work_id=""TASK-789"")
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
Prioritize tickets that need a response and are associated with Rev organization REV-789,"var_1 = works_list(ticket.needs_response=True, ticket.rev_org=[""REV-789""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
Add all P1 tasks currently in the design phase to the sprint sprint_id: SPRINT-789,"var_1 = works_list(type=[""task""], stage.name=[""design""], issue.priority=[""p1""])
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-789"")
"
"Retrieve my tasks related to CAPL-456, identify issues that need a response, and get their summary","var_1 = who_am_i()
var_2 = search_object_by_name(query=""CAPL-456"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], ticket.needs_response=True, type=[""issue""])
var_4 = summarize_objects(objects=var_3)
"
"For the customer named 'AcmeCorp', list all the pending tickets and then rank them based on severity","var_1 = search_object_by_name(query=""AcmeCorp"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
" Locate and summarize tickets from the PHONE source channel with severity high, limiting the results to 40.","var_1 = works_list(ticket.source_channel=[""PHONE""], ticket.severity=[""high""], type=[""ticket""], limit=40)
var_2 = summarize_objects(objects=var_1)
"
"List all tasks created by user USER-XYZ, prioritize them, and add them to the sprint with ID SPRINT-789.","var_1 = works_list(created_by=[""USER-XYZ""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-789"")
"
Prioritize and add to sprint all tasks related to CAPL-789 with medium severity,"var_1 = search_object_by_name(query=""CAPL-789"")
var_2 = works_list(applies_to_part=[var_1], ticket.severity=[""medium""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Add all issues from Rev organization REV-999 to the current sprint,"var_1 = works_list(issue.rev_orgs=[""REV-999""], type=[""issue""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"Generate a list of all P2 tickets, summarize them, and then prioritize them by severity","var_1 = works_list(issue.priority=[""p2""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
What if death is not an end but a transition to another form of existence?,#Unanswerable_Invalid_Query_Error
Summarize the work items created by user Alpha123 within the CAPL-123 part,"var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(created_by=[""Alpha123""], applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
Extract and summarize actionable tasks from meeting notes M for project X,"var_1 = create_actionable_tasks_from_text(text=""meeting notes M for project X"")
var_2 = summarize_objects(objects=var_1)
"
"Summarize all tickets that need a response from the CUSTOMER_SERVICE team and add them to the current sprint, limiting the number of work items to 15.","var_1 = works_list(ticket.needs_response=True, owned_by=[""CUSTOMER_SERVICE""], limit=15, type=[""ticket""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"Find tickets needing response and from REV-ORG-456, then summarize them","var_1 = search_object_by_name(query=""REV-ORG-456"")
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Find and summarize all tasks related to the engineering department.,"var_1 = search_object_by_name(query=""engineering department"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find all tasks related to the ""AwesomeFeature"" and identify the most urgent ones","var_1 = search_object_by_name(query=""AwesomeFeature"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
"Summarize and prioritize issues with priority P1 from the QA team, limiting the results to 25.","var_1 = search_object_by_name(query=""QA team"")
var_2 = works_list(issue.priority=[""p1""], created_by=[var_1], limit=25, type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Summarize all my completed tasks from the last month.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""completed""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
List and prioritize my tickets that need a response,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
Summarize my tickets related to part CAPL-123 that require my response,"var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = who_am_i()
var_3 = works_list(owned_by=[var_2], applies_to_part=[var_1], ticket.needs_response=True, type=[""ticket""])
var_4 = summarize_objects(objects=var_3)
"
"Identify the current user, list their owned work items with 'blocker' severity, and summarize for review","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""blocker""])
var_3 = summarize_objects(objects=var_2)
"
Add my tickets marked as 'blocker' to the current sprint,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""blocker""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Retrieve and summarize p3 priority issues from Rev organization REV-TECH,"var_1 = works_list(issue.priority=[""p3""], issue.rev_orgs=[""REV-TECH""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Find issues assigned to me with high priority and summarize them.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""high""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve my tasks, prioritize them, and summarize for a quick review","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
create actionable tasks from summarized tasks of issue 'REV-789',"var_1 = get_similar_work_items(work_id=""REV-789"")
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)
"
"Find work items for component X, prioritize them, and get current sprint ID","var_1 = search_object_by_name(query=""component X"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
"
Prioritize and summarize all P2 issues under the PRODUCT rev organization with a limit of 20 work items.,"var_1 = works_list(issue.rev_orgs=[""PRODUCT""], issue.priority=[""p2""], type=[""issue""], limit=20)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Locate the sprint ID and add all my P1 tickets to the sprint,"var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p1""], owned_by=[var_1], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Get similar tasks to TASK-789, summarize and prioritize for current sprint","var_1 = get_similar_work_items(work_id=""TASK-789"")
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Summarize all new feature requests from ""ProductX"" and prepare for backlog grooming","var_1 = search_object_by_name(query=""ProductX"")
var_2 = works_list(type=[""issue""], ticket.source_channel=[""new feature request""], ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Assign the current user's P2 issues to the sprint tagged SPRINT-789,"var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-789"")
"
Assign high priority tickets to sprint based on ticket source channel 'email',"var_1 = works_list(ticket.source_channel=[""email""], issue.priority=[""high""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Prioritize tickets from 'BetaIntegrations' with medium severity and assign them to sprint 'SPRINT-567',"var_1 = search_object_by_name(query=""BetaIntegrations"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""medium""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-567"")
"
"Add all my tasks that need a response to sprint ""SPRINT-456""","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-456"")
"
Find issues created by user USER-321 for part PROD-789 and sort them by priority,"var_1 = search_object_by_name(query=""PROD-789"")
var_2 = works_list(created_by=[""USER-321""], applies_to_part=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
"Find work items related to the part number PART-789 and created by user USER-456, then summarize the results.","var_1 = search_object_by_name(query=""PART-789"")
var_2 = search_object_by_name(query=""USER-456"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2])
var_4 = summarize_objects(objects=var_3)
"
"What if our perception of color is unique to each individual, and we all see the world differently?",#Unanswerable_Invalid_Query_Error
"Identify my tasks related to ""SECURITY-UPDATES"" and allocate them to sprint ""SPRINT-42""","var_1 = who_am_i()
var_2 = search_object_by_name(query=""SECURITY-UPDATES"")
var_3 = works_list(applies_to_part=[var_2], owned_by=[var_1], type=[""task""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-42"")
"
Identify the sprint ID and add issues with p2 priority to that sprint,"var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p2""], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"Find p0, p1 priority issues, summarize and add them to sprint ""spr5""","var_1 = works_list(issue.priority=[""p0"", ""p1""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""spr5"")
"
Summarize my completed tasks and identify if any require follow-up actions,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""completed""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find tickets related to the component ""Widget-Alpha"" and filter them by ""blocker"" severity level","var_1 = search_object_by_name(query=""Widget-Alpha"")
var_2 = works_list(applies_to_part=[var_1], ticket.severity=[""blocker""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Find all issues related to the component ""UI-Framework"" and list them by priority","var_1 = search_object_by_name(query=""UI-Framework"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
"What if consciousness is a shared experience, and individuality is an illusion?",#Unanswerable_Invalid_Query_Error
"Find all my p2 tickets and add them to the sprint named ""SPRINT-QUICKFIX""","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""ticket""])
var_3 = search_object_by_name(query=""SPRINT-QUICKFIX"")
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Locate and prioritize CAPL-related issues needing response,"var_1 = works_list(ticket.needs_response=True, issue.rev_orgs=[""CAPL""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
"
Prioritize tickets from the Rev organization REV-999 and add them to sprint id SPRINT-100.,"var_1 = search_object_by_name(query=""REV-999"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-100"")
"
Summarize issues from part CAPL-123 that need a response,"var_1 = works_list(applies_to_part=[""CAPL-123""], ticket.needs_response=True, type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
What is the current exchange rate between the US dollar and the Euro?,#Unanswerable_Invalid_Query_Error
Add my tasks related to ENH-789 to the current sprint,"var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1], applies_to_part=[""ENH-789""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Identify my p1 priority tasks, summarize the findings and add to the sprint with ID SPRINT-456","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p1""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-456"")
"
Fetch work items for CAPL-123 in 'testing' stage and get similar items,"var_1 = works_list(applies_to_part=[""CAPL-123""], stage.name=[""testing""], type=[""issue"", ""ticket"", ""task""])
var_2 = get_similar_work_items(work_id=var_1)
"
Assign sprint to all my tasks related to organization ORG-999,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""ORG-999"")
var_3 = works_list(owned_by=[var_1], ticket.rev_org=[var_2], type=[""task""])
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Identify and summarize urgent tickets from a specified channel,"var_1 = works_list(type=[""ticket""], ticket.severity=[""high"", ""blocker""])
var_2 = summarize_objects(objects=var_1)
"
Identify my work items in the 'QA' stage and assign them to sprint number SPRINT-456,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""QA""], type=[""issue"", ""ticket"", ""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-456"")
"
"Search for work items by user 'DUDE-007', prioritize and then summarize tickets that need a response","var_1 = search_object_by_name(query=""DUDE-007"")
var_2 = works_list(type=[""ticket""], created_by=[var_1], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Organize my tasks related to ENH-456 by priority and list in ascending order,"var_1 = works_list(applies_to_part=[""ENH-456""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
"Collate all enhancement issues for ""Project Delta"" and prioritize them for the current release cycle.","var_1 = search_object_by_name(query=""Project Delta"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
Find issues that need a response for Rev organization REV-256 and summarize them,"var_1 = works_list(issue.rev_orgs=[""REV-256""], ticket.needs_response=True, type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
Create tasks for the new feature proposals P and add them to my sprint,"var_1 = create_actionable_tasks_from_text(text=""P"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Find the tasks assigned to my department and summarize them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve current sprint's ID and add all issues assigned to ""LeadDev"" with priority ""p1"".","var_1 = search_object_by_name(query=""LeadDev"")
var_2 = works_list(owned_by=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
List and summarize all tasks from the external vendor portal,"var_1 = works_list(type=[""task""], ticket.source_channel=[""external vendor portal""])
var_2 = summarize_objects(objects=var_1)
"
"List issues requiring a response, then get the sprint ID and add them to the sprint","var_1 = works_list(type=[""issue""], ticket.needs_response=True)
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Summarize the tasks for the Rev organization ORG-321 and list any tickets requiring response,"var_1 = search_object_by_name(query=""ORG-321"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
"
"Fetch the current sprint ID, then find and prioritize all tasks owned by me","var_1 = get_sprint_id()
var_2 = who_am_i()
var_3 = works_list(owned_by=[var_2], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
"
Add all my tasks in 'development' stage to the current sprint,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Prioritize tasks related to ""RevampUI"" feature and summarize for quick review","var_1 = search_object_by_name(query=""RevampUI"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Find and summarize work items for CAPL-123, created by user USER-456","var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = search_object_by_name(query=""USER-456"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2], type=[""issue"", ""ticket"", ""task""])
var_4 = summarize_objects(objects=var_3)
"
"Given the name ""LeadTech"", find associated work items, create tasks for urgent issues, and add them to the sprint","var_1 = search_object_by_name(query=""LeadTech"")
var_2 = works_list(created_by=[var_1], ticket.severity=[""blocker""], type=[""issue""])
var_3 = create_actionable_tasks_from_text(text=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Find and summarize work issues for the ""New Features"" project with priority P1 or P2","var_1 = search_object_by_name(query=""New Features"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p1"", ""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Could there be a limit to human understanding, beyond which certain truths remain elusive?",#Unanswerable_Invalid_Query_Error
Summarize the status of all tasks related to the CAPL-456 part,"var_1 = works_list(applies_to_part=[""CAPL-456""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
"Identify all tickets created by user ""UserX"" and summarize them for a quick overview","var_1 = works_list(created_by=[""UserX""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Generate a list of issues created by user USER-ID-789.,"var_1 = works_list(created_by=[""USER-ID-789""], type=[""issue""])
"
Locate and prioritize all issues created by DevOpsTeam and limit the number of work items to 22.,"var_1 = search_object_by_name(query=""DevOpsTeam"")
var_2 = works_list(created_by=[var_1], limit=22, type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
Obtain the list of issues created by user 'dev123' and summarize the list for the weekly report.,"var_1 = search_object_by_name(query=""dev123"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Find tickets related to the ""Billing"" feature, prioritize by severity, and summarize for the team meeting","var_1 = search_object_by_name(query=""Billing"")
var_2 = works_list(applies_to_part=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Analyze recent feedback from ""FeedbackSession1"", generate tasks from the feedback, and assign to current sprint.","var_1 = create_actionable_tasks_from_text(text=""FeedbackSession1"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Identify and prioritize issues from 'UrgentCare' department,"var_1 = search_object_by_name(query=""UrgentCare"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
"
"List all tasks in ""development"" stage without an owner and summarize them","var_1 = works_list(owned_by=[], stage.name=[""development""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Prioritize and summarize tickets that need a response and are associated with part API-654 with a limit of 40 work items.,"var_1 = works_list(applies_to_part=[""API-654""], ticket.needs_response=True, type=[""ticket""], limit=40)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Retrieve the current sprint ID and list the tasks I own,"var_1 = get_sprint_id()
var_2 = who_am_i()
var_3 = works_list(owned_by=[var_2], type=[""task""])
"
Add all tickets marked as 'blocker' to sprint SPRINT-456,"var_1 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-456"")
"
"Add newly created p0, p1 priority issues to my sprint","var_1 = who_am_i()
var_2 = works_list(type=[""issue""], owned_by=[var_1], issue.priority=[""p0"", ""p1""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Retrieve and prioritize all tickets associated with the MobileApp part, limiting the results to 15.","var_1 = search_object_by_name(query=""MobileApp"")
var_2 = works_list(applies_to_part=[var_1], type=[""ticket""], limit=15)
var_3 = prioritize_objects(objects=var_2)
"
"Retrieve my tickets with medium severity, summarize them, and identify similar work items","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_similar_work_items(work_id=var_2)
"
"Create a summary report of resolved issues from the last sprint for ""Team Alpha""","var_1 = search_object_by_name(query=""Team Alpha"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Find and summarize all P2 tickets that require a response,"var_1 = works_list(issue.priority=[""p2""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
" Prioritize and add to the current sprint all tasks related to part SEC-999, limiting the results to 25.","var_1 = search_object_by_name(query=""SEC-999"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""], limit=25)
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Find and list all tasks related to product PROD-321 and sort them by priority,"var_1 = works_list(applies_to_part=[""PROD-321""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
"Get a list of my P1 tickets, summarize them and assign them to sprint ""Sprint22""","var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p1""], owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""Sprint22"")
"
"Find work items for ""DEVU-456"" from the ""development"" stage and summarize the main objectives","var_1 = search_object_by_name(query=""DEVU-456"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[var_1], stage.name=[""development""])
var_3 = summarize_objects(objects=var_2)
"
I need to list all tasks related to the CAPL-234 part and then prioritize them.,"var_1 = works_list(applies_to_part=[""CAPL-234""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
"Summarize open tasks for 'FeatureX', check if any need responses, and get my user details","var_1 = search_object_by_name(query=""FeatureX"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
var_4 = who_am_i()
"
"Find tickets that need a response and are associated with the REV-Engineering organization, then prioritize these tickets","var_1 = search_object_by_name(query=""REV-Engineering"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
Identify and summarize tasks related to the part PART-456 that are in the 'testing' stage,"var_1 = search_object_by_name(query=""PART-456"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""testing""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Find tasks related to the ""Release 2.1"" feature and organize them by priority.","var_1 = search_object_by_name(query=""Release 2.1"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"For the user DEVU-456, filter issues related to part PROD-789 and summarize them","var_1 = search_object_by_name(query=""PROD-789"")
var_2 = works_list(applies_to_part=[var_1], created_by=[""DEVU-456""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
What if the concept of time travel is not fiction but a possibility within the laws of physics?,#Unanswerable_Invalid_Query_Error
Retrieve issues with priority p2 from Rev organization REV-321 and sort them by priority,"var_1 = works_list(issue.rev_orgs=[""REV-321""], issue.priority=[""p2""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
"
Find and summarize tickets related to 'REV-321' that are marked as 'blocker',"var_1 = search_object_by_name(query=""REV-321"")
var_2 = works_list(type=[""ticket""], applies_to_part=[var_1], ticket.severity=[""blocker""])
var_3 = summarize_objects(objects=var_2)
"
"Prioritize and summarize tickets from the SALES source channel, limiting the results to 35.","var_1 = works_list(ticket.source_channel=[""SALES""], limit=35, type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Find all tickets related to 'Performance' issues and group them by type.,"var_1 = search_object_by_name(query=""Performance"")
var_2 = works_list(applies_to_part=[var_1], type=[""ticket""])
"
Retrieve my tasks related to ENH-345 and rank them by urgency,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], applies_to_part=[""ENH-345""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Summarize work items for parts ""ENH-123"" and ""PROD-456"" created by user ""DEVU-789""","var_1 = search_object_by_name(query=""ENH-123"")
var_2 = search_object_by_name(query=""PROD-456"")
var_3 = works_list(applies_to_part=[var_1, var_2], created_by=[""DEVU-789""])
var_4 = summarize_objects(objects=var_3)
"
"Identify all tasks related to ""FeatureY"" and move them to the current sprint.","var_1 = search_object_by_name(query=""FeatureY"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Find work items for components X, Y, and Z, then prioritize and add them to the sprint","var_1 = works_list(applies_to_part=[""X"", ""Y"", ""Z""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Find work items owned by the current user, filter by type 'task', and add them to the latest sprint","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Retrieve the current sprint ID and list all medium severity tickets assigned to me,"var_1 = get_sprint_id()
var_2 = who_am_i()
var_3 = works_list(type=[""ticket""], ticket.severity=[""medium""], owned_by=[var_2])
"
Identify work items of type 'issue' that need to be added to sprint with ID SPRINT-678.,"var_1 = works_list(type=[""issue""])
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-678"")
"
"Find tickets needing response for ""TeamAlpha"" and prioritize them","var_1 = search_object_by_name(query=""TeamAlpha"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
Retrieve the current user's ID and summarize all tickets they own.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Identify the sprint ID and add work items of type 'issue' related to 'PROJ-ABC' to it,"var_1 = search_object_by_name(query=""PROJ-ABC"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Find p0 issues related to part PROD-456, summarize and then add them to the sprint with ID SPRINT-789.","var_1 = works_list(type=[""issue""], applies_to_part=[""PROD-456""], issue.priority=[""p0""])
var_2 = summarize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-789"")
"
"Find and list all tasks created by user USER-321, then summarize and add them to sprint SPRINT-101","var_1 = works_list(created_by=[""USER-321""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-101"")
"
What are the top 10 trending songs on Spotify right now?,#Unanswerable_Invalid_Query_Error
List all tasks owned by user USER-XYZ and add them to sprint SPRINT-456,"var_1 = search_object_by_name(query=""USER-XYZ"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-456"")
"
"Find my tasks that need a response, prioritize them, and add them to the sprint I'm working on","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Organize my current tasks by deadline and add urgent ones to sprint,"#Unanswerable_Invalid_Query_Error
"
"Generate a report for tasks created by ""User A"" in the ""QA"" stage","var_1 = search_object_by_name(query=""User A"")
var_2 = works_list(type=[""task""], created_by=[var_1], stage.name=[""QA""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve work items assigned to user DEVU-456, prioritize them by severity, and add them to the ongoing sprint.","var_1 = search_object_by_name(query=""DEVU-456"")
var_2 = works_list(owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Add all tasks created by organization ""DEBU-123"" , and add it it to my current sprint","var_1 = search_object_by_name(query=""DEBU-123"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Get a summary of tasks for 'User123' that are in the 'QA' stage.,"var_1 = search_object_by_name(query=""User123"")
var_2 = works_list(type=[""task""], owned_by=[var_1], stage.name=[""QA""])
var_3 = summarize_objects(objects=var_2)
"
Summarize all p2 priority issues and identify those related to the product PROD-789.,"var_1 = works_list(issue.priority=[""p2""], type=[""issue""])
var_2 = search_object_by_name(query=""PROD-789"")
var_3 = summarize_objects(objects=var_1)
"
Identify tasks generated from the 'System Upgrade' minutes and summarize them,"var_1 = create_actionable_tasks_from_text(text=""System Upgrade minutes"")
var_2 = summarize_objects(objects=var_1)
"
"Summarize all tickets with tag ""URGENT"" from organization ""ORG-990""","var_1 = search_object_by_name(query=""ORG-990"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""URGENT""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Identify and summarize all tasks I created that are now in a ""completed"" state.","var_1 = who_am_i()
var_2 = works_list(type=[""task""], created_by=[var_1], stage.name=[""completed""])
var_3 = summarize_objects(objects=var_2)
"
"Retrieve the ID of the current user, find issues with 'medium' priority that need a response, and summarize them.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""medium""], ticket.needs_response=True, type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"Automatically generate tasks for my notes on ""QA Process Improvement""","var_1 = create_actionable_tasks_from_text(text=""QA Process Improvement"")
"
Retrieve and summarize my tasks related to ENH-456 that need a response.,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""ENH-456"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], ticket.needs_response=True, type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
Locate my tickets with no response yet and prioritize them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
"Get all my tasks and issues for ""REV-789"", prioritize, and summarize","var_1 = who_am_i()
var_2 = works_list(issue.rev_orgs=[""REV-789""], owned_by=[var_1], type=[""issue"", ""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"Gather all issues created by user USER-456, summarize them and add to current sprint","var_1 = works_list(created_by=[""USER-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
Generate a list of my P1 and P2 issues and create action items for them,"var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p1"", ""p2""], owned_by=[var_1], type=[""issue""])
var_3 = create_actionable_tasks_from_text(text=var_2)
"
"Add p0, p1 priority tasks related to the CAPL-987 part to the current sprint after summarizing them","var_1 = search_object_by_name(query=""CAPL-987"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p0"", ""p1""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"Find and summarize tasks for the ""Redesign"" project, then add them to my sprint","var_1 = search_object_by_name(query=""Redesign"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = who_am_i()
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_5)
"
"Retrieve and summarize tickets that require a response from support channel ""Email""","var_1 = works_list(ticket.needs_response=True, ticket.source_channel=[""Email""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Find and summarize tickets with medium severity that need a response.,"var_1 = works_list(ticket.severity=[""medium""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
What are the recommended vaccinations for traveling to Africa?,#Unanswerable_Invalid_Query_Error
Find work items related to component `COMP-789` and provide a summary,"var_1 = search_object_by_name(query=""COMP-789"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Summarize high and blocker severity tickets for the mobile team,"var_1 = works_list(ticket.severity=[""high"", ""blocker""], owned_by=[""mobile team""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
Extract actionable tasks from project notes N and assign them to the engineering team,"var_1 = create_actionable_tasks_from_text(text=""project notes N"")
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""engineering team"")
"
"Retrieve a list of work items related to part CAPL-123, filter them by user DEVU-456, and add them to the current sprint","var_1 = search_object_by_name(query=""DEVU-456"")
var_2 = works_list(applies_to_part=[""CAPL-123""], owned_by=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Identify tickets labeled as ""high"" severity for component ""UI-Component"", summarize them, and prioritize for the current release.","var_1 = search_object_by_name(query=""UI-Component"")
var_2 = works_list(applies_to_part=[var_1], ticket.severity=[""high""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
Retrieve and prioritize tasks associated with part UIX-002 and limit the number of work items to 50.,"var_1 = works_list(applies_to_part=[""UIX-002""], limit=50, type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
Retrieve and prioritize tasks related to CAPL-123 that need a response,"var_1 = works_list(applies_to_part=[""CAPL-123""], ticket.needs_response=True, type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
Could the boundaries between the self and the external world be more fluid than we perceive?,#Unanswerable_Invalid_Query_Error
Extract and prioritize actionable tasks from meeting notes M,"var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = prioritize_objects(objects=var_1)
"
Assign all P1 tickets to the sprint designated for critical customer issues,"var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p1""], type=[""ticket""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"Retrieve my tickets that need a response, get the current sprint ID, and add those tickets to the sprint.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Extract actionable items from the ""QuarterlyPlanning"" meeting notes and assign them to the engineering team.","var_1 = create_actionable_tasks_from_text(text=""QuarterlyPlanning"")
var_2 = search_object_by_name(query=""engineering team"")
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Create tasks from the 'UI/UX Design Session Notes' and prioritize them for the design team,"var_1 = create_actionable_tasks_from_text(text=""UI/UX Design Session Notes"")
var_2 = prioritize_objects(objects=var_1)
"
"Search for customer 'AlphaCorp', list all related issues, and add them to sprint SPRINT-321 ","var_1 = search_object_by_name(query=""AlphaCorp"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-321"")
"
"Add new high severity tickets from the ""ProjectX"" meeting notes to this sprint","var_1 = create_actionable_tasks_from_text(text=""ProjectX meeting notes"")
var_2 = works_list(type=[""ticket""], ticket.severity=[""high""], limit=50)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Get the ID of the user, list their issues in the 'resolved' stage, and summarize","var_1 = who_am_i()
var_2 = works_list(type=[""issue""], owned_by=[var_1], stage.name=[""resolved""])
var_3 = summarize_objects(objects=var_2)
"
"Is there a purpose to suffering, or is it an inevitable aspect of the human experience?",#Unanswerable_Invalid_Query_Error
"Find work items for part CAPL-123 created by user DEVU-456, then prioritize and summarize them","var_1 = search_object_by_name(query=""DEVU-456"")
var_2 = works_list(created_by=[var_1], applies_to_part=[""CAPL-123""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
Locate and add p3 issues from REV-Engineering to the sprint,"var_1 = search_object_by_name(query=""REV-Engineering"")
var_2 = works_list(issue.rev_orgs=[var_1], issue.priority=[""p3""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Retrieve the ID for the current sprint, then find and summarize all tasks owned by user ""USER-999""","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""USER-999"")
var_3 = works_list(owned_by=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
"Summarize all the tasks that need a response and are in the ""development"" stage.","var_1 = works_list(stage.name=[""development""], ticket.needs_response=True, type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
List all tickets with medium severity that are not assigned to a sprint and assign them to the current sprint.,"var_1 = works_list(ticket.severity=[""medium""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"Could consciousness be a fundamental force, shaping the unfolding of the universe?",#Unanswerable_Invalid_Query_Error
How do I improve my credit score?,#Unanswerable_Invalid_Query_Error
Add all my tasks of priority p2 to the current sprint,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
Summarize the current sprint's work items,"var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1])
var_3 = summarize_objects(objects=var_2)
"
Compile a report of all Rev organization tickets and sort by severity.,"var_1 = works_list(type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
"Find work items related to ""BUG-TRACKING"" and list them by creation date","var_1 = search_object_by_name(query=""BUG-TRACKING"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
"
Prepare a report of all my tasks related to Project XYZ,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""Project XYZ"")
var_3 = works_list(type=[""task""], owned_by=[var_1], applies_to_part=[var_2])
var_4 = summarize_objects(objects=var_3)
"
"Find and prioritize tasks related to ""Project X"" for my review","var_1 = search_object_by_name(query=""Project X"")
var_2 = who_am_i()
var_3 = works_list(type=[""task""], applies_to_part=[var_1], owned_by=[var_2])
var_4 = prioritize_objects(objects=var_3)
"
Create a task for each actionable item from the brainstorming session notes and add them to the sprint with ID SPRINT-456,"var_1 = create_actionable_tasks_from_text(text=""brainstorming session notes"")
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-456"")
"
Find and summarize work items related to part ENH-456 that need a response,"var_1 = works_list(applies_to_part=[""ENH-456""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"Is reality a shared consensus, and do our collective beliefs shape the world around us?",#Unanswerable_Invalid_Query_Error
Can you explain the process of photosynthesis in plants?,#Unanswerable_Invalid_Query_Error
" Prioritize and summarize tickets that need a response with severity high, limiting the results to 22.","var_1 = works_list(ticket.needs_response=True, ticket.severity=[""high""], type=[""ticket""], limit=22)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Can you provide a list of all the countries in the European Union?,#Unanswerable_Invalid_Query_Error
Identify all issues raised by user USER-456 and get a summary for management,"var_1 = works_list(type=[""issue""], created_by=[""USER-456""])
var_2 = summarize_objects(objects=var_1)
"
"Identify my tasks for the current sprint, summarize and prepare for the current team update","var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], stage.name=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
Get tasks related to ENH-123 and filter for high priority then summarize,"var_1 = search_object_by_name(query=""ENH-123"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p0"", ""p1""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Retrieve and summarize tasks created by user USER-321 related to part PROD-789,"var_1 = works_list(created_by=[""USER-321""], applies_to_part=[""PROD-789""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
Generate a list of tasks from meeting notes and add to sprint SPRINT-987,"var_1 = create_actionable_tasks_from_text(text=""meeting notes"")
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-987"")
"
What if consciousness is not confined to the brain but extends beyond our bodies?,#Unanswerable_Invalid_Query_Error
"Summarize the work items tagged with type ""task"" and owned by user ""UXLead"" across all departments.","var_1 = search_object_by_name(query=""UXLead"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
Summarize the work items for project 'NextGen-Project' updated by user 'UserX',"var_1 = search_object_by_name(query=""NextGen-Project"")
var_2 = works_list(created_by=[""UserX""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
"
flimit,"#Unanswerable_Invalid_Query_Error
"
"Retrieve my tasks, filter by p2 priority, and prepare for current sprint inclusion","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Identify tasks created by 'UserX', prioritize them, and summarize the top priority tasks","var_1 = works_list(created_by=[""UserX""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=[var_2[0]])
"
Retrieve and summarize work items of type 'issue' created by user DEVU-456.,"var_1 = search_object_by_name(query=""DEVU-456"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Find and add to the current sprint tasks associated with user DEVU-456 and requiring a response,"var_1 = works_list(owned_by=[""DEVU-456""], ticket.needs_response=True, type=[""task""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Find work items for component ABC-123 and summarize them,"var_1 = search_object_by_name(query=""component ABC-123"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"Extract tasks from the document 'DesignSpecs', prioritize, and add to my current sprint","var_1 = create_actionable_tasks_from_text(text=""DesignSpecs"")
var_2 = prioritize_objects(objects=var_1)
var_3 = who_am_i()
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
Add issues created by user USER-321 to the sprint,"var_1 = works_list(created_by=[""USER-321""], type=[""issue""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
Identify my tasks that are pending review and prioritize them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""pending review""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"Generate a list of tickets from ""REV-456"" organization, summarize the tickets with medium severity, and create tasks for them.","var_1 = works_list(ticket.rev_org=[""REV-456""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)
"
Summarize my tasks related to the product PROD-456,"var_1 = search_object_by_name(query=""PROD-456"")
var_2 = who_am_i()
var_3 = works_list(owned_by=[var_2], applies_to_part=[var_1], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
Extract actionable tasks from team meeting notes MN and prioritize for execution,"var_1 = create_actionable_tasks_from_text(text=""MN"")
var_2 = prioritize_objects(objects=var_1)
"
"Generate a list of issues that need a response and are associated with the Rev organization ""ORG-XYZ""","var_1 = works_list(issue.rev_orgs=[""ORG-XYZ""], ticket.needs_response=True, type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
" Retrieve all low severity tickets, summarize them, and add them to the current sprint, limiting the number of work items to 18.","var_1 = works_list(ticket.severity=[""low""], limit=18, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"Could the universe itself be conscious, experiencing its existence through the multitude of living beings?",#Unanswerable_Invalid_Query_Error
"For part CAPL-987, summarize all P1 and P2 issues and tickets requiring high priority attention","var_1 = search_object_by_name(query=""CAPL-987"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p1"", ""p2""], ticket.severity=[""high""], type=[""issue"", ""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"Show me all issues related to the security audit S, filter by ""p0"" priority, and summarize for the upcoming board meeting","var_1 = search_object_by_name(query=""security audit S"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p0""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"For the upcoming sprint, identify tasks marked as ""blocker"", summarize them and then add them to the sprint agenda.","var_1 = works_list(type=[""task""], ticket.severity=[""blocker""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"List issues for CAPL-123, filter by stage 'In Progress', and add to my current sprint","var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""In Progress""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"Summarize work items in 'review' stage for parts ""PROD-789"" and ""PROD-987"", then prioritize these summaries","var_1 = works_list(stage.name=[""review""], applies_to_part=[""PROD-789"", ""PROD-987""], type=[""issue"", ""ticket"", ""task""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
"
Add tasks related to customer 'InnovateCorp' to the sprint after summarizing,"var_1 = search_object_by_name(query=""InnovateCorp"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
Get work items created by user 'USER-456' and filter for those in 'QA' stage,"var_1 = search_object_by_name(query=""USER-456"")
var_2 = works_list(created_by=[var_1], stage.name=[""QA""])
"
Search for user 'DeveloperA' and summarize their P1 issues,"var_1 = search_object_by_name(query=""DeveloperA"")
var_2 = works_list(created_by=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
Find and summarize all tasks created by user USR-456,"var_1 = search_object_by_name(query=""USR-456"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Search for the user ""QA_Expert"" and get a list of all tickets they need to respond to.","var_1 = search_object_by_name(query=""QA_Expert"")
var_2 = works_list(created_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
Prioritize tickets that need a response from Rev organization REV-456,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
Extract tasks from meeting notes M and summarize them for review.,"var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = summarize_objects(objects=var_1)
"
Extract and prioritize actionable tasks from a team meeting note 'MeetingNote-XYZ',"var_1 = search_object_by_name(query=""MeetingNote-XYZ"")
var_2 = create_actionable_tasks_from_text(text=var_1)
var_3 = prioritize_objects(objects=var_2)
"
Retrieve work items created by user DevLead and summarize the top 20.,"var_1 = search_object_by_name(query=""DevLead"")
var_2 = works_list(created_by=[var_1], limit=20)
var_3 = summarize_objects(objects=var_2)
"
What are the steps to starting a small business?,#Unanswerable_Invalid_Query_Error
"Summarize the tasks related to the ""Backend Optimizations"" project","var_1 = search_object_by_name(query=""Backend Optimizations"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"Summarize work related to multiple parts including FEAT-456 and BUG-789, and then prioritize them","var_1 = works_list(applies_to_part=[""FEAT-456"", ""BUG-789""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
Could consciousness exist outside the boundaries of time and space?,#Unanswerable_Invalid_Query_Error
"Find all tasks related to the feature ""New Dashboard"" and list them in order of priority","var_1 = search_object_by_name(query=""New Dashboard"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
Add my tasks related to Epic EPIC-789 to the current sprint,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""EPIC-789"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
Create a report of all work items with status 'In-Progress' for the 'Frontend' team.,"var_1 = search_object_by_name(query=""Frontend"")
var_2 = works_list(stage.name=[""In-Progress""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"Is there a universal moral code, or is morality inherently subjective?",#Unanswerable_Invalid_Query_Error
Find tickets related to part ENH-789 and categorize them by severity,"var_1 = works_list(applies_to_part=[""ENH-789""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
Prioritize and summarize tickets from the SOCIAL_MEDIA source channel with a limit of 40 work items.,"var_1 = works_list(ticket.source_channel=[""SOCIAL_MEDIA""], type=[""ticket""], limit=40)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
