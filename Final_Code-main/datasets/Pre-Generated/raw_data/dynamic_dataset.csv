Added_Tools,Query,Output
"['
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 ']"," For user ""Tina"", list her tasks, filter work items related to these tasks by issue priority ""p2"", prioritize the filtered items, and summarize them for the monthly performance review.","var_1 = list_user_tasks(user_id=""Tina"")
var_2 = works_list(type=[""issue""], issue.priority=[""p2""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"['
 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 ']","Find the current sprint ID, list all tasks assigned to user ""DevLead"" whether completed or not, summarize these tasks, and add them to the current sprint.","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""DevLead"")
var_3 = list_user_tasks(user_id=var_2)
var_4 = summarize_objects(objects=var_3)
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
"
"['
 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 ']","Search for the user ID of ""ManagerMike,"" list all tasks assigned to this user and prioritize them, including the completed ones.","var_1 = search_object_by_name(query=""ManagerMike"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)
"
"['
 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 ']","Use the ID of the current user, list all tasks assigned to them, prioritize the tasks, and summarize them for a weekly review.","var_1 = who_am_i()
var_2 = list_user_tasks(user_id=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"['
 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 ']","Retrieve the ID of the current sprint, list all tasks assigned to user ""QAEngineer"" including completed tasks, summarize, and add them to the current sprint.","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""QAEngineer"")
var_3 = list_user_tasks(user_id=var_2, completed=True)
var_4 = summarize_objects(objects=var_3)
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
"
"['
 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 ']","Search for the user ID of ""FrontEndDev,"" list all completed tasks assigned to this user, prioritize them, and summarize for performance evaluation.","var_1 = search_object_by_name(query=""FrontEndDev"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"['
 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 ']","Identify the user ID of ""BackEndDev,"" list their tasks, summarize the completed ones, and prioritize the list for sprint planning.","var_1 = search_object_by_name(query=""BackEndDev"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"['
 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 ']","Find the current user's ID, list all their tasks, prioritize, and summarize the completed tasks for daily stand-up preparation.","var_1 = who_am_i()
var_2 = list_user_tasks(user_id=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"['
 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 ']","Search for the user ID of ""ProductOwner,"" list all tasks assigned to this user, summarize the tasks, and prioritize for sprint retrospective.","var_1 = search_object_by_name(query=""ProductOwner"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"['
 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 ']"," Retrieve the user ID of ""DataAnalyst,"" list all tasks assigned to them, prioritize, and summarize the completed tasks for a progress report.","var_1 = search_object_by_name(query=""DataAnalyst"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"['
 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 ']"," Locate the user ID of ""ClientSupport,"" list all tasks assigned to them, summarize, and prioritize for end-of-day report.","var_1 = search_object_by_name(query=""ClientSupport"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"['
 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 ']"," Search for the user ID of ""SysAdmin,"" list all tasks assigned to this user, prioritize both completed and completed tasks, and summarize for system audit preparation.","var_1 = search_object_by_name(query=""SysAdmin"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"['
 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 ']"," Get the user ID of ""DevOpsLead,"" list all tasks assigned to them, summarize the tasks, and prioritize for deployment planning.","var_1 = search_object_by_name(query=""DevOpsLead"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"['
 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 ']"," Search for the user ID of ""NetworkEngineer,"" list all tasks assigned to this user, summarize the completed tasks, and prioritize for network optimization planning.","var_1 = search_object_by_name(query=""NetworkEngineer"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"['
 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 ']"," Locate the user ID of ""TechSupportLead,"" list all tasks assigned to them, prioritize, and summarize for customer support enhancement.","var_1 = search_object_by_name(query=""TechSupportLead"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"['
 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 ']"," Identify the user ID of ""DatabaseAdmin,"" list all tasks assigned to them, prioritize, and summarize the completed tasks for database maintenance scheduling.","var_1 = search_object_by_name(query=""DatabaseAdmin"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"['
 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 ']"," Get the sprint ID, list all tasks for user ""CloudSpecialist,"" prioritize the tasks, summarize, and add the completed ones to the current sprint for cloud migration project tracking.","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""CloudSpecialist"")
var_3 = list_user_tasks(user_id=var_2, completed=True)
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)
var_6 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']","Find all work items owned by a user with ID ""USR123"", update their status to ""active"", and summarize the items.","var_1 = works_list(owned_by=[""USR123""])
var_2 = update_user_status(user_id=""USR123"", status=""active"")
var_3 = summarize_objects(objects=var_1)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']","Prioritize work items created by a user with ID ""USR456"", change the user's status to ""on leave"", and add the prioritized items to the current sprint.","var_1 = works_list(created_by=[""USR456""])
var_2 = prioritize_objects(objects=var_1)
var_3 = update_user_status(user_id=""USR456"", status=""on leave"")
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']","Retrieve work items with a severity of ""blocker"", update the status of the user with ID ""USR789"" to ""busy"", and summarize the items.","var_1 = works_list(ticket.severity=[""blocker""])
var_2 = update_user_status(user_id=""USR789"", status=""busy"")
var_3 = summarize_objects(objects=var_1)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']","Search for work items related to the part name ""WidgetA"", update the status of the user with ID ""USR101"" to ""available"", and prioritize the items.","var_1 = search_object_by_name(query=""WidgetA"")
var_2 = works_list(applies_to_part=[var_1])
var_3 = update_user_status(user_id=""USR101"", status=""available"")
var_4 = prioritize_objects(objects=var_2)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']","Get similar work items to ""TASK-321"", update the status of the user with ID ""USR202"" to ""offline"", and add the similar items to the current sprint.","var_1 = get_similar_work_items(work_id=""TASK-321"")
var_2 = update_user_status(user_id=""USR202"", status=""offline"")
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']","Summarize all tickets that need a response from the ""Support"" channel, update the status of the user with ID ""USR303"" to ""active"", and prioritize the tickets.","var_1 = works_list(ticket.needs_response=True, ticket.source_channel=[""Support""])
var_2 = update_user_status(user_id=""USR303"", status=""active"")
var_3 = prioritize_objects(objects=var_1)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']","Retrieve work items of type ""issue"" with priority ""p2"", update the status of the user with ID ""USR404"" to ""in a meeting"", and add the items to the current sprint.","var_1 = works_list(type=[""issue""], issue.priority=[""p2""])
var_2 = update_user_status(user_id=""USR404"", status=""in a meeting"")
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']","Locate all tasks created by ""TeamLead"", update their status to ""completed"", and summarize the tasks for a progress report.","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = update_user_status(user_id=var_1, status=""completed"")
var_4 = summarize_objects(objects=var_2)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']","Find all tickets from the source channel ""EMAIL"" with severity ""high"", update the status of the user with ID ""USR505"" to ""on break"", and prioritize the tickets.","var_1 = works_list(ticket.source_channel=[""EMAIL""], ticket.severity=[""high""])
var_2 = update_user_status(user_id=""USR505"", status=""on break"")
var_3 = prioritize_objects(objects=var_1)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']"," Retrieve work items that apply to part ""XJZ-300"", update the status of the user with ID ""USR606"" to ""active"", and summarize the items for inventory review.","var_1 = works_list(applies_to_part=[""XJZ-300""])
var_2 = update_user_status(user_id=""USR606"", status=""active"")
var_3 = summarize_objects(objects=var_1)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']"," Prioritize all issues from the ""Development"" stage with priority ""p3"", update the status of the user with ID ""USR707"" to ""away"", and add the prioritized issues to the current sprint.","var_1 = works_list(stage.name=[""Development""], type=[""issue""], issue.priority=[""p3""])
var_2 = update_user_status(user_id=""USR707"", status=""away"")
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']"," Summarize all tasks owned by user ""EngineerEllie"", update her status to ""working remotely"", and add the tasks to the current sprint.","var_1 = search_object_by_name(query=""EngineerEllie"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = update_user_status(user_id=var_1, status=""working remotely"")
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']"," Locate work items created by ""DesignerDan"", update his status to ""on vacation"", and summarize the items for a design review meeting.","var_1 = search_object_by_name(query=""DesignerDan"")
var_2 = works_list(created_by=[var_1])
var_3 = update_user_status(user_id=var_1, status=""on vacation"")
var_4 = summarize_objects(objects=var_2)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']"," Find all tasks related to part ""GFX-450"", update the status of the user with ID ""USR808"" to ""busy"", and prioritize the tasks for the production team.","var_1 = search_object_by_name(query=""GFX-450"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = update_user_status(user_id=""USR808"", status=""busy"")
var_4 = prioritize_objects(objects=var_2)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']"," Get similar work items to ""TICKET-987"", update the status of the user with ID ""USR909"" to ""available"", and add the similar items to the current sprint for resolution.","var_1 = get_similar_work_items(work_id=""TICKET-987"")
var_2 = update_user_status(user_id=""USR909"", status=""available"")
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']"," Retrieve work items with issue priority ""p1"" from the ""Customer Service"" stage, update the status of the user with ID ""USR010"" to ""engaged"", and summarize the items for a service quality report.","var_1 = works_list(stage.name=[""Customer Service""], type=[""issue""], issue.priority=[""p1""])
var_2 = update_user_status(user_id=""USR010"", status=""engaged"")
var_3 = summarize_objects(objects=var_1)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']"," Prioritize all tickets from source channel ""APP"" that need a response, update the status of the user with ID ""USR111"" to ""active"", and add the prioritized tickets to the current sprint.","var_1 = works_list(ticket.source_channel=[""APP""], ticket.needs_response=True)
var_2 = update_user_status(user_id=""USR111"", status=""active"")
var_3 = prioritize_objects(objects=var_1)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']"," Summarize all issues owned by ""AdminAndy"", update his status to ""in training"", and prioritize the issues for administrative follow-up.","var_1 = search_object_by_name(query=""AdminAndy"")
var_2 = works_list(owned_by=[var_1], type=[""issue""])
var_3 = update_user_status(user_id=var_1, status=""in training"")
var_4 = prioritize_objects(objects=var_2)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']"," Locate work items of type ""ticket"" with severity ""medium"", update the status of the user with ID ""USR212"" to ""active"", and summarize the items for customer follow-up.","var_1 = works_list(type=[""ticket""], ticket.severity=[""medium""])
var_2 = update_user_status(user_id=""USR212"", status=""active"")
var_3 = summarize_objects(objects=var_1)
"
"['
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ']"," Find all tasks created by ""CoordinatorCathy"", update her status to ""present"", and prioritize the tasks for the upcoming team meeting.","var_1 = search_object_by_name(query=""CoordinatorCathy"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = update_user_status(user_id=var_1, status=""present"")
var_4 = prioritize_objects(objects=var_2)
"
"['def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 ']","Filter work items by date range from ""2023-01-01"" to ""2023-01-31"", retrieve those created by user ""UserA"", and summarize them.","var_1 = filter_work_by_date_range(start_date=""2023-01-01"", end_date=""2023-01-31"", type=None)
var_2 = works_list(created_by=[""UserA""])
var_3 = summarize_objects(objects=var_2)
"
"['def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 ']","Within the date range ""2023-02-01"" to ""2023-02-28"", find all tasks related to part ""PartB"", prioritize them, and add them to the current sprint.","var_1 = filter_work_by_date_range(start_date=""2023-02-01"", end_date=""2023-02-28"", type=[""task""])
var_2 = works_list(applies_to_part=[""PartB""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"['def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 ']","Summarize and prioritize all issues with priority P2 from the ""Development"" stage that fall between ""2023-03-01"" and ""2023-03-15"".","var_1 = filter_work_by_date_range(start_date=""2023-03-01"", end_date=""2023-03-15"", type=[""issue""])
var_2 = works_list(stage.name=[""Development""], issue.priority=[""p2""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"['def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 ']","Locate all tickets from source channel ""EMAIL"" that need a response, filter them by the date range ""2023-04-01"" to ""2023-04-30"", and summarize them.","var_1 = filter_work_by_date_range(start_date=""2023-04-01"", end_date=""2023-04-30"", type=[""ticket""])
var_2 = works_list(ticket.source_channel=[""EMAIL""], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
"['def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 ']","Filter work items from ""2023-05-01"" to ""2023-05-20"", prioritize all tasks owned by user ""UserC"", and add them to the current sprint.","var_1 = filter_work_by_date_range(start_date=""2023-05-01"", end_date=""2023-05-20"", type=[""task""])
var_2 = works_list(owned_by=[""UserC""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"['def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 ']","Retrieve similar work items to ""TASK-456"" that were created between ""2023-06-10"" and ""2023-06-24"", and summarize them for a report.","var_1 = get_similar_work_items(work_id=""TASK-456"")
var_2 = filter_work_by_date_range(start_date=""2023-06-10"", end_date=""2023-06-24"", type=None)
var_3 = summarize_objects(objects=var_1)
"
"['def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 ']","From ""2023-07-01"" to ""2023-07-31"", filter and summarize work items created by ""TeamLeadD"", then prioritize them.","var_1 = filter_work_by_date_range(start_date=""2023-07-01"", end_date=""2023-07-31"", type=None)
var_2 = works_list(created_by=[""TeamLeadD""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"['def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 ']","Find and prioritize all tasks related to part ""PartE"" within the date range ""2023-08-01"" to ""2023-08-15"", and add them to the current sprint.","var_1 = filter_work_by_date_range(start_date=""2023-08-01"", end_date=""2023-08-15"", type=[""task""])
var_2 = works_list(applies_to_part=[""PartE""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"['def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 ']","Summarize and prioritize all issues with priority P3 from the ""Support"" stage between ""2023-09-01"" and ""2023-09-30"".","var_1 = filter_work_by_date_range(start_date=""2023-09-01"", end_date=""2023-09-30"", type=[""issue""])
var_2 = works_list(stage.name=[""Support""], issue.priority=[""p3""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"['def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 ']"," Filter work items by date range ""2023-10-01"" to ""2023-10-31"", locate all tickets from source channel ""CHAT"" that need a response, and summarize them.","var_1 = filter_work_by_date_range(start_date=""2023-10-01"", end_date=""2023-10-31"", type=[""ticket""])
var_2 = works_list(ticket.source_channel=[""CHAT""], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
"['def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 ']"," Prioritize all tasks owned by user ""UserF"" that fall within the date range ""2023-11-01"" to ""2023-11-15"", and add them to the current sprint.","var_1 = filter_work_by_date_range(start_date=""2023-11-01"", end_date=""2023-11-15"", type=[""task""])
var_2 = works_list(owned_by=[""UserF""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"['def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 ']"," Retrieve similar work items to ""ISSUE-789"" from ""2023-12-01"" to ""2023-12-31"", and provide a summarized report.","var_1 = get_similar_work_items(work_id=""ISSUE-789"")
var_2 = filter_work_by_date_range(start_date=""2023-12-01"", end_date=""2023-12-31"", type=None)
var_3 = summarize_objects(objects=var_1)
"
"['def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 ']"," Filter work items by date range ""2023-01-15"" to ""2023-01-22"", retrieve those created by user ""UserG"", prioritize them, and add them to the current sprint.","var_1 = filter_work_by_date_range(start_date=""2023-01-15"", end_date=""2023-01-22"", type=None)
var_2 = works_list(created_by=[""UserG""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"['def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 ']"," Summarize and prioritize all issues with priority P0 from the ""Testing"" stage that fall between ""2023-03-15"" and ""2023-03-31"".","var_1 = filter_work_by_date_range(start_date=""2023-03-15"", end_date=""2023-03-31"", type=[""issue""])
var_2 = works_list(stage.name=[""Testing""], issue.priority=[""p0""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"['def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 ']"," Locate all tickets from source channel ""MOBILE"" that need a response, filter them by the date range ""2023-04-01"" to ""2023-04-15"", and prioritize them.","var_1 = filter_work_by_date_range(start_date=""2023-04-01"", end_date=""2023-04-15"", type=[""ticket""])
var_2 = works_list(ticket.source_channel=[""MOBILE""], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)
"
"['def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 ']"," Filter work items from ""2023-05-10"" to ""2023-05-25"", summarize all tasks owned by user ""UserI"", and add them to the current sprint.","var_1 = filter_work_by_date_range(start_date=""2023-05-10"", end_date=""2023-05-25"", type=[""task""])
var_2 = works_list(owned_by=[""UserI""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"['def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 ']"," Retrieve similar work items to ""TASK-101"" that were created between ""2023-06-15"" and ""2023-06-30"", summarize them, and prioritize them.","var_1 = get_similar_work_items(work_id=""TASK-101"")
var_2 = filter_work_by_date_range(start_date=""2023-06-15"", end_date=""2023-06-30"", type=None)
var_3 = summarize_objects(objects=var_1)
var_4 = prioritize_objects(objects=var_1)
"
"['def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 ']"," From ""2023-07-15"" to ""2023-07-29"", filter and prioritize work items created by ""TeamLeadJ"", then summarize them.","var_1 = filter_work_by_date_range(start_date=""2023-07-15"", end_date=""2023-07-29"", type=None)
var_2 = works_list(created_by=[""TeamLeadJ""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_2)
"
"['def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 ']"," Find and summarize all tasks related to part ""PartK"" within the date range ""2023-08-05"" to ""2023-08-20"", and add them to the current sprint.","var_1 = filter_work_by_date_range(start_date=""2023-08-05"", end_date=""2023-08-20"", type=[""task""])
var_2 = works_list(applies_to_part=[""PartK""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"['
 
 def delete_objects_by_id(object_ids):
 """"""
 Deletes objects from the system based on their IDs
 
 Parameters:
  object_ids (list): List of object IDs to delete
 
 Returns:
  bool: True if objects were successfully deleted, False otherwise
 """"""
 ']","Search for the sprint ID, add prioritized tasks related to part ""ENG-101"" to the sprint, and delete the original tasks using their IDs.","var_1 = get_sprint_id()
var_2 = works_list(type=[""task""], applies_to_part=[""ENG-101""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
var_5 = delete_objects_by_id(object_ids=var_2)
"
"['
 
 def delete_objects_by_id(object_ids):
 """"""
 Deletes objects from the system based on their IDs
 
 Parameters:
  object_ids (list): List of object IDs to delete
 
 Returns:
  bool: True if objects were successfully deleted, False otherwise
 """"""
 ']","Search for work items owned by ""TeamLeadTom"", prioritize them, add them to the current sprint, and delete the original work items using their IDs.","var_1 = search_object_by_name(query=""TeamLeadTom"")
var_2 = works_list(owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = delete_objects_by_id(object_ids=var_2)
"
"['
 
 def delete_objects_by_id(object_ids):
 """"""
 Deletes objects from the system based on their IDs
 
 Parameters:
  object_ids (list): List of object IDs to delete
 
 Returns:
  bool: True if objects were successfully deleted, False otherwise
 """"""
 ']","Create actionable tasks from the text of a recent meeting, prioritize these tasks, and then delete the original text entries using their IDs.","var_1 = create_actionable_tasks_from_text(text=""Recent meeting text"")
var_2 = prioritize_objects(objects=var_1)
var_3 = delete_objects_by_id(object_ids=var_1)
"
"['
 
 def delete_objects_by_id(object_ids):
 """"""
 Deletes objects from the system based on their IDs
 
 Parameters:
  object_ids (list): List of object IDs to delete
 
 Returns:
  bool: True if objects were successfully deleted, False otherwise
 """"""
 ']"," Find all work items created by ""DesignerDana"", add them to the current sprint after prioritizing, and delete the original work items using their IDs.","var_1 = search_object_by_name(query=""DesignerDana"")
var_2 = works_list(created_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = delete_objects_by_id(object_ids=var_2)
"
"['
 
 def delete_objects_by_id(object_ids):
 """"""
 Deletes objects from the system based on their IDs
 
 Parameters:
  object_ids (list): List of object IDs to delete
 
 Returns:
  bool: True if objects were successfully deleted, False otherwise
 """"""
 ']"," Locate all work items owned by ""ProductPat"", add them to the current sprint after summarizing and prioritizing, and delete the original work items using their IDs.","var_1 = search_object_by_name(query=""ProductPat"")
var_2 = works_list(owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
var_7 = delete_objects_by_id(object_ids=var_2)
"
"['
 
 def retrieve_user_permissions(user_id):
 """"""
 Retrieves the list of permissions for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose permissions are to be retrieved
 
 Returns:
  list: The list of permissions for the user
 """"""
 ', '
 
 def list_user_skills(user_id):
 """"""
 Lists the skills associated with the specified user
 
 Parameters:
  user_id (str): The ID of the user whose skills are being queried
 
 Returns:
  list: The skills of the user
 """"""
 ']","Get the list of skills for user ""USR456"", find all tasks related to those skills, prioritize the tasks, and add them to the current sprint.","var_1 = list_user_skills(user_id=""USR456"")
var_2 = works_list(type=[""task""], type=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"['
 
 def retrieve_user_permissions(user_id):
 """"""
 Retrieves the list of permissions for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose permissions are to be retrieved
 
 Returns:
  list: The list of permissions for the user
 """"""
 ', '
 
 def list_user_skills(user_id):
 """"""
 Lists the skills associated with the specified user
 
 Parameters:
  user_id (str): The ID of the user whose skills are being queried
 
 Returns:
  list: The skills of the user
 """"""
 ']","Check the permissions for user ""USR202"", then find all issues created by them with priority P2 and summarize the issues.","var_1 = retrieve_user_permissions(user_id=""USR202"")
var_2 = works_list(created_by=[""USR202""], issue.priority=[""p2""])
var_3 = summarize_objects(objects=var_2)
"
"['
 
 def retrieve_user_permissions(user_id):
 """"""
 Retrieves the list of permissions for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose permissions are to be retrieved
 
 Returns:
  list: The list of permissions for the user
 """"""
 ', '
 
 def list_user_skills(user_id):
 """"""
 Lists the skills associated with the specified user
 
 Parameters:
  user_id (str): The ID of the user whose skills are being queried
 
 Returns:
  list: The skills of the user
 """"""
 ']","List the skills for user ""USR303"", search for similar work items related to a task they completed, prioritize, and summarize those items.","var_1 = list_user_skills(user_id=""USR303"")
var_2 = get_similar_work_items(work_id=""USR303"")
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"['
 
 def retrieve_user_permissions(user_id):
 """"""
 Retrieves the list of permissions for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose permissions are to be retrieved
 
 Returns:
  list: The list of permissions for the user
 """"""
 ', '
 
 def list_user_skills(user_id):
 """"""
 Lists the skills associated with the specified user
 
 Parameters:
  user_id (str): The ID of the user whose skills are being queried
 
 Returns:
  list: The skills of the user
 """"""
 ']"," Get the skills for user ""USR121"", find all tasks with those skills as a requirement, prioritize them, and add them to the current sprint.","var_1 = list_user_skills(user_id=""USR121"")
var_2 = works_list(type=[""task""], type=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"['
 
 def retrieve_user_permissions(user_id):
 """"""
 Retrieves the list of permissions for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose permissions are to be retrieved
 
 Returns:
  list: The list of permissions for the user
 """"""
 ', '
 
 def list_user_skills(user_id):
 """"""
 Lists the skills associated with the specified user
 
 Parameters:
  user_id (str): The ID of the user whose skills are being queried
 
 Returns:
  list: The skills of the user
 """"""
 ']"," For user ""USR141"", list their skills, find all work items related to a part they are working on, prioritize, and summarize the work items.","var_1 = list_user_skills(user_id=""USR141"")
var_2 = search_object_by_name(query=""USR141"")  
var_3 = works_list(applies_to_part=[var_2], type=var_1)
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)
"
"['
 
 def get_ticket_comments(ticket_id):
 """"""
 Retrieves the comments attached to a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose comments are being retrieved
 
 Returns:
  list: Comments associated with the ticket
 """"""
 ', '
 
 def calculate_budget_remaining(budget_id):
 """"""
 Calculates the remaining budget for a given budget ID
 
 Parameters:
  budget_id (str): The ID of the budget to calculate
 
 Returns:
  float: The amount of remaining budget
 """"""
 ']"," Take the comments from ticket ""TICKET-012"", summarize the work items owned by the users mentioned in the comments, and calculate the remaining budget for budget ID ""BUD-1012"".","var_1 = get_ticket_comments(ticket_id=""TICKET-012"")
var_2 = search_object_by_name(query=var_1[0])
var_3 = works_list(owned_by=[var_2])
var_4 = summarize_objects(objects=var_3)
var_5 = calculate_budget_remaining(budget_id=""BUD-1012"")
"
"['
 
 def get_ticket_comments(ticket_id):
 """"""
 Retrieves the comments attached to a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose comments are being retrieved
 
 Returns:
  list: Comments associated with the ticket
 """"""
 ', '
 
 def calculate_budget_remaining(budget_id):
 """"""
 Calculates the remaining budget for a given budget ID
 
 Parameters:
  budget_id (str): The ID of the budget to calculate
 
 Returns:
  float: The amount of remaining budget
 """"""
 ']","Prioritize all issues with priority ""p2"" and get comments for ticket ID ""TICK-707"", add them to the current sprint, and determine the remaining budget for budget ID ""BUD-789"".","var_1 = works_list(issue.priority=[""p2""], type=[""issue""])
var_2 = get_ticket_comments(ticket_id=""TICK-707"")
var_3 = prioritize_objects(objects=var_1)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = calculate_budget_remaining(budget_id=""BUD-789"")
"
"['
 
 def archive_old_tickets(older_than_date, active_status=False):
 """"""
 Archives tickets that are older than the specified date and optionally filters by active status
 
 Parameters:
  older_than_date (str): A date in the format \'YYYY-MM-DD\', to filter tickets older than this date
  active_status (bool): If True, only archives tickets that are currently active; defaults to False
 
 Returns:
  str: The ID of the tickets
 """"""
 ', '
 
 def generate_report_from_data(dataset_id, report_type=""summary""):
 """"""
 Generates a specific type of report from a dataset
 
 Parameters:
  dataset_id (str): The ID of the dataset from which to generate the report
  report_type (str): The type of report to generate, default is \'summary\'
 
 Returns:
  str: The ID of the generated report
 """"""
 ']","Archive tickets older than ""2022-01-01"", generate a summary report from the archived data, and retrieve work items created by user ""DevLead"" to summarize them.","var_1 = archive_old_tickets(older_than_date=""2022-01-01"")
var_2 = generate_report_from_data(dataset_id=var_1, report_type=""summary"")
var_3 = search_object_by_name(query=""DevLead"")
var_4 = works_list(created_by=[var_3], type=[""ticket"", ""issue"", ""task""])
var_5 = summarize_objects(objects=var_4)
"
"['
 
 def archive_old_tickets(older_than_date, active_status=False):
 """"""
 Archives tickets that are older than the specified date and optionally filters by active status
 
 Parameters:
  older_than_date (str): A date in the format \'YYYY-MM-DD\', to filter tickets older than this date
  active_status (bool): If True, only archives tickets that are currently active; defaults to False
 
 Returns:
  str: The ID of the tickets
 """"""
 ', '
 
 def generate_report_from_data(dataset_id, report_type=""summary""):
 """"""
 Generates a specific type of report from a dataset
 
 Parameters:
  dataset_id (str): The ID of the dataset from which to generate the report
  report_type (str): The type of report to generate, default is \'summary\'
 
 Returns:
  str: The ID of the generated report
 """"""
 ']","Prioritize all tasks owned by user ""TeamLeadTom"", add them to the current sprint, archive tickets older than ""2022-03-01"", and generate a report from the archived tickets.","var_1 = search_object_by_name(query=""TeamLeadTom"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = archive_old_tickets(older_than_date=""2022-03-01"")
var_7 = generate_report_from_data(dataset_id=var_6, report_type=""summary"")
"
"['
 
 def archive_old_tickets(older_than_date, active_status=False):
 """"""
 Archives tickets that are older than the specified date and optionally filters by active status
 
 Parameters:
  older_than_date (str): A date in the format \'YYYY-MM-DD\', to filter tickets older than this date
  active_status (bool): If True, only archives tickets that are currently active; defaults to False
 
 Returns:
  str: The ID of the tickets
 """"""
 ', '
 
 def generate_report_from_data(dataset_id, report_type=""summary""):
 """"""
 Generates a specific type of report from a dataset
 
 Parameters:
  dataset_id (str): The ID of the dataset from which to generate the report
  report_type (str): The type of report to generate, default is \'summary\'
 
 Returns:
  str: The ID of the generated report
 """"""
 ']","Archive all active tickets older than ""2022-07-01"", generate a report from these tickets, and then summarize and prioritize all tickets from the ""Support"" stage.","var_1 = archive_old_tickets(older_than_date=""2022-07-01"", active_status=True)
var_2 = generate_report_from_data(dataset_id=var_1, report_type=""summary"")
var_3 = works_list(stage.name=[""Support""], type=[""ticket""])
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)
"
"['
 
 def archive_old_tickets(older_than_date, active_status=False):
 """"""
 Archives tickets that are older than the specified date and optionally filters by active status
 
 Parameters:
  older_than_date (str): A date in the format \'YYYY-MM-DD\', to filter tickets older than this date
  active_status (bool): If True, only archives tickets that are currently active; defaults to False
 
 Returns:
  str: The ID of the tickets
 """"""
 ', '
 
 def generate_report_from_data(dataset_id, report_type=""summary""):
 """"""
 Generates a specific type of report from a dataset
 
 Parameters:
  dataset_id (str): The ID of the dataset from which to generate the report
  report_type (str): The type of report to generate, default is \'summary\'
 
 Returns:
  str: The ID of the generated report
 """"""
 ']"," Summarize all issues created by user ""CoderCarl"", prioritize them, archive tickets older than ""2022-08-01"", and generate a summary report from the data.","var_1 = search_object_by_name(query=""CoderCarl"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = archive_old_tickets(older_than_date=""2022-08-01"")
var_6 = generate_report_from_data(dataset_id=var_5, report_type=""summary"")
"
"['
 
 def archive_old_tickets(older_than_date, active_status=False):
 """"""
 Archives tickets that are older than the specified date and optionally filters by active status
 
 Parameters:
  older_than_date (str): A date in the format \'YYYY-MM-DD\', to filter tickets older than this date
  active_status (bool): If True, only archives tickets that are currently active; defaults to False
 
 Returns:
  str: The ID of the tickets
 """"""
 ', '
 
 def generate_report_from_data(dataset_id, report_type=""summary""):
 """"""
 Generates a specific type of report from a dataset
 
 Parameters:
  dataset_id (str): The ID of the dataset from which to generate the report
  report_type (str): The type of report to generate, default is \'summary\'
 
 Returns:
  str: The ID of the generated report
 """"""
 ']"," Retrieve similar work items to ""ISSUE-789"", summarize them for a report, archive tickets older than ""2022-12-01"", and generate a detailed report from the archived tickets.","var_1 = get_similar_work_items(work_id=""ISSUE-789"")
var_2 = summarize_objects(objects=var_1)
var_3 = archive_old_tickets(older_than_date=""2022-12-01"")
var_4 = generate_report_from_data(dataset_id=var_3, report_type=""detailed"")
"
"['
 
 def archive_old_tickets(older_than_date, active_status=False):
 """"""
 Archives tickets that are older than the specified date and optionally filters by active status
 
 Parameters:
  older_than_date (str): A date in the format \'YYYY-MM-DD\', to filter tickets older than this date
  active_status (bool): If True, only archives tickets that are currently active; defaults to False
 
 Returns:
  str: The ID of the tickets
 """"""
 ', '
 
 def generate_report_from_data(dataset_id, report_type=""summary""):
 """"""
 Generates a specific type of report from a dataset
 
 Parameters:
  dataset_id (str): The ID of the dataset from which to generate the report
  report_type (str): The type of report to generate, default is \'summary\'
 
 Returns:
  str: The ID of the generated report
 """"""
 ']"," Archive all active tickets older than ""2023-02-01"", generate a report from these tickets, and then summarize and prioritize all work items owned by ""AdminAndy"".","var_1 = archive_old_tickets(older_than_date=""2023-02-01"", active_status=True)
var_2 = generate_report_from_data(dataset_id=""var_1"", report_type=""summary"")
var_3 = search_object_by_name(query=""AdminAndy"")
var_4 = works_list(owned_by=[var_3], type=[""ticket"", ""issue"", ""task""])
var_5 = summarize_objects(objects=var_4)
var_6 = prioritize_objects(objects=var_4)
"
"['
 
 def remove_users_from_group(user_ids, group_id):
 """"""
 Removes the specified users from a group
 
 Parameters:
  user_ids (list): A list of user IDs to be removed from the group
  group_id (str): The ID of the group from which the users should be removed
 
 Returns:
  bool: Status of the removal
 """"""
 ', '
 
 def mark_ticket_as_resolved(ticket_id):
 """"""
 Marks a ticket as resolved in the system
 
 Parameters:
  ticket_id (str): The ID of the ticket to be marked as resolved
 
 Returns:
  bool: True if the ticket was marked as resolved, False otherwise
 """"""
 ']","Find all tasks associated with part ""UX-101"", remove users ""AJones"" and ""MBrown"" from group ""UX-Team"", mark ticket ""TICK234"" as resolved, and then prioritize the tasks.","var_1 = works_list(applies_to_part=[""UX-101""], type=[""task""])
var_2 = remove_users_from_group(user_ids=[""AJones"", ""MBrown""], group_id=""UX-Team"")
var_3 = mark_ticket_as_resolved(ticket_id=""TICK234"")
var_4 = prioritize_objects(objects=var_1)
"
"['
 
 def remove_users_from_group(user_ids, group_id):
 """"""
 Removes the specified users from a group
 
 Parameters:
  user_ids (list): A list of user IDs to be removed from the group
  group_id (str): The ID of the group from which the users should be removed
 
 Returns:
  bool: Status of the removal
 """"""
 ', '
 
 def mark_ticket_as_resolved(ticket_id):
 """"""
 Marks a ticket as resolved in the system
 
 Parameters:
  ticket_id (str): The ID of the ticket to be marked as resolved
 
 Returns:
  bool: True if the ticket was marked as resolved, False otherwise
 """"""
 ']","Summarize and prioritize all tickets with severity ""high"" from the ""CustomerSupport"" stage, remove user ""CTech"" from group ""SupportStaff"", and mark ticket ""TICK345"" as resolved.","var_1 = works_list(stage.name=[""CustomerSupport""], ticket.severity=[""high""], type=[""ticket""])
var_2 = remove_users_from_group(user_ids=[""CTech""], group_id=""SupportStaff"")
var_3 = mark_ticket_as_resolved(ticket_id=""TICK345"")
var_4 = summarize_objects(objects=var_1)
var_5 = prioritize_objects(objects=var_1)
"
"['
 
 def remove_users_from_group(user_ids, group_id):
 """"""
 Removes the specified users from a group
 
 Parameters:
  user_ids (list): A list of user IDs to be removed from the group
  group_id (str): The ID of the group from which the users should be removed
 
 Returns:
  bool: Status of the removal
 """"""
 ', '
 
 def mark_ticket_as_resolved(ticket_id):
 """"""
 Marks a ticket as resolved in the system
 
 Parameters:
  ticket_id (str): The ID of the ticket to be marked as resolved
 
 Returns:
  bool: True if the ticket was marked as resolved, False otherwise
 """"""
 ']"," Prioritize all tasks with type ""ticket"" and ticket severity ""low"", add them to the current sprint, remove user ""LowPriorityHandler"" from group ""NonUrgentIssues"", and mark ticket ""TICK4567"" as resolved.","var_1 = works_list(ticket.severity=[""low""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = remove_users_from_group(user_ids=[""LowPriorityHandler""], group_id=""NonUrgentIssues"")
var_6 = mark_ticket_as_resolved(ticket_id=""TICK4567"")
"
"['
 
 def retrieve_user_contact_info(user_id):
 """"""
 Retrieves the contact information for a user
 
 Parameters:
  user_id (str): The ID of the user whose contact info is requested
 
 Returns:
  str: Contact information of the user
 """"""
 ', '
 
 def filter_contacts_by_organization(organization_id, active_only=True):
 """"""
 Returns a list of contacts associated with the specified organization, optionally filtering only active contacts
 
 Parameters:
  organization_id (str): The ID of the organization to filter contacts
  active_only (bool): Flag to filter only active contacts, default value \'True\'
 
 Returns:
  list: Contacts associated with the organization
 """"""
 ']","Retrieve the contact information for user ""ProductOwner22"", then filter active contacts by organization  ""O"" and summarize all work items created by those contacts.","var_1 = retrieve_user_contact_info(user_id=""ProductOwner22"")
var_2 = filter_contacts_by_organization(organization_id=""O"")
var_3 = works_list(created_by=[""""ProductOwner22""], type=[""issue"", ""ticket"", ""task""])
var_4 = summarize_objects(objects=var_3)
"
"['
 
 def retrieve_user_contact_info(user_id):
 """"""
 Retrieves the contact information for a user
 
 Parameters:
  user_id (str): The ID of the user whose contact info is requested
 
 Returns:
  str: Contact information of the user
 """"""
 ', '
 
 def filter_contacts_by_organization(organization_id, active_only=True):
 """"""
 Returns a list of contacts associated with the specified organization, optionally filtering only active contacts
 
 Parameters:
  organization_id (str): The ID of the organization to filter contacts
  active_only (bool): Flag to filter only active contacts, default value \'True\'
 
 Returns:
  list: Contacts associated with the organization
 """"""
 ']"," Retrieve the contact information for user ""DataAnalyst1"", then prioritize all tasks owned by ""DataAnalyst1"" and add them to the current sprint.","var_1 = retrieve_user_contact_info(user_id=""DataAnalyst1"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"['
 
 def update_stage_of_work_item(work_item_id, new_stage):
 """"""
 Updates the stage of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item to update
  new_stage (str): The new stage to which the work item should be moved
 
 Returns:
  bool: True if the stage is successfully updated, False otherwise
 """"""', '
 
 def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
 """"""
 Merges duplicate tickets into a primary ticket
 
 Parameters:
  primary_ticket_id (str): The ID of the primary ticket that remains
  duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary
 
 Returns:
  None
 """"""
 ']","Retrieve all tickets with severity ""High"" created by ""QAEngineer"", summarize the objects, prioritize them, and update the stage of 1st item to ""Testing"".","var_1 = works_list(created_by=[""QAEngineer""], ticket.severity=[""High""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = update_stage_of_work_item(work_item_id=var_3[0], new_stage=""Testing"")
"
"['
 
 def update_stage_of_work_item(work_item_id, new_stage):
 """"""
 Updates the stage of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item to update
  new_stage (str): The new stage to which the work item should be moved
 
 Returns:
  bool: True if the stage is successfully updated, False otherwise
 """"""', '
 
 def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
 """"""
 Merges duplicate tickets into a primary ticket
 
 Parameters:
  primary_ticket_id (str): The ID of the primary ticket that remains
  duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary
 
 Returns:
  None
 """"""
 ']","Get all tasks created by ""DesignerDana"", update 1st item's stage to ""Completed"", summarize them, and merge any duplicate tickets into 1st one.","var_1 = works_list(created_by=[""DesignerDana""], type=[""task""])
var_2 = update_stage_of_work_item(work_item_id=var_1[0], new_stage=""Completed"")
var_3 = summarize_objects(objects=var_1)
var_4 = merge_duplicate_tickets(primary_ticket_id=var_1[0], duplicate_ticket_ids=var_1)
"
"['
 
 def update_stage_of_work_item(work_item_id, new_stage):
 """"""
 Updates the stage of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item to update
  new_stage (str): The new stage to which the work item should be moved
 
 Returns:
  bool: True if the stage is successfully updated, False otherwise
 """"""', '
 
 def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
 """"""
 Merges duplicate tickets into a primary ticket
 
 Parameters:
  primary_ticket_id (str): The ID of the primary ticket that remains
  duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary
 
 Returns:
  None
 """"""
 ']","Search for tickets from the source channel ""EMAIL"", summarize the results, prioritize them, and update 2nd item's stage to ""Customer Support"".","var_1 = works_list(ticket.source_channel=[""EMAIL""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = update_stage_of_work_item(work_item_id=var_3[1], new_stage=""Customer Support"")
"
"['
 
 def list_completed_items_by_user(user_id):
 """"""
 Lists items that have been completed by the given user
 
 Parameters:
  user_id (str): The ID of the user whose completed items are being requested
 
 Returns:
  list: Completed items by the user
 """"""
 ', '
 
 def update_contact_information(contact_id, new_phone=None, new_email=None):
 """"""
 Updates the contact information with new provided phone number or email
 
 Parameters:
  contact_id (str): The ID of the contact to update
  new_phone (str): The new phone number for the contact, default is \'None\'
  new_email (str): The new email address for the contact, default is \'None\'
 
 Returns:
  bool: Status of the update operation
 """"""
 ']","Find the list of work items completed by user ""User123"", summarize these items, and update their contact information with a new email.","var_1 = list_completed_items_by_user(user_id=""User123"")
var_2 = summarize_objects(objects=var_1)
var_3 = search_object_by_name(query=""User123"")
var_4 = update_contact_information(contact_id=var_3, new_email=""new.email@example.com"")
"
"['
 
 def check_ticket_status(ticket_id):
 """"""
 Checks the status of a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose status is to be checked
 
 Returns:
  str: The status of the ticket
 """"""
 ', '
 
 def schedule_meeting_with_user(user_id, duration=30, urgent=False):
 """"""
 Schedules a meeting with a specified user
 
 Parameters:
  user_id (str): The ID of the user with whom to schedule a meeting
  duration (int): Duration of the meeting in minutes, default is \'30\'
  urgent (bool): Whether the meeting is urgent, defaults to False
 
 Returns:
  str: The ID of the scheduled meeting
 """"""
 ', '
 
 def validate_project_completion(project_id):
 """"""
 Validates if all tasks within a project are completed
 
 Parameters:
  project_id (str): The ID of the project to validate
 
 Returns:
  bool: True if completed, False otherwise
 """"""
 ']","Validate the completion of project ""PROJ-002"", then retrieve and prioritize all tasks related to the part ""PART-123"" associated with that project, and check the status of the main ticket for ""PROJ-002"".","var_1 = validate_project_completion(project_id=""PROJ-002"")
var_2 = works_list(applies_to_part=[""PART-123""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = search_object_by_name(query=""PROJ-002"")
var_5 = check_ticket_status(ticket_id=var_4)"
"['
 
 def check_ticket_status(ticket_id):
 """"""
 Checks the status of a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose status is to be checked
 
 Returns:
  str: The status of the ticket
 """"""
 ', '
 
 def schedule_meeting_with_user(user_id, duration=30, urgent=False):
 """"""
 Schedules a meeting with a specified user
 
 Parameters:
  user_id (str): The ID of the user with whom to schedule a meeting
  duration (int): Duration of the meeting in minutes, default is \'30\'
  urgent (bool): Whether the meeting is urgent, defaults to False
 
 Returns:
  str: The ID of the scheduled meeting
 """"""
 ', '
 
 def validate_project_completion(project_id):
 """"""
 Validates if all tasks within a project are completed
 
 Parameters:
  project_id (str): The ID of the project to validate
 
 Returns:
  bool: True if completed, False otherwise
 """"""
 ']","Schedule an urgent meeting with user ""User567"" to discuss the status of their ticket ""TICKET-567"", then summarize and prioritize all issues with priority P2 that the user is involved with.","var_1 = schedule_meeting_with_user(user_id=""User567"", urgent=True)
var_2 = check_ticket_status(ticket_id=""TICKET-567"")
var_3 = works_list(issue.priority=[""p2""], owned_by=[""User567""], type=[""issue""])
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)"
"['
 
 def check_ticket_status(ticket_id):
 """"""
 Checks the status of a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose status is to be checked
 
 Returns:
  str: The status of the ticket
 """"""
 ', '
 
 def schedule_meeting_with_user(user_id, duration=30, urgent=False):
 """"""
 Schedules a meeting with a specified user
 
 Parameters:
  user_id (str): The ID of the user with whom to schedule a meeting
  duration (int): Duration of the meeting in minutes, default is \'30\'
  urgent (bool): Whether the meeting is urgent, defaults to False
 
 Returns:
  str: The ID of the scheduled meeting
 """"""
 ', '
 
 def validate_project_completion(project_id):
 """"""
 Validates if all tasks within a project are completed
 
 Parameters:
  project_id (str): The ID of the project to validate
 
 Returns:
  bool: True if completed, False otherwise
 """"""
 ']","Validate the completion of project ""PROJ-101"", then retrieve similar work items to ""TASK-101"" related to this project, summarize them, and schedule a meeting with the project manager ""P"" to discuss the findings.","var_1 = validate_project_completion(project_id=""PROJ-101"")
var_2 = get_similar_work_items(work_id=""TASK-101"")
var_3 = summarize_objects(objects=var_2)
var_4 = search_object_by_name(query=""P"")
var_5 = schedule_meeting_with_user(user_id=var_4)"
"['
 
 def check_ticket_status(ticket_id):
 """"""
 Checks the status of a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose status is to be checked
 
 Returns:
  str: The status of the ticket
 """"""
 ', '
 
 def schedule_meeting_with_user(user_id, duration=30, urgent=False):
 """"""
 Schedules a meeting with a specified user
 
 Parameters:
  user_id (str): The ID of the user with whom to schedule a meeting
  duration (int): Duration of the meeting in minutes, default is \'30\'
  urgent (bool): Whether the meeting is urgent, defaults to False
 
 Returns:
  str: The ID of the scheduled meeting
 """"""
 ', '
 
 def validate_project_completion(project_id):
 """"""
 Validates if all tasks within a project are completed
 
 Parameters:
  project_id (str): The ID of the project to validate
 
 Returns:
  bool: True if completed, False otherwise
 """"""
 ']","Check the status of ticket ""TICKET-345"", then find all work items with the type ""issue"" that are in the ""Development"" stage, summarize and prioritize them, and schedule a meeting with the development team lead.","var_1 = check_ticket_status(ticket_id=""TICKET-345"")
var_2 = works_list(stage.name=[""Development""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = search_object_by_name(query=""Development Team Lead"")
var_6 = schedule_meeting_with_user(user_id=var_5)"
"['
 
 def check_ticket_status(ticket_id):
 """"""
 Checks the status of a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose status is to be checked
 
 Returns:
  str: The status of the ticket
 """"""
 ', '
 
 def schedule_meeting_with_user(user_id, duration=30, urgent=False):
 """"""
 Schedules a meeting with a specified user
 
 Parameters:
  user_id (str): The ID of the user with whom to schedule a meeting
  duration (int): Duration of the meeting in minutes, default is \'30\'
  urgent (bool): Whether the meeting is urgent, defaults to False
 
 Returns:
  str: The ID of the scheduled meeting
 """"""
 ', '
 
 def validate_project_completion(project_id):
 """"""
 Validates if all tasks within a project are completed
 
 Parameters:
  project_id (str): The ID of the project to validate
 
 Returns:
  bool: True if completed, False otherwise
 """"""
 ']","Schedule a meeting with user ""QA-Expert"" to discuss the urgent ticket ""TICKET-909"", then retrieve all tasks where ""QA-Expert"" is the creator, summarize and prioritize these tasks for the sprint planning.","var_1 = schedule_meeting_with_user(user_id=""QA-Expert"", urgent=True)
var_2 = check_ticket_status(ticket_id=""TICKET-909"")
var_3 = works_list(created_by=[""QA-Expert""], type=[""task""])
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)
var_6 = get_sprint_id()
var_7 = add_work_items_to_sprint(work_ids=var_5, sprint_id=var_6)"
"['
 
 def list_completed_tasks_by_user(user_id):
 """"""
 Lists all completed tasks for a specific user
 
 Parameters:
  user_id (str): The ID of the user whose completed tasks need to be listed
 
 Returns:
  list: List of completed task IDs
 """"""
 ', '
 
 def filter_objects_by_type(object_ids, object_type):
 """"""
 Filters a list of objects based on their type
 
 Parameters:
  object_ids (list): A list of object IDs to filter
  object_type (str): The type of objects to filter for
 
 Returns:
  list: Filtered object IDs matching the specified type
 """"""
 ', '
 
 def mark_ticket_for_review(ticket_id, reviewer_id):
 """"""
 Marks a ticket for review by a specific user
 
 Parameters:
  ticket_id (str): The ID of the ticket to be marked for review
  reviewer_id (str): The ID of the user who should review the ticket
 
 Returns:
  None
 """"""
 ']","Find the current sprint ID, list all completed tasks by user ""User123"", filter these tasks by type ""issue"", and then summarize and prioritize them.","var_1 = get_sprint_id()
var_2 = list_completed_tasks_by_user(user_id=""User123"")
var_3 = filter_objects_by_type(object_ids=var_2, object_type=""issue"")
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)"
"['
 
 def list_completed_tasks_by_user(user_id):
 """"""
 Lists all completed tasks for a specific user
 
 Parameters:
  user_id (str): The ID of the user whose completed tasks need to be listed
 
 Returns:
  list: List of completed task IDs
 """"""
 ', '
 
 def filter_objects_by_type(object_ids, object_type):
 """"""
 Filters a list of objects based on their type
 
 Parameters:
  object_ids (list): A list of object IDs to filter
  object_type (str): The type of objects to filter for
 
 Returns:
  list: Filtered object IDs matching the specified type
 """"""
 ', '
 
 def mark_ticket_for_review(ticket_id, reviewer_id):
 """"""
 Marks a ticket for review by a specific user
 
 Parameters:
  ticket_id (str): The ID of the ticket to be marked for review
  reviewer_id (str): The ID of the user who should review the ticket
 
 Returns:
  None
 """"""
 ']","Retrieve the user ID for ""TeamLead"", list their completed tasks, filter these tasks by type ""ticket"", mark them for review by ""Reviewer456"", and then summarize the tasks.","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = list_completed_tasks_by_user(user_id=var_1)
var_3 = filter_objects_by_type(object_ids=var_2, object_type=""ticket"")
var_4 = search_object_by_name(query=""Reviewer456"")
var_5 = mark_ticket_for_review(ticket_id=var_3, reviewer_id=var_4)
var_6 = summarize_objects(objects=var_3)"
"['
 
 def list_completed_tasks_by_user(user_id):
 """"""
 Lists all completed tasks for a specific user
 
 Parameters:
  user_id (str): The ID of the user whose completed tasks need to be listed
 
 Returns:
  list: List of completed task IDs
 """"""
 ', '
 
 def filter_objects_by_type(object_ids, object_type):
 """"""
 Filters a list of objects based on their type
 
 Parameters:
  object_ids (list): A list of object IDs to filter
  object_type (str): The type of objects to filter for
 
 Returns:
  list: Filtered object IDs matching the specified type
 """"""
 ', '
 
 def mark_ticket_for_review(ticket_id, reviewer_id):
 """"""
 Marks a ticket for review by a specific user
 
 Parameters:
  ticket_id (str): The ID of the ticket to be marked for review
  reviewer_id (str): The ID of the user who should review the ticket
 
 Returns:
  None
 """"""
 ']","Search for the object ID by name ""ProjectX"", list all completed tasks by the user associated with this object, filter these tasks by type ""task"", and then prioritize and summarize them.","var_1 = search_object_by_name(query=""ProjectX"")
var_2 = list_completed_tasks_by_user(user_id=var_1)
var_3 = filter_objects_by_type(object_ids=var_2, object_type=""task"")
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)"
"['
 
 def list_recent_activities(user_id, limit=10):
 """"""
 Lists the most recent activities performed by a user
 
 Parameters:
  user_id (str): The ID of the user whose activities are to be listed
  limit (int): The maximum number of recent activities to return
 
 Returns:
  list: Recent activities of the user
 """"""
 ', '
 
 def deactivate_user_account(user_id, reason):
 """"""
 Deactivates a user account for a specific reason
 
 Parameters:
  user_id (str): The ID of the user whose account is to be deactivated
  reason (str): The reason for deactivating the account
 
 Returns:
  bool: True if the account was successfully deactivated; otherwise False
 """"""
 ', '
 
 def remove_object_from_inventory(object_id):
 """"""
 Removes an object from the inventory system based on the object ID
 
 Parameters:
  object_id (str): The ID of the object to remove from inventory
 
 Returns:
  bool: True if the removal was successful, False otherwise
 """"""
 ']","For user ""QAEngineer"", list their recent activities, deactivate their account with the reason ""Contract End"", and remove their test device from inventory. Summarize and prioritize all issues with priority P1 from the ""Development"" stage.","var_1 = list_recent_activities(user_id=""QAEngineer"", limit=10)
var_2 = deactivate_user_account(user_id=""QAEngineer"", reason=""Contract End"")
var_3 = search_object_by_name(query=""QAEngineer's test device"")
var_4 = remove_object_from_inventory(object_id=var_3)
var_5 = works_list(issue.priority=[""p1""], stage.name=[""Development""], type=[""issue""])
var_6 = summarize_objects(objects=var_5)
var_7 = prioritize_objects(objects=var_5)"
"['
 
 def list_recent_activities(user_id, limit=10):
 """"""
 Lists the most recent activities performed by a user
 
 Parameters:
  user_id (str): The ID of the user whose activities are to be listed
  limit (int): The maximum number of recent activities to return
 
 Returns:
  list: Recent activities of the user
 """"""
 ', '
 
 def deactivate_user_account(user_id, reason):
 """"""
 Deactivates a user account for a specific reason
 
 Parameters:
  user_id (str): The ID of the user whose account is to be deactivated
  reason (str): The reason for deactivating the account
 
 Returns:
  bool: True if the account was successfully deactivated; otherwise False
 """"""
 ', '
 
 def remove_object_from_inventory(object_id):
 """"""
 Removes an object from the inventory system based on the object ID
 
 Parameters:
  object_id (str): The ID of the object to remove from inventory
 
 Returns:
  bool: True if the removal was successful, False otherwise
 """"""
 ']","Retrieve recent activities for user ""ManagerMike"", deactivate their account for ""Role Change"", and remove their old business cards from inventory. Prioritize all tasks owned by ""ManagerMike"" and add them to the current sprint.","var_1 = list_recent_activities(user_id=""ManagerMike"", limit=10)
var_2 = deactivate_user_account(user_id=""ManagerMike"", reason=""Role Change"")
var_3 = search_object_by_name(query=""ManagerMike's old business cards"")
var_4 = remove_object_from_inventory(object_id=var_3)
var_5 = works_list(owned_by=[""ManagerMike""], type=[""task""])
var_6 = prioritize_objects(objects=var_5)
var_7 = get_sprint_id()
var_8 = add_work_items_to_sprint(work_ids=var_6, sprint_id=var_7)"
"['def update_issue_status(issue_id, new_status):
 """"""
 Updates the status of an issue
 
 Parameters:
  issue_id (str): The ID of the issue to be updated
  new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ', '
 
 def generate_summary_report(object_ids):
 """"""
 Generates a summary report for the specified objects
 
 Parameters:
  object_ids (list): A list of object IDs
 
 Returns:
  str: The ID of the generated report
 """"""
 ', '
 
 def filter_tasks_by_completion(task_ids, completed=True):
 """"""
 Filters the list of tasks by their completion status
 
 Parameters:
  task_ids (list): List of task IDs to filter
  completed (bool): The completion status to filter by. Default is \'True\'
 
 Returns:
  list: List of task IDs that match the completion status
 """"""
 ']","Retrieve similar work items to ""ISSUE-789"" that need a response, update their status to ""closed"", generate a summary report, and filter out the ones that have been completed.","var_1 = get_similar_work_items(work_id=""ISSUE-789"")
var_2 = works_list(ticket.needs_response=True, type=[""issue""])
var_3 = update_issue_status(issue_id=var_2, new_status=""closed"")
var_4 = generate_summary_report(object_ids=var_2)
var_5 = filter_tasks_by_completion(task_ids=var_2, completed=False)"
"['
 
 def assign_tasks_to_user(task_ids, user_id):
 """"""
 Assigns a list of task IDs to the provided user
 
 Parameters:
  task_ids (list): List of task IDs to be assigned
  user_id (str): The ID of the user to whom the tasks will be assigned
 
 Returns:
  bool: True if the assignment is successful, False otherwise
 """"""
 ', 'def fetch_user_tasks(user_id, include_completed=False):
 """"""
 Retrieves a list of tasks assigned to a user
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be fetched
  include_completed (bool): Whether to include completed tasks in the list
 
 Returns:
  list: List of tasks assigned to the user
 """"""
 ', '
 
 def update_issue_with_solution(issue_id, solution_text):
 """"""
 Updates an issue with a solution description
 
 Parameters:
  issue_id (str): The ID of the issue to be updated
  solution_text (str): The description of the solution to apply to the issue
 
 Returns:
  None
 """"""
 ']","Find all work items owned by user ""QA_Analyst"" and summarize them. Then, assign the summarized tasks to user ""TeamLead"" and fetch all tasks assigned to ""TeamLead"", including the completed ones.","var_1 = works_list(owned_by=[""QA_Analyst""])
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)
var_4 = search_object_by_name(query=""TeamLead"")
var_5 = assign_tasks_to_user(task_ids=var_3, user_id=var_4)
var_6 = fetch_user_tasks(user_id=var_4, include_completed=True)"
"['
 
 def assign_tasks_to_user(task_ids, user_id):
 """"""
 Assigns a list of task IDs to the provided user
 
 Parameters:
  task_ids (list): List of task IDs to be assigned
  user_id (str): The ID of the user to whom the tasks will be assigned
 
 Returns:
  bool: True if the assignment is successful, False otherwise
 """"""
 ', 'def fetch_user_tasks(user_id, include_completed=False):
 """"""
 Retrieves a list of tasks assigned to a user
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be fetched
  include_completed (bool): Whether to include completed tasks in the list
 
 Returns:
  list: List of tasks assigned to the user
 """"""
 ', '
 
 def update_issue_with_solution(issue_id, solution_text):
 """"""
 Updates an issue with a solution description
 
 Parameters:
  issue_id (str): The ID of the issue to be updated
  solution_text (str): The description of the solution to apply to the issue
 
 Returns:
  None
 """"""
 ']","Get similar work items to ""TICKET-456"" and prioritize them. Assign the prioritized tasks to user ""SupportLead"" and fetch all tasks for ""SupportLead"", including completed ones to review their workload.","var_1 = get_similar_work_items(work_id=""TICKET-456"")
var_2 = prioritize_objects(objects=var_1)
var_3 = search_object_by_name(query=""SupportLead"")
var_4 = assign_tasks_to_user(task_ids=var_2, user_id=var_3)
var_5 = fetch_user_tasks(user_id=var_3, include_completed=True)"
"['
 
 def assign_tasks_to_user(task_ids, user_id):
 """"""
 Assigns a list of task IDs to the provided user
 
 Parameters:
  task_ids (list): List of task IDs to be assigned
  user_id (str): The ID of the user to whom the tasks will be assigned
 
 Returns:
  bool: True if the assignment is successful, False otherwise
 """"""
 ', 'def fetch_user_tasks(user_id, include_completed=False):
 """"""
 Retrieves a list of tasks assigned to a user
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be fetched
  include_completed (bool): Whether to include completed tasks in the list
 
 Returns:
  list: List of tasks assigned to the user
 """"""
 ', '
 
 def update_issue_with_solution(issue_id, solution_text):
 """"""
 Updates an issue with a solution description
 
 Parameters:
  issue_id (str): The ID of the issue to be updated
  solution_text (str): The description of the solution to apply to the issue
 
 Returns:
  None
 """"""
 ']","Summarize all tickets created by ""CustomerRep"" and prioritize them. Assign the most urgent tasks to user ""SupervisorJoe"" and fetch all tasks for ""SupervisorJoe"" to ensure proper delegation.","var_1 = works_list(created_by=[""CustomerRep""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = search_object_by_name(query=""SupervisorJoe"")
var_5 = assign_tasks_to_user(task_ids=[var_3[0]], user_id=var_4)
var_6 = fetch_user_tasks(user_id=var_4)"
"['
 
 def create_report_for_sprint(sprint_id, report_type):
 """"""
 Generates a report for a given sprint
 
 Parameters:
  sprint_id (str): The ID of the sprint
  report_type (str): The type of report to be generated
 
 Returns:
  str: The ID of the generated report
 """"""
 ', '
 
 def filter_tasks_by_due_date(task_ids, due_date):
 """"""
 Filters tasks by their due date
 
 Parameters:
  task_ids (list): A list of task IDs to filter
  due_date (str): The due date to filter tasks by
 
 Returns:
  list: List of task IDs that have the specified due date
 """"""
 ', '
 
 def filter_records_by_date(record_ids, start_date, end_date):
 """"""
 Filters a list of record IDs based on a date range
 
 Parameters:
  record_ids (list): List of record IDs to filter
  start_date (str): Start date for the filtering in \'YYYY-MM-DD\' format
  end_date (str): End date for the filtering in \'YYYY-MM-DD\' format
 
 Returns:
  list: Filtered record IDs
 """"""
 ']","Summarize and prioritize all tickets with severity ""blocker"" from the ""Development"" stage, create a report for the current sprint, and filter these records by the date range ""2023-04-10"" to ""2023-04-17"".","var_1 = works_list(stage.name=[""Development""], ticket.severity=[""blocker""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = create_report_for_sprint(sprint_id=var_2, report_type=""ticket_summary"")
var_4 = filter_records_by_date(record_ids=var_1, start_date=""2023-04-10"", end_date=""2023-04-17"")
var_5 = prioritize_objects(objects=var_4)
var_6 = summarize_objects(objects=var_5)"
"['
 
 def generate_report(report_type, subject_id, include_summary=True):
 """"""
 Generates a report of a specific type for a subject in the system
 
 Parameters:
  report_type (str): The type of report to generate
  subject_id (str): The ID of the subject for the report
  include_summary (bool): Whether to include a summary in the report; defaults to True
 
 Returns:
  str: The ID of the generated report
 """"""
 ', '
 
 def estimate_work_hours(work_id):
 """"""
 Estimates the number of hours required to complete a specific work item
 
 Parameters:
  work_id (str): The ID of the work item for which the estimation is to be made
 
 Returns:
  float: Estimated hours required to complete the work item
 """"""
 ', '
 
 def assign_task_to_user(task_id, user_id):
 """"""
 Assigns a specific task to a user
 
 Parameters:
  task_id (str): The ID of the task to be assigned
  user_id (str): The ID of the user to whom the task will be assigned
 
 Returns:
  bool: True if assignment was successful, otherwise False
 """"""
 ']","Find all tickets with severity ""high"" related to Rev organization ""AcmeCorp"", summarize them, generate a report, estimate the work hours for each ticket, and assign the task with the highest priority to user ""SeniorSupport"".","var_1 = search_object_by_name(query=""AcmeCorp"")
var_2 = works_list(ticket.severity=[""high""], ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = generate_report(report_type=""tickets"", subject_id=var_1)
var_5 = estimate_work_hours(work_id=var_2[0])
var_6 = prioritize_objects(objects=var_2)
var_7 = assign_task_to_user(task_id=var_6[0], user_id=""SeniorSupport"")"
"['
 
 def generate_report(report_type, subject_id, include_summary=True):
 """"""
 Generates a report of a specific type for a subject in the system
 
 Parameters:
  report_type (str): The type of report to generate
  subject_id (str): The ID of the subject for the report
  include_summary (bool): Whether to include a summary in the report; defaults to True
 
 Returns:
  str: The ID of the generated report
 """"""
 ', '
 
 def estimate_work_hours(work_id):
 """"""
 Estimates the number of hours required to complete a specific work item
 
 Parameters:
  work_id (str): The ID of the work item for which the estimation is to be made
 
 Returns:
  float: Estimated hours required to complete the work item
 """"""
 ', '
 
 def assign_task_to_user(task_id, user_id):
 """"""
 Assigns a specific task to a user
 
 Parameters:
  task_id (str): The ID of the task to be assigned
  user_id (str): The ID of the user to whom the task will be assigned
 
 Returns:
  bool: True if assignment was successful, otherwise False
 """"""
 ']","Retrieve all issues from stage ""Development"" with priority ""p2"", prioritize them, generate a report including a summary, estimate the work hours for the most critical issue, and assign it to user ""DevOps"".","var_1 = works_list(stage.name=[""Development""], issue.priority=[""p2""])
var_2 = prioritize_objects(objects=var_1)
var_3 = generate_report(report_type=""issues"", subject_id=""Development"", include_summary=True)
var_4 = estimate_work_hours(work_id=var_2[0])
var_5 = assign_task_to_user(task_id=var_2[0], user_id=""DevOps"")"
"['
 
 def generate_report(report_type, subject_id, include_summary=True):
 """"""
 Generates a report of a specific type for a subject in the system
 
 Parameters:
  report_type (str): The type of report to generate
  subject_id (str): The ID of the subject for the report
  include_summary (bool): Whether to include a summary in the report; defaults to True
 
 Returns:
  str: The ID of the generated report
 """"""
 ', '
 
 def estimate_work_hours(work_id):
 """"""
 Estimates the number of hours required to complete a specific work item
 
 Parameters:
  work_id (str): The ID of the work item for which the estimation is to be made
 
 Returns:
  float: Estimated hours required to complete the work item
 """"""
 ', '
 
 def assign_task_to_user(task_id, user_id):
 """"""
 Assigns a specific task to a user
 
 Parameters:
  task_id (str): The ID of the task to be assigned
  user_id (str): The ID of the user to whom the task will be assigned
 
 Returns:
  bool: True if assignment was successful, otherwise False
 """"""
 ']","Retrieve work items owned by ""ProjectManager"", prioritize them, generate a report with a summary, estimate the work hours for the task that will take the longest, and assign it to user ""LeadDeveloper"".","var_1 = search_object_by_name(query=""ProjectManager"")
var_2 = works_list(owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = generate_report(report_type=""work_items"", subject_id=var_1, include_summary=True)
var_5 = estimate_work_hours(work_id=var_3[0])
var_6 = assign_task_to_user(task_id=var_3[0], user_id=""LeadDeveloper"")"
"['
 
 def list_department_members(department_id):
 """"""
 Returns a list of user IDs for all members within a specified department
 
 Parameters:
  department_id (str): The ID of the department to list members for
 
 Returns:
  list: User IDs of all the members in the department
 """"""
 ', '
 
 def generate_report_for_sprint(sprint_id):
 """"""
 Generates a performance report for a specified sprint
 
 Parameters:
  sprint_id (str): The ID of the sprint for which to generate the report
 
 Returns:
  str: The ID of the generated report
 """"""
 ', '
 
 def create_new_ticket(title, description, reported_by):
 """"""
 Creates a new ticket in the system with the given details
 
 Parameters:
  title (str): The title of the new ticket
  description (str): A detailed description of the issue or request
  reported_by (str): The ID of the user reporting the ticket
 
 Returns:
  str: The ID of the newly created ticket
 """"""
 ']","Retrieve all tickets reported by the ""Support"" department members, summarize these tickets, prioritize them, and then create a new ticket to track the resolution process in the current sprint.","var_1 = list_department_members(department_id=""Support"")
var_2 = works_list(created_by=var_1, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = create_new_ticket(title=""Track Resolution Process"", description=""Summarize and prioritize tickets reported by Support department for resolution in the current sprint."", reported_by=who_am_i())"
"['
 
 def filter_projects_by_category(category_id, active_only=True):
 """"""
 Filters projects by their category and returns a list of project IDs
 
 Parameters:
  category_id (str): The ID of the category to filter projects by
  active_only (bool): Whether to return only active projects
 
 Returns:
  list: List of project IDs matching the category filter
 """"""
 ', 'def assign_task_to_user(task_id, user_id):
 """"""
 Assigns a specific task to a user
 
 Parameters:
  task_id (str): The ID of the task to be assigned
  user_id (str): The ID of the user to whom the task is assigned
 
 Returns:
  None
 """"""
 ', '
 
 def check_inventory_availability(part_id, minimum_quantity=1):
 """"""
 Checks if the inventory has the specified part in at least the minimum quantity
 
 Parameters:
  part_id (str): The ID of the part to check in inventory
  minimum_quantity (int): The minimum quantity to check for; defaults to 1
 
 Returns:
  bool: True if the minimum quantity is available; otherwise False
 """"""
 ']","Filter projects by category ""CAT-003"" that are active, summarize the project details, check inventory for part ""PART-102"", and assign the most critical task to user ""User789"".","var_1 = filter_projects_by_category(category_id=""CAT-003"", active_only=True)
var_2 = works_list(applies_to_part=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = check_inventory_availability(part_id=""PART-102"")
var_5 = prioritize_objects(objects=var_2)
var_6 = assign_task_to_user(task_id=var_5[0], user_id=""User789"")"
"['
 
 def log_user_activity(user_id, activity_description):
 """"""
 Logs a user\'s activity with a description
 
 Parameters:
  user_id (str): The ID of the user whose activity is being logged
  activity_description (str): A description of the activity
 
 Returns:
  bool: True if the logging was successful, False otherwise
 """"""
 ', '
 
 def log_system_event(event_type, description, user_id=None):
 """"""
 Logs an event in the system with an optional user ID associated with it
 
 Parameters:
  event_type (str): The type of event to log
  description (str): A brief description of the event
  user_id (str): The ID of the user involved in the event, if applicable
 
 Returns:
  str: The ID of the logged event
 """"""
 ', '
 
 def extract_keywords_from_text(text):
 """"""
 Given a text, extracts and returns the main keywords
 
 Parameters:
  text (str): The text from which keywords are to be extracted
 
 Returns:
  list: A list of extracted keywords
 """"""
 ', '
 
 def check_object_permission(user_id, object_id):
 """"""
 Checks if a user has permission to access a specific object
 
 Parameters:
  user_id (str): The ID of the user
  object_id (str): The ID of the object to check permission for
 
 Returns:
  bool: True if the user has permission, False otherwise
 """"""
 ']"," Find all tasks associated with ""RevOrgX"", prioritize them for the current sprint, log the user's activity of sprint planning, log the event of RevOrgX-related task retrieval, extract keywords from the task descriptions, and check if the user has permission to access these tasks.","var_1 = who_am_i()
var_2 = search_object_by_name(query=""RevOrgX"")
var_3 = works_list(ticket.rev_org=[var_2], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
var_7 = log_user_activity(user_id=var_1, activity_description=""Planning sprint with tasks associated with RevOrgX"")
var_8 = log_system_event(event_type=""RevOrgXRelatedTaskRetrieval"", description=""Retrieved tasks associated with RevOrgX"")
var_9 = extract_keywords_from_text(text=var_4)
var_10 = check_object_permission(user_id=var_1, object_id=var_3)"
"['
 
 def update_ticket_status(ticket_id, new_status):
 """"""
 Updates the status of a given ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket to be updated
  new_status (str): The new status to update the ticket with
 
 Returns:
  bool: True if the update was successful, otherwise False
 """"""
 ', '
 
 def get_object_history(object_id):
 """"""
 Retrieves the change history of a specified object
 
 Parameters:
  object_id (str): The ID of the object for which history is requested
 
 Returns:
  list: A list of changes made to the object
 """"""
 ', '
 
 def calculate_estimated_effort(work_id):
 """"""
 Calculates the estimated effort required to complete a work item.
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  float: Estimated effort in hours
 """"""
 ', '
 
 def calculate_budget_allocation(project_id, cost_limit):
 """"""
 Calculates and assigns the budget allocation for a project
 
 Parameters:
  project_id (str): The ID of the project for which the budget is calculated
  cost_limit (float): The cost limit for the project\'s budget
 
 Returns:
  float: The amount allocated to the project budget
 """"""
 ']","Summarize and prioritize all tickets from the ""Development"" stage, update their status to ""Open"", get the object history, and calculate the estimated effort for each ticket.","var_1 = works_list(stage.name=[""Development""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = update_ticket_status(ticket_id=var_3[0], new_status=""Open"")
var_5 = get_object_history(object_id=var_3[0])
var_6 = calculate_estimated_effort(work_id=var_3[0])"
"['
 
 def fetch_ticket_history(ticket_id, history_limit=10):
 """"""
 Fetches the history of changes to a given ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket for which the history is requested
  history_limit (int): Maximum number of history entries to retrieve. The default is \'10\'
 
 Returns:
  list: A list of history records for the ticket
 """"""
 ', '
 
 def generate_work_report(work_ids):
 """"""
 Generates a report for the given work items.
 
 Parameters:
  work_ids (list): A list of work item IDs for report generation
 
 Returns:
  str: The ID of the generated report
 """"""
 ', 'def calculate_due_dates(work_item_ids, urgency_level):
 """"""
 Calculates the due dates for given work items based on their urgency
 
 Parameters:
  work_item_ids (list): A list of work item IDs for which due dates are required
  urgency_level (str): The urgency level. Allowed values: \'high\', \'medium\', \'low\'
 
 Returns:
  list: Due dates for the specified work items
 """"""
 ', '
 
 def batch_update_user_roles(user_ids, new_role):
 """"""
 Updates the roles for a batch of users to a new role
 
 Parameters:
  user_ids (list): List of user IDs whose roles should be updated
  new_role (str): The new role to assign
 
 Returns:
  int: Number of users successfully updated
 """"""
 ']","Search for an object by name ""ProjectX"", use the returned ID to fetch the ticket history, summarize the associated work items, generate a report, and batch update the user roles of all users involved to ""Project Manager"".","var_1 = search_object_by_name(query=""ProjectX"")
var_2 = fetch_ticket_history(ticket_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = generate_work_report(work_ids=var_2)
var_5 = batch_update_user_roles(user_ids=var_2, new_role=""Project Manager"")"
"['
 
 def fetch_ticket_history(ticket_id, history_limit=10):
 """"""
 Fetches the history of changes to a given ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket for which the history is requested
  history_limit (int): Maximum number of history entries to retrieve. The default is \'10\'
 
 Returns:
  list: A list of history records for the ticket
 """"""
 ', '
 
 def generate_work_report(work_ids):
 """"""
 Generates a report for the given work items.
 
 Parameters:
  work_ids (list): A list of work item IDs for report generation
 
 Returns:
  str: The ID of the generated report
 """"""
 ', 'def calculate_due_dates(work_item_ids, urgency_level):
 """"""
 Calculates the due dates for given work items based on their urgency
 
 Parameters:
  work_item_ids (list): A list of work item IDs for which due dates are required
  urgency_level (str): The urgency level. Allowed values: \'high\', \'medium\', \'low\'
 
 Returns:
  list: Due dates for the specified work items
 """"""
 ', '
 
 def batch_update_user_roles(user_ids, new_role):
 """"""
 Updates the roles for a batch of users to a new role
 
 Parameters:
  user_ids (list): List of user IDs whose roles should be updated
  new_role (str): The new role to assign
 
 Returns:
  int: Number of users successfully updated
 """"""
 ']","Create actionable tasks from the text ""Update server configurations"", fetch the ticket history for the ticket ""TICKET-004"", generate a report for these tasks, prioritize them, and calculate their due dates with a high urgency level.","var_1 = create_actionable_tasks_from_text(text=""Update server configurations"")
var_2 = fetch_ticket_history(ticket_id=""TICKET-004"")
var_3 = generate_work_report(work_ids=var_1)
var_4 = prioritize_objects(objects=var_1)
var_5 = calculate_due_dates(work_item_ids=var_1, urgency_level=""high"")"
"['
 
 def fetch_ticket_history(ticket_id, history_limit=10):
 """"""
 Fetches the history of changes to a given ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket for which the history is requested
  history_limit (int): Maximum number of history entries to retrieve. The default is \'10\'
 
 Returns:
  list: A list of history records for the ticket
 """"""
 ', '
 
 def generate_work_report(work_ids):
 """"""
 Generates a report for the given work items.
 
 Parameters:
  work_ids (list): A list of work item IDs for report generation
 
 Returns:
  str: The ID of the generated report
 """"""
 ', 'def calculate_due_dates(work_item_ids, urgency_level):
 """"""
 Calculates the due dates for given work items based on their urgency
 
 Parameters:
  work_item_ids (list): A list of work item IDs for which due dates are required
  urgency_level (str): The urgency level. Allowed values: \'high\', \'medium\', \'low\'
 
 Returns:
  list: Due dates for the specified work items
 """"""
 ', '
 
 def batch_update_user_roles(user_ids, new_role):
 """"""
 Updates the roles for a batch of users to a new role
 
 Parameters:
  user_ids (list): List of user IDs whose roles should be updated
  new_role (str): The new role to assign
 
 Returns:
  int: Number of users successfully updated
 """"""
 ']","Retrieve work items owned by user ""QA_Lead"", fetch the ticket history for ticket ""TICKET-007"", generate a report for these items, prioritize them, and batch update the user roles of the QA team to ""Senior QA"".","var_1 = search_object_by_name(query=""QA_Lead"")
var_2 = works_list(owned_by=[var_1])
var_3 = fetch_ticket_history(ticket_id=""TICKET-007"")
var_4 = generate_work_report(work_ids=var_2)
var_5 = prioritize_objects(objects=var_2)
var_6 = batch_update_user_roles(user_ids=var_2, new_role=""Senior QA"")"
"['
 
 def fetch_ticket_history(ticket_id, history_limit=10):
 """"""
 Fetches the history of changes to a given ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket for which the history is requested
  history_limit (int): Maximum number of history entries to retrieve. The default is \'10\'
 
 Returns:
  list: A list of history records for the ticket
 """"""
 ', '
 
 def generate_work_report(work_ids):
 """"""
 Generates a report for the given work items.
 
 Parameters:
  work_ids (list): A list of work item IDs for report generation
 
 Returns:
  str: The ID of the generated report
 """"""
 ', 'def calculate_due_dates(work_item_ids, urgency_level):
 """"""
 Calculates the due dates for given work items based on their urgency
 
 Parameters:
  work_item_ids (list): A list of work item IDs for which due dates are required
  urgency_level (str): The urgency level. Allowed values: \'high\', \'medium\', \'low\'
 
 Returns:
  list: Due dates for the specified work items
 """"""
 ', '
 
 def batch_update_user_roles(user_ids, new_role):
 """"""
 Updates the roles for a batch of users to a new role
 
 Parameters:
  user_ids (list): List of user IDs whose roles should be updated
  new_role (str): The new role to assign
 
 Returns:
  int: Number of users successfully updated
 """"""
 ']","Get the ID of the current sprint, fetch the ticket history for ticket ""TICKET-008"", summarize the work items in this sprint, generate a report for the sprint work items, and calculate their due dates with a medium urgency level.","var_1 = get_sprint_id()
var_2 = fetch_ticket_history(ticket_id=""TICKET-008"")
var_3 = works_list(stage.name=[var_1])
var_4 = summarize_objects(objects=var_3)
var_5 = generate_work_report(work_ids=var_3)
var_6 = calculate_due_dates(work_item_ids=var_3, urgency_level=""medium"")"
"['
 
 def calculate_user_workload(user_id):
 """"""
 Calculates the workload of a user based on assigned tasks
 
 Parameters:
  user_id (str): The ID of the user whose workload is to be calculated
 
 Returns:
  float: The calculated workload value
 """"""
 ', '
 
 def estimate_completion_time(task_id):
 """"""
 Estimates the completion time for a given task
 
 Parameters:
  task_id (str): The ID of the task for which to estimate completion time
 
 Returns:
  float: The estimated number of hours to complete the task
 """"""
 ', '
 
 def generate_report_by_tag(tag_id, include_archived=False):
 """"""
 Generates a report for all work items associated with the given tag
 
 Parameters:
  tag_id (str): The ID of the tag used to filter work items
  include_archived (bool): Include archived work items if set to True
 
 Returns:
  list: Work items associated with the tag
 """"""
 ', '
 
 def convert_task_to_ticket(task_id):
 """"""
 Converts a task into a ticket in the system
 
 Parameters:
  task_id (str): The ID of the task to be converted
 
 Returns:
  str: The ID of the newly created ticket
 """"""
 ']","For user ""DesignerDan"", estimate their workload, convert all their tasks to tickets, prioritize these tickets, and generate a report by the tag ""Design"".","var_1 = calculate_user_workload(user_id=""DesignerDan"")
var_2 = works_list(owned_by=[""DesignerDan""], type=[""task""])
var_3 = convert_task_to_ticket(task_id=""task_id_from_var_2"") 
var_4 = works_list(owned_by=[""DesignerDan""], type=[""ticket""])
var_5 = prioritize_objects(objects=var_4)
var_6 = generate_report_by_tag(tag_id=""Design"", include_archived=False)"
"['
 
 def calculate_user_workload(user_id):
 """"""
 Calculates the workload of a user based on assigned tasks
 
 Parameters:
  user_id (str): The ID of the user whose workload is to be calculated
 
 Returns:
  float: The calculated workload value
 """"""
 ', '
 
 def estimate_completion_time(task_id):
 """"""
 Estimates the completion time for a given task
 
 Parameters:
  task_id (str): The ID of the task for which to estimate completion time
 
 Returns:
  float: The estimated number of hours to complete the task
 """"""
 ', '
 
 def generate_report_by_tag(tag_id, include_archived=False):
 """"""
 Generates a report for all work items associated with the given tag
 
 Parameters:
  tag_id (str): The ID of the tag used to filter work items
  include_archived (bool): Include archived work items if set to True
 
 Returns:
  list: Work items associated with the tag
 """"""
 ', '
 
 def convert_task_to_ticket(task_id):
 """"""
 Converts a task into a ticket in the system
 
 Parameters:
  task_id (str): The ID of the task to be converted
 
 Returns:
  str: The ID of the newly created ticket
 """"""
 ']","Calculate the workload for user ""SupportSam"", find all tickets they have created, estimate the completion time for these tickets, convert any open tasks to tickets, and summarize the tickets.","var_1 = calculate_user_workload(user_id=""SupportSam"")
var_2 = works_list(created_by=[""SupportSam""], type=[""ticket""])
var_3 = estimate_completion_time(task_id=""ticket_id_from_var_2"")
var_4 = works_list(created_by=[""SupportSam""], type=[""task""])
var_5 = convert_task_to_ticket(task_id=""task_id_from_var_4"") 
var_6 = summarize_objects(objects=var_2)"
"['
 
 def generate_progress_report(project_id, report_format=""summary""):
 """"""
 Generates a progress report for the specified project
 
 Parameters:
  project_id (str): The ID of the project for which the progress report is needed
  report_format (str): The format of the report; \'summary\' or \'detailed\'. The default is \'summary\'
 
 Returns:
  str: The generated progress report
 """"""
 ', '
 
 def list_completed_tasks_by_user(user_id, project_id=None):
 """"""
 Lists all tasks completed by a given user, optionally filtered by project
 
 Parameters:
  user_id (str): The ID of the user
  project_id (str, optional): The ID of the project to filter tasks
 
 Returns:
  list: List of task IDs completed by the user
 """"""
 ', '
 
 def remove_object_from_archive(object_id):
 """"""
 Removes an object from the system archive, making it active again
 
 Parameters:
  object_id (str): The ID of the object to be removed from the archive
 
 Returns:
  bool: True if the object was successfully removed, False otherwise
 """"""
 ', '
 
 def calculate_time_until_deadline(work_item_id):
 """"""
 Calculates the amount of time remaining until the deadline of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item
 
 Returns:
  float: The number of hours until the deadline
 """"""
 ']","For the current sprint, retrieve work items created by user ""User456"", summarize these items, generate a summary progress report for project ""PRJ-002"", list all tasks completed by ""User456"", reactivate the work item ""OBJ-789"" from the archive, and calculate the time until the deadline for ""TASK-012"".","var_1 = get_sprint_id()
var_2 = works_list(created_by=[""User456""], limit=50)
var_3 = summarize_objects(objects=var_2)
var_4 = generate_progress_report(project_id=""PRJ-002"", report_format=""summary"")
var_5 = list_completed_tasks_by_user(user_id=""User456"")
var_6 = remove_object_from_archive(object_id=""OBJ-789"")
var_7 = calculate_time_until_deadline(work_item_id=""TASK-012"")"
"['
 
 def generate_progress_report(project_id, report_format=""summary""):
 """"""
 Generates a progress report for the specified project
 
 Parameters:
  project_id (str): The ID of the project for which the progress report is needed
  report_format (str): The format of the report; \'summary\' or \'detailed\'. The default is \'summary\'
 
 Returns:
  str: The generated progress report
 """"""
 ', '
 
 def list_completed_tasks_by_user(user_id, project_id=None):
 """"""
 Lists all tasks completed by a given user, optionally filtered by project
 
 Parameters:
  user_id (str): The ID of the user
  project_id (str, optional): The ID of the project to filter tasks
 
 Returns:
  list: List of task IDs completed by the user
 """"""
 ', '
 
 def remove_object_from_archive(object_id):
 """"""
 Removes an object from the system archive, making it active again
 
 Parameters:
  object_id (str): The ID of the object to be removed from the archive
 
 Returns:
  bool: True if the object was successfully removed, False otherwise
 """"""
 ', '
 
 def calculate_time_until_deadline(work_item_id):
 """"""
 Calculates the amount of time remaining until the deadline of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item
 
 Returns:
  float: The number of hours until the deadline
 """"""
 ']","Summarize and prioritize all tickets with severity ""high"" from the customer support department, add them to the current sprint, generate a summary progress report for project ""PRJ-003"", list all tasks completed by user ""SupportLead"" in this project, unarchive the object ""OBJ-101"", and calculate the remaining time for ""TASK-345"".","var_1 = search_object_by_name(query=""customer support department"")
var_2 = works_list(ticket.severity=[""high""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
var_7 = generate_progress_report(project_id=""PRJ-003"", report_format=""summary"")
var_8 = list_completed_tasks_by_user(user_id=""SupportLead"", project_id=""PRJ-003"")
var_9 = remove_object_from_archive(object_id=""OBJ-101"")
var_10 = calculate_time_until_deadline(work_item_id=""TASK-345"")"
"['
 
 def generate_progress_report(project_id, report_format=""summary""):
 """"""
 Generates a progress report for the specified project
 
 Parameters:
  project_id (str): The ID of the project for which the progress report is needed
  report_format (str): The format of the report; \'summary\' or \'detailed\'. The default is \'summary\'
 
 Returns:
  str: The generated progress report
 """"""
 ', '
 
 def list_completed_tasks_by_user(user_id, project_id=None):
 """"""
 Lists all tasks completed by a given user, optionally filtered by project
 
 Parameters:
  user_id (str): The ID of the user
  project_id (str, optional): The ID of the project to filter tasks
 
 Returns:
  list: List of task IDs completed by the user
 """"""
 ', '
 
 def remove_object_from_archive(object_id):
 """"""
 Removes an object from the system archive, making it active again
 
 Parameters:
  object_id (str): The ID of the object to be removed from the archive
 
 Returns:
  bool: True if the object was successfully removed, False otherwise
 """"""
 ', '
 
 def calculate_time_until_deadline(work_item_id):
 """"""
 Calculates the amount of time remaining until the deadline of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item
 
 Returns:
  float: The number of hours until the deadline
 """"""
 ']","Find all issues with priority ""p2"" related to the ""Backend"" stage, prioritize them, generate a detailed progress report for project ""PRJ-004"", list all tasks completed by user ""BackendDev"" with or without a project filter, remove ""OBJ-234"" from the archive, and determine the hours left until the deadline for ""TASK-567"".","var_1 = search_object_by_name(query=""Backend"")
var_2 = works_list(stage.name=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = generate_progress_report(project_id=""PRJ-004"", report_format=""detailed"")
var_5 = list_completed_tasks_by_user(user_id=""BackendDev"")
var_6 = remove_object_from_archive(object_id=""OBJ-234"")
var_7 = calculate_time_until_deadline(work_item_id=""TASK-567"")"
"['
 
 def generate_progress_report(project_id, report_format=""summary""):
 """"""
 Generates a progress report for the specified project
 
 Parameters:
  project_id (str): The ID of the project for which the progress report is needed
  report_format (str): The format of the report; \'summary\' or \'detailed\'. The default is \'summary\'
 
 Returns:
  str: The generated progress report
 """"""
 ', '
 
 def list_completed_tasks_by_user(user_id, project_id=None):
 """"""
 Lists all tasks completed by a given user, optionally filtered by project
 
 Parameters:
  user_id (str): The ID of the user
  project_id (str, optional): The ID of the project to filter tasks
 
 Returns:
  list: List of task IDs completed by the user
 """"""
 ', '
 
 def remove_object_from_archive(object_id):
 """"""
 Removes an object from the system archive, making it active again
 
 Parameters:
  object_id (str): The ID of the object to be removed from the archive
 
 Returns:
  bool: True if the object was successfully removed, False otherwise
 """"""
 ', '
 
 def calculate_time_until_deadline(work_item_id):
 """"""
 Calculates the amount of time remaining until the deadline of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item
 
 Returns:
  float: The number of hours until the deadline
 """"""
 ']","Prioritize all tasks owned by user ""FrontEndLead"", add them to the current sprint, generate a summary progress report for project ""PRJ-006"", list all tasks completed by ""FrontEndLead"", remove ""OBJ-456"" from the archive, and calculate the time until the deadline for ""TASK-890"".","var_1 = who_am_i()
var_2 = works_list(owned_by=[""FrontEndLead""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = generate_progress_report(project_id=""PRJ-006"", report_format=""summary"")
var_7 = list_completed_tasks_by_user(user_id=""FrontEndLead"")
var_8 = remove_object_from_archive(object_id=""OBJ-456"")
var_9 = calculate_time_until_deadline(work_item_id=""TASK-890"")"
"['
 
 def generate_progress_report(project_id, report_format=""summary""):
 """"""
 Generates a progress report for the specified project
 
 Parameters:
  project_id (str): The ID of the project for which the progress report is needed
  report_format (str): The format of the report; \'summary\' or \'detailed\'. The default is \'summary\'
 
 Returns:
  str: The generated progress report
 """"""
 ', '
 
 def list_completed_tasks_by_user(user_id, project_id=None):
 """"""
 Lists all tasks completed by a given user, optionally filtered by project
 
 Parameters:
  user_id (str): The ID of the user
  project_id (str, optional): The ID of the project to filter tasks
 
 Returns:
  list: List of task IDs completed by the user
 """"""
 ', '
 
 def remove_object_from_archive(object_id):
 """"""
 Removes an object from the system archive, making it active again
 
 Parameters:
  object_id (str): The ID of the object to be removed from the archive
 
 Returns:
  bool: True if the object was successfully removed, False otherwise
 """"""
 ', '
 
 def calculate_time_until_deadline(work_item_id):
 """"""
 Calculates the amount of time remaining until the deadline of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item
 
 Returns:
  float: The number of hours until the deadline
 """"""
 ']","Summarize and prioritize all issues from the ""DevOps"" stage, add them to the current sprint, generate a summary progress report for project ""PRJ-008"", list all tasks completed by user ""DevOpsManager"", remove ""OBJ-678"" from the archive, and determine the hours left until the deadline for ""TASK-234"".","var_1 = search_object_by_name(query=""DevOps"")
var_2 = works_list(stage.name=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
var_7 = generate_progress_report(project_id=""PRJ-008"", report_format=""summary"")
var_8 = list_completed_tasks_by_user(user_id=""DevOpsManager"")
var_9 = remove_object_from_archive(object_id=""OBJ-678"")
var_10 = calculate_time_until_deadline(work_item_id=""TASK-234"")"
"['
 
 def generate_progress_report(project_id, report_format=""summary""):
 """"""
 Generates a progress report for the specified project
 
 Parameters:
  project_id (str): The ID of the project for which the progress report is needed
  report_format (str): The format of the report; \'summary\' or \'detailed\'. The default is \'summary\'
 
 Returns:
  str: The generated progress report
 """"""
 ', '
 
 def list_completed_tasks_by_user(user_id, project_id=None):
 """"""
 Lists all tasks completed by a given user, optionally filtered by project
 
 Parameters:
  user_id (str): The ID of the user
  project_id (str, optional): The ID of the project to filter tasks
 
 Returns:
  list: List of task IDs completed by the user
 """"""
 ', '
 
 def remove_object_from_archive(object_id):
 """"""
 Removes an object from the system archive, making it active again
 
 Parameters:
  object_id (str): The ID of the object to be removed from the archive
 
 Returns:
  bool: True if the object was successfully removed, False otherwise
 """"""
 ', '
 
 def calculate_time_until_deadline(work_item_id):
 """"""
 Calculates the amount of time remaining until the deadline of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item
 
 Returns:
  float: The number of hours until the deadline
 """"""
 ']","Retrieve work items with issue priority ""p0"" and created by ""CTO"", summarize these items, generate a summary progress report for project ""PRJ-010"", list all tasks completed by ""CTO"", unarchive the object ""OBJ-890"", and calculate the remaining time for ""TASK-456"".","var_1 = who_am_i()
var_2 = works_list(created_by=[""CTO""], issue.priority=[""p0""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = generate_progress_report(project_id=""PRJ-010"", report_format=""summary"")
var_5 = list_completed_tasks_by_user(user_id=""CTO"")
var_6 = remove_object_from_archive(object_id=""OBJ-890"")
var_7 = calculate_time_until_deadline(work_item_id=""TASK-456"")"
"['
 
 def validate_user_permissions(user_id, required_permissions):
 """"""
 Checks if the user has the specified permissions
 
 Parameters:
  user_id (str): The ID of the user whose permissions need to be checked
  required_permissions (list): A list of permissions to check against the user\'s permissions
 
 Returns:
  bool: True if the user has all the required permissions, False otherwise
 """"""
 ', '
 
 def track_time_on_task(task_id, hours_spent):
 """"""
 Tracks time spent on a task by logging the number of hours
 
 Parameters:
  task_id (str): The ID of the task on which time is spent
  hours_spent (float): The number of hours spent on the task
 
 Returns:
  bool: Status of the time tracking
 """"""
 ', '
 
 def archive_completed_work(work_ids):
 """"""
 Archives a list of completed work items
 
 Parameters:
  work_ids (list): A list of work item IDs that have been completed and need to be archived
 
 Returns:
  int: The number of work items successfully archived
 """"""
 ', '
 
 def calculate_estimated_completion(project_id):
 """"""
 Calculates the estimated completion date for a project based on current progress
 
 Parameters:
  project_id (str): The ID of the project to be analyzed
 
 Returns:
  str: Estimated date of completion
 """"""
 ']","Retrieve work items with a severity of ""high"" from the ""Development"" stage, summarize and prioritize them, validate if user ""DevManager"" has the required permissions to change their status, log the time ""DevManager"" spent on task ""TASK-789"", and archive the ones that are completed.","var_1 = works_list(stage.name=[""Development""], ticket.severity=[""high""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = validate_user_permissions(user_id=""DevManager"", required_permissions=[""change_status""])
var_5 = track_time_on_task(task_id=""TASK-789"", hours_spent=3.0)
var_6 = archive_completed_work(work_ids=var_1)"
"['
 
 def log_system_activity(activity_description, user_id=None):
 """"""
 Logs a system activity with an optional user ID
 
 Parameters:
  activity_description (str): A brief description of the activity being logged
  user_id (str, optional): The ID of the user associated with the activity; defaults to None
 
 Returns:
  bool: True if the activity was logged successfully; otherwise False
 """"""
 ', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):
 """"""
 Merges multiple notes into a single ticket note
 
 Parameters:
  ticket_id (str): The ID of the ticket where the merged note will be added
  note_ids (list): List of note IDs that will be merged into the ticket
  updated_by (str): The ID of the user performing the merge
 
 Returns:
  str: ID of the updated ticket note
 """"""
 ', '
 
 def estimate_ticket_resolution_time(ticket_id):
 """"""
 Estimates the resolution time for a given ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket to estimate time for
 
 Returns:
  float: Estimated time in hours to resolve the ticket
 """"""
 ', '
 
 def validate_data_consistency(data_id, schema_id):
 """"""
 Validates if data conforms to a specified schema for consistency
 
 Parameters:
  data_id (str): The ID of the data to be validated
  schema_id (str): The ID of the schema to validate the data against
 
 Returns:
  bool: True if data is consistent, False otherwise
 """"""
 ']","Retrieve work items owned by ""TeamLead42"", create actionable tasks from their descriptions, estimate the resolution time for each, merge related notes, validate the consistency, and log the system activity.","var_1 = works_list(owned_by=[""TeamLead42""])
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)
var_4 = estimate_ticket_resolution_time(ticket_id=var_1)
var_5 = merge_ticket_notes(ticket_id=var_1, note_ids=var_1, updated_by=""TeamLead42"")
var_6 = validate_data_consistency(data_id=var_1, schema_id=var_1)
var_7 = log_system_activity(activity_description=""Processed work items owned by TeamLead42"")"
"['
 
 def log_system_activity(activity_description, user_id=None):
 """"""
 Logs a system activity with an optional user ID
 
 Parameters:
  activity_description (str): A brief description of the activity being logged
  user_id (str, optional): The ID of the user associated with the activity; defaults to None
 
 Returns:
  bool: True if the activity was logged successfully; otherwise False
 """"""
 ', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):
 """"""
 Merges multiple notes into a single ticket note
 
 Parameters:
  ticket_id (str): The ID of the ticket where the merged note will be added
  note_ids (list): List of note IDs that will be merged into the ticket
  updated_by (str): The ID of the user performing the merge
 
 Returns:
  str: ID of the updated ticket note
 """"""
 ', '
 
 def estimate_ticket_resolution_time(ticket_id):
 """"""
 Estimates the resolution time for a given ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket to estimate time for
 
 Returns:
  float: Estimated time in hours to resolve the ticket
 """"""
 ', '
 
 def validate_data_consistency(data_id, schema_id):
 """"""
 Validates if data conforms to a specified schema for consistency
 
 Parameters:
  data_id (str): The ID of the data to be validated
  schema_id (str): The ID of the schema to validate the data against
 
 Returns:
  bool: True if data is consistent, False otherwise
 """"""
 ']","Prioritize issues with priority ""p2"" that are associated with ""RevOrgA"", estimate the resolution time, merge related notes, validate the consistency of the prioritization data, and log the activity.","var_1 = search_object_by_name(query=""RevOrgA"")
var_2 = works_list(issue.priority=[""p2""], issue.rev_orgs=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = estimate_ticket_resolution_time(ticket_id=var_3)
var_5 = merge_ticket_notes(ticket_id=var_3, note_ids=var_3, updated_by=""System"")
var_6 = validate_data_consistency(data_id=var_3, schema_id=var_3)
var_7 = log_system_activity(activity_description=""Prioritized p2 issues associated with RevOrgA"")"
"['def assign_issues_to_user(issue_ids, user_id):
 """"""
 Assigns a list of issues to the specified user
 
 Parameters:
  issue_ids (list): A list of issue IDs that need to be assigned
  user_id (str): The user ID to whom the issues will be assigned
 
 Returns:
  None
 """"""
 ', '
 
 def fetch_user_created_work(user_id, type=None):
 """"""
 Retrieves work items created by a specific user
 
 Parameters:
  user_id (str): The ID of the user whose work items are to be retrieved
  type (list): Filters for work of the provided types, e.g., [\'issue\', \'ticket\']
 
 Returns:
  list: Work items created by the user
 """"""
 ', '
 
 def batch_update_task_status(task_ids, new_status):
 """"""
 Updates the status of multiple tasks in a batch operation
 
 Parameters:
  task_ids (list): A list of task IDs whose status needs updating
  new_status (str): The new status to apply to the tasks
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ', '
 
 def archive_completed_tasks(project_id, completed_since):
 """"""
 Archives tasks that are completed within the given project since the specified time
 
 Parameters:
  project_id (str): The ID of the project containing the tasks
  completed_since (str): Archive tasks completed after this timestamp
 
 Returns:
  int: Number of tasks archived
 """"""
 ', '
 
 def retrieve_user_workload(user_id):
 """"""
 Retrieves the current workload for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose workload is to be retrieved
 
 Returns:
  list: A list containing workload details
 """"""
 ']","Assign all P2 priority issues to ""LeadDev"", fetch work items created by ""LeadDev"", summarize and prioritize these issues, update their status to ""In Review"", archive completed tasks in ""ProjectC"" since ""2023-03-10"", and retrieve ""LeadDev""'s workload.","var_1 = search_object_by_name(query=""LeadDev"")
var_2 = works_list(issue.priority=[""p2""], type=[""issue""])
var_3 = assign_issues_to_user(issue_ids=var_2, user_id=var_1)
var_4 = fetch_user_created_work(user_id=var_1)
var_5 = summarize_objects(objects=var_4)
var_6 = prioritize_objects(objects=var_4)
var_7 = batch_update_task_status(task_ids=var_4, new_status=""In Review"")
var_8 = archive_completed_tasks(project_id=""ProjectC"", completed_since=""2023-03-10"")
var_9 = retrieve_user_workload(user_id=var_1)"
"['def assign_issues_to_user(issue_ids, user_id):
 """"""
 Assigns a list of issues to the specified user
 
 Parameters:
  issue_ids (list): A list of issue IDs that need to be assigned
  user_id (str): The user ID to whom the issues will be assigned
 
 Returns:
  None
 """"""
 ', '
 
 def fetch_user_created_work(user_id, type=None):
 """"""
 Retrieves work items created by a specific user
 
 Parameters:
  user_id (str): The ID of the user whose work items are to be retrieved
  type (list): Filters for work of the provided types, e.g., [\'issue\', \'ticket\']
 
 Returns:
  list: Work items created by the user
 """"""
 ', '
 
 def batch_update_task_status(task_ids, new_status):
 """"""
 Updates the status of multiple tasks in a batch operation
 
 Parameters:
  task_ids (list): A list of task IDs whose status needs updating
  new_status (str): The new status to apply to the tasks
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ', '
 
 def archive_completed_tasks(project_id, completed_since):
 """"""
 Archives tasks that are completed within the given project since the specified time
 
 Parameters:
  project_id (str): The ID of the project containing the tasks
  completed_since (str): Archive tasks completed after this timestamp
 
 Returns:
  int: Number of tasks archived
 """"""
 ', '
 
 def retrieve_user_workload(user_id):
 """"""
 Retrieves the current workload for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose workload is to be retrieved
 
 Returns:
  list: A list containing workload details
 """"""
 ']","Search for work items similar to ""TASK-789"", assign them to ""OperatorOli"", summarize the work items for a team meeting, batch update their status to ""On Hold"", archive completed tasks in ""ProjectF"" since ""2023-03-05"", and assess ""OperatorOli""'s workload for the week.","var_1 = get_similar_work_items(work_id=""TASK-789"")
var_2 = search_object_by_name(query=""OperatorOli"")
var_3 = assign_issues_to_user(issue_ids=var_1, user_id=var_2)
var_4 = summarize_objects(objects=var_1)
var_5 = batch_update_task_status(task_ids=var_1, new_status=""On Hold"")
var_6 = archive_completed_tasks(project_id=""ProjectF"", completed_since=""2023-03-05"")
var_7 = retrieve_user_workload(user_id=var_2)"
"['def assign_issues_to_user(issue_ids, user_id):
 """"""
 Assigns a list of issues to the specified user
 
 Parameters:
  issue_ids (list): A list of issue IDs that need to be assigned
  user_id (str): The user ID to whom the issues will be assigned
 
 Returns:
  None
 """"""
 ', '
 
 def fetch_user_created_work(user_id, type=None):
 """"""
 Retrieves work items created by a specific user
 
 Parameters:
  user_id (str): The ID of the user whose work items are to be retrieved
  type (list): Filters for work of the provided types, e.g., [\'issue\', \'ticket\']
 
 Returns:
  list: Work items created by the user
 """"""
 ', '
 
 def batch_update_task_status(task_ids, new_status):
 """"""
 Updates the status of multiple tasks in a batch operation
 
 Parameters:
  task_ids (list): A list of task IDs whose status needs updating
  new_status (str): The new status to apply to the tasks
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ', '
 
 def archive_completed_tasks(project_id, completed_since):
 """"""
 Archives tasks that are completed within the given project since the specified time
 
 Parameters:
  project_id (str): The ID of the project containing the tasks
  completed_since (str): Archive tasks completed after this timestamp
 
 Returns:
  int: Number of tasks archived
 """"""
 ', '
 
 def retrieve_user_workload(user_id):
 """"""
 Retrieves the current workload for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose workload is to be retrieved
 
 Returns:
  list: A list containing workload details
 """"""
 ']","Assign all tickets needing a response to ""ResponderRita"", fetch work items created by ""ResponderRita"", prioritize the tickets, update their status to ""Waiting on Customer"", archive completed tasks in ""ProjectG"" since ""2023-01-25"", and retrieve ""ResponderRita""'s workload to manage her queue.","var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = search_object_by_name(query=""ResponderRita"")
var_3 = assign_issues_to_user(issue_ids=var_1, user_id=var_2)
var_4 = fetch_user_created_work(user_id=var_2)
var_5 = prioritize_objects(objects=var_4)
var_6 = batch_update_task_status(task_ids=var_4, new_status=""Waiting on Customer"")
var_7 = archive_completed_tasks(project_id=""ProjectG"", completed_since=""2023-01-25"")
var_8 = retrieve_user_workload(user_id=var_2)"
"['
 
 def calculate_expense_totals(expense_ids):
 """"""
 Calculates the total amount from a list of expense IDs
 
 Parameters:
  expense_ids (list): List of expense IDs to calculate the total amount
 
 Returns:
  float: The total amount of the expenses
 """"""
 ', '
 
 def get_user_permissions(user_id):
 """"""
 Returns a list of permissions for a specified user ID
 
 Parameters:
  user_id (str): The ID of the user whose permissions you want to retrieve
 
 Returns:
  list: User permissions
 """"""
 ', '
 
 def calculate_cost_of_tasks(task_ids):
 """"""
 Calculates the total cost for a list of task IDs
 
 Parameters:
  task_ids (list): A list of task IDs to calculate cost for
 
 Returns:
  float: Total cost of the tasks
 """"""
 ', '
 
 def update_work_item_due_date(work_item_id, due_date):
 """"""
 Updates the due date for the specified work item
 
 Parameters:
  work_item_id (str): The ID of the work item to be updated
  due_date (str): The new due date for the work item
 
 Returns:
  None: Indicates that the operation was executed without returning any value
 """"""
 ', '
 
 def retrieve_document_by_keyword(keyword):
 """"""
 Retrieves a document ID containing the specified keyword
 
 Parameters:
  keyword (str): The keyword to search for in the documents
 
 Returns:
  str: ID of the document containing the keyword
 """"""']","Prioritize all tasks owned by user ""ManagerMike"", calculate their total cost, retrieve ""ManagerMike's"" permissions, summarize the tasks, and update their due dates before adding them to the current sprint.","var_1 = works_list(owned_by=[""ManagerMike""], type=[""task""])
var_2 = calculate_cost_of_tasks(task_ids=var_1)
var_3 = get_user_permissions(user_id=""ManagerMike"")
var_4 = summarize_objects(objects=var_1)
var_5 = prioritize_objects(objects=var_1)
var_6 = update_work_item_due_date(work_item_id=var_1[0], due_date=""2023-12-31"")
var_7 = get_sprint_id()
var_8 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_7)"
"['
 
 def calculate_expense_totals(expense_ids):
 """"""
 Calculates the total amount from a list of expense IDs
 
 Parameters:
  expense_ids (list): List of expense IDs to calculate the total amount
 
 Returns:
  float: The total amount of the expenses
 """"""
 ', '
 
 def get_user_permissions(user_id):
 """"""
 Returns a list of permissions for a specified user ID
 
 Parameters:
  user_id (str): The ID of the user whose permissions you want to retrieve
 
 Returns:
  list: User permissions
 """"""
 ', '
 
 def calculate_cost_of_tasks(task_ids):
 """"""
 Calculates the total cost for a list of task IDs
 
 Parameters:
  task_ids (list): A list of task IDs to calculate cost for
 
 Returns:
  float: Total cost of the tasks
 """"""
 ', '
 
 def update_work_item_due_date(work_item_id, due_date):
 """"""
 Updates the due date for the specified work item
 
 Parameters:
  work_item_id (str): The ID of the work item to be updated
  due_date (str): The new due date for the work item
 
 Returns:
  None: Indicates that the operation was executed without returning any value
 """"""
 ', '
 
 def retrieve_document_by_keyword(keyword):
 """"""
 Retrieves a document ID containing the specified keyword
 
 Parameters:
  keyword (str): The keyword to search for in the documents
 
 Returns:
  str: ID of the document containing the keyword
 """"""']","Search for work items by the name ""BackendUpdate"", calculate their total expense, get the permissions of the user who created them, summarize the work items, prioritize them, and update their due dates.","var_1 = search_object_by_name(query=""BackendUpdate"")
var_2 = works_list(created_by=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = calculate_expense_totals(expense_ids=var_2)
var_4 = get_user_permissions(user_id=var_2[0][""created_by""])
var_5 = summarize_objects(objects=var_2)
var_6 = prioritize_objects(objects=var_2)
var_7 = update_work_item_due_date(work_item_id=var_2[0], due_date=""2023-12-31"")"
"['def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is \'active\'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 ']","Search for an object by name ""CustomerXYZ"", use the ID to extract contact information, and get similar work items. Filter these work items by status ""completed"", prioritize them, and merge any duplicates before adding them to the current sprint. Retrieve the history of changes for the primary work item.","var_1 = search_object_by_name(query=""CustomerXYZ"")
var_2 = extract_contact_info(text_id=var_1, entity_type=""company"")
var_3 = get_similar_work_items(work_id=var_1)
var_4 = works_list(type=[""issue"", ""ticket"", ""task""], stage.name=[""completed""])
var_5 = prioritize_objects(objects=var_4)
var_6 = merge_duplicate_work_items(primary_work_id=var_5[0], duplicate_work_ids=var_5[1:])
var_7 = get_sprint_id()
var_8 = add_work_items_to_sprint(work_ids=[var_5[0]], sprint_id=var_7)
var_9 = get_work_item_history(work_id=var_5[0])"
"['def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is \'active\'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 ']","Use the ""who_am_i"" function to get the current user ID, list their permissions, and retrieve work items created by this user. Filter these work items by status ""on-hold"", extract contact information from related customer tickets, and get the work item history. Summarize the work items and prioritize them for the next team meeting.","var_1 = who_am_i()
var_2 = list_user_permissions(user_id=var_1)
var_3 = works_list(created_by=[var_1])
var_4 = works_list(type=[""issue"", ""ticket"", ""task""], stage.name=[""on-hold""])
var_5 = extract_contact_info(text_id=var_4, entity_type=""individual"")
var_6 = get_work_item_history(work_id=var_4)
var_7 = summarize_objects(objects=var_4)
var_8 = prioritize_objects(objects=var_4)"
"['def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is \'active\'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 ']","Create actionable tasks from the text of the latest team meeting, filter these tasks by status ""in-progress"", and extract contact information for any mentioned individuals. Prioritize the tasks, retrieve their history, and merge any duplicates. Add the primary task to the current sprint and list the permissions of the user who created the tasks.","var_1 = create_actionable_tasks_from_text(text=""latest team meeting"")
var_2 = works_list(type=[""task""], stage.name=[""in-progress""])
var_3 = extract_contact_info(text_id=var_2, entity_type=""individual"")
var_4 = prioritize_objects(objects=var_2)
var_5 = get_work_item_history(work_id=var_2)
var_6 = merge_duplicate_work_items(primary_work_id=var_4[0], duplicate_work_ids=var_4[1:])
var_7 = get_sprint_id()
var_8 = add_work_items_to_sprint(work_ids=[var_4[0]], sprint_id=var_7)
var_9 = list_user_permissions(user_id=var_1)"
"['def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is \'active\'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 ']","Retrieve work items owned by user ""LeadEngineer"", filter them by status ""review"", and extract contact information from the associated documentation. Get the work item history, summarize the items, and prioritize them. Merge any duplicates and add the primary work item to the current sprint. List the permissions of ""LeadEngineer"".","var_1 = search_object_by_name(query=""LeadEngineer"")
var_2 = works_list(owned_by=[var_1], stage.name=[""review""])
var_3 = extract_contact_info(text_id=var_2, entity_type=""individual"")
var_4 = get_work_item_history(work_id=var_2)
var_5 = summarize_objects(objects=var_2)
var_6 = prioritize_objects(objects=var_2)
var_7 = merge_duplicate_work_items(primary_work_id=var_6[0], duplicate_work_ids=var_6[1:])
var_8 = get_sprint_id()
var_9 = add_work_items_to_sprint(work_ids=[var_6[0]], sprint_id=var_8)
var_10 = list_user_permissions(user_id=var_1)"
"['def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is \'active\'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 ']","Get the ID of the current sprint and search for an object by name ""CriticalComponent"". Extract contact information from the associated vendor, filter related projects by status ""delayed"", and get the work item history. Summarize the work items, prioritize them, and merge any duplicates before adding them to the sprint.","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""CriticalComponent"")
var_3 = extract_contact_info(text_id=var_2, entity_type=""company"")
var_4 = filter_projects_by_status(project_ids=var_2, status=""delayed"")
var_5 = get_work_item_history(work_id=var_4)
var_6 = summarize_objects(objects=var_4)
var_7 = prioritize_objects(objects=var_4)
var_8 = merge_duplicate_work_items(primary_work_id=var_7[0], duplicate_work_ids=var_7[1:])
var_9 = add_work_items_to_sprint(work_ids=[var_7[0]], sprint_id=var_1)"
"['def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is \'active\'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 ']","Search for an object by name ""QuarterlyReport"", extract contact information from the report's references, and filter related work items by status ""archived"". Retrieve the history of changes for these work items, summarize them, and prioritize them. Merge any duplicates and add the primary work item to the current sprint. List the permissions of the user ""Analyst"".","var_1 = search_object_by_name(query=""QuarterlyReport"")
var_2 = extract_contact_info(text_id=var_1, entity_type=""company"")
var_3 = works_list(type=[""issue"", ""ticket"", ""task""], stage.name=[""archived""])
var_4 = get_work_item_history(work_id=var_3)
var_5 = summarize_objects(objects=var_3)
var_6 = prioritize_objects(objects=var_3)
var_7 = merge_duplicate_work_items(primary_work_id=var_6[0], duplicate_work_ids=var_6[1:])
var_8 = get_sprint_id()
var_9 = add_work_items_to_sprint(work_ids=[var_6[0]], sprint_id=var_8)
var_10 = list_user_permissions(user_id=""Analyst"")"
"['def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is \'active\'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 ']","Identify the current user, list their permissions, and retrieve work items they are monitoring. Filter these work items by status ""active"", extract contact information from associated client profiles, and get the work item history. Summarize the work items, prioritize them, and merge any duplicates before adding them to the current sprint.","var_1 = who_am_i()
var_2 = list_user_permissions(user_id=var_1)
var_3 = works_list(owned_by=[var_1], stage.name=[""active""])
var_4 = extract_contact_info(text_id=var_3, entity_type=""individual"")
var_5 = get_work_item_history(work_id=var_3)
var_6 = summarize_objects(objects=var_3)
var_7 = prioritize_objects(objects=var_3)
var_8 = merge_duplicate_work_items(primary_work_id=var_7[0], duplicate_work_ids=var_7[1:])
var_9 = get_sprint_id()
var_10 = add_work_items_to_sprint(work_ids=[var_7[0]], sprint_id=var_9)"
"['def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is \'active\'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 ']","Create actionable tasks from the feedback text of ""ProductSurvey001"", filter these tasks by status ""new"", and extract contact information from survey respondents. Prioritize the tasks, retrieve their history, and list the permissions of the user ""FeedbackManager"". Merge any duplicates and add the primary task to the current sprint.","var_1 = create_actionable_tasks_from_text(text=""ProductSurvey001"")
var_2 = works_list(type=[""task""], stage.name=[""new""])
var_3 = extract_contact_info(text_id=var_2, entity_type=""individual"")
var_4 = prioritize_objects(objects=var_2)
var_5 = get_work_item_history(work_id=var_2)
var_6 = list_user_permissions(user_id=""FeedbackManager"")
var_7 = merge_duplicate_work_items(primary_work_id=var_4[0], duplicate_work_ids=var_4[1:])
var_8 = get_sprint_id()
var_9 = add_work_items_to_sprint(work_ids=[var_4[0]], sprint_id=var_8)"
"['
 
 def track_project_completion(project_id):
 """"""
 Tracks the completion percentage of a project based on completed tasks
 
 Parameters:
  project_id (str): The ID of the project to track
 
 Returns:
  float: Percentage of the project completed
 """"""
 ', '
 
 def find_work_items_by_tag(type, tag):
 """"""
 Finds work items of a certain type with a given tag
 
 Parameters:
  type (str): The type of the work items to filter by
  tag (str): The tag to filter the work items
 
 Returns:
  list: List of work items with the given tag
 """"""
 ', 'def filter_users_by_department(department_id=None, active_only=False):
 """"""
 Filters a list of users that belong to the specified department
 
 Parameters:
  department_id (str): The ID of the department to filter users
  active_only (bool): Filters for only active users if set to True
 
 Returns:
  list: Users in the specified department
 """"""
 ', '
 
 def find_user_by_email(email):
 """"""
 Finds a user in the system by their email address
 
 Parameters:
  email (str): The email address of the user to find
 
 Returns:
  str: ID of the user
 """"""
 ', '
 
 def list_recent_projects(user_id, days_back=30):
 """"""
 Lists all projects a user has worked on in the past number of days
 
 Parameters:
  user_id (str): The ID of the user
  days_back (int): The number of past days to look for projects. The default is \'30\'
 
 Returns:
  list: Project IDs that the user has worked on
 """"""
 ']","Calculate the completion percentage of project ""PRJ-009"", find all tickets with the tag ""escalated"", filter for users in the ""Finance"" department, locate the user by email ""finance_director@company.com"", and add the work items they own to the current sprint for expedited handling.","var_1 = track_project_completion(project_id=""PRJ-009"")
var_2 = find_work_items_by_tag(type=""ticket"", tag=""escalated"")
var_3 = filter_users_by_department(department_id=""Finance"")
var_4 = find_user_by_email(email=""finance_director@company.com"")
var_5 = works_list(owned_by=[var_4])
var_6 = get_sprint_id()
var_7 = add_work_items_to_sprint(work_ids=var_5, sprint_id=var_6)"
"['
 
 def track_project_completion(project_id):
 """"""
 Tracks the completion percentage of a project based on completed tasks
 
 Parameters:
  project_id (str): The ID of the project to track
 
 Returns:
  float: Percentage of the project completed
 """"""
 ', '
 
 def find_work_items_by_tag(type, tag):
 """"""
 Finds work items of a certain type with a given tag
 
 Parameters:
  type (str): The type of the work items to filter by
  tag (str): The tag to filter the work items
 
 Returns:
  list: List of work items with the given tag
 """"""
 ', 'def filter_users_by_department(department_id=None, active_only=False):
 """"""
 Filters a list of users that belong to the specified department
 
 Parameters:
  department_id (str): The ID of the department to filter users
  active_only (bool): Filters for only active users if set to True
 
 Returns:
  list: Users in the specified department
 """"""
 ', '
 
 def find_user_by_email(email):
 """"""
 Finds a user in the system by their email address
 
 Parameters:
  email (str): The email address of the user to find
 
 Returns:
  str: ID of the user
 """"""
 ', '
 
 def list_recent_projects(user_id, days_back=30):
 """"""
 Lists all projects a user has worked on in the past number of days
 
 Parameters:
  user_id (str): The ID of the user
  days_back (int): The number of past days to look for projects. The default is \'30\'
 
 Returns:
  list: Project IDs that the user has worked on
 """"""
 ']","Track the project completion for ""PRJ-010"", search for issues with the tag ""bug"", filter for active users in the ""IT"" department, find the user with the email ""it_support@company.com"", and prioritize the work items they have recently worked on for immediate action.","var_1 = track_project_completion(project_id=""PRJ-010"")
var_2 = find_work_items_by_tag(type=""issue"", tag=""bug"")
var_3 = filter_users_by_department(department_id=""IT"", active_only=True)
var_4 = find_user_by_email(email=""it_support@company.com"")
var_5 = list_recent_projects(user_id=var_4)
var_6 = prioritize_objects(objects=var_5)"
"['
 
 def validate_work_item_status(work_item_id, status_options):
 """"""
 Checks if the given work item has a status that is among the provided options
 
 Parameters:
  work_item_id (str): The ID of the work item to check
  status_options (list): A list of valid status options
 
 Returns:
  bool: True if status is valid, False otherwise
 """"""
 ', '
 
 def list_all_blocked_tickets():
 """"""
 Lists all tickets that are currently blocked
 
 Returns:
  list: Ticket IDs that are currently blocked
 """"""', '
 
 def get_user_contact_info(user_id):
 """"""
 Retrieves contact information for a user
 
 Parameters:
  user_id (str): The ID of the user whose contact information is requested
 
 Returns:
  str: The contact information of the user
 """"""
 ', '
 
 def calculate_progress(project_id):
 """"""
 Calculates the overall progress of a given project as a percentage
 
 Parameters:
  project_id (str): The ID of the project for which progress is being calculated
 
 Returns:
  float: The progress percentage of the project
 """"""
 ', '
 
 def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
 """"""
 Filters a list of ticket IDs based on a date range
 
 Parameters:
  ticket_ids (list): A list of ticket IDs to filter
  start_date (str): The start date for the range
  end_date (str, optional): The end date for the range, defaults to None
 
 Returns:
  list: Filtered list of ticket IDs
 """"""
 ']","Find the current sprint ID, then get all work items created by user ""DevLead"" that are in a status of ""In Progress"" or ""Under Review"", summarize these work items, and add them to the current sprint.","var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = search_object_by_name(query=""DevLead"")
var_4 = works_list(created_by=[var_3], stage.name=[""In Progress"", ""Under Review""])
var_5 = summarize_objects(objects=var_4)
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_2)"
"['
 
 def validate_work_item_status(work_item_id, status_options):
 """"""
 Checks if the given work item has a status that is among the provided options
 
 Parameters:
  work_item_id (str): The ID of the work item to check
  status_options (list): A list of valid status options
 
 Returns:
  bool: True if status is valid, False otherwise
 """"""
 ', '
 
 def list_all_blocked_tickets():
 """"""
 Lists all tickets that are currently blocked
 
 Returns:
  list: Ticket IDs that are currently blocked
 """"""', '
 
 def get_user_contact_info(user_id):
 """"""
 Retrieves contact information for a user
 
 Parameters:
  user_id (str): The ID of the user whose contact information is requested
 
 Returns:
  str: The contact information of the user
 """"""
 ', '
 
 def calculate_progress(project_id):
 """"""
 Calculates the overall progress of a given project as a percentage
 
 Parameters:
  project_id (str): The ID of the project for which progress is being calculated
 
 Returns:
  float: The progress percentage of the project
 """"""
 ', '
 
 def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
 """"""
 Filters a list of ticket IDs based on a date range
 
 Parameters:
  ticket_ids (list): A list of ticket IDs to filter
  start_date (str): The start date for the range
  end_date (str, optional): The end date for the range, defaults to None
 
 Returns:
  list: Filtered list of ticket IDs
 """"""
 ']","Validate the status of work item ""TASK-456"" to ensure it's either ""Open"" or ""Blocked"", list all blocked tickets, and then prioritize and summarize any common items between the two lists.","var_1 = validate_work_item_status(work_item_id=""TASK-456"", status_options=[""Open"", ""Blocked""])
var_2 = list_all_blocked_tickets()
var_3 = filter_tickets_by_date(ticket_ids=var_2, start_date=""start_of_current_sprint"", end_date=""end_of_current_sprint"")
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)"
"['
 
 def find_team_members(team_id):
 """"""
 Returns a list of user IDs that are members of the specified team
 
 Parameters:
  team_id (str): The ID of the team
 
 Returns:
  list: User IDs of the team members
 """"""
 ', '
 
 def get_team_member_list(team_id):
 """"""
 Retrieves a list of team members for the specified team
 
 Parameters:
  team_id (str): The ID of the team
 
 Returns:
  list: List of team member IDs
 """"""
 ', '
 
 def remove_work_item_from_sprint(work_id, sprint_id):
 """"""
 Removes the specified work item from a sprint
 
 Parameters:
  work_id (str): The ID of the work item to be removed
  sprint_id (str): The ID of the sprint from which to remove the work item
 
 Returns:
  bool: True if the removal was successful, False otherwise
 """"""
 ', '
 
 def reassign_work_item_owner(work_id, new_owner_id):
 """"""
 Reassigns the owner of a work item to a new user
 
 Parameters:
  work_id (str): The ID of the work item to be reassigned
  new_owner_id (str): The user ID of the new owner
 
 Returns:
  bool: True if reassignment is successful, False otherwise
 """"""
 ', '
 
 def list_work_attachments(work_id):
 """"""
 Lists all attachments associated with a work item.
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: Attachment file IDs
 """"""
 ']","Acquire the list of team ""TeamTheta"" members, search for all issues with priority ""p2"" created by these members, summarize the issues, prioritize them, and reassign the owner of one of the issues to another team member.","var_1 = get_team_member_list(team_id=""TeamTheta"")
var_2 = works_list(type=[""issue""], created_by=var_1, issue.priority=[""p2""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = reassign_work_item_owner(work_id=var_4[0], new_owner_id=var_1[1])"
"['
 
 def find_team_members(team_id):
 """"""
 Returns a list of user IDs that are members of the specified team
 
 Parameters:
  team_id (str): The ID of the team
 
 Returns:
  list: User IDs of the team members
 """"""
 ', '
 
 def get_team_member_list(team_id):
 """"""
 Retrieves a list of team members for the specified team
 
 Parameters:
  team_id (str): The ID of the team
 
 Returns:
  list: List of team member IDs
 """"""
 ', '
 
 def remove_work_item_from_sprint(work_id, sprint_id):
 """"""
 Removes the specified work item from a sprint
 
 Parameters:
  work_id (str): The ID of the work item to be removed
  sprint_id (str): The ID of the sprint from which to remove the work item
 
 Returns:
  bool: True if the removal was successful, False otherwise
 """"""
 ', '
 
 def reassign_work_item_owner(work_id, new_owner_id):
 """"""
 Reassigns the owner of a work item to a new user
 
 Parameters:
  work_id (str): The ID of the work item to be reassigned
  new_owner_id (str): The user ID of the new owner
 
 Returns:
  bool: True if reassignment is successful, False otherwise
 """"""
 ', '
 
 def list_work_attachments(work_id):
 """"""
 Lists all attachments associated with a work item.
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: Attachment file IDs
 """"""
 ']"," For team ""TeamKappa"", get the team member IDs, find all tickets with severity ""medium"" associated with these members, summarize the tickets, prioritize them, and add one of the prioritized tickets to the current sprint.","var_1 = find_team_members(team_id=""TeamKappa"")
var_2 = works_list(type=[""ticket""], owned_by=var_1, ticket.severity=[""medium""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=[var_4[0]], sprint_id=var_5)"
"['def assign_issues_to_user(issue_ids, user_id):
 """"""
 Assigns a list of issues to the specified user
 
 Parameters:
  issue_ids (list): A list of issue IDs that need to be assigned
  user_id (str): The user ID to whom the issues will be assigned
 
 Returns:
  None
 """"""
 ', '
 
 def fetch_user_created_work(user_id, type=None):
 """"""
 Retrieves work items created by a specific user
 
 Parameters:
  user_id (str): The ID of the user whose work items are to be retrieved
  type (list): Filters for work of the provided types, e.g., [\'issue\', \'ticket\']
 
 Returns:
  list: Work items created by the user
 """"""
 ', '
 
 def batch_update_task_status(task_ids, new_status):
 """"""
 Updates the status of multiple tasks in a batch operation
 
 Parameters:
  task_ids (list): A list of task IDs whose status needs updating
  new_status (str): The new status to apply to the tasks
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ', '
 
 def archive_completed_tasks(project_id, completed_since):
 """"""
 Archives tasks that are completed within the given project since the specified time
 
 Parameters:
  project_id (str): The ID of the project containing the tasks
  completed_since (str): Archive tasks completed after this timestamp
 
 Returns:
  int: Number of tasks archived
 """"""
 ', '
 
 def retrieve_user_workload(user_id):
 """"""
 Retrieves the current workload for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose workload is to be retrieved
 
 Returns:
  list: A list containing workload details
 """"""
 ']","Locate all tickets from the ""Email"" source channel, assign them to ""AgentAlex"", summarize the tickets, batch update their status to ""Closed"", archive completed tasks in ""ProjectD"" since ""2023-01-15"", and retrieve ""AgentAlex""'s workload for planning.","var_1 = works_list(ticket.source_channel=[""Email""], type=[""ticket""])
var_2 = search_object_by_name(query=""AgentAlex"")
var_3 = assign_issues_to_user(issue_ids=var_1, user_id=var_2)
var_4 = summarize_objects(objects=var_1)
var_5 = batch_update_task_status(task_ids=var_1, new_status=""Closed"")
var_6 = archive_completed_tasks(project_id=""ProjectD"", completed_since=""2023-01-15"")
var_7 = retrieve_user_workload(user_id=var_2)"
"['def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is \'active\'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 ']","Retrieve similar work items to ""TASK-987"", filter these by status ""pending approval"", and extract contact information from the client's communication. Prioritize the work items, get their history, and list the permissions of the user assigned to these tasks. Merge any duplicates and add the primary work item to the current sprint.","var_1 = get_similar_work_items(work_id=""TASK-987"")
var_2 = works_list(type=[""task""], stage.name=[""pending approval""])
var_3 = extract_contact_info(text_id=var_2, entity_type=""individual"")
var_4 = prioritize_objects(objects=var_2)
var_5 = get_work_item_history(work_id=var_2)
var_6 = list_user_permissions(user_id=var_2)
var_7 = merge_duplicate_work_items(primary_work_id=var_4[0], duplicate_work_ids=var_4[1:])
var_8 = get_sprint_id()
var_9 = add_work_items_to_sprint(work_ids=[var_4[0]], sprint_id=var_8)"
"['\n\ndef archive_completed_tasks(project_id, completed_since):\n""""""\nArchives tasks that are completed within the given project since the specified time\n\nParameters:\n project_id (str): The ID of the project containing the tasks\n completed_since (str): Archive tasks completed after this timestamp\n\nReturns:\n int: Number of tasks archived\n""""""\n', '\n\ndef check_inventory_availability(part_id, minimum_quantity=1):\n""""""\nChecks if the inventory has the specified part in at least the minimum quantity\n\nParameters:\n part_id (str): The ID of the part to check in inventory\n minimum_quantity (int): The minimum quantity to check for; defaults to 1\n\nReturns:\n bool: True if the minimum quantity is available; otherwise False\n""""""\n', '\n\ndef update_contact_info(contact_id, new_email=None, new_phone=None):\n""""""\nUpdates the contact information for a given contact ID with new email and/or phone\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_email (str, optional): The new email address; defaults to None\n new_phone (str, optional): The new phone number; defaults to None\n\nReturns:\n bool: True if the update was successful; otherwise False\n""""""\n', '\n\ndef list_completed_tasks_by_user(user_id):\n""""""\nLists all completed tasks for a specific user\n\nParameters:\n user_id (str): The ID of the user whose completed tasks need to be listed\n\nReturns:\n list: List of completed task IDs\n""""""\n', '\n\ndef calculate_user_workload(user_id):\n""""""\nCalculates the workload of a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be calculated\n\nReturns:\n float: The calculated workload value\n""""""\n', '\n\ndef convert_task_to_ticket(task_id):\n""""""\nConverts a task into a ticket in the system\n\nParameters:\n task_id (str): The ID of the task to be converted\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', '\n\ndef filter_objects_by_type(object_ids, object_type):\n""""""\nFilters a list of objects based on their type\n\nParameters:\n object_ids (list): A list of object IDs to filter\n object_type (str): The type of objects to filter for\n\nReturns:\n list: Filtered object IDs matching the specified type\n""""""\n', '\ndef update_user_ID(user_id, status):\n""""""\nUpdates the status of a user account in the system and returns the updated id\n\nParameters:\n user_id (str): The ID of the user whose status is to be updated\n status (str): The new status to apply to the user account\n\nReturns:\n str: updated User Id\n""""""\n', '\n\ndef validate_data_consistency(data_id, schema_id):\n""""""\nValidates if data conforms to a specified schema for consistency\n\nParameters:\n data_id (str): The ID of the data to be validated\n schema_id (str): The ID of the schema to validate the data against\n\nReturns:\n bool: True if data is consistent, False otherwise\n""""""\n', '\n\ndef get_team_member_list(team_id):\n""""""\nRetrieves a list of team members for the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: List of team member IDs\n""""""\n']","Archive all completed tasks in project ""PRJ-9801"" since ""2023-01-01"", then check if part ""PT-500"" is available in inventory with a minimum quantity of 20.","var_1 = archive_completed_tasks(project_id=""PRJ-9801"", completed_since=""2023-01-01"")
var_2 = check_inventory_availability(part_id=""PT-500"", minimum_quantity=20)"
"['\n\ndef archive_old_tickets(older_than_date, active_status=False):\n""""""\nArchives tickets that are older than the specified date, optionally filters by active status and returns the IDs\n\nParameters:\n older_than_date (str): A date in the format \'YYYY-MM-DD\', to filter tickets older than this date\n active_status (bool): If True, only archives tickets that are currently active; defaults to False\n\nReturns:\n str: ID of tickets archived\n""""""\n', '\n\ndef assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task will be assigned\n\nReturns:\n bool: True if assignment was successful, otherwise False\n""""""\n', '\n\ndef create_new_ticket(title, description, reported_by):\n""""""\nCreates a new ticket in the system with the given details\n\nParameters:\n title (str): The title of the new ticket\n description (str): A detailed description of the issue or request\n reported_by (str): The ID of the user reporting the ticket\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', '\n\ndef log_system_event(event_type, description, user_id=None):\n""""""\nLogs an event in the system with an optional user ID associated with it\n\nParameters:\n event_type (str): The type of event to log\n description (str): A brief description of the event\n user_id (str): The ID of the user involved in the event, if applicable\n\nReturns:\n str: The ID of the logged event\n""""""\n', '\n\ndef retrieve_user_workload(user_id):\n""""""\nRetrieves the current workload for the specified user\n\nParameters:\n user_id (str): The ID of the user whose workload is to be retrieved\n\nReturns:\n list: A list containing workload details\n""""""\n', '\n\ndef estimate_task_duration(task_id, complexity_level):\n""""""\nEstimates the duration needed to complete a task based on its complexity level\n\nParameters:\n task_id (str): The ID of the task\n complexity_level (str): The complexity level of the task. Allowed values: \'low\', \'medium\', \'high\'\n\nReturns:\n float: Estimated duration in hours\n""""""\n', '\n\ndef list_user_tasks(user_id, completed=False):\n""""""\nLists all tasks assigned to a user, optionally filtering for completed tasks\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be listed\n completed (bool): If True, only completed tasks are returned\n\nReturns:\n list: A list of tasks assigned to the user\n""""""\n', '\n\ndef check_ticket_status(ticket_id):\n""""""\nChecks the status of a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose status is to be checked\n\nReturns:\n str: The status of the ticket\n""""""\n', '\n\ndef generate_unique_identifier(prefix, use_timestamp=True):\n""""""\nGenerates a unique identifier with an optional timestamp\n\nParameters:\n prefix (str): A prefix for the identifier\n use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True\n\nReturns:\n str: The generated unique identifier\n""""""\n\n```', '\n\ndef get_user_workload(user_id):\n""""""\nDetermines the current workload for a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be determined\n\nReturns:\n int: The number of tasks assigned to the user\n""""""\n']","Archive tickets reported by user ""User123"" that are older than ""2022-01-01"", then estimate the duration for the task ""TASK-456"" with a complexity level of ""high"".","var_1 = search_object_by_name(query=""User123"")
var_2 = archive_old_tickets(older_than_date=""2022-01-01"", active_status=False)
var_3 = estimate_task_duration(task_id=""TASK-456"", complexity_level=""high"")"
"['\n\ndef archive_old_tickets(older_than_date, active_status=False):\n""""""\nArchives tickets that are older than the specified date, optionally filters by active status and returns the IDs\n\nParameters:\n older_than_date (str): A date in the format \'YYYY-MM-DD\', to filter tickets older than this date\n active_status (bool): If True, only archives tickets that are currently active; defaults to False\n\nReturns:\n str: ID of tickets archived\n""""""\n', 'def link_issues_to_project(issue_ids, project_id):\n""""""\nLinks the given issues to the specified project\n\nParameters:\n issue_ids (list): A list of issue IDs to be linked to the project\n project_id (str): The ID of the project to which the issues should be linked\n\nReturns:\n bool: Status of the linking action\n""""""\n', '\n\ndef validate_object_existence(object_id):\n""""""\nChecks if an object with the given ID exists in the system\n\nParameters:\n object_id (str): The ID of the object to check\n\nReturns:\n bool: True if the object exists, otherwise False\n""""""\n', '\n\ndef get_work_item_history(work_id):\n""""""\nRetrieves the history of changes for a given work item\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n list: A chronological list of changes made to the work item\n""""""\n', '\n\ndef filter_tasks_by_due_date(task_ids, due_date):\n""""""\nFilters tasks by their due date\n\nParameters:\n task_ids (list): A list of task IDs to filter\n due_date (str): The due date to filter tasks by\n\nReturns:\n list: List of task IDs that have the specified due date\n""""""\n', '\n\ndef calculate_workload_for_user(user_id):\n""""""\nCalculates the total number of open work items assigned to a user\n\nParameters:\n user_id (str): The ID of the user for whom to calculate the workload\n\nReturns:\n int: The total number of open work items\n""""""\n', '\n\ndef get_user_workload(user_id):\n""""""\nDetermines the current workload for a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be determined\n\nReturns:\n int: The number of tasks assigned to the user\n""""""\n', '\n\ndef get_object_history(object_id):\n""""""\nRetrieves the change history of a specified object\n\nParameters:\n object_id (str): The ID of the object for which history is requested\n\nReturns:\n list: A list of changes made to the object\n""""""\n', '\n\ndef remove_users_from_group(user_ids, group_id):\n""""""\nRemoves the specified users from a group\n\nParameters:\n user_ids (list): A list of user IDs to be removed from the group\n group_id (str): The ID of the group from which the users should be removed\n\nReturns:\n bool: Status of the removal\n""""""\n', '\n\ndef log_system_event(event_type, description, user_id=None):\n""""""\nLogs an event in the system with an optional user ID associated with it\n\nParameters:\n event_type (str): The type of event to log\n description (str): A brief description of the event\n user_id (str): The ID of the user involved in the event, if applicable\n\nReturns:\n str: The ID of the logged event\n""""""\n']","Archive tickets older than ""2021-01-01"" that are still active, and log the event with a description ""Archived active tickets from 2021 and earlier"".","var_1 = archive_old_tickets(older_than_date=""2021-01-01"", active_status=True)
var_2 = log_system_event(event_type=""archive"", description=""Archived active tickets from 2021 and earlier"", user_id=None)"
"['\n\ndef assign_tasks_to_employee(task_ids, employee_id):\n""""""\nAssigns a list of tasks to the specified employee\n\nParameters:\n task_ids (list): A list of task IDs to be assigned\n employee_id (str): The ID of the employee to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment was successful, False otherwise\n""""""\n', '\n\ndef get_user_contact_info(user_id):\n""""""\nRetrieves contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact information is requested\n\nReturns:\n str: The contact information of the user\n""""""\n', '\n\ndef notify_user_of_overdue_tasks(user_id):\n""""""\nNotifies a user of any overdue tasks assigned to them\n\nParameters:\n user_id (str): The ID of the user to check for overdue tasks\n\nReturns:\n None\n""""""\n', 'def assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task is assigned\n\nReturns:\n None\n""""""\n', '\n\ndef find_team_members(team_id):\n""""""\nReturns a list of user IDs that are members of the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: User IDs of the team members\n""""""\n', 'def assign_tickets_to_user(ticket_ids, user_id):\n""""""\nAssigns a set of tickets to a specified user\n\nParameters:\n ticket_ids (list): A list of ticket IDs to be assigned\n user_id (str): The ID of the user to whom the tickets will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef create_new_ticket(title, description, reported_by):\n""""""\nCreates a new ticket in the system with the given details\n\nParameters:\n title (str): The title of the new ticket\n description (str): A detailed description of the issue or request\n reported_by (str): The ID of the user reporting the ticket\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', '\n\ndef validate_data_integrity(data_point_ids):\n""""""\nChecks the integrity of a list of data points in the system\n\nParameters:\n data_point_ids (list): List of data point IDs to validate\n\nReturns:\n list: Validation results with status (True or False) for each data point\n""""""\n', '\n\ndef filter_tasks_by_due_date(task_ids, due_date):\n""""""\nFilters tasks by their due date\n\nParameters:\n task_ids (list): A list of task IDs to filter\n due_date (str): The due date to filter tasks by\n\nReturns:\n list: List of task IDs that have the specified due date\n""""""\n', '\n\ndef create_report_for_sprint(sprint_id, report_type):\n""""""\nGenerates a report for a given sprint\n\nParameters:\n sprint_id (str): The ID of the sprint\n report_type (str): The type of report to be generated\n\nReturns:\n str: The ID of the generated report\n""""""\n']","Retrieve all tickets reported by user ""User123"", assign them to employee ""Emp456"", and then create a report for the current sprint including these tickets.","
var_1 = fetch_user_created_work(user_id=""User123"", work_type=""ticket"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
var_4 = assign_tickets_to_user(ticket_ids=var_1, user_id=""Emp456"")
var_5 = create_report_for_sprint(sprint_id=var_2, report_type=""Ticket Report"")"
"['\n\ndef assign_tasks_to_user(task_ids, user_id):\n""""""\nAssigns a list of task IDs to the provided user\n\nParameters:\n task_ids (list): List of task IDs to be assigned\n user_id (str): The ID of the user to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n', '\n\ndef check_inventory_availability(part_id, minimum_quantity=1):\n""""""\nChecks if the inventory has the specified part in at least the minimum quantity\n\nParameters:\n part_id (str): The ID of the part to check in inventory\n minimum_quantity (int): The minimum quantity to check for; defaults to 1\n\nReturns:\n bool: True if the minimum quantity is available; otherwise False\n""""""\n', '\n\ndef mark_task_as_completed(task_id):\n""""""\nMarks a task as completed in the system.\n\nParameters:\n task_id (str): The ID of the task to be marked as complete\n\nReturns:\n bool: True if marked successfully, False otherwise\n""""""\n', 'def assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task is assigned\n\nReturns:\n None\n""""""\n', '\n\ndef update_contact_info(contact_id, new_email=None, new_phone=None):\n""""""\nUpdates the contact information for a given contact ID with new email and/or phone\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_email (str, optional): The new email address; defaults to None\n new_phone (str, optional): The new phone number; defaults to None\n\nReturns:\n bool: True if the update was successful; otherwise False\n""""""\n', 'def update_issue_status(issue_id, new_status):\n""""""\nUpdates the status of an issue\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef filter_work_by_date_range(start_date, end_date, work_type=None):\n""""""\nFilters work items based on a specific date range\n\nParameters:\n start_date (str): The start date for the filter range (format: YYYY-MM-DD)\n end_date (str): The end date for the filter range (format: YYYY-MM-DD)\n work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task\n\nReturns:\n list: Work items in the specified date range\n""""""\n', '\n\ndef find_user_by_email(email):\n""""""\nFinds a user in the system by their email address\n\nParameters:\n email (str): The email address of the user to find\n\nReturns:\n str: ID of the user\n""""""\n', '\n\ndef batch_update_task_status(task_ids, new_status):\n""""""\nUpdates the status of multiple tasks in a batch operation\n\nParameters:\n task_ids (list): A list of task IDs whose status needs updating\n new_status (str): The new status to apply to the tasks\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef calculate_time_until_deadline(work_item_id):\n""""""\nCalculates the amount of time remaining until the deadline of a work item\n\nParameters:\n work_item_id (str): The ID of the work item\n\nReturns:\n float: The number of hours until the deadline\n""""""\n']","Check the inventory for part ""ENG-456"" and assign all tasks related to this part to user ""TechGuru"".","var_1 = check_inventory_availability(part_id=""ENG-456"")
var_2 = works_list(applies_to_part=[""ENG-456""], type=[""task""])
var_3 = find_user_by_email(email=""TechGuru"")
var_4 = assign_tasks_to_user(task_ids=var_2, user_id=var_3)"
"['\n\ndef batch_update_task_status(task_ids, new_status):\n""""""\nUpdates the status of multiple tasks in a batch operation\n\nParameters:\n task_ids (list): A list of task IDs whose status needs updating\n new_status (str): The new status to apply to the tasks\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef assign_tasks_to_user(task_ids, user_id):\n""""""\nAssigns a list of task IDs to the provided user\n\nParameters:\n task_ids (list): List of task IDs to be assigned\n user_id (str): The ID of the user to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n', '\n\ndef calculate_estimated_completion(project_id):\n""""""\nCalculates the estimated completion date for a project based on current progress\n\nParameters:\n project_id (str): The ID of the project to be analyzed\n\nReturns:\n str: Estimated date of completion\n""""""\n', 'def assign_issues_to_user(issue_ids, user_id):\n""""""\nAssigns a list of issues to the specified user\n\nParameters:\n issue_ids (list): A list of issue IDs that need to be assigned\n user_id (str): The user ID to whom the issues will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef remove_user_from_project(user_id, project_id):\n""""""\nRemoves a user from a project\n\nParameters:\n user_id (str): The ID of the user to be removed\n project_id (str): The ID of the project from which the user is to be removed\n\nReturns:\n bool: True if the user is successfully removed, False otherwise\n""""""', '\n\ndef update_work_item_status(work_item_id, new_status):\n""""""\nUpdates the status of a given work item\n\nParameters:\n work_item_id (str): The ID of the work item to be updated\n new_status (str): The new status to set for the work item\n""""""\n', '\n\ndef calculate_expense_totals(expense_ids):\n""""""\nCalculates the total amount from a list of expense IDs\n\nParameters:\n expense_ids (list): List of expense IDs to calculate the total amount\n\nReturns:\n float: The total amount of the expenses\n""""""\n', '\n\ndef get_work_item_history(work_id):\n""""""\nRetrieves the history of changes for a given work item\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n list: A chronological list of changes made to the work item\n""""""\n', '\n\ndef batch_update_user_roles(user_ids, new_role):\n""""""\nUpdates the roles for a batch of users to a new role\n\nParameters:\n user_ids (list): List of user IDs whose roles should be updated\n new_role (str): The new role to assign\n\nReturns:\n int: Number of users successfully updated\n""""""\n', '\n\ndef extract_contact_info(text_id, entity_type):\n""""""\nExtracts contact information from a text source based on a given entity type\n\nParameters:\n text_id (str): The ID of the text source from which to extract contact information\n entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'\n\nReturns:\n list: Extracted contact information\n""""""']","Assign all high-severity tickets to user ""TechGuru"" and calculate the estimated completion date for project ""ProjAlpha"".","
var_1 = search_object_by_name(query=""TechGuru"")
var_2 = works_list(type=[""ticket""], ticket.severity=[""high""])
var_3 = assign_tasks_to_user(task_ids=var_2, user_id=var_1)
var_4 = search_object_by_name(query=""ProjAlpha"")
var_5 = calculate_estimated_completion(project_id=var_4)"
"['\n\ndef batch_update_task_status(task_ids, new_status):\n""""""\nUpdates the status of multiple tasks in a batch operation\n\nParameters:\n task_ids (list): A list of task IDs whose status needs updating\n new_status (str): The new status to apply to the tasks\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef retrieve_user_workload(user_id):\n""""""\nRetrieves the current workload for the specified user\n\nParameters:\n user_id (str): The ID of the user whose workload is to be retrieved\n\nReturns:\n list: A list containing workload details\n""""""\n', '\n\ndef retrieve_archived_documents(archive_id, keyword=None):\n""""""\nRetrieves documents from the archive based on optional keyword\n\nParameters:\n archive_id (str): The ID of the archive from which to retrieve documents\n keyword (str): Optional keyword to filter documents, default is \'None\'\n\nReturns:\n list: A list of documents matching the keyword if provided, otherwise all documents from the archive\n""""""', '\n\ndef validate_project_completion(project_id):\n""""""\nValidates if all tasks within a project are completed\n\nParameters:\n project_id (str): The ID of the project to validate\n\nReturns:\n bool: True if completed, False otherwise\n""""""\n', '\n\ndef calculate_estimate_completion_time(work_id):\n""""""\nCalculates the estimated completion time for the specified work item\n\nParameters:\n work_id (str): The ID of the work item to calculate the estimated time\n\nReturns:\n float: Estimated completion time in hours\n""""""\n', '\n\ndef list_user_tasks(user_id, completed=False):\n""""""\nLists all tasks assigned to a user, optionally filtering for completed tasks\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be listed\n completed (bool): If True, only completed tasks are returned\n\nReturns:\n list: A list of tasks assigned to the user\n""""""\n', '\n\ndef generate_report(report_type, subject_id, include_summary=True):\n""""""\nGenerates a report of a specific type for a subject in the system\n\nParameters:\n report_type (str): The type of report to generate\n subject_id (str): The ID of the subject for the report\n include_summary (bool): Whether to include a summary in the report; defaults to True\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef generate_report_from_data(dataset_id, report_type=""summary""):\n""""""\nGenerates a specific type of report from a dataset\n\nParameters:\n dataset_id (str): The ID of the dataset from which to generate the report\n report_type (str): The type of report to generate, default is \'summary\'\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef check_availability_of_part(part_id):\n""""""\nChecks if a specific part is available in inventory\n\nParameters:\n part_id (str): The ID of the part to check for availability\n\nReturns:\n bool: True if the part is available, False otherwise\n""""""\n', '\n\ndef filter_objects_by_type(object_ids, object_type):\n""""""\nFilters a list of objects based on their type\n\nParameters:\n object_ids (list): A list of object IDs to filter\n object_type (str): The type of objects to filter for\n\nReturns:\n list: Filtered object IDs matching the specified type\n""""""\n']","Retrieve the current workload for user ""EngineerEmma"", list all of her tasks that are not completed, and generate a report including a summary.","
var_1 = who_am_i()
var_2 = retrieve_user_workload(user_id=""EngineerEmma"")
var_3 = list_user_tasks(user_id=""EngineerEmma"", completed=False)
var_4 = generate_report(report_type=""workload"", subject_id=""EngineerEmma"", include_summary=True)"
"['\n\ndef calculate_budget_allocation(project_id, cost_limit):\n""""""\nCalculates and assigns the budget allocation for a project\n\nParameters:\n project_id (str): The ID of the project for which the budget is calculated\n cost_limit (float): The cost limit for the project\'s budget\n\nReturns:\n float: The amount allocated to the project budget\n""""""\n', '\n\ndef get_user_avatar(user_id):\n""""""\nRetrieves the avatar image URL for the specified user\n\nParameters:\n user_id (str): The ID of the user whose avatar is to be retrieved\n\nReturns:\n str: URL of the user\'s avatar image\n""""""\n', '\n\ndef track_time_on_task(task_id, hours_spent):\n""""""\nTracks time spent on a task by logging the number of hours\n\nParameters:\n task_id (str): The ID of the task on which time is spent\n hours_spent (float): The number of hours spent on the task\n\nReturns:\n bool: Status of the time tracking\n""""""\n', '\n\ndef remove_object_from_sprint(object_id, sprint_id):\n""""""\nRemoves a specified object from a sprint and returns the new list\n\nParameters:\n object_id (str): The ID of the object to be removed\n sprint_id (str): The ID of the project from which the object should be removed\n\nReturns:\n list: Returns the updated list of sprint objects\n""""""\n', '\n\ndef estimate_completion_time(task_id):\n""""""\nEstimates the completion time for a given task\n\nParameters:\n task_id (str): The ID of the task for which to estimate completion time\n\nReturns:\n float: The estimated number of hours to complete the task\n""""""\n', '\n\ndef filter_projects_by_category(category_id, active_only=True):\n""""""\nFilters projects by their category and returns a list of project IDs\n\nParameters:\n category_id (str): The ID of the category to filter projects by\n active_only (bool): Whether to return only active projects\n\nReturns:\n list: List of project IDs matching the category filter\n""""""\n', '\n\ndef link_related_tickets(ticket_id, related_ids):\n""""""\nLinks tickets that are related to each other\n\nParameters:\n ticket_id (str): The ID of the ticket that will be linked with related tickets\n related_ids (list): List of IDs for tickets that are related to the original ticket\n\nReturns:\n bool: True if the linking is successful, False otherwise\n""""""\n', '\n\ndef archive_completed_tasks(project_id, completed_since):\n""""""\nArchives tasks that are completed within the given project since the specified time\n\nParameters:\n project_id (str): The ID of the project containing the tasks\n completed_since (str): Archive tasks completed after this timestamp\n\nReturns:\n int: Number of tasks archived\n""""""\n', '\n\ndef find_work_items_by_tag(work_type, tag):\n""""""\nFinds work items of a certain type with a given tag\n\nParameters:\n work_type (str): The type of the work items to filter by\n tag (str): The tag to filter the work items\n\nReturns:\n list: List of work items with the given tag\n""""""\n', '\n\ndef batch_update_user_roles(user_ids, new_role):\n""""""\nUpdates the roles for a batch of users to a new role\n\nParameters:\n user_ids (list): List of user IDs whose roles should be updated\n new_role (str): The new role to assign\n\nReturns:\n int: Number of users successfully updated\n""""""\n']","Calculate the budget allocation for project ""PRJ-789"", then find and summarize all tasks within this project's budget limit.","var_1 = calculate_budget_allocation(project_id=""PRJ-789"", cost_limit=1000000.0)
var_2 = works_list(type=[""task""], limit=var_1)
var_3 = summarize_objects(objects=var_2)"
"['\n\ndef calculate_budget_remaining(budget_id):\n""""""\nCalculates the remaining budget for a given budget ID\n\nParameters:\n budget_id (str): The ID of the budget to calculate\n\nReturns:\n float: The amount of remaining budget\n""""""\n', '\n\ndef create_new_ticket(title, description, reported_by):\n""""""\nCreates a new ticket in the system with the given details\n\nParameters:\n title (str): The title of the new ticket\n description (str): A detailed description of the issue or request\n reported_by (str): The ID of the user reporting the ticket\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', '\n\ndef get_object_history(object_id):\n""""""\nRetrieves the change history of a specified object\n\nParameters:\n object_id (str): The ID of the object for which history is requested\n\nReturns:\n list: A list of changes made to the object\n""""""\n', '\n\ndef convert_task_to_subtask(task_id, parent_task_id):\n""""""\nConverts a standalone task into a subtask of another task\n\nParameters:\n task_id (str): The ID of the task to be converted\n parent_task_id (str): The ID of the parent task to which the subtask will be linked\n\nReturns:\n bool: True if the conversion was successful, False otherwise\n""""""\n', '\n\ndef archive_completed_tasks(project_id, completed_since):\n""""""\nArchives tasks that are completed within the given project since the specified time\n\nParameters:\n project_id (str): The ID of the project containing the tasks\n completed_since (str): Archive tasks completed after this timestamp\n\nReturns:\n int: Number of tasks archived\n""""""\n', '\n\ndef validate_object_existence(object_id):\n""""""\nChecks if an object with the given ID exists in the system\n\nParameters:\n object_id (str): The ID of the object to check\n\nReturns:\n bool: True if the object exists, otherwise False\n""""""\n', '\n\ndef merge_duplicate_tasks(primary_task_id, duplicate_task_ids):\n""""""\nMerges duplicate tasks into a primary task\n\nParameters:\n primary_task_id (str): The ID of the primary task which remains after the merge\n duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged\n\nReturns:\n None\n""""""\n', '\n\ndef calculate_project_completion_rate(project_id):\n""""""\nCalculates the completion rate of tasks for a given project\n\nParameters:\n project_id (str): The ID of the project to calculate the completion rate for\n\nReturns:\n float: The completion rate as a percentage\n""""""\n', '\n\ndef update_contact_info(contact_id, new_email=None, new_phone=None):\n""""""\nUpdates the contact information for a given contact ID with new email and/or phone\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_email (str, optional): The new email address; defaults to None\n new_phone (str, optional): The new phone number; defaults to None\n\nReturns:\n bool: True if the update was successful; otherwise False\n""""""\n', '\n\ndef merge_duplicate_records(primary_record_id, duplicate_record_id):\n""""""\nMerges a duplicate record into a primary record\n\nParameters:\n primary_record_id (str): The ID of the primary record to keep\n duplicate_record_id (str): The ID of the duplicate record to merge\n\nReturns:\n bool: True if the merge was successful; otherwise False\n""""""\n']","Calculate the remaining budget for project ""PROJ-001"" and archive all completed tasks in that project since ""2023-01-01"".","var_1 = search_object_by_name(query=""PROJ-001"")
var_2 = calculate_budget_remaining(budget_id=var_1)
var_3 = archive_completed_tasks(project_id=var_1, completed_since=""2023-01-01"")"
"['\n\ndef calculate_budget_remaining(budget_id):\n""""""\nCalculates the remaining budget for a given budget ID\n\nParameters:\n budget_id (str): The ID of the budget to calculate\n\nReturns:\n float: The amount of remaining budget\n""""""\n', '\n\ndef get_project_timeline(project_id):\n""""""\nRetrieves the timeline and key milestones of a project\n\nParameters:\n project_id (str): The ID of the project for which the timeline is requested\n\nReturns:\n list: Key milestones and dates for the project timeline\n""""""\n', '\n\ndef link_related_objects(object_id, related_object_id):\n""""""\nCreates a link between two related objects in the system\n\nParameters:\n object_id (str): The ID of the primary object\n related_object_id (str): The ID of the object to relate to the primary\n\nReturns:\n bool: True if the objects were successfully linked, False otherwise\n""""""\n', '\n\ndef list_department_members(department_id):\n""""""\nReturns a list of user IDs for all members within a specified department\n\nParameters:\n department_id (str): The ID of the department to list members for\n\nReturns:\n list: User IDs of all the members in the department\n""""""\n', '\n\ndef mark_ticket_as_resolved(ticket_id):\n""""""\nMarks a ticket as resolved in the system\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked as resolved\n\nReturns:\n bool: True if the ticket was marked as resolved, False otherwise\n""""""\n', '\n\ndef remove_user_from_project(user_id, project_id):\n""""""\nRemoves a user from a project\n\nParameters:\n user_id (str): The ID of the user to be removed\n project_id (str): The ID of the project from which the user is to be removed\n\nReturns:\n bool: True if the user is successfully removed, False otherwise\n""""""', '\n\ndef generate_report_by_tag(tag_id, include_archived=False):\n""""""\nGenerates a report for all work items associated with the given tag\n\nParameters:\n tag_id (str): The ID of the tag used to filter work items\n include_archived (bool): Include archived work items if set to True\n\nReturns:\n list: Work items associated with the tag\n""""""\n', '\n\ndef track_project_completion(project_id):\n""""""\nTracks the completion percentage of a project based on completed tasks\n\nParameters:\n project_id (str): The ID of the project to track\n\nReturns:\n float: Percentage of the project completed\n""""""\n', '\n\ndef list_all_blocked_tickets():\n""""""\nLists all tickets that are currently blocked\n\nReturns:\n list: Ticket IDs that are currently blocked\n""""""', 'def retrieve_sprint_workload(sprint_id):\n""""""\nCalculates the total workload for a given sprint based on the work items associated with it\n\nParameters:\n sprint_id (str): The ID of the sprint for workload calculation\n\nReturns:\n float: Total workload in hours\n""""""\n']","Retrieve the remaining budget for budget ID ""BUDGET-456"", list all department members from department ""HR-789"", and summarize their work items.","
var_1 = calculate_budget_remaining(budget_id=""BUDGET-456"")
var_2 = list_department_members(department_id=""HR-789"")
var_3 = works_list(owned_by=var_2)
var_4 = summarize_objects(objects=var_3)"
"['\n\ndef calculate_estimate_completion_time(work_id):\n""""""\nCalculates the estimated completion time for the specified work item\n\nParameters:\n work_id (str): The ID of the work item to calculate the estimated time\n\nReturns:\n float: Estimated completion time in hours\n""""""\n', '\n\ndef generate_summary_report(object_ids):\n""""""\nGenerates a summary report for the specified objects\n\nParameters:\n object_ids (list): A list of object IDs\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef get_user_permissions(user_id):\n""""""\nReturns a list of permissions for a specified user ID\n\nParameters:\n user_id (str): The ID of the user whose permissions you want to retrieve\n\nReturns:\n list: User permissions\n""""""\n', '\n\ndef extract_keywords_from_text(text):\n""""""\nGiven a text, extracts and returns the main keywords\n\nParameters:\n text (str): The text from which keywords are to be extracted\n\nReturns:\n list: A list of extracted keywords\n""""""\n', '\n\ndef remove_object_from_archive(object_id):\n""""""\nRemoves an object from the system archive, making it active again\n\nParameters:\n object_id (str): The ID of the object to be removed from the archive\n\nReturns:\n bool: True if the object was successfully removed, False otherwise\n""""""\n', '\n\ndef log_system_activity(activity_description, user_id=None):\n""""""\nLogs a system activity with an optional user ID\n\nParameters:\n activity_description (str): A brief description of the activity being logged\n user_id (str, optional): The ID of the user associated with the activity; defaults to None\n\nReturns:\n bool: True if the activity was logged successfully; otherwise False\n""""""\n', 'def assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task is assigned\n\nReturns:\n None\n""""""\n', '\n\ndef update_issue_with_solution(issue_id, solution_text):\n""""""\nUpdates an issue with a solution description\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n solution_text (str): The description of the solution to apply to the issue\n\nReturns:\n None\n""""""\n', '\ndef update_user_ID(user_id, status):\n""""""\nUpdates the status of a user account in the system and returns the updated id\n\nParameters:\n user_id (str): The ID of the user whose status is to be updated\n status (str): The new status to apply to the user account\n\nReturns:\n str: updated User Id\n""""""\n', '\n\ndef list_all_blocked_tickets():\n""""""\nLists all tickets that are currently blocked\n\nReturns:\n list: Ticket IDs that are currently blocked\n""""""']","Calculate the estimated completion time for work items owned by ""TeamLead"" and generate a summary report for these items.","var_1 = works_list(owned_by=[""TeamLead""])
var_2 = calculate_estimate_completion_time(work_id=var_1)
var_3 = generate_summary_report(object_ids=var_1)"
"['\n\ndef calculate_project_completion_rate(project_id):\n""""""\nCalculates the completion rate of tasks for a given project\n\nParameters:\n project_id (str): The ID of the project to calculate the completion rate for\n\nReturns:\n float: The completion rate as a percentage\n""""""\n', '\n\ndef merge_duplicate_work_items(primary_work_id, duplicate_work_ids):\n""""""\nMerges duplicate work items into the primary work item\n\nParameters:\n primary_work_id (str): The ID of the primary work item\n duplicate_work_ids (list): List of IDs of duplicate work items to be merged\n\nReturns:\n bool: True if merge was successful, otherwise False\n""""""\n', '\n\ndef remove_object_from_inventory(object_id):\n""""""\nRemoves an object from the inventory system based on the object ID\n\nParameters:\n object_id (str): The ID of the object to remove from inventory\n\nReturns:\n bool: True if the removal was successful, False otherwise\n""""""\n', '\n\ndef generate_report_by_tag(tag_id, include_archived=False):\n""""""\nGenerates a report for all work items associated with the given tag\n\nParameters:\n tag_id (str): The ID of the tag used to filter work items\n include_archived (bool): Include archived work items if set to True\n\nReturns:\n list: Work items associated with the tag\n""""""\n', '\n\ndef estimate_work_hours(work_id):\n""""""\nEstimates the number of hours required to complete a specific work item\n\nParameters:\n work_id (str): The ID of the work item for which the estimation is to be made\n\nReturns:\n float: Estimated hours required to complete the work item\n""""""\n', '\n\ndef calculate_estimated_effort(work_id):\n""""""\nCalculates the estimated effort required to complete a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n float: Estimated effort in hours\n""""""\n', '\n\ndef update_object_status(object_id, new_status, changed_by):\n""""""\nUpdates the status of an object and records the user that made the change\n\nParameters:\n object_id (str): The ID of the object for which the status is updated\n new_status (str): The new status for the object\n changed_by (str): The ID of the user who is changing the status\n\nReturns:\n None\n""""""\n', '\n\ndef get_recent_activity_log(user_id, limit=10):\n""""""\nGets the most recent activity log entries for a given user\n\nParameters:\n user_id (str): The ID of the user to get activities for\n limit (int): The maximum number of activity log entries to return\n\nReturns:\n list: Recent activity log entries\n""""""\n', '\n\ndef batch_update_user_roles(user_ids, new_role):\n""""""\nUpdates the roles for a batch of users to a new role\n\nParameters:\n user_ids (list): List of user IDs whose roles should be updated\n new_role (str): The new role to assign\n\nReturns:\n int: Number of users successfully updated\n""""""\n', '\n\ndef list_recent_projects(user_id, days_back=30):\n""""""\nLists all projects a user has worked on in the past number of days\n\nParameters:\n user_id (str): The ID of the user\n days_back (int): The number of past days to look for projects. The default is \'30\'\n\nReturns:\n list: Project IDs that the user has worked on\n""""""\n']","Calculate the project completion rate for project ""PRJ-456"" and list all recent projects the user ""TeamLead"" has worked on in the past 45 days.","var_1 = calculate_project_completion_rate(project_id=""PRJ-456"")
var_2 = list_recent_projects(user_id=""TeamLead"", days_back=45)"
"['\n\ndef calculate_project_completion_rate(project_id):\n""""""\nCalculates the completion rate of tasks for a given project\n\nParameters:\n project_id (str): The ID of the project to calculate the completion rate for\n\nReturns:\n float: The completion rate as a percentage\n""""""\n', 'def fetch_user_tasks(user_id, include_completed=False):\n""""""\nRetrieves a list of tasks assigned to a user\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be fetched\n include_completed (bool): Whether to include completed tasks in the list\n\nReturns:\n list: List of tasks assigned to the user\n""""""\n', '\n\ndef update_ticket_status(ticket_id, new_status):\n""""""\nUpdates the status of a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket to be updated\n new_status (str): The new status to update the ticket with\n\nReturns:\n bool: True if the update was successful, otherwise False\n""""""\n', '\n\ndef get_user_avatar(user_id):\n""""""\nRetrieves the avatar image URL for the specified user\n\nParameters:\n user_id (str): The ID of the user whose avatar is to be retrieved\n\nReturns:\n str: URL of the user\'s avatar image\n""""""\n', 'def assign_issues_to_user(issue_ids, user_id):\n""""""\nAssigns a list of issues to the specified user\n\nParameters:\n issue_ids (list): A list of issue IDs that need to be assigned\n user_id (str): The user ID to whom the issues will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef filter_tickets_by_date(ticket_ids, start_date, end_date=None):\n""""""\nFilters a list of ticket IDs based on a date range\n\nParameters:\n ticket_ids (list): A list of ticket IDs to filter\n start_date (str): The start date for the range\n end_date (str, optional): The end date for the range, defaults to None\n\nReturns:\n list: Filtered list of ticket IDs\n""""""\n', '\n\ndef find_user_by_email(email):\n""""""\nFinds a user in the system by their email address\n\nParameters:\n email (str): The email address of the user to find\n\nReturns:\n str: ID of the user\n""""""\n', '\n\ndef log_system_event(event_type, description, user_id=None):\n""""""\nLogs an event in the system with an optional user ID associated with it\n\nParameters:\n event_type (str): The type of event to log\n description (str): A brief description of the event\n user_id (str): The ID of the user involved in the event, if applicable\n\nReturns:\n str: The ID of the logged event\n""""""\n', '\n\ndef create_report_for_sprint(sprint_id, report_type):\n""""""\nGenerates a report for a given sprint\n\nParameters:\n sprint_id (str): The ID of the sprint\n report_type (str): The type of report to be generated\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef validate_work_item_completeness(work_id):\n""""""\nChecks if a work item has all necessary information completed\n\nParameters:\n work_id (str): The ID of the work item to check\n\nReturns:\n bool: True if the work item is complete, False if it lacks information\n""""""\n']","Fetch tasks assigned to user ""QAEngineer"" including completed ones, calculate the project completion rate for project ""PROJ-42"", and log a system event with the event type ""TaskFetch"" and a description ""Fetched tasks for QAEngineer including completed"".","var_1 = find_user_by_email(email=""QAEngineer"")
var_2 = fetch_user_tasks(user_id=var_1, include_completed=True)
var_3 = calculate_project_completion_rate(project_id=""PROJ-42"")
var_4 = log_system_event(event_type=""TaskFetch"", description=""Fetched tasks for QAEngineer including completed"")"
"['\n\ndef calculate_time_until_deadline(work_item_id):\n""""""\nCalculates the amount of time remaining until the deadline of a work item\n\nParameters:\n work_item_id (str): The ID of the work item\n\nReturns:\n float: The number of hours until the deadline\n""""""\n', '\n\ndef calculate_work_item_duration(work_id):\n""""""\nCalculates the total time taken to complete a work item\n\nParameters:\n work_id (str): The ID of the work item for which duration is to be calculated\n\nReturns:\n float: The total duration in hours\n""""""\n', '\n\ndef notify_user_of_overdue_tasks(user_id):\n""""""\nNotifies a user of any overdue tasks assigned to them\n\nParameters:\n user_id (str): The ID of the user to check for overdue tasks\n\nReturns:\n None\n""""""\n', '\n\ndef generate_report_for_sprint(sprint_id):\n""""""\nGenerates a performance report for a specified sprint\n\nParameters:\n sprint_id (str): The ID of the sprint for which to generate the report\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef mark_task_as_completed(task_id):\n""""""\nMarks a task as completed in the system.\n\nParameters:\n task_id (str): The ID of the task to be marked as complete\n\nReturns:\n bool: True if marked successfully, False otherwise\n""""""\n', '\n\ndef calculate_project_completion_rate(project_id):\n""""""\nCalculates the completion rate of tasks for a given project\n\nParameters:\n project_id (str): The ID of the project to calculate the completion rate for\n\nReturns:\n float: The completion rate as a percentage\n""""""\n', '\n\ndef list_completed_tasks_by_user(user_id):\n""""""\nLists all completed tasks for a specific user\n\nParameters:\n user_id (str): The ID of the user whose completed tasks need to be listed\n\nReturns:\n list: List of completed task IDs\n""""""\n', '\n\ndef update_work_item_due_date(work_item_id, due_date):\n""""""\nUpdates the due date for the specified work item\n\nParameters:\n work_item_id (str): The ID of the work item to be updated\n due_date (str): The new due date for the work item\n\nReturns:\n None: Indicates that the operation was executed without returning any value\n""""""\n', '\n\ndef extract_contact_info(text_id, entity_type):\n""""""\nExtracts contact information from a text source based on a given entity type\n\nParameters:\n text_id (str): The ID of the text source from which to extract contact information\n entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'\n\nReturns:\n list: Extracted contact information\n""""""', '\n\ndef toggle_feature_access(feature_id, user_id, enable_access):\n""""""\nToggles access to a specific feature for a user\n\nParameters:\n feature_id (str): The ID of the feature to toggle access\n user_id (str): The ID of the user whose access will be toggled\n enable_access (bool): \'True\' to enable access, \'False\' to disable\n\nReturns:\n bool: The resulting access status\n""""""\n']",Calculate the time until the deadline for all high-severity tickets and update their due dates to the end of the current week if the time until the deadline is less than 48 hours.,"var_1 = works_list(type=[""ticket""], ticket.severity=[""high""])
var_2 = calculate_time_until_deadline(work_item_id=var_1)
var_3 = update_work_item_due_date(work_item_id=var_1, due_date=""end of the current week"")"
"['\n\ndef calculate_time_until_deadline(work_item_id):\n""""""\nCalculates the amount of time remaining until the deadline of a work item\n\nParameters:\n work_item_id (str): The ID of the work item\n\nReturns:\n float: The number of hours until the deadline\n""""""\n', '\n\ndef list_user_permissions(user_id):\n""""""\nLists all the permissions that a user has within the system\n\nParameters:\n user_id (str): The ID of the user for whom permissions are being listed\n\nReturns:\n list: A list of permissions that the user possesses\n""""""\n', '\n\ndef log_user_activity(user_id, activity_description):\n""""""\nLogs a user\'s activity with a description\n\nParameters:\n user_id (str): The ID of the user whose activity is being logged\n activity_description (str): A description of the activity\n\nReturns:\n bool: True if the logging was successful, False otherwise\n""""""\n', '\n\ndef link_related_tickets(ticket_id, related_ids):\n""""""\nLinks tickets that are related to each other\n\nParameters:\n ticket_id (str): The ID of the ticket that will be linked with related tickets\n related_ids (list): List of IDs for tickets that are related to the original ticket\n\nReturns:\n bool: True if the linking is successful, False otherwise\n""""""\n', '\n\ndef get_sprint_history(sprint_id):\n""""""\nRetrieves the change history of a sprint\n\nParameters:\n sprint_id (str): The ID of the ticket\n\nReturns:\n list: A list of changes made to the sprint\n""""""\n', '\n\ndef fetch_users_from_group(group_id):\n""""""\nRetrieves a list of user IDs that belong to the specified group\n\nParameters:\n group_id (str): The ID of the group\n\nReturns:\n list: User IDs belonging to the group\n""""""\n', '\n\ndef remove_object_from_inventory(object_id):\n""""""\nRemoves an object from the inventory system based on the object ID\n\nParameters:\n object_id (str): The ID of the object to remove from inventory\n\nReturns:\n bool: True if the removal was successful, False otherwise\n""""""\n', '\n\ndef validate_user_permissions(user_id, required_permissions):\n""""""\nChecks if the user has the specified permissions\n\nParameters:\n user_id (str): The ID of the user whose permissions need to be checked\n required_permissions (list): A list of permissions to check against the user\'s permissions\n\nReturns:\n bool: True if the user has all the required permissions, False otherwise\n""""""\n', '\n\ndef generate_report_data(report_type, data_set_id):\n""""""\nGenerates report data based on the provided report type and data set\n\nParameters:\n report_type (str): The type of report to generate\n data_set_id (str): The ID of the data set to be used for the report\n\nReturns:\n str: A report data string or ID depending on internal implementation\n""""""\n', '\n\ndef get_object_history(object_id):\n""""""\nRetrieves the change history of a specified object\n\nParameters:\n object_id (str): The ID of the object for which history is requested\n\nReturns:\n list: A list of changes made to the object\n""""""\n']","Check the time until the deadline for work items owned by ""TeamLead"", summarize those work items, and log this activity for the user ""AdminUser"".","var_1 = who_am_i()
var_2 = works_list(owned_by=[""TeamLead""])
var_3 = calculate_time_until_deadline(work_item_id=var_2)
var_4 = summarize_objects(objects=var_2)
var_5 = search_object_by_name(query=""AdminUser"")
var_6 = log_user_activity(user_id=var_5, activity_description=""Checked deadline for work items and summarized them."")"
"['\n\ndef calculate_work_left(project_id):\n""""""\nCalculates the estimated amount of work left in a project\n\nParameters:\n project_id (str): The ID of the project to calculate work for\n\nReturns:\n float: Estimated hours of work left\n""""""\n', '\n\ndef list_completed_tasks_by_user(user_id):\n""""""\nLists all completed tasks for a specific user\n\nParameters:\n user_id (str): The ID of the user whose completed tasks need to be listed\n\nReturns:\n list: List of completed task IDs\n""""""\n', '\n\ndef batch_update_task_status(task_ids, new_status):\n""""""\nUpdates the status of multiple tasks in a batch operation\n\nParameters:\n task_ids (list): A list of task IDs whose status needs updating\n new_status (str): The new status to apply to the tasks\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef get_team_member_list(team_id):\n""""""\nRetrieves a list of team members for the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: List of team member IDs\n""""""\n', '\n\ndef fetch_users_from_group(group_id):\n""""""\nRetrieves a list of user IDs that belong to the specified group\n\nParameters:\n group_id (str): The ID of the group\n\nReturns:\n list: User IDs belonging to the group\n""""""\n', '\n\ndef calculate_estimated_effort(work_id):\n""""""\nCalculates the estimated effort required to complete a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n float: Estimated effort in hours\n""""""\n', '\n\ndef generate_project_summary(project_id):\n""""""\nGenerates a summary report for the specified project\n\nParameters:\n project_id (str): The ID of the project to summarize\n\nReturns:\n str: A summary report of the project\n""""""\n', '\n\ndef find_user_by_email(email):\n""""""\nFinds a user in the system by their email address\n\nParameters:\n email (str): The email address of the user to find\n\nReturns:\n str: ID of the user\n""""""\n', '\n\ndef check_ticket_status(ticket_id):\n""""""\nChecks the status of a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose status is to be checked\n\nReturns:\n str: The status of the ticket\n""""""\n', '\n\ndef generate_progress_report(project_id):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which to generate the report\n\nReturns:\n str: A string summary of the project\'s progress report\n""""""\n']","Calculate the estimated effort for work items owned by user ""TeamLead42"", list their completed tasks, and generate a progress report for project ""PRJ-9087"".","var_1 = find_user_by_email(email=""TeamLead42"")
var_2 = works_list(owned_by=[var_1])
var_3 = calculate_estimated_effort(work_id=var_2[0])
var_4 = list_completed_tasks_by_user(user_id=var_1)
var_5 = generate_progress_report(project_id=""PRJ-9087"")"
"['\n\ndef calculate_work_left(project_id):\n""""""\nCalculates the estimated amount of work left in a project\n\nParameters:\n project_id (str): The ID of the project to calculate work for\n\nReturns:\n float: Estimated hours of work left\n""""""\n', '\n\ndef mark_ticket_as_resolved(ticket_id):\n""""""\nMarks a ticket as resolved in the system\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked as resolved\n\nReturns:\n bool: True if the ticket was marked as resolved, False otherwise\n""""""\n', '\n\ndef batch_update_task_status(task_ids, new_status):\n""""""\nUpdates the status of multiple tasks in a batch operation\n\nParameters:\n task_ids (list): A list of task IDs whose status needs updating\n new_status (str): The new status to apply to the tasks\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef update_stage_of_work_item(work_item_id, new_stage):\n""""""\nUpdates the stage of a work item\n\nParameters:\n work_item_id (str): The ID of the work item to update\n new_stage (str): The new stage to which the work item should be moved\n\nReturns:\n bool: True if the stage is successfully updated, False otherwise\n""""""', '\n\ndef list_user_permissions(user_id):\n""""""\nLists all the permissions that a user has within the system\n\nParameters:\n user_id (str): The ID of the user for whom permissions are being listed\n\nReturns:\n list: A list of permissions that the user possesses\n""""""\n', '\n\ndef generate_report_for_sprint(sprint_id):\n""""""\nGenerates a performance report for a specified sprint\n\nParameters:\n sprint_id (str): The ID of the sprint for which to generate the report\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef generate_work_report(work_ids):\n""""""\nGenerates a report for the given work items.\n\nParameters:\n work_ids (list): A list of work item IDs for report generation\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef calculate_user_workload(user_id):\n""""""\nCalculates the workload of a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be calculated\n\nReturns:\n float: The calculated workload value\n""""""\n', '\n\ndef generate_report_from_template(report_template_id, data_source_id):\n""""""\nGenerates a report based on a specified template and data source\n\nParameters:\n report_template_id (str): The ID of the report template to use\n data_source_id (str): The ID of the data source\n\nReturns:\n str: Generated report\n""""""\n', '\n\ndef generate_summary_report(object_ids):\n""""""\nGenerates a summary report for the specified objects\n\nParameters:\n object_ids (list): A list of object IDs\n\nReturns:\n str: The ID of the generated report\n""""""\n']","Calculate the estimated hours of work left for project ""PRJ-789"", generate a performance report for the current sprint, and summarize the work items that are of type ""task"" with a severity of ""high"".","var_1 = calculate_work_left(project_id=""PRJ-789"")
var_2 = get_sprint_id()
var_3 = generate_report_for_sprint(sprint_id=var_2)
var_4 = works_list(type=[""task""], ticket.severity=[""high""])
var_5 = summarize_objects(objects=var_4)"
"['\n\ndef check_availability_of_part(part_id):\n""""""\nChecks if a specific part is available in inventory\n\nParameters:\n part_id (str): The ID of the part to check for availability\n\nReturns:\n bool: True if the part is available, False otherwise\n""""""\n', '\n\ndef schedule_meeting_with_user(user_id, duration=30, urgent=False):\n""""""\nSchedules a meeting with a specified user\n\nParameters:\n user_id (str): The ID of the user with whom to schedule a meeting\n duration (int): Duration of the meeting in minutes, default is \'30\'\n urgent (bool): Whether the meeting is urgent, defaults to False\n\nReturns:\n str: The ID of the scheduled meeting\n""""""\n', '\n\ndef generate_work_report(work_ids):\n""""""\nGenerates a report for the given work items.\n\nParameters:\n work_ids (list): A list of work item IDs for report generation\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef calculate_estimated_completion(project_id):\n""""""\nCalculates the estimated completion date for a project based on current progress\n\nParameters:\n project_id (str): The ID of the project to be analyzed\n\nReturns:\n str: Estimated date of completion\n""""""\n', '\n\ndef update_stage_of_work_item(work_item_id, new_stage):\n""""""\nUpdates the stage of a work item\n\nParameters:\n work_item_id (str): The ID of the work item to update\n new_stage (str): The new stage to which the work item should be moved\n\nReturns:\n bool: True if the stage is successfully updated, False otherwise\n""""""', '\n\ndef generate_report_from_template(report_template_id, data_source_id):\n""""""\nGenerates a report based on a specified template and data source\n\nParameters:\n report_template_id (str): The ID of the report template to use\n data_source_id (str): The ID of the data source\n\nReturns:\n str: Generated report\n""""""\n', '\n\ndef merge_duplicate_work_items(primary_work_id, duplicate_work_ids):\n""""""\nMerges duplicate work items into the primary work item\n\nParameters:\n primary_work_id (str): The ID of the primary work item\n duplicate_work_ids (list): List of IDs of duplicate work items to be merged\n\nReturns:\n bool: True if merge was successful, otherwise False\n""""""\n', 'def fetch_user_tasks(user_id, include_completed=False):\n""""""\nRetrieves a list of tasks assigned to a user\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be fetched\n include_completed (bool): Whether to include completed tasks in the list\n\nReturns:\n list: List of tasks assigned to the user\n""""""\n', '\n\ndef calculate_estimate_completion_time(work_id):\n""""""\nCalculates the estimated completion time for the specified work item\n\nParameters:\n work_id (str): The ID of the work item to calculate the estimated time\n\nReturns:\n float: Estimated completion time in hours\n""""""\n', '\n\ndef estimate_task_duration(task_id, complexity_level):\n""""""\nEstimates the duration needed to complete a task based on its complexity level\n\nParameters:\n task_id (str): The ID of the task\n complexity_level (str): The complexity level of the task. Allowed values: \'low\', \'medium\', \'high\'\n\nReturns:\n float: Estimated duration in hours\n""""""\n']","Check the availability of part ""ENG-456"" and schedule an urgent meeting with the user ""InventoryManager"" to discuss restocking.","var_1 = check_availability_of_part(part_id=""ENG-456"")
var_2 = search_object_by_name(query=""InventoryManager"")
var_3 = schedule_meeting_with_user(user_id=var_2, urgent=True)"
"['\n\ndef check_inventory_availability(part_id, minimum_quantity=1):\n""""""\nChecks if the inventory has the specified part in at least the minimum quantity\n\nParameters:\n part_id (str): The ID of the part to check in inventory\n minimum_quantity (int): The minimum quantity to check for; defaults to 1\n\nReturns:\n bool: True if the minimum quantity is available; otherwise False\n""""""\n', '\n\ndef log_system_event(event_type, description, user_id=None):\n""""""\nLogs an event in the system with an optional user ID associated with it\n\nParameters:\n event_type (str): The type of event to log\n description (str): A brief description of the event\n user_id (str): The ID of the user involved in the event, if applicable\n\nReturns:\n str: The ID of the logged event\n""""""\n', 'def filter_projects_by_status(project_ids, status=""active""):\n""""""\nFilters a list of project IDs by their status\n\nParameters:\n project_ids (list): A list of project IDs to filter\n status (str): The status to filter by, default is \'active\'\n\nReturns:\n list: Project IDs matching the status\n""""""\n', '\n\ndef calculate_progress(project_id):\n""""""\nCalculates the overall progress of a given project as a percentage\n\nParameters:\n project_id (str): The ID of the project for which progress is being calculated\n\nReturns:\n float: The progress percentage of the project\n""""""\n', '\n\ndef validate_user_permissions(user_id, required_permissions):\n""""""\nChecks if the user has the specified permissions\n\nParameters:\n user_id (str): The ID of the user whose permissions need to be checked\n required_permissions (list): A list of permissions to check against the user\'s permissions\n\nReturns:\n bool: True if the user has all the required permissions, False otherwise\n""""""\n', '\n\ndef validate_work_item_status(work_item_id, status_options):\n""""""\nChecks if the given work item has a status that is among the provided options\n\nParameters:\n work_item_id (str): The ID of the work item to check\n status_options (list): A list of valid status options\n\nReturns:\n bool: True if status is valid, False otherwise\n""""""\n', '\n\ndef filter_tickets_by_date(ticket_ids, start_date, end_date=None):\n""""""\nFilters a list of ticket IDs based on a date range\n\nParameters:\n ticket_ids (list): A list of ticket IDs to filter\n start_date (str): The start date for the range\n end_date (str, optional): The end date for the range, defaults to None\n\nReturns:\n list: Filtered list of ticket IDs\n""""""\n', '\n\ndef filter_objects_by_type(object_ids, object_type):\n""""""\nFilters a list of objects based on their type\n\nParameters:\n object_ids (list): A list of object IDs to filter\n object_type (str): The type of objects to filter for\n\nReturns:\n list: Filtered object IDs matching the specified type\n""""""\n', '\n\ndef get_project_timeline(project_id):\n""""""\nRetrieves the timeline and key milestones of a project\n\nParameters:\n project_id (str): The ID of the project for which the timeline is requested\n\nReturns:\n list: Key milestones and dates for the project timeline\n""""""\n', '\n\ndef get_object_history(object_id):\n""""""\nRetrieves the change history of a specified object\n\nParameters:\n object_id (str): The ID of the object for which history is requested\n\nReturns:\n list: A list of changes made to the object\n""""""\n']","Check if inventory has at least 10 units of part ""ABC-123"", log the event, and return a list of work items related to that part if available.","var_1 = check_inventory_availability(part_id=""ABC-123"", minimum_quantity=10)
var_2 = log_system_event(event_type=""inventory_check"", description=""Checked inventory for part ABC-123, minimum quantity 10"", user_id=None)
var_3 = works_list(applies_to_part=[""ABC-123""])"
"['\n\ndef check_ticket_status(ticket_id):\n""""""\nChecks the status of a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose status is to be checked\n\nReturns:\n str: The status of the ticket\n""""""\n', '\n\ndef validate_data_integrity(data_point_ids):\n""""""\nChecks the integrity of a list of data points in the system\n\nParameters:\n data_point_ids (list): List of data point IDs to validate\n\nReturns:\n list: Validation results with status (True or False) for each data point\n""""""\n', '\n\ndef calculate_work_item_duration(work_id):\n""""""\nCalculates the total time taken to complete a work item\n\nParameters:\n work_id (str): The ID of the work item for which duration is to be calculated\n\nReturns:\n float: The total duration in hours\n""""""\n', '\n\ndef generate_report_data(report_type, data_set_id):\n""""""\nGenerates report data based on the provided report type and data set\n\nParameters:\n report_type (str): The type of report to generate\n data_set_id (str): The ID of the data set to be used for the report\n\nReturns:\n str: A report data string or ID depending on internal implementation\n""""""\n', '\n\ndef calculate_work_left(project_id):\n""""""\nCalculates the estimated amount of work left in a project\n\nParameters:\n project_id (str): The ID of the project to calculate work for\n\nReturns:\n float: Estimated hours of work left\n""""""\n', '\n\ndef list_department_members(department_id):\n""""""\nReturns a list of user IDs for all members within a specified department\n\nParameters:\n department_id (str): The ID of the department to list members for\n\nReturns:\n list: User IDs of all the members in the department\n""""""\n', '\n\ndef estimate_completion_time(task_id):\n""""""\nEstimates the completion time for a given task\n\nParameters:\n task_id (str): The ID of the task for which to estimate completion time\n\nReturns:\n float: The estimated number of hours to complete the task\n""""""\n', '\n\ndef merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):\n""""""\nMerges duplicate tickets into a primary ticket\n\nParameters:\n primary_ticket_id (str): The ID of the primary ticket that remains\n duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary\n\nReturns:\n None\n""""""\n', 'def retrieve_sprint_workload(sprint_id):\n""""""\nCalculates the total workload for a given sprint based on the work items associated with it\n\nParameters:\n sprint_id (str): The ID of the sprint for workload calculation\n\nReturns:\n float: Total workload in hours\n""""""\n', '\n\ndef list_completed_items_by_user(user_id):\n""""""\nLists items that have been completed by the given user\n\nParameters:\n user_id (str): The ID of the user whose completed items are being requested\n\nReturns:\n list: Completed items by the user\n""""""\n']","Check the status of ticket ""TICKET-001"", then find and summarize any similar work items.","var_1 = check_ticket_status(ticket_id=""TICKET-001"")
var_2 = get_similar_work_items(work_id=""TICKET-001"")
var_3 = summarize_objects(objects=var_2)"
"['\n\ndef create_new_ticket(title, description, reported_by):\n""""""\nCreates a new ticket in the system with the given details\n\nParameters:\n title (str): The title of the new ticket\n description (str): A detailed description of the issue or request\n reported_by (str): The ID of the user reporting the ticket\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', 'def assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task is assigned\n\nReturns:\n None\n""""""\n', '\n\ndef create_report_for_sprint(sprint_id, report_type):\n""""""\nGenerates a report for a given sprint\n\nParameters:\n sprint_id (str): The ID of the sprint\n report_type (str): The type of report to be generated\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef calculate_project_completion_rate(project_id):\n""""""\nCalculates the completion rate of tasks for a given project\n\nParameters:\n project_id (str): The ID of the project to calculate the completion rate for\n\nReturns:\n float: The completion rate as a percentage\n""""""\n', '\n\ndef validate_data_consistency(data_id, schema_id):\n""""""\nValidates if data conforms to a specified schema for consistency\n\nParameters:\n data_id (str): The ID of the data to be validated\n schema_id (str): The ID of the schema to validate the data against\n\nReturns:\n bool: True if data is consistent, False otherwise\n""""""\n', '\n\ndef filter_tasks_by_completion(task_ids, completed=True):\n""""""\nFilters the list of tasks by their completion status\n\nParameters:\n task_ids (list): List of task IDs to filter\n completed (bool): The completion status to filter by. Default is \'True\'\n\nReturns:\n list: List of task IDs that match the completion status\n""""""\n', '\n\ndef merge_duplicate_objects(primary_object_id, duplicate_object_id):\n""""""\nMerges a duplicate object into a primary object\n\nParameters:\n primary_object_id (str): The ID of the primary object\n duplicate_object_id (str): The ID of the duplicate object to be merged\n\nReturns:\n bool: True if the merge was successful, False otherwise\n""""""\n', '\n\ndef find_user_by_email(email):\n""""""\nFinds a user in the system by their email address\n\nParameters:\n email (str): The email address of the user to find\n\nReturns:\n str: ID of the user\n""""""\n', 'def filter_users_by_department(department_id=None, active_only=False):\n""""""\nFilters a list of users that belong to the specified department\n\nParameters:\n department_id (str): The ID of the department to filter users\n active_only (bool): Filters for only active users if set to True\n\nReturns:\n list: Users in the specified department\n""""""\n', '\n\ndef get_user_avatar(user_id):\n""""""\nRetrieves the avatar image URL for the specified user\n\nParameters:\n user_id (str): The ID of the user whose avatar is to be retrieved\n\nReturns:\n str: URL of the user\'s avatar image\n""""""\n']","Generate a report for the current sprint including all high-severity tickets, then assign the prioritized list to the user with the email ""tech.lead@company.com"".","var_1 = get_sprint_id()
var_2 = works_list(type=[""ticket""], ticket.severity=[""high""], limit=50)
var_3 = create_report_for_sprint(sprint_id=var_1, report_type=""high-severity-tickets"")
var_4 = prioritize_objects(objects=var_2)
var_5 = find_user_by_email(email=""tech.lead@company.com"")
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_1)
var_7 = assign_task_to_user(task_id=var_3, user_id=var_5)"
"['\n\ndef deactivate_user_account(user_id, reason):\n""""""\nDeactivates a user account for a specific reason\n\nParameters:\n user_id (str): The ID of the user whose account is to be deactivated\n reason (str): The reason for deactivating the account\n\nReturns:\n bool: True if the account was successfully deactivated; otherwise False\n""""""\n', '\n\ndef delete_objects_by_id(object_ids):\n""""""\nDeletes objects from the system based on their IDs\n\nParameters:\n object_ids (list): List of object IDs to delete\n\nReturns:\n bool: True if objects were successfully deleted, False otherwise\n""""""\n', '\n\ndef retrieve_user_permissions(user_id):\n""""""\nRetrieves the list of permissions for the specified user\n\nParameters:\n user_id (str): The ID of the user whose permissions are to be retrieved\n\nReturns:\n list: The list of permissions for the user\n""""""\n', '\n\ndef generate_progress_report(project_id):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which to generate the report\n\nReturns:\n str: A string summary of the project\'s progress report\n""""""\n', '\n\ndef estimate_task_duration(task_id, complexity_level):\n""""""\nEstimates the duration needed to complete a task based on its complexity level\n\nParameters:\n task_id (str): The ID of the task\n complexity_level (str): The complexity level of the task. Allowed values: \'low\', \'medium\', \'high\'\n\nReturns:\n float: Estimated duration in hours\n""""""\n', '\n\ndef archive_completed_tasks(project_id, completed_since):\n""""""\nArchives tasks that are completed within the given project since the specified time\n\nParameters:\n project_id (str): The ID of the project containing the tasks\n completed_since (str): Archive tasks completed after this timestamp\n\nReturns:\n int: Number of tasks archived\n""""""\n', '\n\ndef list_completed_items_by_user(user_id):\n""""""\nLists items that have been completed by the given user\n\nParameters:\n user_id (str): The ID of the user whose completed items are being requested\n\nReturns:\n list: Completed items by the user\n""""""\n', '\n\ndef filter_users_by_skill(skill_name, minimum_proficiency=3):\n""""""\nFilters users by a specific skill and its minimum proficiency level\n\nParameters:\n skill_name (str): The name of the skill to filter by\n minimum_proficiency (int): The minimum proficiency level a user should have in the skill\n\nReturns:\n list: A list of user IDs that match the criteria\n""""""\n', '\n\ndef archive_completed_work(work_ids):\n""""""\nArchives a list of completed work items\n\nParameters:\n work_ids (list): A list of work item IDs that have been completed and need to be archived\n\nReturns:\n int: The number of work items successfully archived\n""""""\n', '\n\ndef merge_duplicate_records(primary_record_id, duplicate_record_id):\n""""""\nMerges a duplicate record into a primary record\n\nParameters:\n primary_record_id (str): The ID of the primary record to keep\n duplicate_record_id (str): The ID of the duplicate record to merge\n\nReturns:\n bool: True if the merge was successful; otherwise False\n""""""\n']","Archive completed tasks for project ""PRJ-789"" since ""2023-01-01"", retrieve permissions for user ""QAEngineer"", and summarize the archived tasks.","var_1 = archive_completed_tasks(project_id=""PRJ-789"", completed_since=""2023-01-01"")
var_2 = retrieve_user_permissions(user_id=""QAEngineer"")
var_3 = list_completed_items_by_user(user_id=""QAEngineer"")
var_4 = summarize_objects(objects=var_3)"
"['\n\ndef deactivate_user_account(user_id, reason):\n""""""\nDeactivates a user account for a specific reason\n\nParameters:\n user_id (str): The ID of the user whose account is to be deactivated\n reason (str): The reason for deactivating the account\n\nReturns:\n bool: True if the account was successfully deactivated; otherwise False\n""""""\n', '\n\ndef filter_projects_by_category(category_id, active_only=True):\n""""""\nFilters projects by their category and returns a list of project IDs\n\nParameters:\n category_id (str): The ID of the category to filter projects by\n active_only (bool): Whether to return only active projects\n\nReturns:\n list: List of project IDs matching the category filter\n""""""\n', '\n\ndef get_work_item_history(work_id):\n""""""\nRetrieves the history of changes for a given work item\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n list: A chronological list of changes made to the work item\n""""""\n', '\n\ndef log_system_activity(activity_description, user_id=None):\n""""""\nLogs a system activity with an optional user ID\n\nParameters:\n activity_description (str): A brief description of the activity being logged\n user_id (str, optional): The ID of the user associated with the activity; defaults to None\n\nReturns:\n bool: True if the activity was logged successfully; otherwise False\n""""""\n', '\n\ndef get_project_timeline(project_id):\n""""""\nRetrieves the timeline and key milestones of a project\n\nParameters:\n project_id (str): The ID of the project for which the timeline is requested\n\nReturns:\n list: Key milestones and dates for the project timeline\n""""""\n', '\n\ndef allocate_resources_to_project(project_id, resource_ids):\n""""""\nAllocates specified resources to a project\n\nParameters:\n project_id (str): The ID of the project to which resources are allocated\n resource_ids (list): A list of resource IDs to allocate to the project\n\nReturns:\n bool: True if resources could be allocated, False otherwise\n""""""\n', '\n\ndef generate_work_report(work_ids):\n""""""\nGenerates a report for the given work items.\n\nParameters:\n work_ids (list): A list of work item IDs for report generation\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef track_project_completion(project_id):\n""""""\nTracks the completion percentage of a project based on completed tasks\n\nParameters:\n project_id (str): The ID of the project to track\n\nReturns:\n float: Percentage of the project completed\n""""""\n', '\n\ndef generate_unique_identifier(prefix, use_timestamp=True):\n""""""\nGenerates a unique identifier with an optional timestamp\n\nParameters:\n prefix (str): A prefix for the identifier\n use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True\n\nReturns:\n str: The generated unique identifier\n""""""\n\n```', '\n\ndef merge_duplicate_work_items(primary_work_id, duplicate_work_ids):\n""""""\nMerges duplicate work items into the primary work item\n\nParameters:\n primary_work_id (str): The ID of the primary work item\n duplicate_work_ids (list): List of IDs of duplicate work items to be merged\n\nReturns:\n bool: True if merge was successful, otherwise False\n""""""\n']","Retrieve the history of changes for the fisrt work item with severity ""high"" and generate a report for them.","var_1 = works_list(ticket.severity=[""high""])
var_2 = get_work_item_history(work_id=var_1[0])
var_3 = generate_work_report(work_ids=var_1)"
"['\n\ndef estimate_task_duration(task_id, complexity_level):\n""""""\nEstimates the duration needed to complete a task based on its complexity level\n\nParameters:\n task_id (str): The ID of the task\n complexity_level (str): The complexity level of the task. Allowed values: \'low\', \'medium\', \'high\'\n\nReturns:\n float: Estimated duration in hours\n""""""\n', '\n\ndef calculate_project_completion_rate(project_id):\n""""""\nCalculates the completion rate of tasks for a given project\n\nParameters:\n project_id (str): The ID of the project to calculate the completion rate for\n\nReturns:\n float: The completion rate as a percentage\n""""""\n', '\n\ndef get_task_dependencies(task_id):\n""""""\nReturns a list of task IDs that are dependencies for the given task\n\nParameters:\n task_id (str): The ID of the task for which dependencies are requested\n\nReturns:\n list: Dependency task IDs\n""""""\n', '\n\ndef assign_tasks_to_employee(task_ids, employee_id):\n""""""\nAssigns a list of tasks to the specified employee\n\nParameters:\n task_ids (list): A list of task IDs to be assigned\n employee_id (str): The ID of the employee to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment was successful, False otherwise\n""""""\n', '\n\ndef mark_task_as_completed(task_id):\n""""""\nMarks a task as completed in the system.\n\nParameters:\n task_id (str): The ID of the task to be marked as complete\n\nReturns:\n bool: True if marked successfully, False otherwise\n""""""\n', '\n\ndef validate_work_item_status(work_item_id, status_options):\n""""""\nChecks if the given work item has a status that is among the provided options\n\nParameters:\n work_item_id (str): The ID of the work item to check\n status_options (list): A list of valid status options\n\nReturns:\n bool: True if status is valid, False otherwise\n""""""\n', '\n\ndef batch_update_user_roles(user_ids, new_role):\n""""""\nUpdates the roles for a batch of users to a new role\n\nParameters:\n user_ids (list): List of user IDs whose roles should be updated\n new_role (str): The new role to assign\n\nReturns:\n int: Number of users successfully updated\n""""""\n', '\n\ndef estimate_completion_time(task_id):\n""""""\nEstimates the completion time for a given task\n\nParameters:\n task_id (str): The ID of the task for which to estimate completion time\n\nReturns:\n float: The estimated number of hours to complete the task\n""""""\n', '\n\ndef calculate_expense_totals(expense_ids):\n""""""\nCalculates the total amount from a list of expense IDs\n\nParameters:\n expense_ids (list): List of expense IDs to calculate the total amount\n\nReturns:\n float: The total amount of the expenses\n""""""\n', 'def update_issue_status(issue_id, new_status):\n""""""\nUpdates the status of an issue\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n']","Estimate the duration for task ""TASK-321"" with high complexity, then assign it to employee ""EMP234"" and calculate the project completion rate for project ""PRJ-456"".","var_1 = estimate_task_duration(task_id=""TASK-321"", complexity_level=""high"")
var_2 = assign_tasks_to_employee(task_ids=[""TASK-321""], employee_id=""EMP234"")
var_3 = calculate_project_completion_rate(project_id=""PRJ-456"")"
"['\n\ndef estimate_time_for_task(task_id, estimation_hours):\n""""""\nUpdates a task with a time estimation\n\nParameters:\n task_id (str): The ID of the task to be updated with an estimated time\n estimation_hours (float): The estimated time in hours to complete the task\n\nReturns:\n None\n""""""\n', '\n\ndef retrieve_user_contact_info(user_id):\n""""""\nRetrieves the contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact info is requested\n\nReturns:\n str: Contact information of the user\n""""""\n', '\n\ndef update_ticket_status(ticket_id, new_status):\n""""""\nUpdates the status of a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket to be updated\n new_status (str): The new status to update the ticket with\n\nReturns:\n bool: True if the update was successful, otherwise False\n""""""\n', '\n\ndef update_contact_information(contact_id, new_phone=None, new_email=None):\n""""""\nUpdates the contact information with new provided phone number or email\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_phone (str): The new phone number for the contact, default is \'None\'\n new_email (str): The new email address for the contact, default is \'None\'\n\nReturns:\n bool: Status of the update operation\n""""""\n', '\n\ndef list_user_skills(user_id):\n""""""\nLists the skills associated with the specified user\n\nParameters:\n user_id (str): The ID of the user whose skills are being queried\n\nReturns:\n list: The skills of the user\n""""""\n', '\n\ndef generate_work_report(work_ids):\n""""""\nGenerates a report for the given work items.\n\nParameters:\n work_ids (list): A list of work item IDs for report generation\n\nReturns:\n str: The ID of the generated report\n""""""\n', 'def retrieve_sprint_workload(sprint_id):\n""""""\nCalculates the total workload for a given sprint based on the work items associated with it\n\nParameters:\n sprint_id (str): The ID of the sprint for workload calculation\n\nReturns:\n float: Total workload in hours\n""""""\n', '\n\ndef link_related_objects(object_id, related_object_id):\n""""""\nCreates a link between two related objects in the system\n\nParameters:\n object_id (str): The ID of the primary object\n related_object_id (str): The ID of the object to relate to the primary\n\nReturns:\n bool: True if the objects were successfully linked, False otherwise\n""""""\n', '\n\ndef list_recent_activities(user_id, limit=10):\n""""""\nLists the most recent activities performed by a user\n\nParameters:\n user_id (str): The ID of the user whose activities are to be listed\n limit (int): The maximum number of recent activities to return\n\nReturns:\n list: Recent activities of the user\n""""""\n', 'def assign_issues_to_user(issue_ids, user_id):\n""""""\nAssigns a list of issues to the specified user\n\nParameters:\n issue_ids (list): A list of issue IDs that need to be assigned\n user_id (str): The user ID to whom the issues will be assigned\n\nReturns:\n None\n""""""\n']","Estimate time for task ""TASK-456"" with 3 hours, then retrieve and list the skills of the user ""User123"" who is assigned to it.","var_1 = estimate_time_for_task(task_id=""TASK-456"", estimation_hours=3.0)
var_2 = retrieve_user_contact_info(user_id=""User123"")
var_3 = list_user_skills(user_id=""User123"")"
"['\n\ndef extend_sprint_end_date(sprint_id, new_end_date):\n""""""\nExtends the end date of a current sprint to a new date\n\nParameters:\n sprint_id (str): The ID of the sprint to extend\n new_end_date (str): The new end date for the sprint in YYYY-MM-DD format\n\nReturns:\n bool: True if the sprint end date was extended, False otherwise\n""""""\n', '\n\ndef calculate_user_workload(user_id):\n""""""\nCalculates the workload of a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be calculated\n\nReturns:\n float: The calculated workload value\n""""""\n', '\n\ndef generate_summary_report(object_ids):\n""""""\nGenerates a summary report for the specified objects\n\nParameters:\n object_ids (list): A list of object IDs\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef filter_objects_by_type(object_ids, object_type):\n""""""\nFilters a list of objects based on their type\n\nParameters:\n object_ids (list): A list of object IDs to filter\n object_type (str): The type of objects to filter for\n\nReturns:\n list: Filtered object IDs matching the specified type\n""""""\n', '\n\ndef filter_records_by_date(record_ids, start_date, end_date):\n""""""\nFilters a list of record IDs based on a date range\n\nParameters:\n record_ids (list): List of record IDs to filter\n start_date (str): Start date for the filtering in \'YYYY-MM-DD\' format\n end_date (str): End date for the filtering in \'YYYY-MM-DD\' format\n\nReturns:\n list: Filtered record IDs\n""""""\n', '\n\ndef validate_project_completion(project_id):\n""""""\nValidates if all tasks within a project are completed\n\nParameters:\n project_id (str): The ID of the project to validate\n\nReturns:\n bool: True if completed, False otherwise\n""""""\n', '\n\ndef generate_project_summary(project_id):\n""""""\nGenerates a summary report for the specified project\n\nParameters:\n project_id (str): The ID of the project to summarize\n\nReturns:\n str: A summary report of the project\n""""""\n', '\n\ndef mark_ticket_as_resolved(ticket_id):\n""""""\nMarks a ticket as resolved in the system\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked as resolved\n\nReturns:\n bool: True if the ticket was marked as resolved, False otherwise\n""""""\n', 'def assign_ticket_to_user(ticket_id, user_id):\n""""""\nAssigns a specific ticket to a user\n\nParameters:\n ticket_id (str): The ID of the ticket to be assigned\n user_id (str): The ID of the user to whom the ticket will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n', '\n\ndef get_team_member_list(team_id):\n""""""\nRetrieves a list of team members for the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: List of team member IDs\n""""""\n']","Calculate the workload for user ""User123"", generate a summary report for their tasks, and extend the current sprint end date to ""2023-05-15"".","var_1 = calculate_user_workload(user_id=""User123"")
var_2 = works_list(owned_by=[""User123""], type=[""task""])
var_3 = generate_summary_report(object_ids=var_2)
var_4 = get_sprint_id()
var_5 = extend_sprint_end_date(sprint_id=var_4, new_end_date=""2023-05-15"")"
"['\n\ndef extract_keywords_from_text(text):\n""""""\nGiven a text, extracts and returns the main keywords\n\nParameters:\n text (str): The text from which keywords are to be extracted\n\nReturns:\n list: A list of extracted keywords\n""""""\n', '\n\ndef get_user_contact_info(user_id):\n""""""\nRetrieves contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact information is requested\n\nReturns:\n str: The contact information of the user\n""""""\n', '\n\ndef get_ticket_comments(ticket_id):\n""""""\nRetrieves the comments attached to a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose comments are being retrieved\n\nReturns:\n list: Comments associated with the ticket\n""""""\n', '\n\ndef allocate_resources_to_project(project_id, resource_ids):\n""""""\nAllocates specified resources to a project\n\nParameters:\n project_id (str): The ID of the project to which resources are allocated\n resource_ids (list): A list of resource IDs to allocate to the project\n\nReturns:\n bool: True if resources could be allocated, False otherwise\n""""""\n', '\n\ndef estimate_ticket_resolution_time(ticket_id):\n""""""\nEstimates the resolution time for a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket to estimate time for\n\nReturns:\n float: Estimated time in hours to resolve the ticket\n""""""\n', '\ndef update_user_ID(user_id, status):\n""""""\nUpdates the status of a user account in the system and returns the updated id\n\nParameters:\n user_id (str): The ID of the user whose status is to be updated\n status (str): The new status to apply to the user account\n\nReturns:\n str: updated User Id\n""""""\n', '\n\ndef remove_object_from_archive(object_id):\n""""""\nRemoves an object from the system archive, making it active again\n\nParameters:\n object_id (str): The ID of the object to be removed from the archive\n\nReturns:\n bool: True if the object was successfully removed, False otherwise\n""""""\n', '\n\ndef deactivate_user_account(user_id, reason):\n""""""\nDeactivates a user account for a specific reason\n\nParameters:\n user_id (str): The ID of the user whose account is to be deactivated\n reason (str): The reason for deactivating the account\n\nReturns:\n bool: True if the account was successfully deactivated; otherwise False\n""""""\n', '\n\ndef estimate_cost_for_work(work_id, cost_per_hour=100):\n""""""\nEstimates the cost for completing a work item based on a cost per hour rate\n\nParameters:\n work_id (str): The ID of the work item to estimate cost for\n cost_per_hour (float): The cost per hour. Default is \'100\'\n\nReturns:\n float: Estimated cost\n""""""', '\n\ndef toggle_feature_access(feature_id, user_id, enable_access):\n""""""\nToggles access to a specific feature for a user\n\nParameters:\n feature_id (str): The ID of the feature to toggle access\n user_id (str): The ID of the user whose access will be toggled\n enable_access (bool): \'True\' to enable access, \'False\' to disable\n\nReturns:\n bool: The resulting access status\n""""""\n']","Extract keywords from the comments on ticket ""TICKET-456"", then search for work items related to these keywords and summarize the findings.","var_1 = get_ticket_comments(ticket_id=""TICKET-456"")
var_2 = extract_keywords_from_text(text=var_1)
var_3 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=var_2)
var_4 = summarize_objects(objects=var_3)"
"['\n\ndef fetch_ticket_history(ticket_id, history_limit=10):\n""""""\nFetches the history of changes to a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket for which the history is requested\n history_limit (int): Maximum number of history entries to retrieve. The default is \'10\'\n\nReturns:\n list: A list of history records for the ticket\n""""""\n', '\n\ndef calculate_project_completion_rate(project_id):\n""""""\nCalculates the completion rate of tasks for a given project\n\nParameters:\n project_id (str): The ID of the project to calculate the completion rate for\n\nReturns:\n float: The completion rate as a percentage\n""""""\n', '\n\ndef generate_report_for_sprint(sprint_id):\n""""""\nGenerates a performance report for a specified sprint\n\nParameters:\n sprint_id (str): The ID of the sprint for which to generate the report\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef get_user_permissions(user_id):\n""""""\nReturns a list of permissions for a specified user ID\n\nParameters:\n user_id (str): The ID of the user whose permissions you want to retrieve\n\nReturns:\n list: User permissions\n""""""\n', '\n\ndef list_user_tasks(user_id, completed=False):\n""""""\nLists all tasks assigned to a user, optionally filtering for completed tasks\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be listed\n completed (bool): If True, only completed tasks are returned\n\nReturns:\n list: A list of tasks assigned to the user\n""""""\n', '\n\ndef log_system_activity(activity_description, user_id=None):\n""""""\nLogs a system activity with an optional user ID\n\nParameters:\n activity_description (str): A brief description of the activity being logged\n user_id (str, optional): The ID of the user associated with the activity; defaults to None\n\nReturns:\n bool: True if the activity was logged successfully; otherwise False\n""""""\n', 'def fetch_user_tasks(user_id, include_completed=False):\n""""""\nRetrieves a list of tasks assigned to a user\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be fetched\n include_completed (bool): Whether to include completed tasks in the list\n\nReturns:\n list: List of tasks assigned to the user\n""""""\n', '\n\ndef estimate_time_for_task(task_id, estimation_hours):\n""""""\nUpdates a task with a time estimation\n\nParameters:\n task_id (str): The ID of the task to be updated with an estimated time\n estimation_hours (float): The estimated time in hours to complete the task\n\nReturns:\n None\n""""""\n', '\n\ndef calculate_user_workload(user_id):\n""""""\nCalculates the workload of a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be calculated\n\nReturns:\n float: The calculated workload value\n""""""\n', 'def calculate_due_dates(work_item_ids, urgency_level):\n""""""\nCalculates the due dates for given work items based on their urgency\n\nParameters:\n work_item_ids (list): A list of work item IDs for which due dates are required\n urgency_level (str): The urgency level. Allowed values: \'high\', \'medium\', \'low\'\n\nReturns:\n list: Due dates for the specified work items\n""""""\n']","Fetch the history of ticket ""TICKET-001"", calculate the project completion rate for project ""PRJ-90210"", and then summarize the related work items.","var_1 = fetch_ticket_history(ticket_id=""TICKET-001"")
var_2 = calculate_project_completion_rate(project_id=""PRJ-90210"")
var_3 = works_list(type=[""ticket""], ticket.rev_org=[var_1])
var_4 = summarize_objects(objects=var_3)"
"['\n\ndef fetch_user_created_work(user_id, work_type=None):\n""""""\nRetrieves work items created by a specific user\n\nParameters:\n user_id (str): The ID of the user whose work items are to be retrieved\n work_type (list): Filters for work of the provided types, e.g., [\'issue\', \'ticket\']\n\nReturns:\n list: Work items created by the user\n""""""\n', '\n\ndef delete_objects_by_id(object_ids):\n""""""\nDeletes objects from the system based on their IDs\n\nParameters:\n object_ids (list): List of object IDs to delete\n\nReturns:\n bool: True if objects were successfully deleted, False otherwise\n""""""\n', '\n\ndef filter_contacts_by_organization(organization_id, active_only=True):\n""""""\nReturns a list of contacts associated with the specified organization, optionally filtering only active contacts\n\nParameters:\n organization_id (str): The ID of the organization to filter contacts\n active_only (bool): Flag to filter only active contacts, default value \'True\'\n\nReturns:\n list: Contacts associated with the organization\n""""""\n', '\n\ndef filter_work_by_date_range(start_date, end_date, work_type=None):\n""""""\nFilters work items based on a specific date range\n\nParameters:\n start_date (str): The start date for the filter range (format: YYYY-MM-DD)\n end_date (str): The end date for the filter range (format: YYYY-MM-DD)\n work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task\n\nReturns:\n list: Work items in the specified date range\n""""""\n', '\n\ndef mark_item_as_duplicated(work_item_id, duplicate_of_id):\n""""""\nMarks a work item as a duplicate of another\n\nParameters:\n work_item_id (str): The ID of the work item that is a duplicate\n duplicate_of_id (str): The ID of the work item of which it is a duplicate\n\nReturns:\n bool: True if the item is successfully marked, False otherwise\n""""""\n', '\n\ndef remove_user_from_project(user_id, project_id):\n""""""\nRemoves a user from a project\n\nParameters:\n user_id (str): The ID of the user to be removed\n project_id (str): The ID of the project from which the user is to be removed\n\nReturns:\n bool: True if the user is successfully removed, False otherwise\n""""""', '\n\ndef update_contact_information(contact_id, new_phone=None, new_email=None):\n""""""\nUpdates the contact information with new provided phone number or email\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_phone (str): The new phone number for the contact, default is \'None\'\n new_email (str): The new email address for the contact, default is \'None\'\n\nReturns:\n bool: Status of the update operation\n""""""\n', '\n\ndef get_user_contact_info(user_id):\n""""""\nRetrieves contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact information is requested\n\nReturns:\n str: The contact information of the user\n""""""\n', 'def filter_work_by_date_range(start_date, end_date, work_type=None):\n""""""\nFilters work items based on a given date range.\n\nParameters:\n start_date (str): The start date of the desired date range\n end_date (str): The end date of the desired date range\n work_type (list): Optional filter for type of work\n\nReturns:\n list: Work items within the specified date range\n""""""\n', '\n\ndef check_inventory_availability(part_id, minimum_quantity=1):\n""""""\nChecks if the inventory has the specified part in at least the minimum quantity\n\nParameters:\n part_id (str): The ID of the part to check in inventory\n minimum_quantity (int): The minimum quantity to check for; defaults to 1\n\nReturns:\n bool: True if the minimum quantity is available; otherwise False\n""""""\n']","Fetch work items created by user with ID ""USR-789"", filter for those of type ""issue"", and check if the inventory has at least 10 parts ""PART-456"" available. If so, mark the first work item as a duplicate of ""ISSUE-999"".","var_1 = fetch_user_created_work(user_id=""USR-789"", work_type=[""issue""])
var_2 = check_inventory_availability(part_id=""PART-456"", minimum_quantity=10)
var_3 = mark_item_as_duplicated(work_item_id=var_1[0], duplicate_of_id=""ISSUE-999"")"
"['\n\ndef filter_users_by_skill(skill_name, minimum_proficiency=3):\n""""""\nFilters users by a specific skill and its minimum proficiency level\n\nParameters:\n skill_name (str): The name of the skill to filter by\n minimum_proficiency (int): The minimum proficiency level a user should have in the skill\n\nReturns:\n list: A list of user IDs that match the criteria\n""""""\n', '\n\ndef assign_tasks_to_user(task_ids, user_id):\n""""""\nAssigns a list of task IDs to the provided user\n\nParameters:\n task_ids (list): List of task IDs to be assigned\n user_id (str): The ID of the user to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n', '\n\ndef validate_work_item_completeness(work_id):\n""""""\nChecks if a work item has all necessary information completed\n\nParameters:\n work_id (str): The ID of the work item to check\n\nReturns:\n bool: True if the work item is complete, False if it lacks information\n""""""\n', '\n\ndef create_report_for_sprint(sprint_id, report_type):\n""""""\nGenerates a report for a given sprint\n\nParameters:\n sprint_id (str): The ID of the sprint\n report_type (str): The type of report to be generated\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef mark_ticket_as_resolved(ticket_id):\n""""""\nMarks a ticket as resolved in the system\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked as resolved\n\nReturns:\n bool: True if the ticket was marked as resolved, False otherwise\n""""""\n', '\n\ndef calculate_estimated_completion(project_id):\n""""""\nCalculates the estimated completion date for a project based on current progress\n\nParameters:\n project_id (str): The ID of the project to be analyzed\n\nReturns:\n str: Estimated date of completion\n""""""\n', '\n\ndef merge_duplicate_tasks(primary_task_id, duplicate_task_ids):\n""""""\nMerges duplicate tasks into a primary task\n\nParameters:\n primary_task_id (str): The ID of the primary task which remains after the merge\n duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged\n\nReturns:\n None\n""""""\n', '\n\ndef calculate_progress(project_id):\n""""""\nCalculates the overall progress of a given project as a percentage\n\nParameters:\n project_id (str): The ID of the project for which progress is being calculated\n\nReturns:\n float: The progress percentage of the project\n""""""\n', '\n\ndef calculate_work_left(project_id):\n""""""\nCalculates the estimated amount of work left in a project\n\nParameters:\n project_id (str): The ID of the project to calculate work for\n\nReturns:\n float: Estimated hours of work left\n""""""\n', '\n\ndef get_work_item_history(work_id):\n""""""\nRetrieves the history of changes for a given work item\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n list: A chronological list of changes made to the work item\n""""""\n']","Retrieve a list of users skilled in ""Python"" with a proficiency of 4, assign them tasks related to the ""Backend"" project, and calculate the estimated completion date for the project.","var_1 = filter_users_by_skill(skill_name=""Python"", minimum_proficiency=4)
var_2 = search_object_by_name(query=""Backend"")
var_3 = works_list(type=[""task""], applies_to_part=[var_2])
var_4 = assign_tasks_to_user(task_ids=var_3, user_id=var_1)
var_5 = calculate_estimated_completion(project_id=var_2)"
"['\n\ndef filter_users_by_skill(skill_name, minimum_proficiency=3):\n""""""\nFilters users by a specific skill and its minimum proficiency level\n\nParameters:\n skill_name (str): The name of the skill to filter by\n minimum_proficiency (int): The minimum proficiency level a user should have in the skill\n\nReturns:\n list: A list of user IDs that match the criteria\n""""""\n', '\n\ndef remove_object_by_id(object_id):\n""""""\nRemoves an object from the system by its ID\n\nParameters:\n object_id (str): The ID of the object to remove\n\nReturns:\n None\n""""""\n', '\n\ndef calculate_work_left(project_id):\n""""""\nCalculates the estimated amount of work left in a project\n\nParameters:\n project_id (str): The ID of the project to calculate work for\n\nReturns:\n float: Estimated hours of work left\n""""""\n', '\n\ndef get_user_contact_info(user_id):\n""""""\nRetrieves contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact information is requested\n\nReturns:\n str: The contact information of the user\n""""""\n', '\n\ndef merge_duplicate_tasks(primary_task_id, duplicate_task_ids):\n""""""\nMerges duplicate tasks into a primary task\n\nParameters:\n primary_task_id (str): The ID of the primary task which remains after the merge\n duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged\n\nReturns:\n None\n""""""\n', '\n\ndef get_work_item_history(work_id):\n""""""\nRetrieves the history of changes for a given work item\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n list: A chronological list of changes made to the work item\n""""""\n', '\n\ndef calculate_progress(project_id):\n""""""\nCalculates the overall progress of a given project as a percentage\n\nParameters:\n project_id (str): The ID of the project for which progress is being calculated\n\nReturns:\n float: The progress percentage of the project\n""""""\n', '\n\ndef calculate_project_completion_rate(project_id):\n""""""\nCalculates the completion rate of tasks for a given project\n\nParameters:\n project_id (str): The ID of the project to calculate the completion rate for\n\nReturns:\n float: The completion rate as a percentage\n""""""\n', '\n\ndef fetch_users_from_group(group_id):\n""""""\nRetrieves a list of user IDs that belong to the specified group\n\nParameters:\n group_id (str): The ID of the group\n\nReturns:\n list: User IDs belonging to the group\n""""""\n', '\n\ndef check_ticket_status(ticket_id):\n""""""\nChecks the status of a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose status is to be checked\n\nReturns:\n str: The status of the ticket\n""""""\n']","Filter users by the skill ""Python Programming"" with a minimum proficiency of 4, fetch their contact information, and then retrieve and summarize all work items created by these users.","var_1 = filter_users_by_skill(skill_name=""Python Programming"", minimum_proficiency=4)
var_2 = get_user_contact_info(user_id=var_1[0])
var_3 = works_list(created_by=var_1)
var_4 = summarize_objects(objects=var_3)"
"['\n\ndef find_team_members(team_id):\n""""""\nReturns a list of user IDs that are members of the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: User IDs of the team members\n""""""\n', '\n\ndef filter_users_by_skill(skill_name, minimum_proficiency=3):\n""""""\nFilters users by a specific skill and its minimum proficiency level\n\nParameters:\n skill_name (str): The name of the skill to filter by\n minimum_proficiency (int): The minimum proficiency level a user should have in the skill\n\nReturns:\n list: A list of user IDs that match the criteria\n""""""\n', '\n\ndef filter_tickets_by_date(ticket_ids, start_date, end_date=None):\n""""""\nFilters a list of ticket IDs based on a date range\n\nParameters:\n ticket_ids (list): A list of ticket IDs to filter\n start_date (str): The start date for the range\n end_date (str, optional): The end date for the range, defaults to None\n\nReturns:\n list: Filtered list of ticket IDs\n""""""\n', '\n\ndef link_related_objects(object_id, related_object_id):\n""""""\nCreates a link between two related objects in the system\n\nParameters:\n object_id (str): The ID of the primary object\n related_object_id (str): The ID of the object to relate to the primary\n\nReturns:\n bool: True if the objects were successfully linked, False otherwise\n""""""\n', '\n\ndef notify_user_of_overdue_tasks(user_id):\n""""""\nNotifies a user of any overdue tasks assigned to them\n\nParameters:\n user_id (str): The ID of the user to check for overdue tasks\n\nReturns:\n None\n""""""\n', 'def update_issue_status(issue_id, new_status):\n""""""\nUpdates the status of an issue\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef list_completed_tasks_by_user(user_id):\n""""""\nLists all completed tasks for a specific user\n\nParameters:\n user_id (str): The ID of the user whose completed tasks need to be listed\n\nReturns:\n list: List of completed task IDs\n""""""\n', '\n\ndef calculate_work_left(project_id):\n""""""\nCalculates the estimated amount of work left in a project\n\nParameters:\n project_id (str): The ID of the project to calculate work for\n\nReturns:\n float: Estimated hours of work left\n""""""\n', '\n\ndef merge_duplicate_work_items(primary_work_id, duplicate_work_ids):\n""""""\nMerges duplicate work items into the primary work item\n\nParameters:\n primary_work_id (str): The ID of the primary work item\n duplicate_work_ids (list): List of IDs of duplicate work items to be merged\n\nReturns:\n bool: True if merge was successful, otherwise False\n""""""\n', '\n\ndef estimate_completion_time(task_id):\n""""""\nEstimates the completion time for a given task\n\nParameters:\n task_id (str): The ID of the task for which to estimate completion time\n\nReturns:\n float: The estimated number of hours to complete the task\n""""""\n']","Filter users by the skill ""Project Management"" and for those with proficiency level 4 or higher, retrieve their completed tasks and summarize them.","var_1 = filter_users_by_skill(skill_name=""Project Management"", minimum_proficiency=4)
var_2 = list_completed_tasks_by_user(user_id=var_1[0])
var_3 = summarize_objects(objects=var_2)"
"['\n\ndef find_user_by_email(email):\n""""""\nFinds a user in the system by their email address\n\nParameters:\n email (str): The email address of the user to find\n\nReturns:\n str: ID of the user\n""""""\n', '\ndef update_user_ID(user_id, status):\n""""""\nUpdates the status of a user account in the system and returns the updated id\n\nParameters:\n user_id (str): The ID of the user whose status is to be updated\n status (str): The new status to apply to the user account\n\nReturns:\n str: updated User Id\n""""""\n', '\n\ndef remove_object_from_inventory(object_id):\n""""""\nRemoves an object from the inventory system based on the object ID\n\nParameters:\n object_id (str): The ID of the object to remove from inventory\n\nReturns:\n bool: True if the removal was successful, False otherwise\n""""""\n', 'def fetch_user_tasks(user_id, include_completed=False):\n""""""\nRetrieves a list of tasks assigned to a user\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be fetched\n include_completed (bool): Whether to include completed tasks in the list\n\nReturns:\n list: List of tasks assigned to the user\n""""""\n', '\n\ndef merge_duplicate_records(primary_record_id, duplicate_record_id):\n""""""\nMerges a duplicate record into a primary record\n\nParameters:\n primary_record_id (str): The ID of the primary record to keep\n duplicate_record_id (str): The ID of the duplicate record to merge\n\nReturns:\n bool: True if the merge was successful; otherwise False\n""""""\n', '\n\ndef validate_work_item_completeness(work_id):\n""""""\nChecks if a work item has all necessary information completed\n\nParameters:\n work_id (str): The ID of the work item to check\n\nReturns:\n bool: True if the work item is complete, False if it lacks information\n""""""\n', '\n\ndef update_contact_info(contact_id, new_email=None, new_phone=None):\n""""""\nUpdates the contact information for a given contact ID with new email and/or phone\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_email (str, optional): The new email address; defaults to None\n new_phone (str, optional): The new phone number; defaults to None\n\nReturns:\n bool: True if the update was successful; otherwise False\n""""""\n', '\n\ndef find_team_members(team_id):\n""""""\nReturns a list of user IDs that are members of the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: User IDs of the team members\n""""""\n', '\n\ndef generate_progress_report(project_id):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which to generate the report\n\nReturns:\n str: A string summary of the project\'s progress report\n""""""\n', '\n\ndef assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task will be assigned\n\nReturns:\n bool: True if assignment was successful, otherwise False\n""""""\n']","Find the user ID for ""TeamLead@example.com"", fetch their assigned tasks, including completed ones, and summarize the tasks for a progress report.","var_1 = find_user_by_email(email=""TeamLead@example.com"")
var_2 = fetch_user_tasks(user_id=var_1, include_completed=True)
var_3 = summarize_objects(objects=var_2)"
"['\n\ndef find_work_items_by_tag(work_type, tag):\n""""""\nFinds work items of a certain type with a given tag\n\nParameters:\n work_type (str): The type of the work items to filter by\n tag (str): The tag to filter the work items\n\nReturns:\n list: List of work items with the given tag\n""""""\n', '\n\ndef get_user_permissions(user_id):\n""""""\nReturns a list of permissions for a specified user ID\n\nParameters:\n user_id (str): The ID of the user whose permissions you want to retrieve\n\nReturns:\n list: User permissions\n""""""\n', '\n\ndef remove_work_item_from_sprint(work_id, sprint_id):\n""""""\nRemoves the specified work item from a sprint\n\nParameters:\n work_id (str): The ID of the work item to be removed\n sprint_id (str): The ID of the sprint from which to remove the work item\n\nReturns:\n bool: True if the removal was successful, False otherwise\n""""""\n', '\n\ndef list_user_tasks(user_id, completed=False):\n""""""\nLists all tasks assigned to a user, optionally filtering for completed tasks\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be listed\n completed (bool): If True, only completed tasks are returned\n\nReturns:\n list: A list of tasks assigned to the user\n""""""\n', '\n\ndef update_object_status(object_id, new_status, changed_by):\n""""""\nUpdates the status of an object and records the user that made the change\n\nParameters:\n object_id (str): The ID of the object for which the status is updated\n new_status (str): The new status for the object\n changed_by (str): The ID of the user who is changing the status\n\nReturns:\n None\n""""""\n', '\n\ndef filter_contacts_by_organization(organization_id, active_only=True):\n""""""\nReturns a list of contacts associated with the specified organization, optionally filtering only active contacts\n\nParameters:\n organization_id (str): The ID of the organization to filter contacts\n active_only (bool): Flag to filter only active contacts, default value \'True\'\n\nReturns:\n list: Contacts associated with the organization\n""""""\n', '\n\ndef update_work_item_due_date(work_item_id, due_date):\n""""""\nUpdates the due date for the specified work item\n\nParameters:\n work_item_id (str): The ID of the work item to be updated\n due_date (str): The new due date for the work item\n\nReturns:\n None: Indicates that the operation was executed without returning any value\n""""""\n', '\n\ndef calculate_user_workload(user_id):\n""""""\nCalculates the workload of a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be calculated\n\nReturns:\n float: The calculated workload value\n""""""\n', '\n\ndef estimate_task_duration(task_id, complexity_level):\n""""""\nEstimates the duration needed to complete a task based on its complexity level\n\nParameters:\n task_id (str): The ID of the task\n complexity_level (str): The complexity level of the task. Allowed values: \'low\', \'medium\', \'high\'\n\nReturns:\n float: Estimated duration in hours\n""""""\n', '\n\ndef list_recent_projects(user_id, days_back=30):\n""""""\nLists all projects a user has worked on in the past number of days\n\nParameters:\n user_id (str): The ID of the user\n days_back (int): The number of past days to look for projects. The default is \'30\'\n\nReturns:\n list: Project IDs that the user has worked on\n""""""\n']","Retrieve all tasks assigned to user ""ERP"" that are completed, calculate their workload, and then summarize the tasks.","
var_1 = search_object_by_name(query=""ERP"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = calculate_user_workload(user_id=var_1)
var_4 = summarize_objects(objects=var_2)"
"['\n\ndef find_work_items_by_tag(work_type, tag):\n""""""\nFinds work items of a certain type with a given tag\n\nParameters:\n work_type (str): The type of the work items to filter by\n tag (str): The tag to filter the work items\n\nReturns:\n list: List of work items with the given tag\n""""""\n', '\n\ndef merge_duplicate_work_items(primary_work_id, duplicate_work_ids):\n""""""\nMerges duplicate work items into the primary work item\n\nParameters:\n primary_work_id (str): The ID of the primary work item\n duplicate_work_ids (list): List of IDs of duplicate work items to be merged\n\nReturns:\n bool: True if merge was successful, otherwise False\n""""""\n', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):\n""""""\nMerges multiple notes into a single ticket note\n\nParameters:\n ticket_id (str): The ID of the ticket where the merged note will be added\n note_ids (list): List of note IDs that will be merged into the ticket\n updated_by (str): The ID of the user performing the merge\n\nReturns:\n str: ID of the updated ticket note\n""""""\n', '\n\ndef filter_records_by_date(record_ids, start_date, end_date):\n""""""\nFilters a list of record IDs based on a date range\n\nParameters:\n record_ids (list): List of record IDs to filter\n start_date (str): Start date for the filtering in \'YYYY-MM-DD\' format\n end_date (str): End date for the filtering in \'YYYY-MM-DD\' format\n\nReturns:\n list: Filtered record IDs\n""""""\n', '\n\ndef generate_progress_report(project_id, report_format=""summary""):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which the progress report is needed\n report_format (str): The format of the report; \'summary\' or \'detailed\'. The default is \'summary\'\n\nReturns:\n str: The generated progress report\n""""""\n', '\n\ndef archive_completed_work(work_ids):\n""""""\nArchives a list of completed work items\n\nParameters:\n work_ids (list): A list of work item IDs that have been completed and need to be archived\n\nReturns:\n int: The number of work items successfully archived\n""""""\n', '\n\ndef list_department_members(department_id):\n""""""\nReturns a list of user IDs for all members within a specified department\n\nParameters:\n department_id (str): The ID of the department to list members for\n\nReturns:\n list: User IDs of all the members in the department\n""""""\n', '\n\ndef reassign_work_item_owner(work_id, new_owner_id):\n""""""\nReassigns the owner of a work item to a new user\n\nParameters:\n work_id (str): The ID of the work item to be reassigned\n new_owner_id (str): The user ID of the new owner\n\nReturns:\n bool: True if reassignment is successful, False otherwise\n""""""\n', '\n\ndef filter_objects_by_type(object_ids, object_type):\n""""""\nFilters a list of objects based on their type\n\nParameters:\n object_ids (list): A list of object IDs to filter\n object_type (str): The type of objects to filter for\n\nReturns:\n list: Filtered object IDs matching the specified type\n""""""\n', '\n\ndef retrieve_document_by_keyword(keyword):\n""""""\nRetrieves a document ID containing the specified keyword\n\nParameters:\n keyword (str): The keyword to search for in the documents\n\nReturns:\n str: ID of the document containing the keyword\n""""""']","Find all tickets with severity ""blocker"" that are in the ""Development"" stage, merge any duplicates, and then generate a summary report.","
var_1 = works_list(type=[""ticket""], ticket.severity=[""blocker""], stage.name=[""Development""])
var_2 = prioritize_objects(objects=var_1)
var_3 = merge_duplicate_work_items(primary_work_id=var_2[0], duplicate_work_ids=var_2[1:])
var_4 = summarize_objects(objects=[var_2[0]])"
"['\n\ndef generate_progress_report(project_id):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which to generate the report\n\nReturns:\n str: A string summary of the project\'s progress report\n""""""\n', '\n\ndef check_object_permission(user_id, object_id):\n""""""\nChecks if a user has permission to access a specific object\n\nParameters:\n user_id (str): The ID of the user\n object_id (str): The ID of the object to check permission for\n\nReturns:\n bool: True if the user has permission, False otherwise\n""""""\n', 'def link_issues_to_project(issue_ids, project_id):\n""""""\nLinks the given issues to the specified project\n\nParameters:\n issue_ids (list): A list of issue IDs to be linked to the project\n project_id (str): The ID of the project to which the issues should be linked\n\nReturns:\n bool: Status of the linking action\n""""""\n', '\n\ndef update_object_status(object_id, new_status, changed_by):\n""""""\nUpdates the status of an object and records the user that made the change\n\nParameters:\n object_id (str): The ID of the object for which the status is updated\n new_status (str): The new status for the object\n changed_by (str): The ID of the user who is changing the status\n\nReturns:\n None\n""""""\n', '\n\ndef link_related_tickets(ticket_id, related_ids):\n""""""\nLinks tickets that are related to each other\n\nParameters:\n ticket_id (str): The ID of the ticket that will be linked with related tickets\n related_ids (list): List of IDs for tickets that are related to the original ticket\n\nReturns:\n bool: True if the linking is successful, False otherwise\n""""""\n', '\n\ndef retrieve_document_by_keyword(keyword):\n""""""\nRetrieves a document ID containing the specified keyword\n\nParameters:\n keyword (str): The keyword to search for in the documents\n\nReturns:\n str: ID of the document containing the keyword\n""""""', '\n\ndef batch_update_task_status(task_ids, new_status):\n""""""\nUpdates the status of multiple tasks in a batch operation\n\nParameters:\n task_ids (list): A list of task IDs whose status needs updating\n new_status (str): The new status to apply to the tasks\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef extract_keywords_from_text(text):\n""""""\nGiven a text, extracts and returns the main keywords\n\nParameters:\n text (str): The text from which keywords are to be extracted\n\nReturns:\n list: A list of extracted keywords\n""""""\n', '\n\ndef calculate_cost_of_tasks(task_ids):\n""""""\nCalculates the total cost for a list of task IDs\n\nParameters:\n task_ids (list): A list of task IDs to calculate cost for\n\nReturns:\n float: Total cost of the tasks\n""""""\n', '\n\ndef calculate_progress(project_id):\n""""""\nCalculates the overall progress of a given project as a percentage\n\nParameters:\n project_id (str): The ID of the project for which progress is being calculated\n\nReturns:\n float: The progress percentage of the project\n""""""\n']","Generate a progress report for project ""PRJ-009"" by summarizing all high severity tickets linked to it and calculating the total cost of associated tasks.","
var_1 = works_list(type=[""ticket""], ticket.severity=[""high""], issue.rev_orgs=[""PRJ-009""])
var_2 = summarize_objects(objects=var_1)
var_3 = calculate_cost_of_tasks(task_ids=var_1)
var_4 = generate_progress_report(project_id=""PRJ-009"")"
"['\n\ndef generate_progress_report(project_id):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which to generate the report\n\nReturns:\n str: A string summary of the project\'s progress report\n""""""\n', '\n\ndef fetch_user_created_work(user_id, work_type=None):\n""""""\nRetrieves work items created by a specific user\n\nParameters:\n user_id (str): The ID of the user whose work items are to be retrieved\n work_type (list): Filters for work of the provided types, e.g., [\'issue\', \'ticket\']\n\nReturns:\n list: Work items created by the user\n""""""\n', '\n\ndef validate_work_item_status(work_item_id, status_options):\n""""""\nChecks if the given work item has a status that is among the provided options\n\nParameters:\n work_item_id (str): The ID of the work item to check\n status_options (list): A list of valid status options\n\nReturns:\n bool: True if status is valid, False otherwise\n""""""\n', '\n\ndef validate_work_item_completeness(work_id):\n""""""\nChecks if a work item has all necessary information completed\n\nParameters:\n work_id (str): The ID of the work item to check\n\nReturns:\n bool: True if the work item is complete, False if it lacks information\n""""""\n', '\n\ndef update_contact_information(contact_id, new_phone=None, new_email=None):\n""""""\nUpdates the contact information with new provided phone number or email\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_phone (str): The new phone number for the contact, default is \'None\'\n new_email (str): The new email address for the contact, default is \'None\'\n\nReturns:\n bool: Status of the update operation\n""""""\n', '\n\ndef filter_objects_by_type(object_ids, object_type):\n""""""\nFilters a list of objects based on their type\n\nParameters:\n object_ids (list): A list of object IDs to filter\n object_type (str): The type of objects to filter for\n\nReturns:\n list: Filtered object IDs matching the specified type\n""""""\n', '\n\ndef get_work_item_history(work_id):\n""""""\nRetrieves the history of changes for a given work item\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n list: A chronological list of changes made to the work item\n""""""\n', '\n\ndef calculate_estimated_effort(work_id):\n""""""\nCalculates the estimated effort required to complete a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n float: Estimated effort in hours\n""""""\n', '\n\ndef validate_object_existence(object_id):\n""""""\nChecks if an object with the given ID exists in the system\n\nParameters:\n object_id (str): The ID of the object to check\n\nReturns:\n bool: True if the object exists, otherwise False\n""""""\n', '\n\ndef validate_data_consistency(data_id, schema_id):\n""""""\nValidates if data conforms to a specified schema for consistency\n\nParameters:\n data_id (str): The ID of the data to be validated\n schema_id (str): The ID of the schema to validate the data against\n\nReturns:\n bool: True if data is consistent, False otherwise\n""""""\n']","Retrieve the work items created by user ""MAY"" that are marked as ""blocker"" severity, summarize these items, and validate their completeness.","var_1 = search_object_by_name(query=""MAY"")
var_2 = works_list(created_by=[var_1], ticket.severity=[""blocker""], type=[""ticket"", ""issue"", ""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = validate_work_item_completeness(work_id=var_2[0])"
"['\n\ndef generate_progress_report(project_id):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which to generate the report\n\nReturns:\n str: A string summary of the project\'s progress report\n""""""\n', '\n\ndef merge_duplicate_objects(primary_object_id, duplicate_object_id):\n""""""\nMerges a duplicate object into a primary object\n\nParameters:\n primary_object_id (str): The ID of the primary object\n duplicate_object_id (str): The ID of the duplicate object to be merged\n\nReturns:\n bool: True if the merge was successful, False otherwise\n""""""\n', '\n\ndef check_object_permission(user_id, object_id):\n""""""\nChecks if a user has permission to access a specific object\n\nParameters:\n user_id (str): The ID of the user\n object_id (str): The ID of the object to check permission for\n\nReturns:\n bool: True if the user has permission, False otherwise\n""""""\n', '\n\ndef mark_ticket_for_review(ticket_id, reviewer_id):\n""""""\nMarks a ticket for review by a specific user\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked for review\n reviewer_id (str): The ID of the user who should review the ticket\n\nReturns:\n None\n""""""\n', '\n\ndef list_work_attachments(work_id):\n""""""\nLists all attachments associated with a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n list: Attachment file IDs\n""""""\n', '\n\ndef schedule_meeting_with_user(user_id, duration=30, urgent=False):\n""""""\nSchedules a meeting with a specified user\n\nParameters:\n user_id (str): The ID of the user with whom to schedule a meeting\n duration (int): Duration of the meeting in minutes, default is \'30\'\n urgent (bool): Whether the meeting is urgent, defaults to False\n\nReturns:\n str: The ID of the scheduled meeting\n""""""\n', '\n\ndef calculate_progress(project_id):\n""""""\nCalculates the overall progress of a given project as a percentage\n\nParameters:\n project_id (str): The ID of the project for which progress is being calculated\n\nReturns:\n float: The progress percentage of the project\n""""""\n', '\n\ndef generate_report_from_template(report_template_id, data_source_id):\n""""""\nGenerates a report based on a specified template and data source\n\nParameters:\n report_template_id (str): The ID of the report template to use\n data_source_id (str): The ID of the data source\n\nReturns:\n str: Generated report\n""""""\n', '\n\ndef update_work_item_status(work_item_id, new_status):\n""""""\nUpdates the status of a given work item\n\nParameters:\n work_item_id (str): The ID of the work item to be updated\n new_status (str): The new status to set for the work item\n""""""\n', '\n\ndef deactivate_user_account(user_id, reason):\n""""""\nDeactivates a user account for a specific reason\n\nParameters:\n user_id (str): The ID of the user whose account is to be deactivated\n reason (str): The reason for deactivating the account\n\nReturns:\n bool: True if the account was successfully deactivated; otherwise False\n""""""\n']","Generate a progress report for project ""PRJ-456"" and check if user ""AnalystAnna"" has permission to access it.","var_1 = generate_progress_report(project_id=""PRJ-456"")
var_2 = who_am_i()
var_3 = check_object_permission(user_id=""AnalystAnna"", object_id=var_1)"
"['\n\ndef generate_report_by_tag(tag_id, include_archived=False):\n""""""\nGenerates a report for all work items associated with the given tag\n\nParameters:\n tag_id (str): The ID of the tag used to filter work items\n include_archived (bool): Include archived work items if set to True\n\nReturns:\n list: Work items associated with the tag\n""""""\n', '\n\ndef deactivate_user_account(user_id, reason):\n""""""\nDeactivates a user account for a specific reason\n\nParameters:\n user_id (str): The ID of the user whose account is to be deactivated\n reason (str): The reason for deactivating the account\n\nReturns:\n bool: True if the account was successfully deactivated; otherwise False\n""""""\n', '\n\ndef generate_summary_report(object_ids):\n""""""\nGenerates a summary report for the specified objects\n\nParameters:\n object_ids (list): A list of object IDs\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef get_ticket_comments(ticket_id):\n""""""\nRetrieves the comments attached to a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose comments are being retrieved\n\nReturns:\n list: Comments associated with the ticket\n""""""\n', '\n\ndef log_user_activity(user_id, activity_description):\n""""""\nLogs a user\'s activity with a description\n\nParameters:\n user_id (str): The ID of the user whose activity is being logged\n activity_description (str): A description of the activity\n\nReturns:\n bool: True if the logging was successful, False otherwise\n""""""\n', '\n\ndef remove_object_from_sprint(object_id, sprint_id):\n""""""\nRemoves a specified object from a sprint and returns the new list\n\nParameters:\n object_id (str): The ID of the object to be removed\n sprint_id (str): The ID of the project from which the object should be removed\n\nReturns:\n list: Returns the updated list of sprint objects\n""""""\n', '\n\ndef retrieve_user_permissions(user_id):\n""""""\nRetrieves the list of permissions for the specified user\n\nParameters:\n user_id (str): The ID of the user whose permissions are to be retrieved\n\nReturns:\n list: The list of permissions for the user\n""""""\n', '\n\ndef calculate_project_completion_rate(project_id):\n""""""\nCalculates the completion rate of tasks for a given project\n\nParameters:\n project_id (str): The ID of the project to calculate the completion rate for\n\nReturns:\n float: The completion rate as a percentage\n""""""\n', '\n\ndef validate_project_completion(project_id):\n""""""\nValidates if all tasks within a project are completed\n\nParameters:\n project_id (str): The ID of the project to validate\n\nReturns:\n bool: True if completed, False otherwise\n""""""\n', '\n\ndef get_user_workload(user_id):\n""""""\nDetermines the current workload for a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be determined\n\nReturns:\n int: The number of tasks assigned to the user\n""""""\n']","Retrieve the comments from ticket ""TICKET-001"", generate a summary report for these comments, and then calculate the project completion rate for project ""PROJ-42"".","var_1 = get_ticket_comments(ticket_id=""TICKET-001"")
var_2 = generate_summary_report(object_ids=var_1)
var_3 = calculate_project_completion_rate(project_id=""PROJ-42"")"
"['\n\ndef generate_report_from_data(dataset_id, report_type=""summary""):\n""""""\nGenerates a specific type of report from a dataset\n\nParameters:\n dataset_id (str): The ID of the dataset from which to generate the report\n report_type (str): The type of report to generate, default is \'summary\'\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef calculate_work_item_duration(work_id):\n""""""\nCalculates the total time taken to complete a work item\n\nParameters:\n work_id (str): The ID of the work item for which duration is to be calculated\n\nReturns:\n float: The total duration in hours\n""""""\n', '\n\ndef estimate_completion_time(task_id):\n""""""\nEstimates the completion time for a given task\n\nParameters:\n task_id (str): The ID of the task for which to estimate completion time\n\nReturns:\n float: The estimated number of hours to complete the task\n""""""\n', '\n\ndef log_user_activity(user_id, activity_description):\n""""""\nLogs a user\'s activity with a description\n\nParameters:\n user_id (str): The ID of the user whose activity is being logged\n activity_description (str): A description of the activity\n\nReturns:\n bool: True if the logging was successful, False otherwise\n""""""\n', '\n\ndef estimate_cost_for_work(work_id, cost_per_hour=100):\n""""""\nEstimates the cost for completing a work item based on a cost per hour rate\n\nParameters:\n work_id (str): The ID of the work item to estimate cost for\n cost_per_hour (float): The cost per hour. Default is \'100\'\n\nReturns:\n float: Estimated cost\n""""""', '\n\ndef remove_object_by_id(object_id):\n""""""\nRemoves an object from the system by its ID\n\nParameters:\n object_id (str): The ID of the object to remove\n\nReturns:\n None\n""""""\n', '\n\ndef generate_progress_report(project_id, report_format=""summary""):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which the progress report is needed\n report_format (str): The format of the report; \'summary\' or \'detailed\'. The default is \'summary\'\n\nReturns:\n str: The generated progress report\n""""""\n', '\n\ndef filter_projects_by_category(category_id, active_only=True):\n""""""\nFilters projects by their category and returns a list of project IDs\n\nParameters:\n category_id (str): The ID of the category to filter projects by\n active_only (bool): Whether to return only active projects\n\nReturns:\n list: List of project IDs matching the category filter\n""""""\n', '\n\ndef generate_work_report(work_ids):\n""""""\nGenerates a report for the given work items.\n\nParameters:\n work_ids (list): A list of work item IDs for report generation\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef validate_work_item_status(work_item_id, status_options):\n""""""\nChecks if the given work item has a status that is among the provided options\n\nParameters:\n work_item_id (str): The ID of the work item to check\n status_options (list): A list of valid status options\n\nReturns:\n bool: True if status is valid, False otherwise\n""""""\n']","Estimate the completion time for work items owned by user ""EngineerEmma"" and generate a progress report for the current sprint.","var_1 = who_am_i()
var_2 = works_list(owned_by=[""EngineerEmma""], type=[""issue"", ""ticket"", ""task""])
var_3 = get_sprint_id()
var_4 = generate_progress_report(project_id=var_3)
var_5 = estimate_completion_time(task_id=var_2[0]) # Assuming var_2[0] is a task ID from the list of work items. If var_2 contains multiple items, similar lines would be added for each."
"['\n\ndef generate_report_from_template(report_template_id, data_source_id):\n""""""\nGenerates a report based on a specified template and data source\n\nParameters:\n report_template_id (str): The ID of the report template to use\n data_source_id (str): The ID of the data source\n\nReturns:\n str: Generated report\n""""""\n', '\n\ndef check_availability_of_part(part_id):\n""""""\nChecks if a specific part is available in inventory\n\nParameters:\n part_id (str): The ID of the part to check for availability\n\nReturns:\n bool: True if the part is available, False otherwise\n""""""\n', '\n\ndef validate_project_completion(project_id):\n""""""\nValidates if all tasks within a project are completed\n\nParameters:\n project_id (str): The ID of the project to validate\n\nReturns:\n bool: True if completed, False otherwise\n""""""\n', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):\n""""""\nMerges multiple notes into a single ticket note\n\nParameters:\n ticket_id (str): The ID of the ticket where the merged note will be added\n note_ids (list): List of note IDs that will be merged into the ticket\n updated_by (str): The ID of the user performing the merge\n\nReturns:\n str: ID of the updated ticket note\n""""""\n', 'def assign_tickets_to_user(ticket_ids, user_id):\n""""""\nAssigns a set of tickets to a specified user\n\nParameters:\n ticket_ids (list): A list of ticket IDs to be assigned\n user_id (str): The ID of the user to whom the tickets will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef mark_item_as_duplicated(work_item_id, duplicate_of_id):\n""""""\nMarks a work item as a duplicate of another\n\nParameters:\n work_item_id (str): The ID of the work item that is a duplicate\n duplicate_of_id (str): The ID of the work item of which it is a duplicate\n\nReturns:\n bool: True if the item is successfully marked, False otherwise\n""""""\n', '\n\ndef get_ticket_comments(ticket_id):\n""""""\nRetrieves the comments attached to a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose comments are being retrieved\n\nReturns:\n list: Comments associated with the ticket\n""""""\n', 'def assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task is assigned\n\nReturns:\n None\n""""""\n', '\n\ndef update_contact_info(contact_id, new_email=None, new_phone=None):\n""""""\nUpdates the contact information for a given contact ID with new email and/or phone\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_email (str, optional): The new email address; defaults to None\n new_phone (str, optional): The new phone number; defaults to None\n\nReturns:\n bool: True if the update was successful; otherwise False\n""""""\n', '\n\ndef retrieve_user_permissions(user_id):\n""""""\nRetrieves the list of permissions for the specified user\n\nParameters:\n user_id (str): The ID of the user whose permissions are to be retrieved\n\nReturns:\n list: The list of permissions for the user\n""""""\n']","Check the availability of part ""ENG-456"", validate the completion of project ""PRJ-789"", and then return a list of work items related to part ""ENG-456"" with the issue priority set to P2.","var_1 = check_availability_of_part(part_id=""ENG-456"")
var_2 = validate_project_completion(project_id=""PRJ-789"")
var_3 = works_list(applies_to_part=[""ENG-456""], issue.priority=[""p2""], type=[""issue""])"
"['\n\ndef generate_report_from_template(report_template_id, data_source_id):\n""""""\nGenerates a report based on a specified template and data source\n\nParameters:\n report_template_id (str): The ID of the report template to use\n data_source_id (str): The ID of the data source\n\nReturns:\n str: Generated report\n""""""\n', '\n\ndef filter_objects_by_type(object_ids, object_type):\n""""""\nFilters a list of objects based on their type\n\nParameters:\n object_ids (list): A list of object IDs to filter\n object_type (str): The type of objects to filter for\n\nReturns:\n list: Filtered object IDs matching the specified type\n""""""\n', '\n\ndef assign_tasks_to_user(task_ids, user_id):\n""""""\nAssigns a list of task IDs to the provided user\n\nParameters:\n task_ids (list): List of task IDs to be assigned\n user_id (str): The ID of the user to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n', '\n\ndef remove_object_from_sprint(object_id, sprint_id):\n""""""\nRemoves a specified object from a sprint and returns the new list\n\nParameters:\n object_id (str): The ID of the object to be removed\n sprint_id (str): The ID of the project from which the object should be removed\n\nReturns:\n list: Returns the updated list of sprint objects\n""""""\n', '\n\ndef find_team_members(team_id):\n""""""\nReturns a list of user IDs that are members of the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: User IDs of the team members\n""""""\n', '\n\ndef calculate_cost_of_tasks(task_ids):\n""""""\nCalculates the total cost for a list of task IDs\n\nParameters:\n task_ids (list): A list of task IDs to calculate cost for\n\nReturns:\n float: Total cost of the tasks\n""""""\n', '\n\ndef update_work_item_status(work_item_id, new_status):\n""""""\nUpdates the status of a given work item\n\nParameters:\n work_item_id (str): The ID of the work item to be updated\n new_status (str): The new status to set for the work item\n""""""\n', '\n\ndef generate_report_data(report_type, data_set_id):\n""""""\nGenerates report data based on the provided report type and data set\n\nParameters:\n report_type (str): The type of report to generate\n data_set_id (str): The ID of the data set to be used for the report\n\nReturns:\n str: A report data string or ID depending on internal implementation\n""""""\n', '\n\ndef update_contact_info(contact_id, new_email=None, new_phone=None):\n""""""\nUpdates the contact information for a given contact ID with new email and/or phone\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_email (str, optional): The new email address; defaults to None\n new_phone (str, optional): The new phone number; defaults to None\n\nReturns:\n bool: True if the update was successful; otherwise False\n""""""\n', '\n\ndef find_work_items_by_tag(work_type, tag):\n""""""\nFinds work items of a certain type with a given tag\n\nParameters:\n work_type (str): The type of the work items to filter by\n tag (str): The tag to filter the work items\n\nReturns:\n list: List of work items with the given tag\n""""""\n']","Retrieve the ID of the current sprint, filter all high severity tickets within it, and calculate the total cost.","var_1 = get_sprint_id()
var_2 = works_list(type=[""ticket""], ticket.severity=[""high""], stage.name=[var_1])
var_3 = filter_objects_by_type(object_ids=var_2, object_type=""ticket"")
var_4 = calculate_cost_of_tasks(task_ids=var_3)"
"['\n\ndef generate_unique_identifier(prefix, use_timestamp=True):\n""""""\nGenerates a unique identifier with an optional timestamp\n\nParameters:\n prefix (str): A prefix for the identifier\n use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True\n\nReturns:\n str: The generated unique identifier\n""""""\n\n```', '\n\ndef get_sprint_history(sprint_id):\n""""""\nRetrieves the change history of a sprint\n\nParameters:\n sprint_id (str): The ID of the ticket\n\nReturns:\n list: A list of changes made to the sprint\n""""""\n', 'def update_issue_status(issue_id, new_status):\n""""""\nUpdates the status of an issue\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef merge_duplicate_tasks(primary_task_id, duplicate_task_ids):\n""""""\nMerges duplicate tasks into a primary task\n\nParameters:\n primary_task_id (str): The ID of the primary task which remains after the merge\n duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged\n\nReturns:\n None\n""""""\n', '\n\ndef list_user_tasks(user_id, completed=False):\n""""""\nLists all tasks assigned to a user, optionally filtering for completed tasks\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be listed\n completed (bool): If True, only completed tasks are returned\n\nReturns:\n list: A list of tasks assigned to the user\n""""""\n', '\n\ndef log_user_activity(user_id, activity_description):\n""""""\nLogs a user\'s activity with a description\n\nParameters:\n user_id (str): The ID of the user whose activity is being logged\n activity_description (str): A description of the activity\n\nReturns:\n bool: True if the logging was successful, False otherwise\n""""""\n', '\n\ndef archive_completed_tasks(project_id, completed_since):\n""""""\nArchives tasks that are completed within the given project since the specified time\n\nParameters:\n project_id (str): The ID of the project containing the tasks\n completed_since (str): Archive tasks completed after this timestamp\n\nReturns:\n int: Number of tasks archived\n""""""\n', '\n\ndef calculate_expense_totals(expense_ids):\n""""""\nCalculates the total amount from a list of expense IDs\n\nParameters:\n expense_ids (list): List of expense IDs to calculate the total amount\n\nReturns:\n float: The total amount of the expenses\n""""""\n', '\n\ndef archive_completed_work(work_ids):\n""""""\nArchives a list of completed work items\n\nParameters:\n work_ids (list): A list of work item IDs that have been completed and need to be archived\n\nReturns:\n int: The number of work items successfully archived\n""""""\n', '\n\ndef filter_tasks_by_due_date(task_ids, due_date):\n""""""\nFilters tasks by their due date\n\nParameters:\n task_ids (list): A list of task IDs to filter\n due_date (str): The due date to filter tasks by\n\nReturns:\n list: List of task IDs that have the specified due date\n""""""\n']","Generate a unique identifier for a new project, log this activity for user ""AdminUser"", and then archive all completed work items related to this project.","var_1 = generate_unique_identifier(prefix=""project"")
var_2 = who_am_i()
var_3 = log_user_activity(user_id=""AdminUser"", activity_description=""Generated unique identifier for new project: "" + var_1)
var_4 = search_object_by_name(query=var_1)
var_5 = works_list(type=[""issue"", ""ticket"", ""task""], owned_by=[var_4], stage.name=[""closed"", ""resolved"", ""done"", ""completed""])
var_6 = archive_completed_work(work_ids=var_5)"
"['\n\ndef get_sprint_history(sprint_id):\n""""""\nRetrieves the change history of a sprint\n\nParameters:\n sprint_id (str): The ID of the ticket\n\nReturns:\n list: A list of changes made to the sprint\n""""""\n', 'def fetch_user_tasks(user_id, include_completed=False):\n""""""\nRetrieves a list of tasks assigned to a user\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be fetched\n include_completed (bool): Whether to include completed tasks in the list\n\nReturns:\n list: List of tasks assigned to the user\n""""""\n', 'def filter_projects_by_status(project_ids, status=""active""):\n""""""\nFilters a list of project IDs by their status\n\nParameters:\n project_ids (list): A list of project IDs to filter\n status (str): The status to filter by, default is \'active\'\n\nReturns:\n list: Project IDs matching the status\n""""""\n', '\n\ndef generate_work_report(work_ids):\n""""""\nGenerates a report for the given work items.\n\nParameters:\n work_ids (list): A list of work item IDs for report generation\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef generate_report_by_tag(tag_id, include_archived=False):\n""""""\nGenerates a report for all work items associated with the given tag\n\nParameters:\n tag_id (str): The ID of the tag used to filter work items\n include_archived (bool): Include archived work items if set to True\n\nReturns:\n list: Work items associated with the tag\n""""""\n', '\n\ndef generate_report_from_data(dataset_id, report_type=""summary""):\n""""""\nGenerates a specific type of report from a dataset\n\nParameters:\n dataset_id (str): The ID of the dataset from which to generate the report\n report_type (str): The type of report to generate, default is \'summary\'\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\ndef update_user_ID(user_id, status):\n""""""\nUpdates the status of a user account in the system and returns the updated id\n\nParameters:\n user_id (str): The ID of the user whose status is to be updated\n status (str): The new status to apply to the user account\n\nReturns:\n str: updated User Id\n""""""\n', '\n\ndef fetch_user_created_work(user_id, work_type=None):\n""""""\nRetrieves work items created by a specific user\n\nParameters:\n user_id (str): The ID of the user whose work items are to be retrieved\n work_type (list): Filters for work of the provided types, e.g., [\'issue\', \'ticket\']\n\nReturns:\n list: Work items created by the user\n""""""\n', '\n\ndef calculate_estimated_effort(work_id):\n""""""\nCalculates the estimated effort required to complete a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n float: Estimated effort in hours\n""""""\n', '\n\ndef fetch_users_from_group(group_id):\n""""""\nRetrieves a list of user IDs that belong to the specified group\n\nParameters:\n group_id (str): The ID of the group\n\nReturns:\n list: User IDs belonging to the group\n""""""\n']","Retrieve the history of sprint ""SPRINT-42"", fetch all tasks assigned to user ""QAEngineer1"" including completed ones, and summarize the tasks for a report.","var_1 = get_sprint_history(sprint_id=""SPRINT-42"")
var_2 = fetch_user_tasks(user_id=""QAEngineer1"", include_completed=True)
var_3 = summarize_objects(objects=var_2)"
"['\n\ndef get_user_avatar(user_id):\n""""""\nRetrieves the avatar image URL for the specified user\n\nParameters:\n user_id (str): The ID of the user whose avatar is to be retrieved\n\nReturns:\n str: URL of the user\'s avatar image\n""""""\n', '\n\ndef list_department_members(department_id):\n""""""\nReturns a list of user IDs for all members within a specified department\n\nParameters:\n department_id (str): The ID of the department to list members for\n\nReturns:\n list: User IDs of all the members in the department\n""""""\n', 'def filter_users_by_department(department_id=None, active_only=False):\n""""""\nFilters a list of users that belong to the specified department\n\nParameters:\n department_id (str): The ID of the department to filter users\n active_only (bool): Filters for only active users if set to True\n\nReturns:\n list: Users in the specified department\n""""""\n', '\n\ndef track_time_on_task(task_id, hours_spent):\n""""""\nTracks time spent on a task by logging the number of hours\n\nParameters:\n task_id (str): The ID of the task on which time is spent\n hours_spent (float): The number of hours spent on the task\n\nReturns:\n bool: Status of the time tracking\n""""""\n', '\n\ndef remove_object_from_sprint(object_id, sprint_id):\n""""""\nRemoves a specified object from a sprint and returns the new list\n\nParameters:\n object_id (str): The ID of the object to be removed\n sprint_id (str): The ID of the project from which the object should be removed\n\nReturns:\n list: Returns the updated list of sprint objects\n""""""\n', '\n\ndef list_completed_tasks_by_user(user_id):\n""""""\nLists all completed tasks for a specific user\n\nParameters:\n user_id (str): The ID of the user whose completed tasks need to be listed\n\nReturns:\n list: List of completed task IDs\n""""""\n', '\n\ndef generate_report_from_template(report_template_id, data_source_id):\n""""""\nGenerates a report based on a specified template and data source\n\nParameters:\n report_template_id (str): The ID of the report template to use\n data_source_id (str): The ID of the data source\n\nReturns:\n str: Generated report\n""""""\n', '\n\ndef remove_object_from_inventory(object_id):\n""""""\nRemoves an object from the inventory system based on the object ID\n\nParameters:\n object_id (str): The ID of the object to remove from inventory\n\nReturns:\n bool: True if the removal was successful, False otherwise\n""""""\n', 'def fetch_user_tasks(user_id, include_completed=False):\n""""""\nRetrieves a list of tasks assigned to a user\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be fetched\n include_completed (bool): Whether to include completed tasks in the list\n\nReturns:\n list: List of tasks assigned to the user\n""""""\n', '\n\ndef filter_contacts_by_organization(organization_id, active_only=True):\n""""""\nReturns a list of contacts associated with the specified organization, optionally filtering only active contacts\n\nParameters:\n organization_id (str): The ID of the organization to filter contacts\n active_only (bool): Flag to filter only active contacts, default value \'True\'\n\nReturns:\n list: Contacts associated with the organization\n""""""\n']","Fetch user tasks for user ""TeamLead"", include completed tasks, and then summarize these tasks.","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = fetch_user_tasks(user_id=var_1, include_completed=True)
var_3 = summarize_objects(objects=var_2)"
"['\n\ndef get_user_contact_info(user_id):\n""""""\nRetrieves contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact information is requested\n\nReturns:\n str: The contact information of the user\n""""""\n', '\n\ndef get_team_member_list(team_id):\n""""""\nRetrieves a list of team members for the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: List of team member IDs\n""""""\n', '\n\ndef schedule_meeting_with_user(user_id, duration=30, urgent=False):\n""""""\nSchedules a meeting with a specified user\n\nParameters:\n user_id (str): The ID of the user with whom to schedule a meeting\n duration (int): Duration of the meeting in minutes, default is \'30\'\n urgent (bool): Whether the meeting is urgent, defaults to False\n\nReturns:\n str: The ID of the scheduled meeting\n""""""\n', '\n\ndef filter_users_by_skill(skill_name, minimum_proficiency=3):\n""""""\nFilters users by a specific skill and its minimum proficiency level\n\nParameters:\n skill_name (str): The name of the skill to filter by\n minimum_proficiency (int): The minimum proficiency level a user should have in the skill\n\nReturns:\n list: A list of user IDs that match the criteria\n""""""\n', 'def link_issues_to_project(issue_ids, project_id):\n""""""\nLinks the given issues to the specified project\n\nParameters:\n issue_ids (list): A list of issue IDs to be linked to the project\n project_id (str): The ID of the project to which the issues should be linked\n\nReturns:\n bool: Status of the linking action\n""""""\n', '\n\ndef calculate_project_completion_rate(project_id):\n""""""\nCalculates the completion rate of tasks for a given project\n\nParameters:\n project_id (str): The ID of the project to calculate the completion rate for\n\nReturns:\n float: The completion rate as a percentage\n""""""\n', '\n\ndef list_completed_items_by_user(user_id):\n""""""\nLists items that have been completed by the given user\n\nParameters:\n user_id (str): The ID of the user whose completed items are being requested\n\nReturns:\n list: Completed items by the user\n""""""\n', '\n\ndef extract_contact_info(text_id, entity_type):\n""""""\nExtracts contact information from a text source based on a given entity type\n\nParameters:\n text_id (str): The ID of the text source from which to extract contact information\n entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'\n\nReturns:\n list: Extracted contact information\n""""""', '\n\ndef extract_keywords_from_text(text):\n""""""\nGiven a text, extracts and returns the main keywords\n\nParameters:\n text (str): The text from which keywords are to be extracted\n\nReturns:\n list: A list of extracted keywords\n""""""\n', '\n\ndef estimate_task_duration(task_id, complexity_level):\n""""""\nEstimates the duration needed to complete a task based on its complexity level\n\nParameters:\n task_id (str): The ID of the task\n complexity_level (str): The complexity level of the task. Allowed values: \'low\', \'medium\', \'high\'\n\nReturns:\n float: Estimated duration in hours\n""""""\n']","Retrieve the contact information for user ""UXDesigner"" and schedule an urgent meeting with them to discuss the high severity tickets they own, then summarize those tickets.","var_1 = search_object_by_name(query=""UXDesigner"")
var_2 = get_user_contact_info(user_id=var_1)
var_3 = schedule_meeting_with_user(user_id=var_1, urgent=True)
var_4 = works_list(owned_by=[var_1], ticket.severity=[""high""], type=[""ticket""])
var_5 = summarize_objects(objects=var_4)"
"['\n\ndef get_user_permissions(user_id):\n""""""\nReturns a list of permissions for a specified user ID\n\nParameters:\n user_id (str): The ID of the user whose permissions you want to retrieve\n\nReturns:\n list: User permissions\n""""""\n', '\n\ndef list_completed_items_by_user(user_id):\n""""""\nLists items that have been completed by the given user\n\nParameters:\n user_id (str): The ID of the user whose completed items are being requested\n\nReturns:\n list: Completed items by the user\n""""""\n', '\n\ndef filter_records_by_date(record_ids, start_date, end_date):\n""""""\nFilters a list of record IDs based on a date range\n\nParameters:\n record_ids (list): List of record IDs to filter\n start_date (str): Start date for the filtering in \'YYYY-MM-DD\' format\n end_date (str): End date for the filtering in \'YYYY-MM-DD\' format\n\nReturns:\n list: Filtered record IDs\n""""""\n', '\n\ndef get_team_member_list(team_id):\n""""""\nRetrieves a list of team members for the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: List of team member IDs\n""""""\n', '\n\ndef find_work_items_by_tag(work_type, tag):\n""""""\nFinds work items of a certain type with a given tag\n\nParameters:\n work_type (str): The type of the work items to filter by\n tag (str): The tag to filter the work items\n\nReturns:\n list: List of work items with the given tag\n""""""\n', '\n\ndef update_contact_information(contact_id, new_phone=None, new_email=None):\n""""""\nUpdates the contact information with new provided phone number or email\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_phone (str): The new phone number for the contact, default is \'None\'\n new_email (str): The new email address for the contact, default is \'None\'\n\nReturns:\n bool: Status of the update operation\n""""""\n', '\n\ndef remove_object_from_inventory(object_id):\n""""""\nRemoves an object from the inventory system based on the object ID\n\nParameters:\n object_id (str): The ID of the object to remove from inventory\n\nReturns:\n bool: True if the removal was successful, False otherwise\n""""""\n', '\n\ndef merge_duplicate_objects(primary_object_id, duplicate_object_id):\n""""""\nMerges a duplicate object into a primary object\n\nParameters:\n primary_object_id (str): The ID of the primary object\n duplicate_object_id (str): The ID of the duplicate object to be merged\n\nReturns:\n bool: True if the merge was successful, False otherwise\n""""""\n', '\n\ndef log_system_activity(activity_description, user_id=None):\n""""""\nLogs a system activity with an optional user ID\n\nParameters:\n activity_description (str): A brief description of the activity being logged\n user_id (str, optional): The ID of the user associated with the activity; defaults to None\n\nReturns:\n bool: True if the activity was logged successfully; otherwise False\n""""""\n', '\n\ndef find_team_members(team_id):\n""""""\nReturns a list of user IDs that are members of the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: User IDs of the team members\n""""""\n']","Get the list of permissions for user ""TeamLead"" and list all completed items by this user, then summarize the completed items for a weekly review.","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = get_user_permissions(user_id=var_1)
var_3 = list_completed_items_by_user(user_id=var_1)
var_4 = summarize_objects(objects=var_3)"
"['\n\ndef get_work_item_history(work_id):\n""""""\nRetrieves the history of changes for a given work item\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n list: A chronological list of changes made to the work item\n""""""\n', '\n\ndef generate_report(report_type, subject_id, include_summary=True):\n""""""\nGenerates a report of a specific type for a subject in the system\n\nParameters:\n report_type (str): The type of report to generate\n subject_id (str): The ID of the subject for the report\n include_summary (bool): Whether to include a summary in the report; defaults to True\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef deactivate_user_account(user_id, reason):\n""""""\nDeactivates a user account for a specific reason\n\nParameters:\n user_id (str): The ID of the user whose account is to be deactivated\n reason (str): The reason for deactivating the account\n\nReturns:\n bool: True if the account was successfully deactivated; otherwise False\n""""""\n', '\n\ndef estimate_time_for_task(task_id, estimation_hours):\n""""""\nUpdates a task with a time estimation\n\nParameters:\n task_id (str): The ID of the task to be updated with an estimated time\n estimation_hours (float): The estimated time in hours to complete the task\n\nReturns:\n None\n""""""\n', '\n\ndef set_user_permission(user_id, permission_level):\n""""""\nSets a specific permission level for a user account\n\nParameters:\n user_id (str): The ID of the user to set permissions for\n permission_level (str): The level of permission to assign e.g., \'read\', \'write\', \'admin\'\n\nReturns:\n bool: True if the permission was set successfully, False otherwise\n""""""\n', '\n\ndef validate_work_item_completeness(work_id):\n""""""\nChecks if a work item has all necessary information completed\n\nParameters:\n work_id (str): The ID of the work item to check\n\nReturns:\n bool: True if the work item is complete, False if it lacks information\n""""""\n', '\n\ndef track_time_on_task(task_id, hours_spent):\n""""""\nTracks time spent on a task by logging the number of hours\n\nParameters:\n task_id (str): The ID of the task on which time is spent\n hours_spent (float): The number of hours spent on the task\n\nReturns:\n bool: Status of the time tracking\n""""""\n', '\n\ndef calculate_budget_allocation(project_id, cost_limit):\n""""""\nCalculates and assigns the budget allocation for a project\n\nParameters:\n project_id (str): The ID of the project for which the budget is calculated\n cost_limit (float): The cost limit for the project\'s budget\n\nReturns:\n float: The amount allocated to the project budget\n""""""\n', '\n\ndef validate_object_existence(object_id):\n""""""\nChecks if an object with the given ID exists in the system\n\nParameters:\n object_id (str): The ID of the object to check\n\nReturns:\n bool: True if the object exists, otherwise False\n""""""\n', '\n\ndef calculate_time_until_deadline(work_item_id):\n""""""\nCalculates the amount of time remaining until the deadline of a work item\n\nParameters:\n work_item_id (str): The ID of the work item\n\nReturns:\n float: The number of hours until the deadline\n""""""\n']","Retrieve the history of work items with a severity of ""high"" and check their completeness.","var_1 = works_list(ticket.severity=[""high""])
var_2 = get_work_item_history(work_id=var_1)
var_3 = validate_work_item_completeness(work_id=var_1)"
"['\n\ndef list_completed_tasks_by_user(user_id, project_id=None):\n""""""\nLists all tasks completed by a given user, optionally filtered by project\n\nParameters:\n user_id (str): The ID of the user\n project_id (str, optional): The ID of the project to filter tasks\n\nReturns:\n list: List of task IDs completed by the user\n""""""\n', '\n\ndef filter_projects_by_category(category_id, active_only=True):\n""""""\nFilters projects by their category and returns a list of project IDs\n\nParameters:\n category_id (str): The ID of the category to filter projects by\n active_only (bool): Whether to return only active projects\n\nReturns:\n list: List of project IDs matching the category filter\n""""""\n', '\n\ndef assign_tasks_to_user(task_ids, user_id):\n""""""\nAssigns a list of task IDs to the provided user\n\nParameters:\n task_ids (list): List of task IDs to be assigned\n user_id (str): The ID of the user to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n', '\n\ndef extract_keywords_from_text(text):\n""""""\nGiven a text, extracts and returns the main keywords\n\nParameters:\n text (str): The text from which keywords are to be extracted\n\nReturns:\n list: A list of extracted keywords\n""""""\n', '\n\ndef assign_tasks_to_employee(task_ids, employee_id):\n""""""\nAssigns a list of tasks to the specified employee\n\nParameters:\n task_ids (list): A list of task IDs to be assigned\n employee_id (str): The ID of the employee to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment was successful, False otherwise\n""""""\n', '\n\ndef convert_task_to_subtask(task_id, parent_task_id):\n""""""\nConverts a standalone task into a subtask of another task\n\nParameters:\n task_id (str): The ID of the task to be converted\n parent_task_id (str): The ID of the parent task to which the subtask will be linked\n\nReturns:\n bool: True if the conversion was successful, False otherwise\n""""""\n', '\n\ndef toggle_feature_access(feature_id, user_id, enable_access):\n""""""\nToggles access to a specific feature for a user\n\nParameters:\n feature_id (str): The ID of the feature to toggle access\n user_id (str): The ID of the user whose access will be toggled\n enable_access (bool): \'True\' to enable access, \'False\' to disable\n\nReturns:\n bool: The resulting access status\n""""""\n', '\n\ndef generate_work_report(work_ids):\n""""""\nGenerates a report for the given work items.\n\nParameters:\n work_ids (list): A list of work item IDs for report generation\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef log_user_activity(user_id, activity_description):\n""""""\nLogs a user\'s activity with a description\n\nParameters:\n user_id (str): The ID of the user whose activity is being logged\n activity_description (str): A description of the activity\n\nReturns:\n bool: True if the logging was successful, False otherwise\n""""""\n', '\n\ndef merge_duplicate_tasks(primary_task_id, duplicate_task_ids):\n""""""\nMerges duplicate tasks into a primary task\n\nParameters:\n primary_task_id (str): The ID of the primary task which remains after the merge\n duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged\n\nReturns:\n None\n""""""\n']","Retrieve the list of completed tasks by user ""DesignerDan"" in the ""UI_Development"" project, extract keywords from the task descriptions, and assign those tasks to user ""ManagerMike"".","var_1 = search_object_by_name(query=""DesignerDan"")
var_2 = search_object_by_name(query=""UI_Development"")
var_3 = list_completed_tasks_by_user(user_id=var_1, project_id=var_2)
var_4 = summarize_objects(objects=var_3)
var_5 = extract_keywords_from_text(text=var_4)
var_6 = search_object_by_name(query=""ManagerMike"")
var_7 = assign_tasks_to_user(task_ids=var_3, user_id=var_6)"
"['\n\ndef list_recent_activities(user_id, limit=10):\n""""""\nLists the most recent activities performed by a user\n\nParameters:\n user_id (str): The ID of the user whose activities are to be listed\n limit (int): The maximum number of recent activities to return\n\nReturns:\n list: Recent activities of the user\n""""""\n', 'def filter_projects_by_status(project_ids, status=""active""):\n""""""\nFilters a list of project IDs by their status\n\nParameters:\n project_ids (list): A list of project IDs to filter\n status (str): The status to filter by, default is \'active\'\n\nReturns:\n list: Project IDs matching the status\n""""""\n', '\n\ndef mark_ticket_for_review(ticket_id, reviewer_id):\n""""""\nMarks a ticket for review by a specific user\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked for review\n reviewer_id (str): The ID of the user who should review the ticket\n\nReturns:\n None\n""""""\n', '\n\ndef estimate_completion_time(task_id):\n""""""\nEstimates the completion time for a given task\n\nParameters:\n task_id (str): The ID of the task for which to estimate completion time\n\nReturns:\n float: The estimated number of hours to complete the task\n""""""\n', '\n\ndef get_recent_activity_log(user_id, limit=10):\n""""""\nGets the most recent activity log entries for a given user\n\nParameters:\n user_id (str): The ID of the user to get activities for\n limit (int): The maximum number of activity log entries to return\n\nReturns:\n list: Recent activity log entries\n""""""\n', '\n\ndef filter_contacts_by_organization(organization_id, active_only=True):\n""""""\nReturns a list of contacts associated with the specified organization, optionally filtering only active contacts\n\nParameters:\n organization_id (str): The ID of the organization to filter contacts\n active_only (bool): Flag to filter only active contacts, default value \'True\'\n\nReturns:\n list: Contacts associated with the organization\n""""""\n', 'def fetch_user_tasks(user_id, include_completed=False):\n""""""\nRetrieves a list of tasks assigned to a user\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be fetched\n include_completed (bool): Whether to include completed tasks in the list\n\nReturns:\n list: List of tasks assigned to the user\n""""""\n', '\n\ndef check_object_permission(user_id, object_id):\n""""""\nChecks if a user has permission to access a specific object\n\nParameters:\n user_id (str): The ID of the user\n object_id (str): The ID of the object to check permission for\n\nReturns:\n bool: True if the user has permission, False otherwise\n""""""\n', '\n\ndef assign_tasks_to_user(task_ids, user_id):\n""""""\nAssigns a list of task IDs to the provided user\n\nParameters:\n task_ids (list): List of task IDs to be assigned\n user_id (str): The ID of the user to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n', '\n\ndef calculate_expense_totals(expense_ids):\n""""""\nCalculates the total amount from a list of expense IDs\n\nParameters:\n expense_ids (list): List of expense IDs to calculate the total amount\n\nReturns:\n float: The total amount of the expenses\n""""""\n']","Retrieve the list of recent activities for user ""TeamLead"" and filter their projects by status ""completed"".","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = list_recent_activities(user_id=var_1)
var_3 = filter_projects_by_status(project_ids=var_2, status=""completed"")"
"['\n\ndef list_user_tasks(user_id, completed=False):\n""""""\nLists all tasks assigned to a user, optionally filtering for completed tasks\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be listed\n completed (bool): If True, only completed tasks are returned\n\nReturns:\n list: A list of tasks assigned to the user\n""""""\n', 'def filter_projects_by_status(project_ids, status=""active""):\n""""""\nFilters a list of project IDs by their status\n\nParameters:\n project_ids (list): A list of project IDs to filter\n status (str): The status to filter by, default is \'active\'\n\nReturns:\n list: Project IDs matching the status\n""""""\n', '\n\ndef calculate_estimate_completion_time(work_id):\n""""""\nCalculates the estimated completion time for the specified work item\n\nParameters:\n work_id (str): The ID of the work item to calculate the estimated time\n\nReturns:\n float: Estimated completion time in hours\n""""""\n', '\n\ndef calculate_time_until_deadline(work_item_id):\n""""""\nCalculates the amount of time remaining until the deadline of a work item\n\nParameters:\n work_item_id (str): The ID of the work item\n\nReturns:\n float: The number of hours until the deadline\n""""""\n', '\n\ndef convert_task_to_ticket(task_id):\n""""""\nConverts a task into a ticket in the system\n\nParameters:\n task_id (str): The ID of the task to be converted\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', '\n\ndef list_user_skills(user_id):\n""""""\nLists the skills associated with the specified user\n\nParameters:\n user_id (str): The ID of the user whose skills are being queried\n\nReturns:\n list: The skills of the user\n""""""\n', '\n\ndef calculate_cost_of_tasks(task_ids):\n""""""\nCalculates the total cost for a list of task IDs\n\nParameters:\n task_ids (list): A list of task IDs to calculate cost for\n\nReturns:\n float: Total cost of the tasks\n""""""\n', '\n\ndef filter_tickets_by_date(ticket_ids, start_date, end_date=None):\n""""""\nFilters a list of ticket IDs based on a date range\n\nParameters:\n ticket_ids (list): A list of ticket IDs to filter\n start_date (str): The start date for the range\n end_date (str, optional): The end date for the range, defaults to None\n\nReturns:\n list: Filtered list of ticket IDs\n""""""\n', '\n\ndef calculate_expense_totals(expense_ids):\n""""""\nCalculates the total amount from a list of expense IDs\n\nParameters:\n expense_ids (list): List of expense IDs to calculate the total amount\n\nReturns:\n float: The total amount of the expenses\n""""""\n', '\n\ndef remove_object_from_inventory(object_id):\n""""""\nRemoves an object from the inventory system based on the object ID\n\nParameters:\n object_id (str): The ID of the object to remove from inventory\n\nReturns:\n bool: True if the removal was successful, False otherwise\n""""""\n']","Calculate the estimated completion time for work items owned by user ""BackendDev1"", then filter those that have a deadline within the next 48 hours.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1])
var_3 = [calculate_estimate_completion_time(work_id=item) for item in var_2]
var_4 = [calculate_time_until_deadline(work_item_id=item) for item in var_2]
var_5 = [item for item in var_2 if calculate_time_until_deadline(work_item_id=item) <= 48]"
"['\n\ndef log_system_activity(activity_description, user_id=None):\n""""""\nLogs a system activity with an optional user ID\n\nParameters:\n activity_description (str): A brief description of the activity being logged\n user_id (str, optional): The ID of the user associated with the activity; defaults to None\n\nReturns:\n bool: True if the activity was logged successfully; otherwise False\n""""""\n', '\n\ndef calculate_budget_remaining(budget_id):\n""""""\nCalculates the remaining budget for a given budget ID\n\nParameters:\n budget_id (str): The ID of the budget to calculate\n\nReturns:\n float: The amount of remaining budget\n""""""\n', '\n\ndef get_user_workload(user_id):\n""""""\nDetermines the current workload for a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be determined\n\nReturns:\n int: The number of tasks assigned to the user\n""""""\n', 'def filter_users_by_department(department_id=None, active_only=False):\n""""""\nFilters a list of users that belong to the specified department\n\nParameters:\n department_id (str): The ID of the department to filter users\n active_only (bool): Filters for only active users if set to True\n\nReturns:\n list: Users in the specified department\n""""""\n', '\n\ndef link_related_tickets(ticket_id, related_ids):\n""""""\nLinks tickets that are related to each other\n\nParameters:\n ticket_id (str): The ID of the ticket that will be linked with related tickets\n related_ids (list): List of IDs for tickets that are related to the original ticket\n\nReturns:\n bool: True if the linking is successful, False otherwise\n""""""\n', 'def retrieve_sprint_workload(sprint_id):\n""""""\nCalculates the total workload for a given sprint based on the work items associated with it\n\nParameters:\n sprint_id (str): The ID of the sprint for workload calculation\n\nReturns:\n float: Total workload in hours\n""""""\n', '\n\ndef generate_unique_identifier(prefix, use_timestamp=True):\n""""""\nGenerates a unique identifier with an optional timestamp\n\nParameters:\n prefix (str): A prefix for the identifier\n use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True\n\nReturns:\n str: The generated unique identifier\n""""""\n\n```', '\n\ndef get_team_member_list(team_id):\n""""""\nRetrieves a list of team members for the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: List of team member IDs\n""""""\n', '\n\ndef estimate_work_hours(work_id):\n""""""\nEstimates the number of hours required to complete a specific work item\n\nParameters:\n work_id (str): The ID of the work item for which the estimation is to be made\n\nReturns:\n float: Estimated hours required to complete the work item\n""""""\n', '\n\ndef get_task_dependencies(task_id):\n""""""\nReturns a list of task IDs that are dependencies for the given task\n\nParameters:\n task_id (str): The ID of the task for which dependencies are requested\n\nReturns:\n list: Dependency task IDs\n""""""\n']","Calculate the remaining budget for budget ID ""BUD-2023"", log the activity, and retrieve the workload for user ""FinAnalyst"".","var_1 = calculate_budget_remaining(budget_id=""BUD-2023"")
var_2 = who_am_i()
var_3 = log_system_activity(activity_description=""Calculated remaining budget for BUD-2023"", user_id=var_2)
var_4 = get_user_workload(user_id=""FinAnalyst"")"
"['\n\ndef log_system_event(event_type, description, user_id=None):\n""""""\nLogs an event in the system with an optional user ID associated with it\n\nParameters:\n event_type (str): The type of event to log\n description (str): A brief description of the event\n user_id (str): The ID of the user involved in the event, if applicable\n\nReturns:\n str: The ID of the logged event\n""""""\n', '\n\ndef retrieve_user_contact_info(user_id):\n""""""\nRetrieves the contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact info is requested\n\nReturns:\n str: Contact information of the user\n""""""\n', '\n\ndef find_user_by_email(email):\n""""""\nFinds a user in the system by their email address\n\nParameters:\n email (str): The email address of the user to find\n\nReturns:\n str: ID of the user\n""""""\n', '\n\ndef generate_summary_report(object_ids):\n""""""\nGenerates a summary report for the specified objects\n\nParameters:\n object_ids (list): A list of object IDs\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef retrieve_archived_documents(archive_id, keyword=None):\n""""""\nRetrieves documents from the archive based on optional keyword\n\nParameters:\n archive_id (str): The ID of the archive from which to retrieve documents\n keyword (str): Optional keyword to filter documents, default is \'None\'\n\nReturns:\n list: A list of documents matching the keyword if provided, otherwise all documents from the archive\n""""""', '\n\ndef create_new_ticket(title, description, reported_by):\n""""""\nCreates a new ticket in the system with the given details\n\nParameters:\n title (str): The title of the new ticket\n description (str): A detailed description of the issue or request\n reported_by (str): The ID of the user reporting the ticket\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', '\n\ndef mark_ticket_as_resolved(ticket_id):\n""""""\nMarks a ticket as resolved in the system\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked as resolved\n\nReturns:\n bool: True if the ticket was marked as resolved, False otherwise\n""""""\n', '\n\ndef merge_duplicate_records(primary_record_id, duplicate_record_id):\n""""""\nMerges a duplicate record into a primary record\n\nParameters:\n primary_record_id (str): The ID of the primary record to keep\n duplicate_record_id (str): The ID of the duplicate record to merge\n\nReturns:\n bool: True if the merge was successful; otherwise False\n""""""\n', '\n\ndef update_work_item_due_date(work_item_id, due_date):\n""""""\nUpdates the due date for the specified work item\n\nParameters:\n work_item_id (str): The ID of the work item to be updated\n due_date (str): The new due date for the work item\n\nReturns:\n None: Indicates that the operation was executed without returning any value\n""""""\n', '\n\ndef remove_user_from_project(user_id, project_id):\n""""""\nRemoves a user from a project\n\nParameters:\n user_id (str): The ID of the user to be removed\n project_id (str): The ID of the project from which the user is to be removed\n\nReturns:\n bool: True if the user is successfully removed, False otherwise\n""""""']","Retrieve the contact information for user ""User123"", then use it to create a new ticket describing a system issue they reported, and log the event in the system.","var_1 = find_user_by_email(email=""User123"")
var_2 = retrieve_user_contact_info(user_id=var_1)
var_3 = create_new_ticket(title=""System Issue Reported"", description=""A system issue has been reported by the user."", reported_by=var_1)
var_4 = log_system_event(event_type=""Ticket Creation"", description=""A new ticket was created for a system issue reported by the user."", user_id=var_1)"
"['\n\ndef log_user_activity(user_id, activity_description):\n""""""\nLogs a user\'s activity with a description\n\nParameters:\n user_id (str): The ID of the user whose activity is being logged\n activity_description (str): A description of the activity\n\nReturns:\n bool: True if the logging was successful, False otherwise\n""""""\n', '\n\ndef assign_tasks_to_employee(task_ids, employee_id):\n""""""\nAssigns a list of tasks to the specified employee\n\nParameters:\n task_ids (list): A list of task IDs to be assigned\n employee_id (str): The ID of the employee to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment was successful, False otherwise\n""""""\n', '\n\ndef fetch_user_created_work(user_id, work_type=None):\n""""""\nRetrieves work items created by a specific user\n\nParameters:\n user_id (str): The ID of the user whose work items are to be retrieved\n work_type (list): Filters for work of the provided types, e.g., [\'issue\', \'ticket\']\n\nReturns:\n list: Work items created by the user\n""""""\n', '\n\ndef filter_tickets_by_date(ticket_ids, start_date, end_date=None):\n""""""\nFilters a list of ticket IDs based on a date range\n\nParameters:\n ticket_ids (list): A list of ticket IDs to filter\n start_date (str): The start date for the range\n end_date (str, optional): The end date for the range, defaults to None\n\nReturns:\n list: Filtered list of ticket IDs\n""""""\n', '\n\ndef mark_ticket_for_review(ticket_id, reviewer_id):\n""""""\nMarks a ticket for review by a specific user\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked for review\n reviewer_id (str): The ID of the user who should review the ticket\n\nReturns:\n None\n""""""\n', '\n\ndef list_recent_activities(user_id, limit=10):\n""""""\nLists the most recent activities performed by a user\n\nParameters:\n user_id (str): The ID of the user whose activities are to be listed\n limit (int): The maximum number of recent activities to return\n\nReturns:\n list: Recent activities of the user\n""""""\n', 'def filter_users_by_department(department_id=None, active_only=False):\n""""""\nFilters a list of users that belong to the specified department\n\nParameters:\n department_id (str): The ID of the department to filter users\n active_only (bool): Filters for only active users if set to True\n\nReturns:\n list: Users in the specified department\n""""""\n', '\n\ndef get_user_contact_info(user_id):\n""""""\nRetrieves contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact information is requested\n\nReturns:\n str: The contact information of the user\n""""""\n', '\n\ndef mark_item_as_duplicated(work_item_id, duplicate_of_id):\n""""""\nMarks a work item as a duplicate of another\n\nParameters:\n work_item_id (str): The ID of the work item that is a duplicate\n duplicate_of_id (str): The ID of the work item of which it is a duplicate\n\nReturns:\n bool: True if the item is successfully marked, False otherwise\n""""""\n', '\n\ndef update_contact_information(contact_id, new_phone=None, new_email=None):\n""""""\nUpdates the contact information with new provided phone number or email\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_phone (str): The new phone number for the contact, default is \'None\'\n new_email (str): The new email address for the contact, default is \'None\'\n\nReturns:\n bool: Status of the update operation\n""""""\n']","Assign all tickets created by user ""User123"" to employee ""Emp456"", and log this activity with the description ""Assigned tickets to Emp456"".","var_1 = fetch_user_created_work(user_id=""User123"", work_type=[""ticket""])
var_2 = assign_tasks_to_employee(task_ids=var_1, employee_id=""Emp456"")
var_3 = log_user_activity(user_id=""User123"", activity_description=""Assigned tickets to Emp456"")"
"['\n\ndef mark_task_as_completed(task_id):\n""""""\nMarks a task as completed in the system.\n\nParameters:\n task_id (str): The ID of the task to be marked as complete\n\nReturns:\n bool: True if marked successfully, False otherwise\n""""""\n', '\n\ndef generate_work_report(work_ids):\n""""""\nGenerates a report for the given work items.\n\nParameters:\n work_ids (list): A list of work item IDs for report generation\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef list_department_members(department_id):\n""""""\nReturns a list of user IDs for all members within a specified department\n\nParameters:\n department_id (str): The ID of the department to list members for\n\nReturns:\n list: User IDs of all the members in the department\n""""""\n', '\n\ndef filter_projects_by_category(category_id, active_only=True):\n""""""\nFilters projects by their category and returns a list of project IDs\n\nParameters:\n category_id (str): The ID of the category to filter projects by\n active_only (bool): Whether to return only active projects\n\nReturns:\n list: List of project IDs matching the category filter\n""""""\n', '\n\ndef calculate_progress_percentage(project_id):\n""""""\nCalculates the progress percentage of the given project\n\nParameters:\n project_id (str): The ID of the project for which to calculate progress\n\nReturns:\n float: The percentage of project completion\n""""""\n', '\n\ndef list_user_tasks(user_id, completed=False):\n""""""\nLists all tasks assigned to a user, optionally filtering for completed tasks\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be listed\n completed (bool): If True, only completed tasks are returned\n\nReturns:\n list: A list of tasks assigned to the user\n""""""\n', '\n\ndef validate_work_item_completeness(work_id):\n""""""\nChecks if a work item has all necessary information completed\n\nParameters:\n work_id (str): The ID of the work item to check\n\nReturns:\n bool: True if the work item is complete, False if it lacks information\n""""""\n', '\n\ndef convert_task_to_ticket(task_id):\n""""""\nConverts a task into a ticket in the system\n\nParameters:\n task_id (str): The ID of the task to be converted\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', '\n\ndef find_team_members(team_id):\n""""""\nReturns a list of user IDs that are members of the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: User IDs of the team members\n""""""\n', '\n\ndef calculate_project_completion_rate(project_id):\n""""""\nCalculates the completion rate of tasks for a given project\n\nParameters:\n project_id (str): The ID of the project to calculate the completion rate for\n\nReturns:\n float: The completion rate as a percentage\n""""""\n']","Retrieve the list of work items owned by user ""TeamLead42"", mark them as completed, and then generate a report for these work items.","var_1 = search_object_by_name(query=""TeamLead42"")
var_2 = works_list(owned_by=[var_1])
var_3 = list(map(mark_task_as_completed, var_2))
var_4 = generate_work_report(work_ids=var_2)"
"['\n\ndef mark_ticket_for_review(ticket_id, reviewer_id):\n""""""\nMarks a ticket for review by a specific user\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked for review\n reviewer_id (str): The ID of the user who should review the ticket\n\nReturns:\n None\n""""""\n', '\n\ndef calculate_effort_for_task(task_id):\n""""""\nCalculates the effort spent on a specific task by summing subtasks\n\nParameters:\n task_id (str): The ID of the task for which the effort needs to be calculated\n\nReturns:\n float: Total effort spent on the task\n""""""\n', '\n\ndef validate_data_consistency(data_id, schema_id):\n""""""\nValidates if data conforms to a specified schema for consistency\n\nParameters:\n data_id (str): The ID of the data to be validated\n schema_id (str): The ID of the schema to validate the data against\n\nReturns:\n bool: True if data is consistent, False otherwise\n""""""\n', '\n\ndef check_ticket_status(ticket_id):\n""""""\nChecks the status of a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose status is to be checked\n\nReturns:\n str: The status of the ticket\n""""""\n', '\n\ndef validate_work_item_status(work_item_id, status_options):\n""""""\nChecks if the given work item has a status that is among the provided options\n\nParameters:\n work_item_id (str): The ID of the work item to check\n status_options (list): A list of valid status options\n\nReturns:\n bool: True if status is valid, False otherwise\n""""""\n', '\n\ndef update_work_item_due_date(work_item_id, due_date):\n""""""\nUpdates the due date for the specified work item\n\nParameters:\n work_item_id (str): The ID of the work item to be updated\n due_date (str): The new due date for the work item\n\nReturns:\n None: Indicates that the operation was executed without returning any value\n""""""\n', '\n\ndef filter_records_by_date(record_ids, start_date, end_date):\n""""""\nFilters a list of record IDs based on a date range\n\nParameters:\n record_ids (list): List of record IDs to filter\n start_date (str): Start date for the filtering in \'YYYY-MM-DD\' format\n end_date (str): End date for the filtering in \'YYYY-MM-DD\' format\n\nReturns:\n list: Filtered record IDs\n""""""\n', '\n\ndef convert_task_to_subtask(task_id, parent_task_id):\n""""""\nConverts a standalone task into a subtask of another task\n\nParameters:\n task_id (str): The ID of the task to be converted\n parent_task_id (str): The ID of the parent task to which the subtask will be linked\n\nReturns:\n bool: True if the conversion was successful, False otherwise\n""""""\n', '\n\ndef generate_report_for_sprint(sprint_id):\n""""""\nGenerates a performance report for a specified sprint\n\nParameters:\n sprint_id (str): The ID of the sprint for which to generate the report\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef find_team_members(team_id):\n""""""\nReturns a list of user IDs that are members of the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: User IDs of the team members\n""""""\n']","Calculate the effort for task ""TASK-456"", check its status, and if it's ""In Progress"", add it to the current sprint.","var_1 = calculate_effort_for_task(task_id=""TASK-456"")
var_2 = check_ticket_status(ticket_id=""TASK-456"")
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=[""TASK-456""], sprint_id=var_3)"
"['\n\ndef merge_duplicate_objects(primary_object_id, duplicate_object_id):\n""""""\nMerges a duplicate object into a primary object\n\nParameters:\n primary_object_id (str): The ID of the primary object\n duplicate_object_id (str): The ID of the duplicate object to be merged\n\nReturns:\n bool: True if the merge was successful, False otherwise\n""""""\n', '\n\ndef generate_project_summary(project_id):\n""""""\nGenerates a summary report for the specified project\n\nParameters:\n project_id (str): The ID of the project to summarize\n\nReturns:\n str: A summary report of the project\n""""""\n', '\n\ndef calculate_cost_of_tasks(task_ids):\n""""""\nCalculates the total cost for a list of task IDs\n\nParameters:\n task_ids (list): A list of task IDs to calculate cost for\n\nReturns:\n float: Total cost of the tasks\n""""""\n', 'def filter_users_by_department(department_id=None, active_only=False):\n""""""\nFilters a list of users that belong to the specified department\n\nParameters:\n department_id (str): The ID of the department to filter users\n active_only (bool): Filters for only active users if set to True\n\nReturns:\n list: Users in the specified department\n""""""\n', '\n\ndef calculate_progress_percentage(project_id):\n""""""\nCalculates the progress percentage of the given project\n\nParameters:\n project_id (str): The ID of the project for which to calculate progress\n\nReturns:\n float: The percentage of project completion\n""""""\n', '\n\ndef validate_data_consistency(data_id, schema_id):\n""""""\nValidates if data conforms to a specified schema for consistency\n\nParameters:\n data_id (str): The ID of the data to be validated\n schema_id (str): The ID of the schema to validate the data against\n\nReturns:\n bool: True if data is consistent, False otherwise\n""""""\n', '\n\ndef estimate_time_for_task(task_id, estimation_hours):\n""""""\nUpdates a task with a time estimation\n\nParameters:\n task_id (str): The ID of the task to be updated with an estimated time\n estimation_hours (float): The estimated time in hours to complete the task\n\nReturns:\n None\n""""""\n', '\ndef update_user_ID(user_id, status):\n""""""\nUpdates the status of a user account in the system and returns the updated id\n\nParameters:\n user_id (str): The ID of the user whose status is to be updated\n status (str): The new status to apply to the user account\n\nReturns:\n str: updated User Id\n""""""\n', '\n\ndef find_team_members(team_id):\n""""""\nReturns a list of user IDs that are members of the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: User IDs of the team members\n""""""\n', '\n\ndef estimate_completion_time(task_id):\n""""""\nEstimates the completion time for a given task\n\nParameters:\n task_id (str): The ID of the task for which to estimate completion time\n\nReturns:\n float: The estimated number of hours to complete the task\n""""""\n']","Calculate the total cost of tasks created by user ""BudgetMaster"" and merge any duplicate tasks to ensure accuracy in the cost report.","var_1 = search_object_by_name(query=""BudgetMaster"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = calculate_cost_of_tasks(task_ids=var_2)"
"['\n\ndef merge_duplicate_records(primary_record_id, duplicate_record_id):\n""""""\nMerges a duplicate record into a primary record\n\nParameters:\n primary_record_id (str): The ID of the primary record to keep\n duplicate_record_id (str): The ID of the duplicate record to merge\n\nReturns:\n bool: True if the merge was successful; otherwise False\n""""""\n', '\n\ndef schedule_meeting_with_user(user_id, duration=30, urgent=False):\n""""""\nSchedules a meeting with a specified user\n\nParameters:\n user_id (str): The ID of the user with whom to schedule a meeting\n duration (int): Duration of the meeting in minutes, default is \'30\'\n urgent (bool): Whether the meeting is urgent, defaults to False\n\nReturns:\n str: The ID of the scheduled meeting\n""""""\n', '\n\ndef filter_users_by_skill(skill_name, minimum_proficiency=3):\n""""""\nFilters users by a specific skill and its minimum proficiency level\n\nParameters:\n skill_name (str): The name of the skill to filter by\n minimum_proficiency (int): The minimum proficiency level a user should have in the skill\n\nReturns:\n list: A list of user IDs that match the criteria\n""""""\n', '\n\ndef list_user_permissions(user_id):\n""""""\nLists all the permissions that a user has within the system\n\nParameters:\n user_id (str): The ID of the user for whom permissions are being listed\n\nReturns:\n list: A list of permissions that the user possesses\n""""""\n', '\n\ndef calculate_progress(project_id):\n""""""\nCalculates the overall progress of a given project as a percentage\n\nParameters:\n project_id (str): The ID of the project for which progress is being calculated\n\nReturns:\n float: The progress percentage of the project\n""""""\n', '\n\ndef calculate_budget_allocation(project_id, cost_limit):\n""""""\nCalculates and assigns the budget allocation for a project\n\nParameters:\n project_id (str): The ID of the project for which the budget is calculated\n cost_limit (float): The cost limit for the project\'s budget\n\nReturns:\n float: The amount allocated to the project budget\n""""""\n', '\n\ndef extract_keywords_from_text(text):\n""""""\nGiven a text, extracts and returns the main keywords\n\nParameters:\n text (str): The text from which keywords are to be extracted\n\nReturns:\n list: A list of extracted keywords\n""""""\n', '\n\ndef check_inventory_availability(part_id, minimum_quantity=1):\n""""""\nChecks if the inventory has the specified part in at least the minimum quantity\n\nParameters:\n part_id (str): The ID of the part to check in inventory\n minimum_quantity (int): The minimum quantity to check for; defaults to 1\n\nReturns:\n bool: True if the minimum quantity is available; otherwise False\n""""""\n', '\n\ndef generate_report(report_type, subject_id, include_summary=True):\n""""""\nGenerates a report of a specific type for a subject in the system\n\nParameters:\n report_type (str): The type of report to generate\n subject_id (str): The ID of the subject for the report\n include_summary (bool): Whether to include a summary in the report; defaults to True\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef list_completed_tasks_by_user(user_id):\n""""""\nLists all completed tasks for a specific user\n\nParameters:\n user_id (str): The ID of the user whose completed tasks need to be listed\n\nReturns:\n list: List of completed task IDs\n""""""\n']","List all completed tasks by user ""EngineerEmma,"" check if they have at least 3 inventory items related to part ""PART-456,"" and generate a report including a summary.","var_1 = search_object_by_name(query=""EngineerEmma"")
var_2 = list_completed_tasks_by_user(user_id=var_1)
var_3 = search_object_by_name(query=""PART-456"")
var_4 = check_inventory_availability(part_id=var_3, minimum_quantity=3)
var_5 = generate_report(report_type=""completed_tasks"", subject_id=var_1, include_summary=True)"
"['\n\ndef merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):\n""""""\nMerges duplicate tickets into a primary ticket\n\nParameters:\n primary_ticket_id (str): The ID of the primary ticket that remains\n duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary\n\nReturns:\n None\n""""""\n', '\n\ndef generate_report(report_type, subject_id, include_summary=True):\n""""""\nGenerates a report of a specific type for a subject in the system\n\nParameters:\n report_type (str): The type of report to generate\n subject_id (str): The ID of the subject for the report\n include_summary (bool): Whether to include a summary in the report; defaults to True\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef get_user_contact_info(user_id):\n""""""\nRetrieves contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact information is requested\n\nReturns:\n str: The contact information of the user\n""""""\n', '\n\ndef schedule_meeting_with_user(user_id, duration=30, urgent=False):\n""""""\nSchedules a meeting with a specified user\n\nParameters:\n user_id (str): The ID of the user with whom to schedule a meeting\n duration (int): Duration of the meeting in minutes, default is \'30\'\n urgent (bool): Whether the meeting is urgent, defaults to False\n\nReturns:\n str: The ID of the scheduled meeting\n""""""\n', '\n\ndef extract_keywords_from_text(text):\n""""""\nGiven a text, extracts and returns the main keywords\n\nParameters:\n text (str): The text from which keywords are to be extracted\n\nReturns:\n list: A list of extracted keywords\n""""""\n', '\n\ndef list_all_blocked_tickets():\n""""""\nLists all tickets that are currently blocked\n\nReturns:\n list: Ticket IDs that are currently blocked\n""""""', '\n\ndef get_user_workload(user_id):\n""""""\nDetermines the current workload for a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be determined\n\nReturns:\n int: The number of tasks assigned to the user\n""""""\n', '\n\ndef calculate_estimated_completion(project_id):\n""""""\nCalculates the estimated completion date for a project based on current progress\n\nParameters:\n project_id (str): The ID of the project to be analyzed\n\nReturns:\n str: Estimated date of completion\n""""""\n', 'def link_issues_to_project(issue_ids, project_id):\n""""""\nLinks the given issues to the specified project\n\nParameters:\n issue_ids (list): A list of issue IDs to be linked to the project\n project_id (str): The ID of the project to which the issues should be linked\n\nReturns:\n bool: Status of the linking action\n""""""\n', 'def retrieve_sprint_workload(sprint_id):\n""""""\nCalculates the total workload for a given sprint based on the work items associated with it\n\nParameters:\n sprint_id (str): The ID of the sprint for workload calculation\n\nReturns:\n float: Total workload in hours\n""""""\n']","Merge all duplicate tickets related to the ""Network"" project into a primary ticket, then generate a report on the primary ticket including a summary.","var_1 = search_object_by_name(query=""Network"")
var_2 = list_all_blocked_tickets()
var_3 = works_list(type=[""ticket""], owned_by=[var_1])
var_4 = merge_duplicate_tickets(primary_ticket_id=var_3[0], duplicate_ticket_ids=var_3[1:])
var_5 = generate_report(report_type=""ticket"", subject_id=var_3[0], include_summary=True)"
"['\n\ndef notify_user_of_overdue_tasks(user_id):\n""""""\nNotifies a user of any overdue tasks assigned to them\n\nParameters:\n user_id (str): The ID of the user to check for overdue tasks\n\nReturns:\n None\n""""""\n', '\n\ndef reassign_work_item_owner(work_id, new_owner_id):\n""""""\nReassigns the owner of a work item to a new user\n\nParameters:\n work_id (str): The ID of the work item to be reassigned\n new_owner_id (str): The user ID of the new owner\n\nReturns:\n bool: True if reassignment is successful, False otherwise\n""""""\n', '\n\ndef generate_report_from_data(dataset_id, report_type=""summary""):\n""""""\nGenerates a specific type of report from a dataset\n\nParameters:\n dataset_id (str): The ID of the dataset from which to generate the report\n report_type (str): The type of report to generate, default is \'summary\'\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef filter_objects_by_type(object_ids, object_type):\n""""""\nFilters a list of objects based on their type\n\nParameters:\n object_ids (list): A list of object IDs to filter\n object_type (str): The type of objects to filter for\n\nReturns:\n list: Filtered object IDs matching the specified type\n""""""\n', '\n\ndef merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):\n""""""\nMerges duplicate tickets into a primary ticket\n\nParameters:\n primary_ticket_id (str): The ID of the primary ticket that remains\n duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary\n\nReturns:\n None\n""""""\n', '\n\ndef generate_project_summary(project_id):\n""""""\nGenerates a summary report for the specified project\n\nParameters:\n project_id (str): The ID of the project to summarize\n\nReturns:\n str: A summary report of the project\n""""""\n', '\n\ndef archive_completed_tasks(project_id, completed_since):\n""""""\nArchives tasks that are completed within the given project since the specified time\n\nParameters:\n project_id (str): The ID of the project containing the tasks\n completed_since (str): Archive tasks completed after this timestamp\n\nReturns:\n int: Number of tasks archived\n""""""\n', '\n\ndef calculate_estimated_completion(project_id):\n""""""\nCalculates the estimated completion date for a project based on current progress\n\nParameters:\n project_id (str): The ID of the project to be analyzed\n\nReturns:\n str: Estimated date of completion\n""""""\n', '\n\ndef calculate_effort_for_task(task_id):\n""""""\nCalculates the effort spent on a specific task by summing subtasks\n\nParameters:\n task_id (str): The ID of the task for which the effort needs to be calculated\n\nReturns:\n float: Total effort spent on the task\n""""""\n', '\n\ndef mark_ticket_for_review(ticket_id, reviewer_id):\n""""""\nMarks a ticket for review by a specific user\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked for review\n reviewer_id (str): The ID of the user who should review the ticket\n\nReturns:\n None\n""""""\n']","Find all work items with severity ""high"" that are overdue, notify user ""TechLead"" of these tasks, then reassign them to user ""SupportAgent"".","var_1 = works_list(ticket.severity=[""high""], ticket.needs_response=True)
var_2 = search_object_by_name(query=""TechLead"")
var_3 = notify_user_of_overdue_tasks(user_id=var_2)
var_4 = search_object_by_name(query=""SupportAgent"")
var_5 = reassign_work_item_owner(work_id=var_1, new_owner_id=var_4)"
"['\n\ndef remove_object_by_id(object_id):\n""""""\nRemoves an object from the system by its ID\n\nParameters:\n object_id (str): The ID of the object to remove\n\nReturns:\n None\n""""""\n', '\n\ndef create_report_for_sprint(sprint_id, report_type):\n""""""\nGenerates a report for a given sprint\n\nParameters:\n sprint_id (str): The ID of the sprint\n report_type (str): The type of report to be generated\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef get_project_timeline(project_id):\n""""""\nRetrieves the timeline and key milestones of a project\n\nParameters:\n project_id (str): The ID of the project for which the timeline is requested\n\nReturns:\n list: Key milestones and dates for the project timeline\n""""""\n', 'def calculate_due_dates(work_item_ids, urgency_level):\n""""""\nCalculates the due dates for given work items based on their urgency\n\nParameters:\n work_item_ids (list): A list of work item IDs for which due dates are required\n urgency_level (str): The urgency level. Allowed values: \'high\', \'medium\', \'low\'\n\nReturns:\n list: Due dates for the specified work items\n""""""\n', '\n\ndef generate_report_by_tag(tag_id, include_archived=False):\n""""""\nGenerates a report for all work items associated with the given tag\n\nParameters:\n tag_id (str): The ID of the tag used to filter work items\n include_archived (bool): Include archived work items if set to True\n\nReturns:\n list: Work items associated with the tag\n""""""\n', '\n\ndef remove_object_from_archive(object_id):\n""""""\nRemoves an object from the system archive, making it active again\n\nParameters:\n object_id (str): The ID of the object to be removed from the archive\n\nReturns:\n bool: True if the object was successfully removed, False otherwise\n""""""\n', 'def link_issues_to_project(issue_ids, project_id):\n""""""\nLinks the given issues to the specified project\n\nParameters:\n issue_ids (list): A list of issue IDs to be linked to the project\n project_id (str): The ID of the project to which the issues should be linked\n\nReturns:\n bool: Status of the linking action\n""""""\n', '\n\ndef check_inventory_availability(part_id, minimum_quantity=1):\n""""""\nChecks if the inventory has the specified part in at least the minimum quantity\n\nParameters:\n part_id (str): The ID of the part to check in inventory\n minimum_quantity (int): The minimum quantity to check for; defaults to 1\n\nReturns:\n bool: True if the minimum quantity is available; otherwise False\n""""""\n', '\n\ndef find_team_members(team_id):\n""""""\nReturns a list of user IDs that are members of the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: User IDs of the team members\n""""""\n', '\n\ndef list_recent_activities(user_id, limit=10):\n""""""\nLists the most recent activities performed by a user\n\nParameters:\n user_id (str): The ID of the user whose activities are to be listed\n limit (int): The maximum number of recent activities to return\n\nReturns:\n list: Recent activities of the user\n""""""\n']","Check the inventory for part ""ENG-456"" and if available, link related issues to the ""ElectroDrive"" project.","var_1 = check_inventory_availability(part_id=""ENG-456"")
var_2 = search_object_by_name(query=""ElectroDrive"")
var_3 = works_list(applies_to_part=[""ENG-456""], type=[""issue""])
var_4 = link_issues_to_project(issue_ids=var_3, project_id=var_2)"
"['\n\ndef remove_object_from_archive(object_id):\n""""""\nRemoves an object from the system archive, making it active again\n\nParameters:\n object_id (str): The ID of the object to be removed from the archive\n\nReturns:\n bool: True if the object was successfully removed, False otherwise\n""""""\n', '\n\ndef assign_tasks_to_employee(task_ids, employee_id):\n""""""\nAssigns a list of tasks to the specified employee\n\nParameters:\n task_ids (list): A list of task IDs to be assigned\n employee_id (str): The ID of the employee to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment was successful, False otherwise\n""""""\n', '\n\ndef estimate_cost_for_work(work_id, cost_per_hour=100):\n""""""\nEstimates the cost for completing a work item based on a cost per hour rate\n\nParameters:\n work_id (str): The ID of the work item to estimate cost for\n cost_per_hour (float): The cost per hour. Default is \'100\'\n\nReturns:\n float: Estimated cost\n""""""', '\n\ndef calculate_progress(project_id):\n""""""\nCalculates the overall progress of a given project as a percentage\n\nParameters:\n project_id (str): The ID of the project for which progress is being calculated\n\nReturns:\n float: The progress percentage of the project\n""""""\n', '\n\ndef calculate_workload_for_user(user_id):\n""""""\nCalculates the total number of open work items assigned to a user\n\nParameters:\n user_id (str): The ID of the user for whom to calculate the workload\n\nReturns:\n int: The total number of open work items\n""""""\n', '\n\ndef get_ticket_comments(ticket_id):\n""""""\nRetrieves the comments attached to a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose comments are being retrieved\n\nReturns:\n list: Comments associated with the ticket\n""""""\n', '\n\ndef get_team_member_list(team_id):\n""""""\nRetrieves a list of team members for the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: List of team member IDs\n""""""\n', '\n\ndef assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task will be assigned\n\nReturns:\n bool: True if assignment was successful, otherwise False\n""""""\n', '\n\ndef check_object_permission(user_id, object_id):\n""""""\nChecks if a user has permission to access a specific object\n\nParameters:\n user_id (str): The ID of the user\n object_id (str): The ID of the object to check permission for\n\nReturns:\n bool: True if the user has permission, False otherwise\n""""""\n', 'def assign_ticket_to_user(ticket_id, user_id):\n""""""\nAssigns a specific ticket to a user\n\nParameters:\n ticket_id (str): The ID of the ticket to be assigned\n user_id (str): The ID of the user to whom the ticket will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n']","Estimate the cost for work items created by user ""ArchitectAnna"" with severity ""high,"" then assign those tasks to employee ""EmployeeEve.""","var_1 = search_object_by_name(query=""ArchitectAnna"")
var_2 = works_list(created_by=[var_1], ticket.severity=[""high""], type=[""task""])
var_3 = estimate_cost_for_work(work_id=var_2)
var_4 = assign_tasks_to_employee(task_ids=var_2, employee_id=""EmployeeEve"")"
"['\n\ndef remove_object_from_inventory(object_id):\n""""""\nRemoves an object from the inventory system based on the object ID\n\nParameters:\n object_id (str): The ID of the object to remove from inventory\n\nReturns:\n bool: True if the removal was successful, False otherwise\n""""""\n', '\n\ndef filter_projects_by_category(category_id, active_only=True):\n""""""\nFilters projects by their category and returns a list of project IDs\n\nParameters:\n category_id (str): The ID of the category to filter projects by\n active_only (bool): Whether to return only active projects\n\nReturns:\n list: List of project IDs matching the category filter\n""""""\n', '\n\ndef archive_old_tickets(older_than_date, active_status=False):\n""""""\nArchives tickets that are older than the specified date, optionally filters by active status and returns the IDs\n\nParameters:\n older_than_date (str): A date in the format \'YYYY-MM-DD\', to filter tickets older than this date\n active_status (bool): If True, only archives tickets that are currently active; defaults to False\n\nReturns:\n str: ID of tickets archived\n""""""\n', '\n\ndef estimate_completion_time(task_id):\n""""""\nEstimates the completion time for a given task\n\nParameters:\n task_id (str): The ID of the task for which to estimate completion time\n\nReturns:\n float: The estimated number of hours to complete the task\n""""""\n', '\n\ndef validate_user_permissions(user_id, required_permissions):\n""""""\nChecks if the user has the specified permissions\n\nParameters:\n user_id (str): The ID of the user whose permissions need to be checked\n required_permissions (list): A list of permissions to check against the user\'s permissions\n\nReturns:\n bool: True if the user has all the required permissions, False otherwise\n""""""\n', '\n\ndef link_related_objects(object_id, related_object_id):\n""""""\nCreates a link between two related objects in the system\n\nParameters:\n object_id (str): The ID of the primary object\n related_object_id (str): The ID of the object to relate to the primary\n\nReturns:\n bool: True if the objects were successfully linked, False otherwise\n""""""\n', '\n\ndef estimate_work_hours(work_id):\n""""""\nEstimates the number of hours required to complete a specific work item\n\nParameters:\n work_id (str): The ID of the work item for which the estimation is to be made\n\nReturns:\n float: Estimated hours required to complete the work item\n""""""\n', '\n\ndef retrieve_archived_documents(archive_id, keyword=None):\n""""""\nRetrieves documents from the archive based on optional keyword\n\nParameters:\n archive_id (str): The ID of the archive from which to retrieve documents\n keyword (str): Optional keyword to filter documents, default is \'None\'\n\nReturns:\n list: A list of documents matching the keyword if provided, otherwise all documents from the archive\n""""""', '\n\ndef convert_task_to_subtask(task_id, parent_task_id):\n""""""\nConverts a standalone task into a subtask of another task\n\nParameters:\n task_id (str): The ID of the task to be converted\n parent_task_id (str): The ID of the parent task to which the subtask will be linked\n\nReturns:\n bool: True if the conversion was successful, False otherwise\n""""""\n', '\n\ndef list_completed_tasks_by_user(user_id):\n""""""\nLists all completed tasks for a specific user\n\nParameters:\n user_id (str): The ID of the user whose completed tasks need to be listed\n\nReturns:\n list: List of completed task IDs\n""""""\n']","Archive tickets older than ""2021-01-01"" that are active, then retrieve similar work items to those archived tickets and summarize them for a report.","var_1 = archive_old_tickets(older_than_date=""2021-01-01"", active_status=True)
var_2 = get_similar_work_items(work_id=var_1)
var_3 = summarize_objects(objects=var_2)"
"['\n\ndef remove_object_from_inventory(object_id):\n""""""\nRemoves an object from the inventory system based on the object ID\n\nParameters:\n object_id (str): The ID of the object to remove from inventory\n\nReturns:\n bool: True if the removal was successful, False otherwise\n""""""\n', '\n\ndef list_work_attachments(work_id):\n""""""\nLists all attachments associated with a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n list: Attachment file IDs\n""""""\n', 'def update_issue_status(issue_id, new_status):\n""""""\nUpdates the status of an issue\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef fetch_ticket_history(ticket_id, history_limit=10):\n""""""\nFetches the history of changes to a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket for which the history is requested\n history_limit (int): Maximum number of history entries to retrieve. The default is \'10\'\n\nReturns:\n list: A list of history records for the ticket\n""""""\n', '\n\ndef reassign_work_item_owner(work_id, new_owner_id):\n""""""\nReassigns the owner of a work item to a new user\n\nParameters:\n work_id (str): The ID of the work item to be reassigned\n new_owner_id (str): The user ID of the new owner\n\nReturns:\n bool: True if reassignment is successful, False otherwise\n""""""\n', 'def filter_users_by_department(department_id=None, active_only=False):\n""""""\nFilters a list of users that belong to the specified department\n\nParameters:\n department_id (str): The ID of the department to filter users\n active_only (bool): Filters for only active users if set to True\n\nReturns:\n list: Users in the specified department\n""""""\n', '\n\ndef remove_work_item_from_sprint(work_id, sprint_id):\n""""""\nRemoves the specified work item from a sprint\n\nParameters:\n work_id (str): The ID of the work item to be removed\n sprint_id (str): The ID of the sprint from which to remove the work item\n\nReturns:\n bool: True if the removal was successful, False otherwise\n""""""\n', '\n\ndef validate_work_item_status(work_item_id, status_options):\n""""""\nChecks if the given work item has a status that is among the provided options\n\nParameters:\n work_item_id (str): The ID of the work item to check\n status_options (list): A list of valid status options\n\nReturns:\n bool: True if status is valid, False otherwise\n""""""\n', '\n\ndef assign_tasks_to_employee(task_ids, employee_id):\n""""""\nAssigns a list of tasks to the specified employee\n\nParameters:\n task_ids (list): A list of task IDs to be assigned\n employee_id (str): The ID of the employee to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment was successful, False otherwise\n""""""\n', '\n\ndef generate_unique_identifier(prefix, use_timestamp=True):\n""""""\nGenerates a unique identifier with an optional timestamp\n\nParameters:\n prefix (str): A prefix for the identifier\n use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True\n\nReturns:\n str: The generated unique identifier\n""""""\n\n```']","Find all work items with severity ""high"" that are owned by ""TeamLead"", remove them from sprint ""S123"", and then fetch their attachment lists.","var_1 = works_list(owned_by=[""TeamLead""], ticket.severity=[""high""])
var_2 = get_sprint_id()
var_3 = remove_work_item_from_sprint(work_id=var_1, sprint_id=""S123"")
var_4 = list_work_attachments(work_id=var_1)"
"['\n\ndef remove_user_from_project(user_id, project_id):\n""""""\nRemoves a user from a project\n\nParameters:\n user_id (str): The ID of the user to be removed\n project_id (str): The ID of the project from which the user is to be removed\n\nReturns:\n bool: True if the user is successfully removed, False otherwise\n""""""', '\n\ndef check_availability_of_part(part_id):\n""""""\nChecks if a specific part is available in inventory\n\nParameters:\n part_id (str): The ID of the part to check for availability\n\nReturns:\n bool: True if the part is available, False otherwise\n""""""\n', 'def assign_ticket_to_user(ticket_id, user_id):\n""""""\nAssigns a specific ticket to a user\n\nParameters:\n ticket_id (str): The ID of the ticket to be assigned\n user_id (str): The ID of the user to whom the ticket will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n', '\n\ndef get_ticket_comments(ticket_id):\n""""""\nRetrieves the comments attached to a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose comments are being retrieved\n\nReturns:\n list: Comments associated with the ticket\n""""""\n', 'def retrieve_sprint_workload(sprint_id):\n""""""\nCalculates the total workload for a given sprint based on the work items associated with it\n\nParameters:\n sprint_id (str): The ID of the sprint for workload calculation\n\nReturns:\n float: Total workload in hours\n""""""\n', '\n\ndef estimate_ticket_resolution_time(ticket_id):\n""""""\nEstimates the resolution time for a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket to estimate time for\n\nReturns:\n float: Estimated time in hours to resolve the ticket\n""""""\n', '\n\ndef generate_progress_report(project_id):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which to generate the report\n\nReturns:\n str: A string summary of the project\'s progress report\n""""""\n', '\n\ndef filter_projects_by_category(category_id, active_only=True):\n""""""\nFilters projects by their category and returns a list of project IDs\n\nParameters:\n category_id (str): The ID of the category to filter projects by\n active_only (bool): Whether to return only active projects\n\nReturns:\n list: List of project IDs matching the category filter\n""""""\n', 'def assign_tickets_to_user(ticket_ids, user_id):\n""""""\nAssigns a set of tickets to a specified user\n\nParameters:\n ticket_ids (list): A list of ticket IDs to be assigned\n user_id (str): The ID of the user to whom the tickets will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef update_stage_of_work_item(work_item_id, new_stage):\n""""""\nUpdates the stage of a work item\n\nParameters:\n work_item_id (str): The ID of the work item to update\n new_stage (str): The new stage to which the work item should be moved\n\nReturns:\n bool: True if the stage is successfully updated, False otherwise\n""""""']","Check the availability of part ""PART-987"", assign all high severity tickets related to it to user ""TechLead"", and generate a progress report for project ""PRJ-102"".","var_1 = check_availability_of_part(part_id=""PART-987"")
var_2 = works_list(applies_to_part=[""PART-987""], ticket.severity=[""high""], type=[""ticket""])
var_3 = who_am_i()
var_4 = assign_tickets_to_user(ticket_ids=var_2, user_id=""TechLead"")
var_5 = generate_progress_report(project_id=""PRJ-102"")"
"['\n\ndef remove_work_item_from_sprint(work_id, sprint_id):\n""""""\nRemoves the specified work item from a sprint\n\nParameters:\n work_id (str): The ID of the work item to be removed\n sprint_id (str): The ID of the sprint from which to remove the work item\n\nReturns:\n bool: True if the removal was successful, False otherwise\n""""""\n', '\n\ndef estimate_time_for_task(task_id, estimation_hours):\n""""""\nUpdates a task with a time estimation\n\nParameters:\n task_id (str): The ID of the task to be updated with an estimated time\n estimation_hours (float): The estimated time in hours to complete the task\n\nReturns:\n None\n""""""\n', '\n\ndef assign_tasks_to_employee(task_ids, employee_id):\n""""""\nAssigns a list of tasks to the specified employee\n\nParameters:\n task_ids (list): A list of task IDs to be assigned\n employee_id (str): The ID of the employee to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment was successful, False otherwise\n""""""\n', '\n\ndef generate_project_summary(project_id):\n""""""\nGenerates a summary report for the specified project\n\nParameters:\n project_id (str): The ID of the project to summarize\n\nReturns:\n str: A summary report of the project\n""""""\n', 'def assign_ticket_to_user(ticket_id, user_id):\n""""""\nAssigns a specific ticket to a user\n\nParameters:\n ticket_id (str): The ID of the ticket to be assigned\n user_id (str): The ID of the user to whom the ticket will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n', '\n\ndef filter_objects_by_type(object_ids, object_type):\n""""""\nFilters a list of objects based on their type\n\nParameters:\n object_ids (list): A list of object IDs to filter\n object_type (str): The type of objects to filter for\n\nReturns:\n list: Filtered object IDs matching the specified type\n""""""\n', '\n\ndef estimate_work_hours(work_id):\n""""""\nEstimates the number of hours required to complete a specific work item\n\nParameters:\n work_id (str): The ID of the work item for which the estimation is to be made\n\nReturns:\n float: Estimated hours required to complete the work item\n""""""\n', '\n\ndef calculate_progress(project_id):\n""""""\nCalculates the overall progress of a given project as a percentage\n\nParameters:\n project_id (str): The ID of the project for which progress is being calculated\n\nReturns:\n float: The progress percentage of the project\n""""""\n', 'def retrieve_sprint_workload(sprint_id):\n""""""\nCalculates the total workload for a given sprint based on the work items associated with it\n\nParameters:\n sprint_id (str): The ID of the sprint for workload calculation\n\nReturns:\n float: Total workload in hours\n""""""\n', '\n\ndef list_user_tasks(user_id, completed=False):\n""""""\nLists all tasks assigned to a user, optionally filtering for completed tasks\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be listed\n completed (bool): If True, only completed tasks are returned\n\nReturns:\n list: A list of tasks assigned to the user\n""""""\n']","Estimate the time required for task ""TASK-456"", assign it to employee ""EMP234"", and then calculate the progress of project ""PRJ321"".","var_1 = estimate_time_for_task(task_id=""TASK-456"", estimation_hours=0)
var_2 = assign_tasks_to_employee(task_ids=[""TASK-456""], employee_id=""EMP234"")
var_3 = calculate_progress(project_id=""PRJ321"")"
"['\n\ndef retrieve_archived_documents(archive_id, keyword=None):\n""""""\nRetrieves documents from the archive based on optional keyword\n\nParameters:\n archive_id (str): The ID of the archive from which to retrieve documents\n keyword (str): Optional keyword to filter documents, default is \'None\'\n\nReturns:\n list: A list of documents matching the keyword if provided, otherwise all documents from the archive\n""""""', '\n\ndef list_completed_tasks_by_user(user_id, project_id=None):\n""""""\nLists all tasks completed by a given user, optionally filtered by project\n\nParameters:\n user_id (str): The ID of the user\n project_id (str, optional): The ID of the project to filter tasks\n\nReturns:\n list: List of task IDs completed by the user\n""""""\n', '\n\ndef assign_tasks_to_employee(task_ids, employee_id):\n""""""\nAssigns a list of tasks to the specified employee\n\nParameters:\n task_ids (list): A list of task IDs to be assigned\n employee_id (str): The ID of the employee to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment was successful, False otherwise\n""""""\n', '\n\ndef toggle_feature_access(feature_id, user_id, enable_access):\n""""""\nToggles access to a specific feature for a user\n\nParameters:\n feature_id (str): The ID of the feature to toggle access\n user_id (str): The ID of the user whose access will be toggled\n enable_access (bool): \'True\' to enable access, \'False\' to disable\n\nReturns:\n bool: The resulting access status\n""""""\n', '\n\ndef validate_data_integrity(data_point_ids):\n""""""\nChecks the integrity of a list of data points in the system\n\nParameters:\n data_point_ids (list): List of data point IDs to validate\n\nReturns:\n list: Validation results with status (True or False) for each data point\n""""""\n', '\n\ndef filter_tickets_by_date(ticket_ids, start_date, end_date=None):\n""""""\nFilters a list of ticket IDs based on a date range\n\nParameters:\n ticket_ids (list): A list of ticket IDs to filter\n start_date (str): The start date for the range\n end_date (str, optional): The end date for the range, defaults to None\n\nReturns:\n list: Filtered list of ticket IDs\n""""""\n', '\n\ndef get_user_avatar(user_id):\n""""""\nRetrieves the avatar image URL for the specified user\n\nParameters:\n user_id (str): The ID of the user whose avatar is to be retrieved\n\nReturns:\n str: URL of the user\'s avatar image\n""""""\n', '\n\ndef list_user_permissions(user_id):\n""""""\nLists all the permissions that a user has within the system\n\nParameters:\n user_id (str): The ID of the user for whom permissions are being listed\n\nReturns:\n list: A list of permissions that the user possesses\n""""""\n', '\n\ndef assign_tasks_to_user(task_ids, user_id):\n""""""\nAssigns a list of task IDs to the provided user\n\nParameters:\n task_ids (list): List of task IDs to be assigned\n user_id (str): The ID of the user to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n', 'def assign_tickets_to_user(ticket_ids, user_id):\n""""""\nAssigns a set of tickets to a specified user\n\nParameters:\n ticket_ids (list): A list of ticket IDs to be assigned\n user_id (str): The ID of the user to whom the tickets will be assigned\n\nReturns:\n None\n""""""\n']","Retrieve all documents from archive ""ARCH123"" using the keyword ""safety"", assign the resulting documents to employee ""DocManager42"", and list the permissions of the user ""DocManager42"".","var_1 = retrieve_archived_documents(archive_id=""ARCH123"", keyword=""safety"")
var_2 = assign_tasks_to_employee(task_ids=var_1, employee_id=""DocManager42"")
var_3 = list_user_permissions(user_id=""DocManager42"")"
"['\n\ndef retrieve_document_by_keyword(keyword):\n""""""\nRetrieves a document ID containing the specified keyword\n\nParameters:\n keyword (str): The keyword to search for in the documents\n\nReturns:\n str: ID of the document containing the keyword\n""""""', '\n\ndef calculate_user_workload(user_id):\n""""""\nCalculates the workload of a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be calculated\n\nReturns:\n float: The calculated workload value\n""""""\n', '\n\ndef extract_contact_info(text_id, entity_type):\n""""""\nExtracts contact information from a text source based on a given entity type\n\nParameters:\n text_id (str): The ID of the text source from which to extract contact information\n entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'\n\nReturns:\n list: Extracted contact information\n""""""', '\n\ndef extend_sprint_end_date(sprint_id, new_end_date):\n""""""\nExtends the end date of a current sprint to a new date\n\nParameters:\n sprint_id (str): The ID of the sprint to extend\n new_end_date (str): The new end date for the sprint in YYYY-MM-DD format\n\nReturns:\n bool: True if the sprint end date was extended, False otherwise\n""""""\n', '\n\ndef list_completed_items_by_user(user_id):\n""""""\nLists items that have been completed by the given user\n\nParameters:\n user_id (str): The ID of the user whose completed items are being requested\n\nReturns:\n list: Completed items by the user\n""""""\n', '\n\ndef toggle_feature_access(feature_id, user_id, enable_access):\n""""""\nToggles access to a specific feature for a user\n\nParameters:\n feature_id (str): The ID of the feature to toggle access\n user_id (str): The ID of the user whose access will be toggled\n enable_access (bool): \'True\' to enable access, \'False\' to disable\n\nReturns:\n bool: The resulting access status\n""""""\n', '\n\ndef calculate_progress_percentage(project_id):\n""""""\nCalculates the progress percentage of the given project\n\nParameters:\n project_id (str): The ID of the project for which to calculate progress\n\nReturns:\n float: The percentage of project completion\n""""""\n', '\n\ndef remove_object_from_sprint(object_id, sprint_id):\n""""""\nRemoves a specified object from a sprint and returns the new list\n\nParameters:\n object_id (str): The ID of the object to be removed\n sprint_id (str): The ID of the project from which the object should be removed\n\nReturns:\n list: Returns the updated list of sprint objects\n""""""\n', '\n\ndef schedule_meeting_with_user(user_id, duration=30, urgent=False):\n""""""\nSchedules a meeting with a specified user\n\nParameters:\n user_id (str): The ID of the user with whom to schedule a meeting\n duration (int): Duration of the meeting in minutes, default is \'30\'\n urgent (bool): Whether the meeting is urgent, defaults to False\n\nReturns:\n str: The ID of the scheduled meeting\n""""""\n', '\n\ndef update_stage_of_work_item(work_item_id, new_stage):\n""""""\nUpdates the stage of a work item\n\nParameters:\n work_item_id (str): The ID of the work item to update\n new_stage (str): The new stage to which the work item should be moved\n\nReturns:\n bool: True if the stage is successfully updated, False otherwise\n""""""']","Calculate the workload for user ""EngineerEmma"" and list all high severity tickets they own, then schedule an urgent meeting with them to discuss.","var_1 = search_object_by_name(query=""EngineerEmma"")
var_2 = calculate_user_workload(user_id=var_1)
var_3 = works_list(created_by=[var_1], ticket.severity=[""high""], type=[""ticket""])
var_4 = schedule_meeting_with_user(user_id=var_1, urgent=True)"
"['\n\ndef retrieve_user_contact_info(user_id):\n""""""\nRetrieves the contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact info is requested\n\nReturns:\n str: Contact information of the user\n""""""\n', '\n\ndef convert_task_to_ticket(task_id):\n""""""\nConverts a task into a ticket in the system\n\nParameters:\n task_id (str): The ID of the task to be converted\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', '\ndef update_user_ID(user_id, status):\n""""""\nUpdates the status of a user account in the system and returns the updated id\n\nParameters:\n user_id (str): The ID of the user whose status is to be updated\n status (str): The new status to apply to the user account\n\nReturns:\n str: updated User Id\n""""""\n', '\n\ndef filter_projects_by_category(category_id, active_only=True):\n""""""\nFilters projects by their category and returns a list of project IDs\n\nParameters:\n category_id (str): The ID of the category to filter projects by\n active_only (bool): Whether to return only active projects\n\nReturns:\n list: List of project IDs matching the category filter\n""""""\n', '\n\ndef notify_user_of_overdue_tasks(user_id):\n""""""\nNotifies a user of any overdue tasks assigned to them\n\nParameters:\n user_id (str): The ID of the user to check for overdue tasks\n\nReturns:\n None\n""""""\n', '\n\ndef get_sprint_history(sprint_id):\n""""""\nRetrieves the change history of a sprint\n\nParameters:\n sprint_id (str): The ID of the ticket\n\nReturns:\n list: A list of changes made to the sprint\n""""""\n', 'def filter_users_by_department(department_id=None, active_only=False):\n""""""\nFilters a list of users that belong to the specified department\n\nParameters:\n department_id (str): The ID of the department to filter users\n active_only (bool): Filters for only active users if set to True\n\nReturns:\n list: Users in the specified department\n""""""\n', '\n\ndef merge_duplicate_tasks(primary_task_id, duplicate_task_ids):\n""""""\nMerges duplicate tasks into a primary task\n\nParameters:\n primary_task_id (str): The ID of the primary task which remains after the merge\n duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged\n\nReturns:\n None\n""""""\n', '\n\ndef extend_sprint_end_date(sprint_id, new_end_date):\n""""""\nExtends the end date of a current sprint to a new date\n\nParameters:\n sprint_id (str): The ID of the sprint to extend\n new_end_date (str): The new end date for the sprint in YYYY-MM-DD format\n\nReturns:\n bool: True if the sprint end date was extended, False otherwise\n""""""\n', '\n\ndef estimate_time_for_task(task_id, estimation_hours):\n""""""\nUpdates a task with a time estimation\n\nParameters:\n task_id (str): The ID of the task to be updated with an estimated time\n estimation_hours (float): The estimated time in hours to complete the task\n\nReturns:\n None\n""""""\n']","Retrieve the contact information for user ""User123"", filter their active projects by category ""CAT-789"", and summarize those projects.","var_1 = search_object_by_name(query=""User123"")
var_2 = retrieve_user_contact_info(user_id=var_1)
var_3 = filter_projects_by_category(category_id=""CAT-789"", active_only=True)
var_4 = summarize_objects(objects=var_3)"
"['\n\ndef retrieve_user_workload(user_id):\n""""""\nRetrieves the current workload for the specified user\n\nParameters:\n user_id (str): The ID of the user whose workload is to be retrieved\n\nReturns:\n list: A list containing workload details\n""""""\n', '\n\ndef generate_report_by_tag(tag_id, include_archived=False):\n""""""\nGenerates a report for all work items associated with the given tag\n\nParameters:\n tag_id (str): The ID of the tag used to filter work items\n include_archived (bool): Include archived work items if set to True\n\nReturns:\n list: Work items associated with the tag\n""""""\n', '\n\ndef calculate_estimated_effort(work_id):\n""""""\nCalculates the estimated effort required to complete a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n float: Estimated effort in hours\n""""""\n', '\n\ndef mark_item_as_duplicated(work_item_id, duplicate_of_id):\n""""""\nMarks a work item as a duplicate of another\n\nParameters:\n work_item_id (str): The ID of the work item that is a duplicate\n duplicate_of_id (str): The ID of the work item of which it is a duplicate\n\nReturns:\n bool: True if the item is successfully marked, False otherwise\n""""""\n', 'def calculate_due_dates(work_item_ids, urgency_level):\n""""""\nCalculates the due dates for given work items based on their urgency\n\nParameters:\n work_item_ids (list): A list of work item IDs for which due dates are required\n urgency_level (str): The urgency level. Allowed values: \'high\', \'medium\', \'low\'\n\nReturns:\n list: Due dates for the specified work items\n""""""\n', 'def retrieve_sprint_workload(sprint_id):\n""""""\nCalculates the total workload for a given sprint based on the work items associated with it\n\nParameters:\n sprint_id (str): The ID of the sprint for workload calculation\n\nReturns:\n float: Total workload in hours\n""""""\n', '\n\ndef list_work_attachments(work_id):\n""""""\nLists all attachments associated with a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n list: Attachment file IDs\n""""""\n', '\n\ndef extract_keywords_from_text(text):\n""""""\nGiven a text, extracts and returns the main keywords\n\nParameters:\n text (str): The text from which keywords are to be extracted\n\nReturns:\n list: A list of extracted keywords\n""""""\n', '\n\ndef filter_records_by_date(record_ids, start_date, end_date):\n""""""\nFilters a list of record IDs based on a date range\n\nParameters:\n record_ids (list): List of record IDs to filter\n start_date (str): Start date for the filtering in \'YYYY-MM-DD\' format\n end_date (str): End date for the filtering in \'YYYY-MM-DD\' format\n\nReturns:\n list: Filtered record IDs\n""""""\n', '\n\ndef generate_report_from_data(dataset_id, report_type=""summary""):\n""""""\nGenerates a specific type of report from a dataset\n\nParameters:\n dataset_id (str): The ID of the dataset from which to generate the report\n report_type (str): The type of report to generate, default is \'summary\'\n\nReturns:\n str: The ID of the generated report\n""""""\n']","Retrieve the workload for user ""EngineerEmma"", filter their work items for the current sprint, and generate a summarized report.","var_1 = who_am_i()
var_2 = retrieve_user_workload(user_id=""EngineerEmma"")
var_3 = get_sprint_id()
var_4 = filter_records_by_date(record_ids=var_2, start_date=var_3, end_date=var_3)
var_5 = summarize_objects(objects=var_4)"
"['\n\ndef set_user_permission(user_id, permission_level):\n""""""\nSets a specific permission level for a user account\n\nParameters:\n user_id (str): The ID of the user to set permissions for\n permission_level (str): The level of permission to assign e.g., \'read\', \'write\', \'admin\'\n\nReturns:\n bool: True if the permission was set successfully, False otherwise\n""""""\n', '\n\ndef check_availability_of_part(part_id):\n""""""\nChecks if a specific part is available in inventory\n\nParameters:\n part_id (str): The ID of the part to check for availability\n\nReturns:\n bool: True if the part is available, False otherwise\n""""""\n', '\n\ndef get_team_member_list(team_id):\n""""""\nRetrieves a list of team members for the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: List of team member IDs\n""""""\n', '\n\ndef list_user_tasks(user_id, completed=False):\n""""""\nLists all tasks assigned to a user, optionally filtering for completed tasks\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be listed\n completed (bool): If True, only completed tasks are returned\n\nReturns:\n list: A list of tasks assigned to the user\n""""""\n', '\n\ndef list_recent_activities(user_id, limit=10):\n""""""\nLists the most recent activities performed by a user\n\nParameters:\n user_id (str): The ID of the user whose activities are to be listed\n limit (int): The maximum number of recent activities to return\n\nReturns:\n list: Recent activities of the user\n""""""\n', '\n\ndef fetch_users_from_group(group_id):\n""""""\nRetrieves a list of user IDs that belong to the specified group\n\nParameters:\n group_id (str): The ID of the group\n\nReturns:\n list: User IDs belonging to the group\n""""""\n', '\n\ndef archive_old_tickets(older_than_date, active_status=False):\n""""""\nArchives tickets that are older than the specified date, optionally filters by active status and returns the IDs\n\nParameters:\n older_than_date (str): A date in the format \'YYYY-MM-DD\', to filter tickets older than this date\n active_status (bool): If True, only archives tickets that are currently active; defaults to False\n\nReturns:\n str: ID of tickets archived\n""""""\n', '\n\ndef list_completed_items_by_user(user_id):\n""""""\nLists items that have been completed by the given user\n\nParameters:\n user_id (str): The ID of the user whose completed items are being requested\n\nReturns:\n list: Completed items by the user\n""""""\n', '\n\ndef get_task_dependencies(task_id):\n""""""\nReturns a list of task IDs that are dependencies for the given task\n\nParameters:\n task_id (str): The ID of the task for which dependencies are requested\n\nReturns:\n list: Dependency task IDs\n""""""\n', '\n\ndef list_completed_tasks_by_user(user_id):\n""""""\nLists all completed tasks for a specific user\n\nParameters:\n user_id (str): The ID of the user whose completed tasks need to be listed\n\nReturns:\n list: List of completed task IDs\n""""""\n']","Check if part ""PART-456"" is available in inventory, list all work items related to it, and add those work items to the current sprint.","var_1 = check_availability_of_part(part_id=""PART-456"")
var_2 = works_list(applies_to_part=[""PART-456""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)"
"['\n\ndef set_user_permission(user_id, permission_level):\n""""""\nSets a specific permission level for a user account\n\nParameters:\n user_id (str): The ID of the user to set permissions for\n permission_level (str): The level of permission to assign e.g., \'read\', \'write\', \'admin\'\n\nReturns:\n bool: True if the permission was set successfully, False otherwise\n""""""\n', '\n\ndef estimate_ticket_resolution_time(ticket_id):\n""""""\nEstimates the resolution time for a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket to estimate time for\n\nReturns:\n float: Estimated time in hours to resolve the ticket\n""""""\n', '\n\ndef remove_user_from_project(user_id, project_id):\n""""""\nRemoves a user from a project\n\nParameters:\n user_id (str): The ID of the user to be removed\n project_id (str): The ID of the project from which the user is to be removed\n\nReturns:\n bool: True if the user is successfully removed, False otherwise\n""""""', '\n\ndef remove_object_by_id(object_id):\n""""""\nRemoves an object from the system by its ID\n\nParameters:\n object_id (str): The ID of the object to remove\n\nReturns:\n None\n""""""\n', '\n\ndef schedule_meeting_with_user(user_id, duration=30, urgent=False):\n""""""\nSchedules a meeting with a specified user\n\nParameters:\n user_id (str): The ID of the user with whom to schedule a meeting\n duration (int): Duration of the meeting in minutes, default is \'30\'\n urgent (bool): Whether the meeting is urgent, defaults to False\n\nReturns:\n str: The ID of the scheduled meeting\n""""""\n', '\n\ndef merge_duplicate_tasks(primary_task_id, duplicate_task_ids):\n""""""\nMerges duplicate tasks into a primary task\n\nParameters:\n primary_task_id (str): The ID of the primary task which remains after the merge\n duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged\n\nReturns:\n None\n""""""\n', '\n\ndef update_stage_of_work_item(work_item_id, new_stage):\n""""""\nUpdates the stage of a work item\n\nParameters:\n work_item_id (str): The ID of the work item to update\n new_stage (str): The new stage to which the work item should be moved\n\nReturns:\n bool: True if the stage is successfully updated, False otherwise\n""""""', '\n\ndef calculate_work_item_duration(work_id):\n""""""\nCalculates the total time taken to complete a work item\n\nParameters:\n work_id (str): The ID of the work item for which duration is to be calculated\n\nReturns:\n float: The total duration in hours\n""""""\n', 'def assign_tickets_to_user(ticket_ids, user_id):\n""""""\nAssigns a set of tickets to a specified user\n\nParameters:\n ticket_ids (list): A list of ticket IDs to be assigned\n user_id (str): The ID of the user to whom the tickets will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef validate_project_completion(project_id):\n""""""\nValidates if all tasks within a project are completed\n\nParameters:\n project_id (str): The ID of the project to validate\n\nReturns:\n bool: True if completed, False otherwise\n""""""\n']","Estimate the resolution time for tickets created by ""User123"", assign them to ""TechLead"", and then validate if the project ""Project456"" is completed.","var_1 = search_object_by_name(query=""User123"")
var_2 = works_list(created_by=[var_1], type=[""ticket""])
var_3 = estimate_ticket_resolution_time(ticket_id=var_2[0])
var_4 = search_object_by_name(query=""TechLead"")
var_5 = assign_tickets_to_user(ticket_ids=var_2, user_id=var_4)
var_6 = validate_project_completion(project_id=""Project456"")"
"['\n\ndef track_time_on_task(task_id, hours_spent):\n""""""\nTracks time spent on a task by logging the number of hours\n\nParameters:\n task_id (str): The ID of the task on which time is spent\n hours_spent (float): The number of hours spent on the task\n\nReturns:\n bool: Status of the time tracking\n""""""\n', '\n\ndef generate_report_for_sprint(sprint_id):\n""""""\nGenerates a performance report for a specified sprint\n\nParameters:\n sprint_id (str): The ID of the sprint for which to generate the report\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef estimate_task_duration(task_id, complexity_level):\n""""""\nEstimates the duration needed to complete a task based on its complexity level\n\nParameters:\n task_id (str): The ID of the task\n complexity_level (str): The complexity level of the task. Allowed values: \'low\', \'medium\', \'high\'\n\nReturns:\n float: Estimated duration in hours\n""""""\n', '\n\ndef list_user_permissions(user_id):\n""""""\nLists all the permissions that a user has within the system\n\nParameters:\n user_id (str): The ID of the user for whom permissions are being listed\n\nReturns:\n list: A list of permissions that the user possesses\n""""""\n', '\n\ndef mark_ticket_for_review(ticket_id, reviewer_id):\n""""""\nMarks a ticket for review by a specific user\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked for review\n reviewer_id (str): The ID of the user who should review the ticket\n\nReturns:\n None\n""""""\n', 'def filter_work_by_date_range(start_date, end_date, work_type=None):\n""""""\nFilters work items based on a given date range.\n\nParameters:\n start_date (str): The start date of the desired date range\n end_date (str): The end date of the desired date range\n work_type (list): Optional filter for type of work\n\nReturns:\n list: Work items within the specified date range\n""""""\n', '\n\ndef link_related_tickets(ticket_id, related_ids):\n""""""\nLinks tickets that are related to each other\n\nParameters:\n ticket_id (str): The ID of the ticket that will be linked with related tickets\n related_ids (list): List of IDs for tickets that are related to the original ticket\n\nReturns:\n bool: True if the linking is successful, False otherwise\n""""""\n', '\n\ndef get_sprint_history(sprint_id):\n""""""\nRetrieves the change history of a sprint\n\nParameters:\n sprint_id (str): The ID of the ticket\n\nReturns:\n list: A list of changes made to the sprint\n""""""\n', '\n\ndef get_ticket_comments(ticket_id):\n""""""\nRetrieves the comments attached to a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose comments are being retrieved\n\nReturns:\n list: Comments associated with the ticket\n""""""\n', '\n\ndef list_completed_tasks_by_user(user_id):\n""""""\nLists all completed tasks for a specific user\n\nParameters:\n user_id (str): The ID of the user whose completed tasks need to be listed\n\nReturns:\n list: List of completed task IDs\n""""""\n']","List all completed tasks by user ""BackendDev"", estimate the duration for each based on complexity level ""medium"", and generate a report for the current sprint.","var_1 = search_object_by_name(query=""BackendDev"")
var_2 = list_completed_tasks_by_user(user_id=var_1)
var_3 = get_sprint_id()
var_4 = generate_report_for_sprint(sprint_id=var_3)
var_5 = estimate_task_duration(task_id=var_2[0], complexity_level=""medium"")
var_6 = estimate_task_duration(task_id=var_2[1], complexity_level=""medium"")
var_7 = estimate_task_duration(task_id=var_2[2], complexity_level=""medium"")"
"['\n\ndef update_contact_info(contact_id, new_email=None, new_phone=None):\n""""""\nUpdates the contact information for a given contact ID with new email and/or phone\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_email (str, optional): The new email address; defaults to None\n new_phone (str, optional): The new phone number; defaults to None\n\nReturns:\n bool: True if the update was successful; otherwise False\n""""""\n', '\n\ndef remove_object_by_id(object_id):\n""""""\nRemoves an object from the system by its ID\n\nParameters:\n object_id (str): The ID of the object to remove\n\nReturns:\n None\n""""""\n', '\n\ndef estimate_time_for_task(task_id, estimation_hours):\n""""""\nUpdates a task with a time estimation\n\nParameters:\n task_id (str): The ID of the task to be updated with an estimated time\n estimation_hours (float): The estimated time in hours to complete the task\n\nReturns:\n None\n""""""\n', '\n\ndef generate_report_by_tag(tag_id, include_archived=False):\n""""""\nGenerates a report for all work items associated with the given tag\n\nParameters:\n tag_id (str): The ID of the tag used to filter work items\n include_archived (bool): Include archived work items if set to True\n\nReturns:\n list: Work items associated with the tag\n""""""\n', '\n\ndef generate_report_from_data(dataset_id, report_type=""summary""):\n""""""\nGenerates a specific type of report from a dataset\n\nParameters:\n dataset_id (str): The ID of the dataset from which to generate the report\n report_type (str): The type of report to generate, default is \'summary\'\n\nReturns:\n str: The ID of the generated report\n""""""\n', 'def assign_tickets_to_user(ticket_ids, user_id):\n""""""\nAssigns a set of tickets to a specified user\n\nParameters:\n ticket_ids (list): A list of ticket IDs to be assigned\n user_id (str): The ID of the user to whom the tickets will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef mark_ticket_for_review(ticket_id, reviewer_id):\n""""""\nMarks a ticket for review by a specific user\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked for review\n reviewer_id (str): The ID of the user who should review the ticket\n\nReturns:\n None\n""""""\n', '\n\ndef fetch_user_created_work(user_id, work_type=None):\n""""""\nRetrieves work items created by a specific user\n\nParameters:\n user_id (str): The ID of the user whose work items are to be retrieved\n work_type (list): Filters for work of the provided types, e.g., [\'issue\', \'ticket\']\n\nReturns:\n list: Work items created by the user\n""""""\n', '\n\ndef list_all_blocked_tickets():\n""""""\nLists all tickets that are currently blocked\n\nReturns:\n list: Ticket IDs that are currently blocked\n""""""', '\n\ndef validate_user_permissions(user_id, required_permissions):\n""""""\nChecks if the user has the specified permissions\n\nParameters:\n user_id (str): The ID of the user whose permissions need to be checked\n required_permissions (list): A list of permissions to check against the user\'s permissions\n\nReturns:\n bool: True if the user has all the required permissions, False otherwise\n""""""\n']","Fetch work items created by user ""User123"", assign them to user ""Agent007"", and then update their contact information with a new email ""agent007@spyagency.com"".","var_1 = who_am_i()
var_2 = fetch_user_created_work(user_id=""User123"")
var_3 = assign_tickets_to_user(ticket_ids=var_2, user_id=""Agent007"")
var_4 = search_object_by_name(query=""Agent007"")
var_5 = update_contact_info(contact_id=var_4, new_email=""agent007@spyagency.com"")"
"['\n\ndef update_contact_information(contact_id, new_phone=None, new_email=None):\n""""""\nUpdates the contact information with new provided phone number or email\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_phone (str): The new phone number for the contact, default is \'None\'\n new_email (str): The new email address for the contact, default is \'None\'\n\nReturns:\n bool: Status of the update operation\n""""""\n', 'def assign_tickets_to_user(ticket_ids, user_id):\n""""""\nAssigns a set of tickets to a specified user\n\nParameters:\n ticket_ids (list): A list of ticket IDs to be assigned\n user_id (str): The ID of the user to whom the tickets will be assigned\n\nReturns:\n None\n""""""\n', 'def assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task is assigned\n\nReturns:\n None\n""""""\n', '\n\ndef generate_report(report_type, subject_id, include_summary=True):\n""""""\nGenerates a report of a specific type for a subject in the system\n\nParameters:\n report_type (str): The type of report to generate\n subject_id (str): The ID of the subject for the report\n include_summary (bool): Whether to include a summary in the report; defaults to True\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef calculate_estimated_completion(project_id):\n""""""\nCalculates the estimated completion date for a project based on current progress\n\nParameters:\n project_id (str): The ID of the project to be analyzed\n\nReturns:\n str: Estimated date of completion\n""""""\n', '\n\ndef retrieve_user_contact_info(user_id):\n""""""\nRetrieves the contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact info is requested\n\nReturns:\n str: Contact information of the user\n""""""\n', '\n\ndef archive_completed_tasks(project_id, completed_since):\n""""""\nArchives tasks that are completed within the given project since the specified time\n\nParameters:\n project_id (str): The ID of the project containing the tasks\n completed_since (str): Archive tasks completed after this timestamp\n\nReturns:\n int: Number of tasks archived\n""""""\n', '\n\ndef estimate_cost_for_work(work_id, cost_per_hour=100):\n""""""\nEstimates the cost for completing a work item based on a cost per hour rate\n\nParameters:\n work_id (str): The ID of the work item to estimate cost for\n cost_per_hour (float): The cost per hour. Default is \'100\'\n\nReturns:\n float: Estimated cost\n""""""', '\n\ndef link_related_documents(doc_id, related_doc_ids):\n""""""\nLinks related documents to the given document in the system\n\nParameters:\n doc_id (str): The ID of the document to which related documents should be linked\n related_doc_ids (list): A list of IDs for related documents\n\nReturns:\n bool: True if the operation was successful, False otherwise\n""""""\n', '\n\ndef list_completed_tasks_by_user(user_id, project_id=None):\n""""""\nLists all tasks completed by a given user, optionally filtered by project\n\nParameters:\n user_id (str): The ID of the user\n project_id (str, optional): The ID of the project to filter tasks\n\nReturns:\n list: List of task IDs completed by the user\n""""""\n']","Update contact information for user ""User123"", retrieve their updated contact info, and generate a report including a summary of all completed tasks by ""User123"".","var_1 = search_object_by_name(query=""User123"")
var_2 = update_contact_information(contact_id=var_1, new_phone=""123-456-7890"", new_email=""user123@example.com"")
var_3 = retrieve_user_contact_info(user_id=var_1)
var_4 = list_completed_tasks_by_user(user_id=var_1)
var_5 = summarize_objects(objects=var_4)
var_6 = generate_report(report_type=""completed_tasks"", subject_id=var_1, include_summary=True)"
"['\n\ndef update_issue_with_solution(issue_id, solution_text):\n""""""\nUpdates an issue with a solution description\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n solution_text (str): The description of the solution to apply to the issue\n\nReturns:\n None\n""""""\n', '\n\ndef update_ticket_status(ticket_id, new_status):\n""""""\nUpdates the status of a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket to be updated\n new_status (str): The new status to update the ticket with\n\nReturns:\n bool: True if the update was successful, otherwise False\n""""""\n', '\n\ndef extract_keywords_from_text(text):\n""""""\nGiven a text, extracts and returns the main keywords\n\nParameters:\n text (str): The text from which keywords are to be extracted\n\nReturns:\n list: A list of extracted keywords\n""""""\n', '\n\ndef merge_duplicate_tasks(primary_task_id, duplicate_task_ids):\n""""""\nMerges duplicate tasks into a primary task\n\nParameters:\n primary_task_id (str): The ID of the primary task which remains after the merge\n duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged\n\nReturns:\n None\n""""""\n', '\n\ndef check_ticket_status(ticket_id):\n""""""\nChecks the status of a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose status is to be checked\n\nReturns:\n str: The status of the ticket\n""""""\n', '\n\ndef notify_user_of_overdue_tasks(user_id):\n""""""\nNotifies a user of any overdue tasks assigned to them\n\nParameters:\n user_id (str): The ID of the user to check for overdue tasks\n\nReturns:\n None\n""""""\n', '\n\ndef filter_contacts_by_organization(organization_id, active_only=True):\n""""""\nReturns a list of contacts associated with the specified organization, optionally filtering only active contacts\n\nParameters:\n organization_id (str): The ID of the organization to filter contacts\n active_only (bool): Flag to filter only active contacts, default value \'True\'\n\nReturns:\n list: Contacts associated with the organization\n""""""\n', '\n\ndef filter_projects_by_category(category_id, active_only=True):\n""""""\nFilters projects by their category and returns a list of project IDs\n\nParameters:\n category_id (str): The ID of the category to filter projects by\n active_only (bool): Whether to return only active projects\n\nReturns:\n list: List of project IDs matching the category filter\n""""""\n', 'def filter_projects_by_status(project_ids, status=""active""):\n""""""\nFilters a list of project IDs by their status\n\nParameters:\n project_ids (list): A list of project IDs to filter\n status (str): The status to filter by, default is \'active\'\n\nReturns:\n list: Project IDs matching the status\n""""""\n', '\n\ndef reassign_work_item_owner(work_id, new_owner_id):\n""""""\nReassigns the owner of a work item to a new user\n\nParameters:\n work_id (str): The ID of the work item to be reassigned\n new_owner_id (str): The user ID of the new owner\n\nReturns:\n bool: True if reassignment is successful, False otherwise\n""""""\n']","Check the status of tickets created by user ""SupportAgent1"", update the status to ""Resolved"" for those that are still open, and notify the user of any overdue tasks.","var_1 = search_object_by_name(query=""SupportAgent1"")
var_2 = works_list(created_by=[var_1], type=[""ticket""])
var_3 = check_ticket_status(ticket_id=var_2)
var_4 = update_ticket_status(ticket_id=var_2, new_status=""Resolved"")
var_5 = notify_user_of_overdue_tasks(user_id=var_1)"
"['\n\ndef update_issue_with_solution(issue_id, solution_text):\n""""""\nUpdates an issue with a solution description\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n solution_text (str): The description of the solution to apply to the issue\n\nReturns:\n None\n""""""\n', 'def fetch_user_tasks(user_id, include_completed=False):\n""""""\nRetrieves a list of tasks assigned to a user\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be fetched\n include_completed (bool): Whether to include completed tasks in the list\n\nReturns:\n list: List of tasks assigned to the user\n""""""\n', '\n\ndef remove_object_by_id(object_id):\n""""""\nRemoves an object from the system by its ID\n\nParameters:\n object_id (str): The ID of the object to remove\n\nReturns:\n None\n""""""\n', '\n\ndef filter_records_by_date(record_ids, start_date, end_date):\n""""""\nFilters a list of record IDs based on a date range\n\nParameters:\n record_ids (list): List of record IDs to filter\n start_date (str): Start date for the filtering in \'YYYY-MM-DD\' format\n end_date (str): End date for the filtering in \'YYYY-MM-DD\' format\n\nReturns:\n list: Filtered record IDs\n""""""\n', '\n\ndef update_contact_information(contact_id, new_phone=None, new_email=None):\n""""""\nUpdates the contact information with new provided phone number or email\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_phone (str): The new phone number for the contact, default is \'None\'\n new_email (str): The new email address for the contact, default is \'None\'\n\nReturns:\n bool: Status of the update operation\n""""""\n', 'def assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task is assigned\n\nReturns:\n None\n""""""\n', '\n\ndef update_contact_info(contact_id, new_email=None, new_phone=None):\n""""""\nUpdates the contact information for a given contact ID with new email and/or phone\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_email (str, optional): The new email address; defaults to None\n new_phone (str, optional): The new phone number; defaults to None\n\nReturns:\n bool: True if the update was successful; otherwise False\n""""""\n', '\n\ndef create_report_for_sprint(sprint_id, report_type):\n""""""\nGenerates a report for a given sprint\n\nParameters:\n sprint_id (str): The ID of the sprint\n report_type (str): The type of report to be generated\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef filter_contacts_by_organization(organization_id, active_only=True):\n""""""\nReturns a list of contacts associated with the specified organization, optionally filtering only active contacts\n\nParameters:\n organization_id (str): The ID of the organization to filter contacts\n active_only (bool): Flag to filter only active contacts, default value \'True\'\n\nReturns:\n list: Contacts associated with the organization\n""""""\n', '\n\ndef delete_objects_by_id(object_ids):\n""""""\nDeletes objects from the system based on their IDs\n\nParameters:\n object_ids (list): List of object IDs to delete\n\nReturns:\n bool: True if objects were successfully deleted, False otherwise\n""""""\n']","Fetch all tasks assigned to the user with ID ""User5678"", filter them by date from ""2023-01-01"" to ""2023-01-31"", and then prioritize the filtered tasks.","var_1 = fetch_user_tasks(user_id=""User5678"", include_completed=False)
var_2 = filter_records_by_date(record_ids=var_1, start_date=""2023-01-01"", end_date=""2023-01-31"")
var_3 = prioritize_objects(objects=var_2)"
"['\n\ndef update_object_status(object_id, new_status, changed_by):\n""""""\nUpdates the status of an object and records the user that made the change\n\nParameters:\n object_id (str): The ID of the object for which the status is updated\n new_status (str): The new status for the object\n changed_by (str): The ID of the user who is changing the status\n\nReturns:\n None\n""""""\n', '\n\ndef estimate_completion_time(task_id):\n""""""\nEstimates the completion time for a given task\n\nParameters:\n task_id (str): The ID of the task for which to estimate completion time\n\nReturns:\n float: The estimated number of hours to complete the task\n""""""\n', '\n\ndef calculate_expense_totals(expense_ids):\n""""""\nCalculates the total amount from a list of expense IDs\n\nParameters:\n expense_ids (list): List of expense IDs to calculate the total amount\n\nReturns:\n float: The total amount of the expenses\n""""""\n', '\n\ndef list_work_attachments(work_id):\n""""""\nLists all attachments associated with a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n list: Attachment file IDs\n""""""\n', '\n\ndef archive_completed_work(work_ids):\n""""""\nArchives a list of completed work items\n\nParameters:\n work_ids (list): A list of work item IDs that have been completed and need to be archived\n\nReturns:\n int: The number of work items successfully archived\n""""""\n', '\n\ndef archive_completed_tasks(project_id, completed_since):\n""""""\nArchives tasks that are completed within the given project since the specified time\n\nParameters:\n project_id (str): The ID of the project containing the tasks\n completed_since (str): Archive tasks completed after this timestamp\n\nReturns:\n int: Number of tasks archived\n""""""\n', '\n\ndef list_completed_tasks_by_user(user_id, project_id=None):\n""""""\nLists all tasks completed by a given user, optionally filtered by project\n\nParameters:\n user_id (str): The ID of the user\n project_id (str, optional): The ID of the project to filter tasks\n\nReturns:\n list: List of task IDs completed by the user\n""""""\n', '\n\ndef retrieve_user_permissions(user_id):\n""""""\nRetrieves the list of permissions for the specified user\n\nParameters:\n user_id (str): The ID of the user whose permissions are to be retrieved\n\nReturns:\n list: The list of permissions for the user\n""""""\n', '\n\ndef calculate_effort_for_task(task_id):\n""""""\nCalculates the effort spent on a specific task by summing subtasks\n\nParameters:\n task_id (str): The ID of the task for which the effort needs to be calculated\n\nReturns:\n float: Total effort spent on the task\n""""""\n', '\n\ndef convert_task_to_ticket(task_id):\n""""""\nConverts a task into a ticket in the system\n\nParameters:\n task_id (str): The ID of the task to be converted\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n']","Calculate the total expenses for work items created by ""FinanceTeam"" and archive these completed work items.","var_1 = works_list(created_by=[""FinanceTeam""])
var_2 = calculate_expense_totals(expense_ids=var_1)
var_3 = archive_completed_work(work_ids=var_1)"
"['\n\ndef update_object_status(object_id, new_status, changed_by):\n""""""\nUpdates the status of an object and records the user that made the change\n\nParameters:\n object_id (str): The ID of the object for which the status is updated\n new_status (str): The new status for the object\n changed_by (str): The ID of the user who is changing the status\n\nReturns:\n None\n""""""\n', '\n\ndef merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):\n""""""\nMerges duplicate tickets into a primary ticket\n\nParameters:\n primary_ticket_id (str): The ID of the primary ticket that remains\n duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary\n\nReturns:\n None\n""""""\n', '\n\ndef filter_tasks_by_due_date(task_ids, due_date):\n""""""\nFilters tasks by their due date\n\nParameters:\n task_ids (list): A list of task IDs to filter\n due_date (str): The due date to filter tasks by\n\nReturns:\n list: List of task IDs that have the specified due date\n""""""\n', '\n\ndef mark_ticket_as_resolved(ticket_id):\n""""""\nMarks a ticket as resolved in the system\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked as resolved\n\nReturns:\n bool: True if the ticket was marked as resolved, False otherwise\n""""""\n', '\n\ndef check_availability_of_part(part_id):\n""""""\nChecks if a specific part is available in inventory\n\nParameters:\n part_id (str): The ID of the part to check for availability\n\nReturns:\n bool: True if the part is available, False otherwise\n""""""\n', '\n\ndef calculate_budget_remaining(budget_id):\n""""""\nCalculates the remaining budget for a given budget ID\n\nParameters:\n budget_id (str): The ID of the budget to calculate\n\nReturns:\n float: The amount of remaining budget\n""""""\n', '\n\ndef track_project_completion(project_id):\n""""""\nTracks the completion percentage of a project based on completed tasks\n\nParameters:\n project_id (str): The ID of the project to track\n\nReturns:\n float: Percentage of the project completed\n""""""\n', '\n\ndef get_sprint_history(sprint_id):\n""""""\nRetrieves the change history of a sprint\n\nParameters:\n sprint_id (str): The ID of the ticket\n\nReturns:\n list: A list of changes made to the sprint\n""""""\n', '\n\ndef create_report_for_sprint(sprint_id, report_type):\n""""""\nGenerates a report for a given sprint\n\nParameters:\n sprint_id (str): The ID of the sprint\n report_type (str): The type of report to be generated\n\nReturns:\n str: The ID of the generated report\n""""""\n', 'def fetch_user_tasks(user_id, include_completed=False):\n""""""\nRetrieves a list of tasks assigned to a user\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be fetched\n include_completed (bool): Whether to include completed tasks in the list\n\nReturns:\n list: List of tasks assigned to the user\n""""""\n']","Retrieve all work items with severity ""high"" that are created by user ""TechLead"", update their status to ""In Progress"", and then calculate the remaining budget for budget ID ""BUD-4567"".","var_1 = works_list(created_by=[""TechLead""], ticket.severity=[""high""])
var_2 = who_am_i()
var_3 = update_object_status(object_id=var_1, new_status=""In Progress"", changed_by=var_2)
var_4 = calculate_budget_remaining(budget_id=""BUD-4567"")"
"['\n\ndef validate_data_integrity(data_point_ids):\n""""""\nChecks the integrity of a list of data points in the system\n\nParameters:\n data_point_ids (list): List of data point IDs to validate\n\nReturns:\n list: Validation results with status (True or False) for each data point\n""""""\n', '\n\ndef check_ticket_status(ticket_id):\n""""""\nChecks the status of a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose status is to be checked\n\nReturns:\n str: The status of the ticket\n""""""\n', '\n\ndef generate_unique_identifier(prefix, use_timestamp=True):\n""""""\nGenerates a unique identifier with an optional timestamp\n\nParameters:\n prefix (str): A prefix for the identifier\n use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True\n\nReturns:\n str: The generated unique identifier\n""""""\n\n```', 'def update_issue_status(issue_id, new_status):\n""""""\nUpdates the status of an issue\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef generate_project_summary(project_id):\n""""""\nGenerates a summary report for the specified project\n\nParameters:\n project_id (str): The ID of the project to summarize\n\nReturns:\n str: A summary report of the project\n""""""\n', '\n\ndef estimate_completion_time(task_id):\n""""""\nEstimates the completion time for a given task\n\nParameters:\n task_id (str): The ID of the task for which to estimate completion time\n\nReturns:\n float: The estimated number of hours to complete the task\n""""""\n', '\n\ndef mark_task_as_completed(task_id):\n""""""\nMarks a task as completed in the system.\n\nParameters:\n task_id (str): The ID of the task to be marked as complete\n\nReturns:\n bool: True if marked successfully, False otherwise\n""""""\n', '\n\ndef find_user_by_email(email):\n""""""\nFinds a user in the system by their email address\n\nParameters:\n email (str): The email address of the user to find\n\nReturns:\n str: ID of the user\n""""""\n', '\n\ndef list_completed_items_by_user(user_id):\n""""""\nLists items that have been completed by the given user\n\nParameters:\n user_id (str): The ID of the user whose completed items are being requested\n\nReturns:\n list: Completed items by the user\n""""""\n', '\n\ndef get_object_history(object_id):\n""""""\nRetrieves the change history of a specified object\n\nParameters:\n object_id (str): The ID of the object for which history is requested\n\nReturns:\n list: A list of changes made to the object\n""""""\n']","Check the status of ticket ""TICKET-9123"" and if it's open, generate a summary report for the project associated with this ticket.","var_1 = check_ticket_status(ticket_id=""TICKET-9123"")
var_2 = search_object_by_name(query=""Project for TICKET-9123"")
var_3 = generate_project_summary(project_id=var_2)"
"['\n\ndef validate_user_permissions(user_id, required_permissions):\n""""""\nChecks if the user has the specified permissions\n\nParameters:\n user_id (str): The ID of the user whose permissions need to be checked\n required_permissions (list): A list of permissions to check against the user\'s permissions\n\nReturns:\n bool: True if the user has all the required permissions, False otherwise\n""""""\n', '\n\ndef create_report_for_sprint(sprint_id, report_type):\n""""""\nGenerates a report for a given sprint\n\nParameters:\n sprint_id (str): The ID of the sprint\n report_type (str): The type of report to be generated\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef remove_object_from_sprint(object_id, sprint_id):\n""""""\nRemoves a specified object from a sprint and returns the new list\n\nParameters:\n object_id (str): The ID of the object to be removed\n sprint_id (str): The ID of the project from which the object should be removed\n\nReturns:\n list: Returns the updated list of sprint objects\n""""""\n', '\n\ndef estimate_work_hours(work_id):\n""""""\nEstimates the number of hours required to complete a specific work item\n\nParameters:\n work_id (str): The ID of the work item for which the estimation is to be made\n\nReturns:\n float: Estimated hours required to complete the work item\n""""""\n', '\n\ndef mark_item_as_duplicated(work_item_id, duplicate_of_id):\n""""""\nMarks a work item as a duplicate of another\n\nParameters:\n work_item_id (str): The ID of the work item that is a duplicate\n duplicate_of_id (str): The ID of the work item of which it is a duplicate\n\nReturns:\n bool: True if the item is successfully marked, False otherwise\n""""""\n', '\n\ndef list_completed_tasks_by_user(user_id):\n""""""\nLists all completed tasks for a specific user\n\nParameters:\n user_id (str): The ID of the user whose completed tasks need to be listed\n\nReturns:\n list: List of completed task IDs\n""""""\n', '\n\ndef fetch_users_from_group(group_id):\n""""""\nRetrieves a list of user IDs that belong to the specified group\n\nParameters:\n group_id (str): The ID of the group\n\nReturns:\n list: User IDs belonging to the group\n""""""\n', '\n\ndef remove_users_from_group(user_ids, group_id):\n""""""\nRemoves the specified users from a group\n\nParameters:\n user_ids (list): A list of user IDs to be removed from the group\n group_id (str): The ID of the group from which the users should be removed\n\nReturns:\n bool: Status of the removal\n""""""\n', '\n\ndef generate_summary_report(object_ids):\n""""""\nGenerates a summary report for the specified objects\n\nParameters:\n object_ids (list): A list of object IDs\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef find_work_items_by_tag(work_type, tag):\n""""""\nFinds work items of a certain type with a given tag\n\nParameters:\n work_type (str): The type of the work items to filter by\n tag (str): The tag to filter the work items\n\nReturns:\n list: List of work items with the given tag\n""""""\n']","Check if user ""QAEngineerRV"" has the necessary permissions to access work items, then find and summarize all tickets with severity ""high"" that are owned by ""QAEngineerRV"".","var_1 = search_object_by_name(query=""QAEngineerRV"")
var_2 = validate_user_permissions(user_id=var_1, required_permissions=[""access_work_items""])
var_3 = works_list(created_by=[var_1], ticket.severity=[""high""], type=[""ticket""])
var_4 = summarize_objects(objects=var_3)"
"['\ndef update_user_ID(user_id, status):\n""""""\nUpdates the status of a user account in the system and returns the updated id\n\nParameters:\n user_id (str): The ID of the user whose status is to be updated\n status (str): The new status to apply to the user account\n\nReturns:\n str: updated User Id\n""""""\n', '\n\ndef archive_completed_tasks(project_id, completed_since):\n""""""\nArchives tasks that are completed within the given project since the specified time\n\nParameters:\n project_id (str): The ID of the project containing the tasks\n completed_since (str): Archive tasks completed after this timestamp\n\nReturns:\n int: Number of tasks archived\n""""""\n', 'def link_issues_to_project(issue_ids, project_id):\n""""""\nLinks the given issues to the specified project\n\nParameters:\n issue_ids (list): A list of issue IDs to be linked to the project\n project_id (str): The ID of the project to which the issues should be linked\n\nReturns:\n bool: Status of the linking action\n""""""\n', '\n\ndef validate_project_completion(project_id):\n""""""\nValidates if all tasks within a project are completed\n\nParameters:\n project_id (str): The ID of the project to validate\n\nReturns:\n bool: True if completed, False otherwise\n""""""\n', '\n\ndef merge_duplicate_records(primary_record_id, duplicate_record_id):\n""""""\nMerges a duplicate record into a primary record\n\nParameters:\n primary_record_id (str): The ID of the primary record to keep\n duplicate_record_id (str): The ID of the duplicate record to merge\n\nReturns:\n bool: True if the merge was successful; otherwise False\n""""""\n', '\n\ndef calculate_estimated_effort(work_id):\n""""""\nCalculates the estimated effort required to complete a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n float: Estimated effort in hours\n""""""\n', 'def calculate_due_dates(work_item_ids, urgency_level):\n""""""\nCalculates the due dates for given work items based on their urgency\n\nParameters:\n work_item_ids (list): A list of work item IDs for which due dates are required\n urgency_level (str): The urgency level. Allowed values: \'high\', \'medium\', \'low\'\n\nReturns:\n list: Due dates for the specified work items\n""""""\n', '\n\ndef estimate_task_duration(task_id, complexity_level):\n""""""\nEstimates the duration needed to complete a task based on its complexity level\n\nParameters:\n task_id (str): The ID of the task\n complexity_level (str): The complexity level of the task. Allowed values: \'low\', \'medium\', \'high\'\n\nReturns:\n float: Estimated duration in hours\n""""""\n', '\n\ndef create_report_for_sprint(sprint_id, report_type):\n""""""\nGenerates a report for a given sprint\n\nParameters:\n sprint_id (str): The ID of the sprint\n report_type (str): The type of report to be generated\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef mark_task_as_completed(task_id):\n""""""\nMarks a task as completed in the system.\n\nParameters:\n task_id (str): The ID of the task to be marked as complete\n\nReturns:\n bool: True if marked successfully, False otherwise\n""""""\n']","Retrieve the latest sprint report for completed tasks in project ""PRJ-456"" and update the user ID ""usr_789"" to status ""active"".","var_1 = get_sprint_id()
var_2 = create_report_for_sprint(sprint_id=var_1, report_type=""completed_tasks"")
var_3 = search_object_by_name(query=""PRJ-456"")
var_4 = update_user_ID(user_id=""usr_789"", status=""active"")"
"['def assign_issues_to_user(issue_ids, user_id):\n""""""\nAssigns a list of issues to the specified user\n\nParameters:\n issue_ids (list): A list of issue IDs that need to be assigned\n user_id (str): The user ID to whom the issues will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef mark_ticket_for_review(ticket_id, reviewer_id):\n""""""\nMarks a ticket for review by a specific user\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked for review\n reviewer_id (str): The ID of the user who should review the ticket\n\nReturns:\n None\n""""""\n', '\n\ndef filter_tasks_by_completion(task_ids, completed=True):\n""""""\nFilters the list of tasks by their completion status\n\nParameters:\n task_ids (list): List of task IDs to filter\n completed (bool): The completion status to filter by. Default is \'True\'\n\nReturns:\n list: List of task IDs that match the completion status\n""""""\n', '\ndef update_user_ID(user_id, status):\n""""""\nUpdates the status of a user account in the system and returns the updated id\n\nParameters:\n user_id (str): The ID of the user whose status is to be updated\n status (str): The new status to apply to the user account\n\nReturns:\n str: updated User Id\n""""""\n', '\n\ndef generate_progress_report(project_id, report_format=""summary""):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which the progress report is needed\n report_format (str): The format of the report; \'summary\' or \'detailed\'. The default is \'summary\'\n\nReturns:\n str: The generated progress report\n""""""\n', '\n\ndef set_user_permission(user_id, permission_level):\n""""""\nSets a specific permission level for a user account\n\nParameters:\n user_id (str): The ID of the user to set permissions for\n permission_level (str): The level of permission to assign e.g., \'read\', \'write\', \'admin\'\n\nReturns:\n bool: True if the permission was set successfully, False otherwise\n""""""\n', '\n\ndef generate_report(report_type, subject_id, include_summary=True):\n""""""\nGenerates a report of a specific type for a subject in the system\n\nParameters:\n report_type (str): The type of report to generate\n subject_id (str): The ID of the subject for the report\n include_summary (bool): Whether to include a summary in the report; defaults to True\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef convert_task_to_ticket(task_id):\n""""""\nConverts a task into a ticket in the system\n\nParameters:\n task_id (str): The ID of the task to be converted\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', 'def assign_tickets_to_user(ticket_ids, user_id):\n""""""\nAssigns a set of tickets to a specified user\n\nParameters:\n ticket_ids (list): A list of ticket IDs to be assigned\n user_id (str): The ID of the user to whom the tickets will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef link_related_documents(doc_id, related_doc_ids):\n""""""\nLinks related documents to the given document in the system\n\nParameters:\n doc_id (str): The ID of the document to which related documents should be linked\n related_doc_ids (list): A list of IDs for related documents\n\nReturns:\n bool: True if the operation was successful, False otherwise\n""""""\n']","Assign issues with severity ""blocker"" to user ""EngineerAbhinav"", then generate a detailed progress report for project ""PX-987"".","var_1 = works_list(type=[""issue""], ticket.severity=[""blocker""])
var_2 = search_object_by_name(query=""EngineerAbhinav"")
var_3 = assign_issues_to_user(issue_ids=var_1, user_id=var_2)
var_4 = search_object_by_name(query=""PX-987"")
var_5 = generate_progress_report(project_id=var_4, report_format=""detailed"")"
"['def assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task is assigned\n\nReturns:\n None\n""""""\n', '\n\ndef assign_tasks_to_employee(task_ids, employee_id):\n""""""\nAssigns a list of tasks to the specified employee\n\nParameters:\n task_ids (list): A list of task IDs to be assigned\n employee_id (str): The ID of the employee to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment was successful, False otherwise\n""""""\n', '\n\ndef calculate_progress_percentage(project_id):\n""""""\nCalculates the progress percentage of the given project\n\nParameters:\n project_id (str): The ID of the project for which to calculate progress\n\nReturns:\n float: The percentage of project completion\n""""""\n', '\n\ndef filter_tasks_by_due_date(task_ids, due_date):\n""""""\nFilters tasks by their due date\n\nParameters:\n task_ids (list): A list of task IDs to filter\n due_date (str): The due date to filter tasks by\n\nReturns:\n list: List of task IDs that have the specified due date\n""""""\n', '\n\ndef find_user_by_email(email):\n""""""\nFinds a user in the system by their email address\n\nParameters:\n email (str): The email address of the user to find\n\nReturns:\n str: ID of the user\n""""""\n', '\n\ndef calculate_estimate_completion_time(work_id):\n""""""\nCalculates the estimated completion time for the specified work item\n\nParameters:\n work_id (str): The ID of the work item to calculate the estimated time\n\nReturns:\n float: Estimated completion time in hours\n""""""\n', '\n\ndef estimate_work_hours(work_id):\n""""""\nEstimates the number of hours required to complete a specific work item\n\nParameters:\n work_id (str): The ID of the work item for which the estimation is to be made\n\nReturns:\n float: Estimated hours required to complete the work item\n""""""\n', '\n\ndef generate_report_data(report_type, data_set_id):\n""""""\nGenerates report data based on the provided report type and data set\n\nParameters:\n report_type (str): The type of report to generate\n data_set_id (str): The ID of the data set to be used for the report\n\nReturns:\n str: A report data string or ID depending on internal implementation\n""""""\n', '\n\ndef list_completed_tasks_by_user(user_id, project_id=None):\n""""""\nLists all tasks completed by a given user, optionally filtered by project\n\nParameters:\n user_id (str): The ID of the user\n project_id (str, optional): The ID of the project to filter tasks\n\nReturns:\n list: List of task IDs completed by the user\n""""""\n', 'def fetch_user_tasks(user_id, include_completed=False):\n""""""\nRetrieves a list of tasks assigned to a user\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be fetched\n include_completed (bool): Whether to include completed tasks in the list\n\nReturns:\n list: List of tasks assigned to the user\n""""""\n']","Assign all tasks created by user ""TeamLead"" to user ""EmployeeA"", then calculate the progress percentage of the project ""ProjectX"".","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = search_object_by_name(query=""EmployeeA"")
var_3 = works_list(created_by=[var_1], type=[""task""])
var_4 = assign_tasks_to_employee(task_ids=var_3, employee_id=var_2)
var_5 = search_object_by_name(query=""ProjectX"")
var_6 = calculate_progress_percentage(project_id=var_5)"
"['def assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task is assigned\n\nReturns:\n None\n""""""\n', '\n\ndef generate_project_summary(project_id):\n""""""\nGenerates a summary report for the specified project\n\nParameters:\n project_id (str): The ID of the project to summarize\n\nReturns:\n str: A summary report of the project\n""""""\n', '\n\ndef update_ticket_status(ticket_id, new_status):\n""""""\nUpdates the status of a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket to be updated\n new_status (str): The new status to update the ticket with\n\nReturns:\n bool: True if the update was successful, otherwise False\n""""""\n', '\n\ndef check_availability_of_part(part_id):\n""""""\nChecks if a specific part is available in inventory\n\nParameters:\n part_id (str): The ID of the part to check for availability\n\nReturns:\n bool: True if the part is available, False otherwise\n""""""\n', '\n\ndef track_project_completion(project_id):\n""""""\nTracks the completion percentage of a project based on completed tasks\n\nParameters:\n project_id (str): The ID of the project to track\n\nReturns:\n float: Percentage of the project completed\n""""""\n', '\n\ndef find_work_items_by_tag(work_type, tag):\n""""""\nFinds work items of a certain type with a given tag\n\nParameters:\n work_type (str): The type of the work items to filter by\n tag (str): The tag to filter the work items\n\nReturns:\n list: List of work items with the given tag\n""""""\n', '\n\ndef calculate_budget_remaining(budget_id):\n""""""\nCalculates the remaining budget for a given budget ID\n\nParameters:\n budget_id (str): The ID of the budget to calculate\n\nReturns:\n float: The amount of remaining budget\n""""""\n', '\n\ndef log_user_activity(user_id, activity_description):\n""""""\nLogs a user\'s activity with a description\n\nParameters:\n user_id (str): The ID of the user whose activity is being logged\n activity_description (str): A description of the activity\n\nReturns:\n bool: True if the logging was successful, False otherwise\n""""""\n', '\n\ndef calculate_progress_percentage(project_id):\n""""""\nCalculates the progress percentage of the given project\n\nParameters:\n project_id (str): The ID of the project for which to calculate progress\n\nReturns:\n float: The percentage of project completion\n""""""\n', '\n\ndef delete_objects_by_id(object_ids):\n""""""\nDeletes objects from the system based on their IDs\n\nParameters:\n object_ids (list): List of object IDs to delete\n\nReturns:\n bool: True if objects were successfully deleted, False otherwise\n""""""\n']","Assign the task with ID ""TASK-456"" to user ""EmployeeParthvi"", then check if part ""PART-789"" is available in inventory.","var_1 = assign_task_to_user(task_id=""TASK-456"", user_id=""EmployeeParthvi"")
var_2 = check_availability_of_part(part_id=""PART-789"")"
"['def assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task is assigned\n\nReturns:\n None\n""""""\n', '\n\ndef remove_user_from_project(user_id, project_id):\n""""""\nRemoves a user from a project\n\nParameters:\n user_id (str): The ID of the user to be removed\n project_id (str): The ID of the project from which the user is to be removed\n\nReturns:\n bool: True if the user is successfully removed, False otherwise\n""""""', '\n\ndef reassign_work_item_owner(work_id, new_owner_id):\n""""""\nReassigns the owner of a work item to a new user\n\nParameters:\n work_id (str): The ID of the work item to be reassigned\n new_owner_id (str): The user ID of the new owner\n\nReturns:\n bool: True if reassignment is successful, False otherwise\n""""""\n', '\n\ndef fetch_users_from_group(group_id):\n""""""\nRetrieves a list of user IDs that belong to the specified group\n\nParameters:\n group_id (str): The ID of the group\n\nReturns:\n list: User IDs belonging to the group\n""""""\n', '\n\ndef create_report_for_sprint(sprint_id, report_type):\n""""""\nGenerates a report for a given sprint\n\nParameters:\n sprint_id (str): The ID of the sprint\n report_type (str): The type of report to be generated\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef calculate_estimate_completion_time(work_id):\n""""""\nCalculates the estimated completion time for the specified work item\n\nParameters:\n work_id (str): The ID of the work item to calculate the estimated time\n\nReturns:\n float: Estimated completion time in hours\n""""""\n', '\n\ndef calculate_budget_remaining(budget_id):\n""""""\nCalculates the remaining budget for a given budget ID\n\nParameters:\n budget_id (str): The ID of the budget to calculate\n\nReturns:\n float: The amount of remaining budget\n""""""\n', '\n\ndef validate_data_integrity(data_point_ids):\n""""""\nChecks the integrity of a list of data points in the system\n\nParameters:\n data_point_ids (list): List of data point IDs to validate\n\nReturns:\n list: Validation results with status (True or False) for each data point\n""""""\n', '\n\ndef get_ticket_comments(ticket_id):\n""""""\nRetrieves the comments attached to a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose comments are being retrieved\n\nReturns:\n list: Comments associated with the ticket\n""""""\n', '\n\ndef assign_tasks_to_user(task_ids, user_id):\n""""""\nAssigns a list of task IDs to the provided user\n\nParameters:\n task_ids (list): List of task IDs to be assigned\n user_id (str): The ID of the user to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n']","Retrieve the ID of the current sprint, calculate the estimated completion time for work items owned by ""TeamLead"", and assign those tasks to user ""JuniorDev"".","var_1 = get_sprint_id()
var_2 = who_am_i()
var_3 = works_list(owned_by=[var_2], type=[""task""])
var_4 = calculate_estimate_completion_time(work_id=var_3)
var_5 = search_object_by_name(query=""JuniorDev"")
var_6 = assign_tasks_to_user(task_ids=var_3, user_id=var_5)"
"['def assign_ticket_to_user(ticket_id, user_id):\n""""""\nAssigns a specific ticket to a user\n\nParameters:\n ticket_id (str): The ID of the ticket to be assigned\n user_id (str): The ID of the user to whom the ticket will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n', '\n\ndef find_team_members(team_id):\n""""""\nReturns a list of user IDs that are members of the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: User IDs of the team members\n""""""\n', '\n\ndef assign_tasks_to_employee(task_ids, employee_id):\n""""""\nAssigns a list of tasks to the specified employee\n\nParameters:\n task_ids (list): A list of task IDs to be assigned\n employee_id (str): The ID of the employee to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment was successful, False otherwise\n""""""\n', '\n\ndef generate_report_data(report_type, data_set_id):\n""""""\nGenerates report data based on the provided report type and data set\n\nParameters:\n report_type (str): The type of report to generate\n data_set_id (str): The ID of the data set to be used for the report\n\nReturns:\n str: A report data string or ID depending on internal implementation\n""""""\n', '\n\ndef generate_report_by_tag(tag_id, include_archived=False):\n""""""\nGenerates a report for all work items associated with the given tag\n\nParameters:\n tag_id (str): The ID of the tag used to filter work items\n include_archived (bool): Include archived work items if set to True\n\nReturns:\n list: Work items associated with the tag\n""""""\n', '\n\ndef get_sprint_history(sprint_id):\n""""""\nRetrieves the change history of a sprint\n\nParameters:\n sprint_id (str): The ID of the ticket\n\nReturns:\n list: A list of changes made to the sprint\n""""""\n', '\n\ndef remove_object_from_archive(object_id):\n""""""\nRemoves an object from the system archive, making it active again\n\nParameters:\n object_id (str): The ID of the object to be removed from the archive\n\nReturns:\n bool: True if the object was successfully removed, False otherwise\n""""""\n', '\n\ndef mark_ticket_for_review(ticket_id, reviewer_id):\n""""""\nMarks a ticket for review by a specific user\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked for review\n reviewer_id (str): The ID of the user who should review the ticket\n\nReturns:\n None\n""""""\n', '\n\ndef remove_object_by_id(object_id):\n""""""\nRemoves an object from the system by its ID\n\nParameters:\n object_id (str): The ID of the object to remove\n\nReturns:\n None\n""""""\n', '\n\ndef check_object_permission(user_id, object_id):\n""""""\nChecks if a user has permission to access a specific object\n\nParameters:\n user_id (str): The ID of the user\n object_id (str): The ID of the object to check permission for\n\nReturns:\n bool: True if the user has permission, False otherwise\n""""""\n']","Assign high severity tickets to user ""TechLead"", check their permission for the tickets, and then summarize the tickets.","var_1 = search_object_by_name(query=""TechLead"")
var_2 = works_list(type=[""ticket""], ticket.severity=[""high""])
var_3 = assign_tasks_to_employee(task_ids=var_2, employee_id=var_1)
var_4 = check_object_permission(user_id=var_1, object_id=var_2)
var_5 = summarize_objects(objects=var_2)"
"['def calculate_due_dates(work_item_ids, urgency_level):\n""""""\nCalculates the due dates for given work items based on their urgency\n\nParameters:\n work_item_ids (list): A list of work item IDs for which due dates are required\n urgency_level (str): The urgency level. Allowed values: \'high\', \'medium\', \'low\'\n\nReturns:\n list: Due dates for the specified work items\n""""""\n', '\n\ndef toggle_feature_access(feature_id, user_id, enable_access):\n""""""\nToggles access to a specific feature for a user\n\nParameters:\n feature_id (str): The ID of the feature to toggle access\n user_id (str): The ID of the user whose access will be toggled\n enable_access (bool): \'True\' to enable access, \'False\' to disable\n\nReturns:\n bool: The resulting access status\n""""""\n', '\n\ndef validate_object_existence(object_id):\n""""""\nChecks if an object with the given ID exists in the system\n\nParameters:\n object_id (str): The ID of the object to check\n\nReturns:\n bool: True if the object exists, otherwise False\n""""""\n', '\n\ndef update_work_item_due_date(work_item_id, due_date):\n""""""\nUpdates the due date for the specified work item\n\nParameters:\n work_item_id (str): The ID of the work item to be updated\n due_date (str): The new due date for the work item\n\nReturns:\n None: Indicates that the operation was executed without returning any value\n""""""\n', '\n\ndef notify_user_of_overdue_tasks(user_id):\n""""""\nNotifies a user of any overdue tasks assigned to them\n\nParameters:\n user_id (str): The ID of the user to check for overdue tasks\n\nReturns:\n None\n""""""\n', '\n\ndef merge_duplicate_work_items(primary_work_id, duplicate_work_ids):\n""""""\nMerges duplicate work items into the primary work item\n\nParameters:\n primary_work_id (str): The ID of the primary work item\n duplicate_work_ids (list): List of IDs of duplicate work items to be merged\n\nReturns:\n bool: True if merge was successful, otherwise False\n""""""\n', 'def assign_issues_to_user(issue_ids, user_id):\n""""""\nAssigns a list of issues to the specified user\n\nParameters:\n issue_ids (list): A list of issue IDs that need to be assigned\n user_id (str): The user ID to whom the issues will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef reassign_work_item_owner(work_id, new_owner_id):\n""""""\nReassigns the owner of a work item to a new user\n\nParameters:\n work_id (str): The ID of the work item to be reassigned\n new_owner_id (str): The user ID of the new owner\n\nReturns:\n bool: True if reassignment is successful, False otherwise\n""""""\n', '\n\ndef create_new_ticket(title, description, reported_by):\n""""""\nCreates a new ticket in the system with the given details\n\nParameters:\n title (str): The title of the new ticket\n description (str): A detailed description of the issue or request\n reported_by (str): The ID of the user reporting the ticket\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', '\n\ndef schedule_meeting_with_user(user_id, duration=30, urgent=False):\n""""""\nSchedules a meeting with a specified user\n\nParameters:\n user_id (str): The ID of the user with whom to schedule a meeting\n duration (int): Duration of the meeting in minutes, default is \'30\'\n urgent (bool): Whether the meeting is urgent, defaults to False\n\nReturns:\n str: The ID of the scheduled meeting\n""""""\n']","Calculate the due dates for work items owned by user ""TeamLead"" with high urgency and notify the user of any overdue tasks.","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = works_list(owned_by=[var_1])
var_3 = calculate_due_dates(work_item_ids=var_2, urgency_level=""high"")
var_4 = notify_user_of_overdue_tasks(user_id=var_1)"
"['def filter_users_by_department(department_id=None, active_only=False):\n""""""\nFilters a list of users that belong to the specified department\n\nParameters:\n department_id (str): The ID of the department to filter users\n active_only (bool): Filters for only active users if set to True\n\nReturns:\n list: Users in the specified department\n""""""\n', '\n\ndef retrieve_user_workload(user_id):\n""""""\nRetrieves the current workload for the specified user\n\nParameters:\n user_id (str): The ID of the user whose workload is to be retrieved\n\nReturns:\n list: A list containing workload details\n""""""\n', '\n\ndef fetch_ticket_history(ticket_id, history_limit=10):\n""""""\nFetches the history of changes to a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket for which the history is requested\n history_limit (int): Maximum number of history entries to retrieve. The default is \'10\'\n\nReturns:\n list: A list of history records for the ticket\n""""""\n', '\n\ndef retrieve_document_by_keyword(keyword):\n""""""\nRetrieves a document ID containing the specified keyword\n\nParameters:\n keyword (str): The keyword to search for in the documents\n\nReturns:\n str: ID of the document containing the keyword\n""""""', '\n\ndef update_contact_information(contact_id, new_phone=None, new_email=None):\n""""""\nUpdates the contact information with new provided phone number or email\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_phone (str): The new phone number for the contact, default is \'None\'\n new_email (str): The new email address for the contact, default is \'None\'\n\nReturns:\n bool: Status of the update operation\n""""""\n', '\n\ndef calculate_estimated_completion(project_id):\n""""""\nCalculates the estimated completion date for a project based on current progress\n\nParameters:\n project_id (str): The ID of the project to be analyzed\n\nReturns:\n str: Estimated date of completion\n""""""\n', '\n\ndef batch_update_user_roles(user_ids, new_role):\n""""""\nUpdates the roles for a batch of users to a new role\n\nParameters:\n user_ids (list): List of user IDs whose roles should be updated\n new_role (str): The new role to assign\n\nReturns:\n int: Number of users successfully updated\n""""""\n', 'def link_issues_to_project(issue_ids, project_id):\n""""""\nLinks the given issues to the specified project\n\nParameters:\n issue_ids (list): A list of issue IDs to be linked to the project\n project_id (str): The ID of the project to which the issues should be linked\n\nReturns:\n bool: Status of the linking action\n""""""\n', '\n\ndef generate_report_data(report_type, data_set_id):\n""""""\nGenerates report data based on the provided report type and data set\n\nParameters:\n report_type (str): The type of report to generate\n data_set_id (str): The ID of the data set to be used for the report\n\nReturns:\n str: A report data string or ID depending on internal implementation\n""""""\n', '\n\ndef update_object_status(object_id, new_status, changed_by):\n""""""\nUpdates the status of an object and records the user that made the change\n\nParameters:\n object_id (str): The ID of the object for which the status is updated\n new_status (str): The new status for the object\n changed_by (str): The ID of the user who is changing the status\n\nReturns:\n None\n""""""\n']","Fetch the ticket history for ticket ID ""TICK123"", summarize the history records, and then update the ticket's contact information with a new email ""user@example.com"".","var_1 = fetch_ticket_history(ticket_id=""TICK123"")
var_2 = summarize_objects(objects=var_1)
var_3 = search_object_by_name(query=""TICK123"")
var_4 = update_contact_information(contact_id=var_3, new_email=""user@example.com"")"
"['def filter_work_by_date_range(start_date, end_date, work_type=None):\n""""""\nFilters work items based on a given date range.\n\nParameters:\n start_date (str): The start date of the desired date range\n end_date (str): The end date of the desired date range\n work_type (list): Optional filter for type of work\n\nReturns:\n list: Work items within the specified date range\n""""""\n', '\n\ndef calculate_expense_totals(expense_ids):\n""""""\nCalculates the total amount from a list of expense IDs\n\nParameters:\n expense_ids (list): List of expense IDs to calculate the total amount\n\nReturns:\n float: The total amount of the expenses\n""""""\n', '\n\ndef calculate_budget_allocation(project_id, cost_limit):\n""""""\nCalculates and assigns the budget allocation for a project\n\nParameters:\n project_id (str): The ID of the project for which the budget is calculated\n cost_limit (float): The cost limit for the project\'s budget\n\nReturns:\n float: The amount allocated to the project budget\n""""""\n', '\n\ndef estimate_cost_for_work(work_id, cost_per_hour=100):\n""""""\nEstimates the cost for completing a work item based on a cost per hour rate\n\nParameters:\n work_id (str): The ID of the work item to estimate cost for\n cost_per_hour (float): The cost per hour. Default is \'100\'\n\nReturns:\n float: Estimated cost\n""""""', '\n\ndef reassign_work_item_owner(work_id, new_owner_id):\n""""""\nReassigns the owner of a work item to a new user\n\nParameters:\n work_id (str): The ID of the work item to be reassigned\n new_owner_id (str): The user ID of the new owner\n\nReturns:\n bool: True if reassignment is successful, False otherwise\n""""""\n', '\n\ndef notify_user_of_overdue_tasks(user_id):\n""""""\nNotifies a user of any overdue tasks assigned to them\n\nParameters:\n user_id (str): The ID of the user to check for overdue tasks\n\nReturns:\n None\n""""""\n', '\n\ndef generate_report_from_template(report_template_id, data_source_id):\n""""""\nGenerates a report based on a specified template and data source\n\nParameters:\n report_template_id (str): The ID of the report template to use\n data_source_id (str): The ID of the data source\n\nReturns:\n str: Generated report\n""""""\n', '\n\ndef get_project_timeline(project_id):\n""""""\nRetrieves the timeline and key milestones of a project\n\nParameters:\n project_id (str): The ID of the project for which the timeline is requested\n\nReturns:\n list: Key milestones and dates for the project timeline\n""""""\n', 'def assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task is assigned\n\nReturns:\n None\n""""""\n', '\n\ndef merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):\n""""""\nMerges duplicate tickets into a primary ticket\n\nParameters:\n primary_ticket_id (str): The ID of the primary ticket that remains\n duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary\n\nReturns:\n None\n""""""\n']","Retrieve all work items with severity ""high"" within the date range ""2023-01-01"" to ""2023-01-31"", calculate the total expense of these items, and reassign their ownership to user ""NewOwner123"".","var_1 = filter_work_by_date_range(start_date=""2023-01-01"", end_date=""2023-01-31"", work_type=[""ticket""])
var_2 = works_list(ticket.severity=[""high""], type=[""ticket""])
var_3 = calculate_expense_totals(expense_ids=var_1)
var_4 = search_object_by_name(query=""NewOwner123"")
var_5 = reassign_work_item_owner(work_id=var_2, new_owner_id=var_4)"
"['def merge_ticket_notes(ticket_id, note_ids, updated_by):\n""""""\nMerges multiple notes into a single ticket note\n\nParameters:\n ticket_id (str): The ID of the ticket where the merged note will be added\n note_ids (list): List of note IDs that will be merged into the ticket\n updated_by (str): The ID of the user performing the merge\n\nReturns:\n str: ID of the updated ticket note\n""""""\n', '\n\ndef extract_keywords_from_text(text):\n""""""\nGiven a text, extracts and returns the main keywords\n\nParameters:\n text (str): The text from which keywords are to be extracted\n\nReturns:\n list: A list of extracted keywords\n""""""\n', '\n\ndef merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):\n""""""\nMerges duplicate tickets into a primary ticket\n\nParameters:\n primary_ticket_id (str): The ID of the primary ticket that remains\n duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary\n\nReturns:\n None\n""""""\n', '\n\ndef list_all_blocked_tickets():\n""""""\nLists all tickets that are currently blocked\n\nReturns:\n list: Ticket IDs that are currently blocked\n""""""', '\n\ndef convert_task_to_subtask(task_id, parent_task_id):\n""""""\nConverts a standalone task into a subtask of another task\n\nParameters:\n task_id (str): The ID of the task to be converted\n parent_task_id (str): The ID of the parent task to which the subtask will be linked\n\nReturns:\n bool: True if the conversion was successful, False otherwise\n""""""\n', '\n\ndef log_system_event(event_type, description, user_id=None):\n""""""\nLogs an event in the system with an optional user ID associated with it\n\nParameters:\n event_type (str): The type of event to log\n description (str): A brief description of the event\n user_id (str): The ID of the user involved in the event, if applicable\n\nReturns:\n str: The ID of the logged event\n""""""\n', '\n\ndef list_completed_items_by_user(user_id):\n""""""\nLists items that have been completed by the given user\n\nParameters:\n user_id (str): The ID of the user whose completed items are being requested\n\nReturns:\n list: Completed items by the user\n""""""\n', '\n\ndef get_task_dependencies(task_id):\n""""""\nReturns a list of task IDs that are dependencies for the given task\n\nParameters:\n task_id (str): The ID of the task for which dependencies are requested\n\nReturns:\n list: Dependency task IDs\n""""""\n', '\n\ndef reassign_work_item_owner(work_id, new_owner_id):\n""""""\nReassigns the owner of a work item to a new user\n\nParameters:\n work_id (str): The ID of the work item to be reassigned\n new_owner_id (str): The user ID of the new owner\n\nReturns:\n bool: True if reassignment is successful, False otherwise\n""""""\n', 'def calculate_due_dates(work_item_ids, urgency_level):\n""""""\nCalculates the due dates for given work items based on their urgency\n\nParameters:\n work_item_ids (list): A list of work item IDs for which due dates are required\n urgency_level (str): The urgency level. Allowed values: \'high\', \'medium\', \'low\'\n\nReturns:\n list: Due dates for the specified work items\n""""""\n']","Merge notes from ticket ""TICKET-4321"", extract keywords from the merged note, and then find similar work items based on those keywords.","var_1 = merge_ticket_notes(ticket_id=""TICKET-4321"", note_ids=[""note1"", ""note2"", ""note3""], updated_by=""user123"")
var_2 = extract_keywords_from_text(text=var_1)
var_3 = search_object_by_name(query=var_2[0])
var_4 = get_similar_work_items(work_id=var_3)"
"['def merge_ticket_notes(ticket_id, note_ids, updated_by):\n""""""\nMerges multiple notes into a single ticket note\n\nParameters:\n ticket_id (str): The ID of the ticket where the merged note will be added\n note_ids (list): List of note IDs that will be merged into the ticket\n updated_by (str): The ID of the user performing the merge\n\nReturns:\n str: ID of the updated ticket note\n""""""\n', '\n\ndef mark_ticket_for_review(ticket_id, reviewer_id):\n""""""\nMarks a ticket for review by a specific user\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked for review\n reviewer_id (str): The ID of the user who should review the ticket\n\nReturns:\n None\n""""""\n', '\n\ndef check_object_permission(user_id, object_id):\n""""""\nChecks if a user has permission to access a specific object\n\nParameters:\n user_id (str): The ID of the user\n object_id (str): The ID of the object to check permission for\n\nReturns:\n bool: True if the user has permission, False otherwise\n""""""\n', '\n\ndef retrieve_user_permissions(user_id):\n""""""\nRetrieves the list of permissions for the specified user\n\nParameters:\n user_id (str): The ID of the user whose permissions are to be retrieved\n\nReturns:\n list: The list of permissions for the user\n""""""\n', '\n\ndef get_project_timeline(project_id):\n""""""\nRetrieves the timeline and key milestones of a project\n\nParameters:\n project_id (str): The ID of the project for which the timeline is requested\n\nReturns:\n list: Key milestones and dates for the project timeline\n""""""\n', '\n\ndef list_user_tasks(user_id, completed=False):\n""""""\nLists all tasks assigned to a user, optionally filtering for completed tasks\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be listed\n completed (bool): If True, only completed tasks are returned\n\nReturns:\n list: A list of tasks assigned to the user\n""""""\n', '\n\ndef generate_unique_identifier(prefix, use_timestamp=True):\n""""""\nGenerates a unique identifier with an optional timestamp\n\nParameters:\n prefix (str): A prefix for the identifier\n use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True\n\nReturns:\n str: The generated unique identifier\n""""""\n\n```', '\n\ndef validate_work_item_status(work_item_id, status_options):\n""""""\nChecks if the given work item has a status that is among the provided options\n\nParameters:\n work_item_id (str): The ID of the work item to check\n status_options (list): A list of valid status options\n\nReturns:\n bool: True if status is valid, False otherwise\n""""""\n', '\n\ndef validate_object_existence(object_id):\n""""""\nChecks if an object with the given ID exists in the system\n\nParameters:\n object_id (str): The ID of the object to check\n\nReturns:\n bool: True if the object exists, otherwise False\n""""""\n', 'def fetch_user_tasks(user_id, include_completed=False):\n""""""\nRetrieves a list of tasks assigned to a user\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be fetched\n include_completed (bool): Whether to include completed tasks in the list\n\nReturns:\n list: List of tasks assigned to the user\n""""""\n']","Retrieve the list of tasks assigned to user ""EngineerPatwa"" that are marked for review by ""SeniorQANisarg"", summarize these tasks, and check if ""EngineerPatwa"" has permission to access the project timeline for project ""PRJ-456"".","var_1 = search_object_by_name(query=""EngineerPatwa"")
var_2 = search_object_by_name(query=""SeniorQANisarg"")
var_3 = works_list(created_by=[var_1], type=[""task""], owned_by=[var_2])
var_4 = summarize_objects(objects=var_3)
var_5 = search_object_by_name(query=""PRJ-456"")
var_6 = check_object_permission(user_id=var_1, object_id=var_5)"
"['def retrieve_sprint_workload(sprint_id):\n""""""\nCalculates the total workload for a given sprint based on the work items associated with it\n\nParameters:\n sprint_id (str): The ID of the sprint for workload calculation\n\nReturns:\n float: Total workload in hours\n""""""\n', 'def link_issues_to_project(issue_ids, project_id):\n""""""\nLinks the given issues to the specified project\n\nParameters:\n issue_ids (list): A list of issue IDs to be linked to the project\n project_id (str): The ID of the project to which the issues should be linked\n\nReturns:\n bool: Status of the linking action\n""""""\n', '\n\ndef fetch_ticket_history(ticket_id, history_limit=10):\n""""""\nFetches the history of changes to a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket for which the history is requested\n history_limit (int): Maximum number of history entries to retrieve. The default is \'10\'\n\nReturns:\n list: A list of history records for the ticket\n""""""\n', '\n\ndef get_work_item_history(work_id):\n""""""\nRetrieves the history of changes for a given work item\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n list: A chronological list of changes made to the work item\n""""""\n', '\n\ndef extend_sprint_end_date(sprint_id, new_end_date):\n""""""\nExtends the end date of a current sprint to a new date\n\nParameters:\n sprint_id (str): The ID of the sprint to extend\n new_end_date (str): The new end date for the sprint in YYYY-MM-DD format\n\nReturns:\n bool: True if the sprint end date was extended, False otherwise\n""""""\n', '\n\ndef calculate_progress(project_id):\n""""""\nCalculates the overall progress of a given project as a percentage\n\nParameters:\n project_id (str): The ID of the project for which progress is being calculated\n\nReturns:\n float: The progress percentage of the project\n""""""\n', '\n\ndef check_object_permission(user_id, object_id):\n""""""\nChecks if a user has permission to access a specific object\n\nParameters:\n user_id (str): The ID of the user\n object_id (str): The ID of the object to check permission for\n\nReturns:\n bool: True if the user has permission, False otherwise\n""""""\n', 'def update_issue_status(issue_id, new_status):\n""""""\nUpdates the status of an issue\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef get_ticket_comments(ticket_id):\n""""""\nRetrieves the comments attached to a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose comments are being retrieved\n\nReturns:\n list: Comments associated with the ticket\n""""""\n', '\n\ndef get_user_workload(user_id):\n""""""\nDetermines the current workload for a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be determined\n\nReturns:\n int: The number of tasks assigned to the user\n""""""\n']","Calculate the total workload for the current sprint, and then check if user ""QAEngineer"" has permission to extend the sprint end date.","var_1 = get_sprint_id()
var_2 = retrieve_sprint_workload(sprint_id=var_1)
var_3 = search_object_by_name(query=""QAEngineer"")
var_4 = check_object_permission(user_id=var_3, object_id=var_1)"
"['def update_issue_status(issue_id, new_status):\n""""""\nUpdates the status of an issue\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef calculate_budget_allocation(project_id, cost_limit):\n""""""\nCalculates and assigns the budget allocation for a project\n\nParameters:\n project_id (str): The ID of the project for which the budget is calculated\n cost_limit (float): The cost limit for the project\'s budget\n\nReturns:\n float: The amount allocated to the project budget\n""""""\n', '\n\ndef remove_users_from_group(user_ids, group_id):\n""""""\nRemoves the specified users from a group\n\nParameters:\n user_ids (list): A list of user IDs to be removed from the group\n group_id (str): The ID of the group from which the users should be removed\n\nReturns:\n bool: Status of the removal\n""""""\n', '\n\ndef generate_report_from_template(report_template_id, data_source_id):\n""""""\nGenerates a report based on a specified template and data source\n\nParameters:\n report_template_id (str): The ID of the report template to use\n data_source_id (str): The ID of the data source\n\nReturns:\n str: Generated report\n""""""\n', 'def filter_projects_by_status(project_ids, status=""active""):\n""""""\nFilters a list of project IDs by their status\n\nParameters:\n project_ids (list): A list of project IDs to filter\n status (str): The status to filter by, default is \'active\'\n\nReturns:\n list: Project IDs matching the status\n""""""\n', '\n\ndef track_project_completion(project_id):\n""""""\nTracks the completion percentage of a project based on completed tasks\n\nParameters:\n project_id (str): The ID of the project to track\n\nReturns:\n float: Percentage of the project completed\n""""""\n', '\n\ndef remove_object_from_sprint(object_id, sprint_id):\n""""""\nRemoves a specified object from a sprint and returns the new list\n\nParameters:\n object_id (str): The ID of the object to be removed\n sprint_id (str): The ID of the project from which the object should be removed\n\nReturns:\n list: Returns the updated list of sprint objects\n""""""\n', '\n\ndef log_system_event(event_type, description, user_id=None):\n""""""\nLogs an event in the system with an optional user ID associated with it\n\nParameters:\n event_type (str): The type of event to log\n description (str): A brief description of the event\n user_id (str): The ID of the user involved in the event, if applicable\n\nReturns:\n str: The ID of the logged event\n""""""\n', '\n\ndef list_department_members(department_id):\n""""""\nReturns a list of user IDs for all members within a specified department\n\nParameters:\n department_id (str): The ID of the department to list members for\n\nReturns:\n list: User IDs of all the members in the department\n""""""\n', '\n\ndef validate_work_item_completeness(work_id):\n""""""\nChecks if a work item has all necessary information completed\n\nParameters:\n work_id (str): The ID of the work item to check\n\nReturns:\n bool: True if the work item is complete, False if it lacks information\n""""""\n']","Update the status of issue ""ISSUE-456"" to ""resolved"", validate its completeness, and if complete, log the event with the description ""Issue ISSUE-456 resolved and verified for completeness"".","var_1 = update_issue_status(issue_id=""ISSUE-456"", new_status=""resolved"")
var_2 = validate_work_item_completeness(work_id=""ISSUE-456"")
var_3 = log_system_event(event_type=""issue_update"", description=""Issue ISSUE-456 resolved and verified for completeness"", user_id=None)"
"['def update_issue_status(issue_id, new_status):\n""""""\nUpdates the status of an issue\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef calculate_estimated_effort(work_id):\n""""""\nCalculates the estimated effort required to complete a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n float: Estimated effort in hours\n""""""\n', '\n\ndef allocate_resources_to_project(project_id, resource_ids):\n""""""\nAllocates specified resources to a project\n\nParameters:\n project_id (str): The ID of the project to which resources are allocated\n resource_ids (list): A list of resource IDs to allocate to the project\n\nReturns:\n bool: True if resources could be allocated, False otherwise\n""""""\n', '\n\ndef get_user_workload(user_id):\n""""""\nDetermines the current workload for a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be determined\n\nReturns:\n int: The number of tasks assigned to the user\n""""""\n', '\n\ndef calculate_time_until_deadline(work_item_id):\n""""""\nCalculates the amount of time remaining until the deadline of a work item\n\nParameters:\n work_item_id (str): The ID of the work item\n\nReturns:\n float: The number of hours until the deadline\n""""""\n', '\n\ndef create_new_ticket(title, description, reported_by):\n""""""\nCreates a new ticket in the system with the given details\n\nParameters:\n title (str): The title of the new ticket\n description (str): A detailed description of the issue or request\n reported_by (str): The ID of the user reporting the ticket\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', 'def retrieve_sprint_workload(sprint_id):\n""""""\nCalculates the total workload for a given sprint based on the work items associated with it\n\nParameters:\n sprint_id (str): The ID of the sprint for workload calculation\n\nReturns:\n float: Total workload in hours\n""""""\n', '\n\ndef merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):\n""""""\nMerges duplicate tickets into a primary ticket\n\nParameters:\n primary_ticket_id (str): The ID of the primary ticket that remains\n duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary\n\nReturns:\n None\n""""""\n', '\n\ndef list_completed_items_by_user(user_id):\n""""""\nLists items that have been completed by the given user\n\nParameters:\n user_id (str): The ID of the user whose completed items are being requested\n\nReturns:\n list: Completed items by the user\n""""""\n', '\n\ndef generate_summary_report(object_ids):\n""""""\nGenerates a summary report for the specified objects\n\nParameters:\n object_ids (list): A list of object IDs\n\nReturns:\n str: The ID of the generated report\n""""""\n']","Calculate the estimated effort for work items owned by ""TeamLead"" and update their status to ""in_progress"".","var_1 = who_am_i()
var_2 = works_list(owned_by=[""TeamLead""], type=[""issue"", ""ticket"", ""task""])
var_3 = calculate_estimated_effort(work_id=var_2[0])
var_4 = update_issue_status(issue_id=var_2[0], new_status=""in_progress"")"
"['\n\ndef archive_completed_work(work_ids):\n""""""\nArchives a list of completed work items\n\nParameters:\n work_ids (list): A list of work item IDs that have been completed and need to be archived\n\nReturns:\n int: The number of work items successfully archived\n""""""\n', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):\n""""""\nMerges multiple notes into a single ticket note\n\nParameters:\n ticket_id (str): The ID of the ticket where the merged note will be added\n note_ids (list): List of note IDs that will be merged into the ticket\n updated_by (str): The ID of the user performing the merge\n\nReturns:\n str: ID of the updated ticket note\n""""""\n', '\n\ndef filter_work_by_date_range(start_date, end_date, work_type=None):\n""""""\nFilters work items based on a specific date range\n\nParameters:\n start_date (str): The start date for the filter range (format: YYYY-MM-DD)\n end_date (str): The end date for the filter range (format: YYYY-MM-DD)\n work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task\n\nReturns:\n list: Work items in the specified date range\n""""""\n', '\n\ndef estimate_work_hours(work_id):\n""""""\nEstimates the number of hours required to complete a specific work item\n\nParameters:\n work_id (str): The ID of the work item for which the estimation is to be made\n\nReturns:\n float: Estimated hours required to complete the work item\n""""""\n', '\n\ndef log_user_activity(user_id, activity_description):\n""""""\nLogs a user\'s activity with a description\n\nParameters:\n user_id (str): The ID of the user whose activity is being logged\n activity_description (str): A description of the activity\n\nReturns:\n bool: True if the logging was successful, False otherwise\n""""""\n', '\n\ndef deactivate_user_account(user_id, reason):\n""""""\nDeactivates a user account for a specific reason\n\nParameters:\n user_id (str): The ID of the user whose account is to be deactivated\n reason (str): The reason for deactivating the account\n\nReturns:\n bool: True if the account was successfully deactivated; otherwise False\n""""""\n', '\n\ndef merge_duplicate_records(primary_record_id, duplicate_record_id):\n""""""\nMerges a duplicate record into a primary record\n\nParameters:\n primary_record_id (str): The ID of the primary record to keep\n duplicate_record_id (str): The ID of the duplicate record to merge\n\nReturns:\n bool: True if the merge was successful; otherwise False\n""""""\n', '\n\ndef remove_object_by_id(object_id):\n""""""\nRemoves an object from the system by its ID\n\nParameters:\n object_id (str): The ID of the object to remove\n\nReturns:\n None\n""""""\n', '\n\ndef generate_report_by_tag(tag_id, include_archived=False):\n""""""\nGenerates a report for all work items associated with the given tag\n\nParameters:\n tag_id (str): The ID of the tag used to filter work items\n include_archived (bool): Include archived work items if set to True\n\nReturns:\n list: Work items associated with the tag\n""""""\n', '\n\ndef merge_duplicate_work_items(primary_work_id, duplicate_work_ids):\n""""""\nMerges duplicate work items into the primary work item\n\nParameters:\n primary_work_id (str): The ID of the primary work item\n duplicate_work_ids (list): List of IDs of duplicate work items to be merged\n\nReturns:\n bool: True if merge was successful, otherwise False\n""""""\n']","Archive all completed tickets created by ""SupportAgent"", then generate a report for those with the tag ""Resolved"".","var_1 = search_object_by_name(query=""SupportAgent"")
var_2 = works_list(created_by=[var_1], type=[""ticket""])
var_3 = archive_completed_work(work_ids=var_2)
var_4 = search_object_by_name(query=""Resolved"")
var_5 = generate_report_by_tag(tag_id=var_4, include_archived=True)"
"['\n\ndef archive_old_tickets(older_than_date, active_status=False):\n""""""\nArchives tickets that are older than the specified date, optionally filters by active status and returns the IDs\n\nParameters:\n older_than_date (str): A date in the format \'YYYY-MM-DD\', to filter tickets older than this date\n active_status (bool): If True, only archives tickets that are currently active; defaults to False\n\nReturns:\n str: ID of tickets archived\n""""""\n', '\n\ndef calculate_estimated_effort(work_id):\n""""""\nCalculates the estimated effort required to complete a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n float: Estimated effort in hours\n""""""\n', '\n\ndef link_related_documents(doc_id, related_doc_ids):\n""""""\nLinks related documents to the given document in the system\n\nParameters:\n doc_id (str): The ID of the document to which related documents should be linked\n related_doc_ids (list): A list of IDs for related documents\n\nReturns:\n bool: True if the operation was successful, False otherwise\n""""""\n', 'def calculate_due_dates(work_item_ids, urgency_level):\n""""""\nCalculates the due dates for given work items based on their urgency\n\nParameters:\n work_item_ids (list): A list of work item IDs for which due dates are required\n urgency_level (str): The urgency level. Allowed values: \'high\', \'medium\', \'low\'\n\nReturns:\n list: Due dates for the specified work items\n""""""\n', '\n\ndef calculate_progress(project_id):\n""""""\nCalculates the overall progress of a given project as a percentage\n\nParameters:\n project_id (str): The ID of the project for which progress is being calculated\n\nReturns:\n float: The progress percentage of the project\n""""""\n', '\n\ndef track_project_completion(project_id):\n""""""\nTracks the completion percentage of a project based on completed tasks\n\nParameters:\n project_id (str): The ID of the project to track\n\nReturns:\n float: Percentage of the project completed\n""""""\n', '\n\ndef assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task will be assigned\n\nReturns:\n bool: True if assignment was successful, otherwise False\n""""""\n', '\n\ndef calculate_estimate_completion_time(work_id):\n""""""\nCalculates the estimated completion time for the specified work item\n\nParameters:\n work_id (str): The ID of the work item to calculate the estimated time\n\nReturns:\n float: Estimated completion time in hours\n""""""\n', '\n\ndef extend_sprint_end_date(sprint_id, new_end_date):\n""""""\nExtends the end date of a current sprint to a new date\n\nParameters:\n sprint_id (str): The ID of the sprint to extend\n new_end_date (str): The new end date for the sprint in YYYY-MM-DD format\n\nReturns:\n bool: True if the sprint end date was extended, False otherwise\n""""""\n', '\n\ndef notify_user_of_overdue_tasks(user_id):\n""""""\nNotifies a user of any overdue tasks assigned to them\n\nParameters:\n user_id (str): The ID of the user to check for overdue tasks\n\nReturns:\n None\n""""""\n']","Archive tickets older than ""2022-01-01"" that are still active, calculate the estimated effort for each, and summarize the archived tickets.","var_1 = archive_old_tickets(older_than_date=""2022-01-01"", active_status=True)
var_2 = calculate_estimated_effort(work_id=var_1)
var_3 = summarize_objects(objects=[var_1])"
"['\n\ndef assign_tasks_to_user(task_ids, user_id):\n""""""\nAssigns a list of task IDs to the provided user\n\nParameters:\n task_ids (list): List of task IDs to be assigned\n user_id (str): The ID of the user to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n', '\n\ndef fetch_user_created_work(user_id, work_type=None):\n""""""\nRetrieves work items created by a specific user\n\nParameters:\n user_id (str): The ID of the user whose work items are to be retrieved\n work_type (list): Filters for work of the provided types, e.g., [\'issue\', \'ticket\']\n\nReturns:\n list: Work items created by the user\n""""""\n', '\n\ndef link_related_objects(object_id, related_object_id):\n""""""\nCreates a link between two related objects in the system\n\nParameters:\n object_id (str): The ID of the primary object\n related_object_id (str): The ID of the object to relate to the primary\n\nReturns:\n bool: True if the objects were successfully linked, False otherwise\n""""""\n', 'def assign_tickets_to_user(ticket_ids, user_id):\n""""""\nAssigns a set of tickets to a specified user\n\nParameters:\n ticket_ids (list): A list of ticket IDs to be assigned\n user_id (str): The ID of the user to whom the tickets will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef list_department_members(department_id):\n""""""\nReturns a list of user IDs for all members within a specified department\n\nParameters:\n department_id (str): The ID of the department to list members for\n\nReturns:\n list: User IDs of all the members in the department\n""""""\n', '\n\ndef mark_ticket_as_resolved(ticket_id):\n""""""\nMarks a ticket as resolved in the system\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked as resolved\n\nReturns:\n bool: True if the ticket was marked as resolved, False otherwise\n""""""\n', '\n\ndef validate_work_item_status(work_item_id, status_options):\n""""""\nChecks if the given work item has a status that is among the provided options\n\nParameters:\n work_item_id (str): The ID of the work item to check\n status_options (list): A list of valid status options\n\nReturns:\n bool: True if status is valid, False otherwise\n""""""\n', '\n\ndef remove_object_from_archive(object_id):\n""""""\nRemoves an object from the system archive, making it active again\n\nParameters:\n object_id (str): The ID of the object to be removed from the archive\n\nReturns:\n bool: True if the object was successfully removed, False otherwise\n""""""\n', 'def filter_work_by_date_range(start_date, end_date, work_type=None):\n""""""\nFilters work items based on a given date range.\n\nParameters:\n start_date (str): The start date of the desired date range\n end_date (str): The end date of the desired date range\n work_type (list): Optional filter for type of work\n\nReturns:\n list: Work items within the specified date range\n""""""\n', '\n\ndef retrieve_archived_documents(archive_id, keyword=None):\n""""""\nRetrieves documents from the archive based on optional keyword\n\nParameters:\n archive_id (str): The ID of the archive from which to retrieve documents\n keyword (str): Optional keyword to filter documents, default is \'None\'\n\nReturns:\n list: A list of documents matching the keyword if provided, otherwise all documents from the archive\n""""""']","Fetch work items created by user ""User123"", filter them for type ""ticket"", and assign them to user ""Agent007"".","var_1 = search_object_by_name(query=""User123"")
var_2 = fetch_user_created_work(user_id=var_1, work_type=[""ticket""])
var_3 = search_object_by_name(query=""Agent007"")
var_4 = assign_tickets_to_user(ticket_ids=var_2, user_id=var_3)"
"['\n\ndef batch_update_task_status(task_ids, new_status):\n""""""\nUpdates the status of multiple tasks in a batch operation\n\nParameters:\n task_ids (list): A list of task IDs whose status needs updating\n new_status (str): The new status to apply to the tasks\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef check_availability_of_part(part_id):\n""""""\nChecks if a specific part is available in inventory\n\nParameters:\n part_id (str): The ID of the part to check for availability\n\nReturns:\n bool: True if the part is available, False otherwise\n""""""\n', 'def assign_ticket_to_user(ticket_id, user_id):\n""""""\nAssigns a specific ticket to a user\n\nParameters:\n ticket_id (str): The ID of the ticket to be assigned\n user_id (str): The ID of the user to whom the ticket will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n', '\n\ndef remove_user_from_project(user_id, project_id):\n""""""\nRemoves a user from a project\n\nParameters:\n user_id (str): The ID of the user to be removed\n project_id (str): The ID of the project from which the user is to be removed\n\nReturns:\n bool: True if the user is successfully removed, False otherwise\n""""""', '\n\ndef calculate_workload_for_user(user_id):\n""""""\nCalculates the total number of open work items assigned to a user\n\nParameters:\n user_id (str): The ID of the user for whom to calculate the workload\n\nReturns:\n int: The total number of open work items\n""""""\n', '\n\ndef list_department_members(department_id):\n""""""\nReturns a list of user IDs for all members within a specified department\n\nParameters:\n department_id (str): The ID of the department to list members for\n\nReturns:\n list: User IDs of all the members in the department\n""""""\n', '\n\ndef check_inventory_availability(part_id, minimum_quantity=1):\n""""""\nChecks if the inventory has the specified part in at least the minimum quantity\n\nParameters:\n part_id (str): The ID of the part to check in inventory\n minimum_quantity (int): The minimum quantity to check for; defaults to 1\n\nReturns:\n bool: True if the minimum quantity is available; otherwise False\n""""""\n', '\n\ndef list_recent_activities(user_id, limit=10):\n""""""\nLists the most recent activities performed by a user\n\nParameters:\n user_id (str): The ID of the user whose activities are to be listed\n limit (int): The maximum number of recent activities to return\n\nReturns:\n list: Recent activities of the user\n""""""\n', '\n\ndef retrieve_user_contact_info(user_id):\n""""""\nRetrieves the contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact info is requested\n\nReturns:\n str: Contact information of the user\n""""""\n', '\n\ndef generate_summary_report(object_ids):\n""""""\nGenerates a summary report for the specified objects\n\nParameters:\n object_ids (list): A list of object IDs\n\nReturns:\n str: The ID of the generated report\n""""""\n']","Retrieve the contact information for user ""AgentSmith"", check the availability of part ""RX-78"", and list all work items related to this part.","var_1 = search_object_by_name(query=""AgentSmith"")
var_2 = retrieve_user_contact_info(user_id=var_1)
var_3 = check_availability_of_part(part_id=""RX-78"")
var_4 = works_list(applies_to_part=[""RX-78""])"
"['\n\ndef batch_update_user_roles(user_ids, new_role):\n""""""\nUpdates the roles for a batch of users to a new role\n\nParameters:\n user_ids (list): List of user IDs whose roles should be updated\n new_role (str): The new role to assign\n\nReturns:\n int: Number of users successfully updated\n""""""\n', '\n\ndef generate_report_data(report_type, data_set_id):\n""""""\nGenerates report data based on the provided report type and data set\n\nParameters:\n report_type (str): The type of report to generate\n data_set_id (str): The ID of the data set to be used for the report\n\nReturns:\n str: A report data string or ID depending on internal implementation\n""""""\n', '\n\ndef calculate_budget_remaining(budget_id):\n""""""\nCalculates the remaining budget for a given budget ID\n\nParameters:\n budget_id (str): The ID of the budget to calculate\n\nReturns:\n float: The amount of remaining budget\n""""""\n', '\n\ndef calculate_time_until_deadline(work_item_id):\n""""""\nCalculates the amount of time remaining until the deadline of a work item\n\nParameters:\n work_item_id (str): The ID of the work item\n\nReturns:\n float: The number of hours until the deadline\n""""""\n', '\ndef update_user_ID(user_id, status):\n""""""\nUpdates the status of a user account in the system and returns the updated id\n\nParameters:\n user_id (str): The ID of the user whose status is to be updated\n status (str): The new status to apply to the user account\n\nReturns:\n str: updated User Id\n""""""\n', '\n\ndef filter_tasks_by_completion(task_ids, completed=True):\n""""""\nFilters the list of tasks by their completion status\n\nParameters:\n task_ids (list): List of task IDs to filter\n completed (bool): The completion status to filter by. Default is \'True\'\n\nReturns:\n list: List of task IDs that match the completion status\n""""""\n', '\n\ndef fetch_users_from_group(group_id):\n""""""\nRetrieves a list of user IDs that belong to the specified group\n\nParameters:\n group_id (str): The ID of the group\n\nReturns:\n list: User IDs belonging to the group\n""""""\n', '\n\ndef mark_item_as_duplicated(work_item_id, duplicate_of_id):\n""""""\nMarks a work item as a duplicate of another\n\nParameters:\n work_item_id (str): The ID of the work item that is a duplicate\n duplicate_of_id (str): The ID of the work item of which it is a duplicate\n\nReturns:\n bool: True if the item is successfully marked, False otherwise\n""""""\n', '\n\ndef update_contact_information(contact_id, new_phone=None, new_email=None):\n""""""\nUpdates the contact information with new provided phone number or email\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_phone (str): The new phone number for the contact, default is \'None\'\n new_email (str): The new email address for the contact, default is \'None\'\n\nReturns:\n bool: Status of the update operation\n""""""\n', '\n\ndef check_object_permission(user_id, object_id):\n""""""\nChecks if a user has permission to access a specific object\n\nParameters:\n user_id (str): The ID of the user\n object_id (str): The ID of the object to check permission for\n\nReturns:\n bool: True if the user has permission, False otherwise\n""""""\n']","Fetch users from group ""EngineeringTeam"", update their roles to ""Lead Engineer"", and then get a list of work items owned by these users to summarize and prioritize.","var_1 = fetch_users_from_group(group_id=""EngineeringTeam"")
var_2 = batch_update_user_roles(user_ids=var_1, new_role=""Lead Engineer"")
var_3 = works_list(owned_by=var_1)
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)"
"['\n\ndef batch_update_user_roles(user_ids, new_role):\n""""""\nUpdates the roles for a batch of users to a new role\n\nParameters:\n user_ids (list): List of user IDs whose roles should be updated\n new_role (str): The new role to assign\n\nReturns:\n int: Number of users successfully updated\n""""""\n', '\n\ndef update_stage_of_work_item(work_item_id, new_stage):\n""""""\nUpdates the stage of a work item\n\nParameters:\n work_item_id (str): The ID of the work item to update\n new_stage (str): The new stage to which the work item should be moved\n\nReturns:\n bool: True if the stage is successfully updated, False otherwise\n""""""', '\n\ndef filter_projects_by_category(category_id, active_only=True):\n""""""\nFilters projects by their category and returns a list of project IDs\n\nParameters:\n category_id (str): The ID of the category to filter projects by\n active_only (bool): Whether to return only active projects\n\nReturns:\n list: List of project IDs matching the category filter\n""""""\n', '\n\ndef filter_tasks_by_completion(task_ids, completed=True):\n""""""\nFilters the list of tasks by their completion status\n\nParameters:\n task_ids (list): List of task IDs to filter\n completed (bool): The completion status to filter by. Default is \'True\'\n\nReturns:\n list: List of task IDs that match the completion status\n""""""\n', '\n\ndef mark_ticket_for_review(ticket_id, reviewer_id):\n""""""\nMarks a ticket for review by a specific user\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked for review\n reviewer_id (str): The ID of the user who should review the ticket\n\nReturns:\n None\n""""""\n', '\n\ndef merge_duplicate_objects(primary_object_id, duplicate_object_id):\n""""""\nMerges a duplicate object into a primary object\n\nParameters:\n primary_object_id (str): The ID of the primary object\n duplicate_object_id (str): The ID of the duplicate object to be merged\n\nReturns:\n bool: True if the merge was successful, False otherwise\n""""""\n', '\n\ndef update_contact_info(contact_id, new_email=None, new_phone=None):\n""""""\nUpdates the contact information for a given contact ID with new email and/or phone\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_email (str, optional): The new email address; defaults to None\n new_phone (str, optional): The new phone number; defaults to None\n\nReturns:\n bool: True if the update was successful; otherwise False\n""""""\n', '\n\ndef generate_summary_report(object_ids):\n""""""\nGenerates a summary report for the specified objects\n\nParameters:\n object_ids (list): A list of object IDs\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef merge_duplicate_work_items(primary_work_id, duplicate_work_ids):\n""""""\nMerges duplicate work items into the primary work item\n\nParameters:\n primary_work_id (str): The ID of the primary work item\n duplicate_work_ids (list): List of IDs of duplicate work items to be merged\n\nReturns:\n bool: True if merge was successful, otherwise False\n""""""\n', '\n\ndef retrieve_user_workload(user_id):\n""""""\nRetrieves the current workload for the specified user\n\nParameters:\n user_id (str): The ID of the user whose workload is to be retrieved\n\nReturns:\n list: A list containing workload details\n""""""\n']","Update the role of user ""AnalystAnne"" to ""Senior Analyst"" and generate a summary report of all work items they own.","var_1 = search_object_by_name(query=""AnalystAnne"")
var_2 = batch_update_user_roles(user_ids=[var_1], new_role=""Senior Analyst"")
var_3 = works_list(owned_by=[var_1])
var_4 = generate_summary_report(object_ids=var_3)"
"['\n\ndef batch_update_user_roles(user_ids, new_role):\n""""""\nUpdates the roles for a batch of users to a new role\n\nParameters:\n user_ids (list): List of user IDs whose roles should be updated\n new_role (str): The new role to assign\n\nReturns:\n int: Number of users successfully updated\n""""""\n', 'def fetch_user_tasks(user_id, include_completed=False):\n""""""\nRetrieves a list of tasks assigned to a user\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be fetched\n include_completed (bool): Whether to include completed tasks in the list\n\nReturns:\n list: List of tasks assigned to the user\n""""""\n', '\n\ndef update_contact_info(contact_id, new_email=None, new_phone=None):\n""""""\nUpdates the contact information for a given contact ID with new email and/or phone\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_email (str, optional): The new email address; defaults to None\n new_phone (str, optional): The new phone number; defaults to None\n\nReturns:\n bool: True if the update was successful; otherwise False\n""""""\n', 'def retrieve_sprint_workload(sprint_id):\n""""""\nCalculates the total workload for a given sprint based on the work items associated with it\n\nParameters:\n sprint_id (str): The ID of the sprint for workload calculation\n\nReturns:\n float: Total workload in hours\n""""""\n', '\n\ndef filter_records_by_date(record_ids, start_date, end_date):\n""""""\nFilters a list of record IDs based on a date range\n\nParameters:\n record_ids (list): List of record IDs to filter\n start_date (str): Start date for the filtering in \'YYYY-MM-DD\' format\n end_date (str): End date for the filtering in \'YYYY-MM-DD\' format\n\nReturns:\n list: Filtered record IDs\n""""""\n', 'def update_issue_status(issue_id, new_status):\n""""""\nUpdates the status of an issue\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef get_user_avatar(user_id):\n""""""\nRetrieves the avatar image URL for the specified user\n\nParameters:\n user_id (str): The ID of the user whose avatar is to be retrieved\n\nReturns:\n str: URL of the user\'s avatar image\n""""""\n', '\n\ndef merge_duplicate_objects(primary_object_id, duplicate_object_id):\n""""""\nMerges a duplicate object into a primary object\n\nParameters:\n primary_object_id (str): The ID of the primary object\n duplicate_object_id (str): The ID of the duplicate object to be merged\n\nReturns:\n bool: True if the merge was successful, False otherwise\n""""""\n', '\n\ndef update_object_status(object_id, new_status, changed_by):\n""""""\nUpdates the status of an object and records the user that made the change\n\nParameters:\n object_id (str): The ID of the object for which the status is updated\n new_status (str): The new status for the object\n changed_by (str): The ID of the user who is changing the status\n\nReturns:\n None\n""""""\n', '\n\ndef set_user_permission(user_id, permission_level):\n""""""\nSets a specific permission level for a user account\n\nParameters:\n user_id (str): The ID of the user to set permissions for\n permission_level (str): The level of permission to assign e.g., \'read\', \'write\', \'admin\'\n\nReturns:\n bool: True if the permission was set successfully, False otherwise\n""""""\n']","Retrieve the avatar for user ""User123"", update their contact information with a new phone number ""555-0199"", and fetch all their tasks, including completed ones.","var_1 = get_user_avatar(user_id=""User123"")
var_2 = update_contact_info(contact_id=""User123"", new_phone=""555-0199"")
var_3 = fetch_user_tasks(user_id=""User123"", include_completed=True)"
"['\n\ndef calculate_budget_allocation(project_id, cost_limit):\n""""""\nCalculates and assigns the budget allocation for a project\n\nParameters:\n project_id (str): The ID of the project for which the budget is calculated\n cost_limit (float): The cost limit for the project\'s budget\n\nReturns:\n float: The amount allocated to the project budget\n""""""\n', '\n\ndef calculate_estimated_completion(project_id):\n""""""\nCalculates the estimated completion date for a project based on current progress\n\nParameters:\n project_id (str): The ID of the project to be analyzed\n\nReturns:\n str: Estimated date of completion\n""""""\n', '\n\ndef remove_user_from_project(user_id, project_id):\n""""""\nRemoves a user from a project\n\nParameters:\n user_id (str): The ID of the user to be removed\n project_id (str): The ID of the project from which the user is to be removed\n\nReturns:\n bool: True if the user is successfully removed, False otherwise\n""""""', '\n\ndef archive_old_tickets(older_than_date, active_status=False):\n""""""\nArchives tickets that are older than the specified date, optionally filters by active status and returns the IDs\n\nParameters:\n older_than_date (str): A date in the format \'YYYY-MM-DD\', to filter tickets older than this date\n active_status (bool): If True, only archives tickets that are currently active; defaults to False\n\nReturns:\n str: ID of tickets archived\n""""""\n', '\n\ndef update_issue_with_solution(issue_id, solution_text):\n""""""\nUpdates an issue with a solution description\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n solution_text (str): The description of the solution to apply to the issue\n\nReturns:\n None\n""""""\n', '\n\ndef calculate_user_workload(user_id):\n""""""\nCalculates the workload of a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be calculated\n\nReturns:\n float: The calculated workload value\n""""""\n', '\n\ndef calculate_estimated_effort(work_id):\n""""""\nCalculates the estimated effort required to complete a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n float: Estimated effort in hours\n""""""\n', 'def fetch_user_tasks(user_id, include_completed=False):\n""""""\nRetrieves a list of tasks assigned to a user\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be fetched\n include_completed (bool): Whether to include completed tasks in the list\n\nReturns:\n list: List of tasks assigned to the user\n""""""\n', '\n\ndef calculate_project_completion_rate(project_id):\n""""""\nCalculates the completion rate of tasks for a given project\n\nParameters:\n project_id (str): The ID of the project to calculate the completion rate for\n\nReturns:\n float: The completion rate as a percentage\n""""""\n', '\n\ndef fetch_user_created_work(user_id, work_type=None):\n""""""\nRetrieves work items created by a specific user\n\nParameters:\n user_id (str): The ID of the user whose work items are to be retrieved\n work_type (list): Filters for work of the provided types, e.g., [\'issue\', \'ticket\']\n\nReturns:\n list: Work items created by the user\n""""""\n']","Calculate the budget allocation for project ""PRJ-456"", then fetch and summarize all tasks owned by user ""BudgetMaster"" related to this project.","var_1 = calculate_budget_allocation(project_id=""PRJ-456"", cost_limit=50000)
var_2 = search_object_by_name(query=""BudgetMaster"")
var_3 = works_list(owned_by=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)"
"['\n\ndef calculate_budget_remaining(budget_id):\n""""""\nCalculates the remaining budget for a given budget ID\n\nParameters:\n budget_id (str): The ID of the budget to calculate\n\nReturns:\n float: The amount of remaining budget\n""""""\n', '\n\ndef link_related_objects(object_id, related_object_id):\n""""""\nCreates a link between two related objects in the system\n\nParameters:\n object_id (str): The ID of the primary object\n related_object_id (str): The ID of the object to relate to the primary\n\nReturns:\n bool: True if the objects were successfully linked, False otherwise\n""""""\n', 'def calculate_due_dates(work_item_ids, urgency_level):\n""""""\nCalculates the due dates for given work items based on their urgency\n\nParameters:\n work_item_ids (list): A list of work item IDs for which due dates are required\n urgency_level (str): The urgency level. Allowed values: \'high\', \'medium\', \'low\'\n\nReturns:\n list: Due dates for the specified work items\n""""""\n', '\n\ndef merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):\n""""""\nMerges duplicate tickets into a primary ticket\n\nParameters:\n primary_ticket_id (str): The ID of the primary ticket that remains\n duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary\n\nReturns:\n None\n""""""\n', '\n\ndef validate_user_permissions(user_id, required_permissions):\n""""""\nChecks if the user has the specified permissions\n\nParameters:\n user_id (str): The ID of the user whose permissions need to be checked\n required_permissions (list): A list of permissions to check against the user\'s permissions\n\nReturns:\n bool: True if the user has all the required permissions, False otherwise\n""""""\n', '\n\ndef estimate_task_duration(task_id, complexity_level):\n""""""\nEstimates the duration needed to complete a task based on its complexity level\n\nParameters:\n task_id (str): The ID of the task\n complexity_level (str): The complexity level of the task. Allowed values: \'low\', \'medium\', \'high\'\n\nReturns:\n float: Estimated duration in hours\n""""""\n', '\n\ndef generate_report_for_sprint(sprint_id):\n""""""\nGenerates a performance report for a specified sprint\n\nParameters:\n sprint_id (str): The ID of the sprint for which to generate the report\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef convert_task_to_ticket(task_id):\n""""""\nConverts a task into a ticket in the system\n\nParameters:\n task_id (str): The ID of the task to be converted\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', '\n\ndef assign_tasks_to_employee(task_ids, employee_id):\n""""""\nAssigns a list of tasks to the specified employee\n\nParameters:\n task_ids (list): A list of task IDs to be assigned\n employee_id (str): The ID of the employee to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment was successful, False otherwise\n""""""\n', '\n\ndef estimate_cost_for_work(work_id, cost_per_hour=100):\n""""""\nEstimates the cost for completing a work item based on a cost per hour rate\n\nParameters:\n work_id (str): The ID of the work item to estimate cost for\n cost_per_hour (float): The cost per hour. Default is \'100\'\n\nReturns:\n float: Estimated cost\n""""""']","Calculate the remaining budget using budget ID ""BUD-456"", then estimate the cost for work item ""WORK-789"" and check if the budget is sufficient.","var_1 = calculate_budget_remaining(budget_id=""BUD-456"")
var_2 = estimate_cost_for_work(work_id=""WORK-789"")"
"['\n\ndef calculate_budget_remaining(budget_id):\n""""""\nCalculates the remaining budget for a given budget ID\n\nParameters:\n budget_id (str): The ID of the budget to calculate\n\nReturns:\n float: The amount of remaining budget\n""""""\n', '\n\ndef mark_task_as_completed(task_id):\n""""""\nMarks a task as completed in the system.\n\nParameters:\n task_id (str): The ID of the task to be marked as complete\n\nReturns:\n bool: True if marked successfully, False otherwise\n""""""\n', '\n\ndef generate_project_summary(project_id):\n""""""\nGenerates a summary report for the specified project\n\nParameters:\n project_id (str): The ID of the project to summarize\n\nReturns:\n str: A summary report of the project\n""""""\n', '\n\ndef list_recent_activities(user_id, limit=10):\n""""""\nLists the most recent activities performed by a user\n\nParameters:\n user_id (str): The ID of the user whose activities are to be listed\n limit (int): The maximum number of recent activities to return\n\nReturns:\n list: Recent activities of the user\n""""""\n', '\n\ndef allocate_resources_to_project(project_id, resource_ids):\n""""""\nAllocates specified resources to a project\n\nParameters:\n project_id (str): The ID of the project to which resources are allocated\n resource_ids (list): A list of resource IDs to allocate to the project\n\nReturns:\n bool: True if resources could be allocated, False otherwise\n""""""\n', '\n\ndef deactivate_user_account(user_id, reason):\n""""""\nDeactivates a user account for a specific reason\n\nParameters:\n user_id (str): The ID of the user whose account is to be deactivated\n reason (str): The reason for deactivating the account\n\nReturns:\n bool: True if the account was successfully deactivated; otherwise False\n""""""\n', '\n\ndef remove_users_from_group(user_ids, group_id):\n""""""\nRemoves the specified users from a group\n\nParameters:\n user_ids (list): A list of user IDs to be removed from the group\n group_id (str): The ID of the group from which the users should be removed\n\nReturns:\n bool: Status of the removal\n""""""\n', '\n\ndef log_system_event(event_type, description, user_id=None):\n""""""\nLogs an event in the system with an optional user ID associated with it\n\nParameters:\n event_type (str): The type of event to log\n description (str): A brief description of the event\n user_id (str): The ID of the user involved in the event, if applicable\n\nReturns:\n str: The ID of the logged event\n""""""\n', '\n\ndef create_report_for_sprint(sprint_id, report_type):\n""""""\nGenerates a report for a given sprint\n\nParameters:\n sprint_id (str): The ID of the sprint\n report_type (str): The type of report to be generated\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef delete_objects_by_id(object_ids):\n""""""\nDeletes objects from the system based on their IDs\n\nParameters:\n object_ids (list): List of object IDs to delete\n\nReturns:\n bool: True if objects were successfully deleted, False otherwise\n""""""\n']","Calculate the remaining budget using budget ID ""BUD-456"", log the calculation event, and generate a summary report for the associated project.","var_1 = calculate_budget_remaining(budget_id=""BUD-456"")
var_2 = log_system_event(event_type=""budget_calculation"", description=""Calculated remaining budget for BUD-456"")
var_3 = generate_project_summary(project_id=""BUD-456"")"
"['\n\ndef calculate_effort_for_task(task_id):\n""""""\nCalculates the effort spent on a specific task by summing subtasks\n\nParameters:\n task_id (str): The ID of the task for which the effort needs to be calculated\n\nReturns:\n float: Total effort spent on the task\n""""""\n', '\n\ndef filter_tasks_by_completion(task_ids, completed=True):\n""""""\nFilters the list of tasks by their completion status\n\nParameters:\n task_ids (list): List of task IDs to filter\n completed (bool): The completion status to filter by. Default is \'True\'\n\nReturns:\n list: List of task IDs that match the completion status\n""""""\n', '\n\ndef schedule_meeting_with_user(user_id, duration=30, urgent=False):\n""""""\nSchedules a meeting with a specified user\n\nParameters:\n user_id (str): The ID of the user with whom to schedule a meeting\n duration (int): Duration of the meeting in minutes, default is \'30\'\n urgent (bool): Whether the meeting is urgent, defaults to False\n\nReturns:\n str: The ID of the scheduled meeting\n""""""\n', '\n\ndef retrieve_user_workload(user_id):\n""""""\nRetrieves the current workload for the specified user\n\nParameters:\n user_id (str): The ID of the user whose workload is to be retrieved\n\nReturns:\n list: A list containing workload details\n""""""\n', 'def fetch_user_tasks(user_id, include_completed=False):\n""""""\nRetrieves a list of tasks assigned to a user\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be fetched\n include_completed (bool): Whether to include completed tasks in the list\n\nReturns:\n list: List of tasks assigned to the user\n""""""\n', '\ndef update_user_ID(user_id, status):\n""""""\nUpdates the status of a user account in the system and returns the updated id\n\nParameters:\n user_id (str): The ID of the user whose status is to be updated\n status (str): The new status to apply to the user account\n\nReturns:\n str: updated User Id\n""""""\n', '\n\ndef mark_task_as_completed(task_id):\n""""""\nMarks a task as completed in the system.\n\nParameters:\n task_id (str): The ID of the task to be marked as complete\n\nReturns:\n bool: True if marked successfully, False otherwise\n""""""\n', '\n\ndef check_availability_of_part(part_id):\n""""""\nChecks if a specific part is available in inventory\n\nParameters:\n part_id (str): The ID of the part to check for availability\n\nReturns:\n bool: True if the part is available, False otherwise\n""""""\n', '\n\ndef set_user_permission(user_id, permission_level):\n""""""\nSets a specific permission level for a user account\n\nParameters:\n user_id (str): The ID of the user to set permissions for\n permission_level (str): The level of permission to assign e.g., \'read\', \'write\', \'admin\'\n\nReturns:\n bool: True if the permission was set successfully, False otherwise\n""""""\n', '\n\ndef create_report_for_sprint(sprint_id, report_type):\n""""""\nGenerates a report for a given sprint\n\nParameters:\n sprint_id (str): The ID of the sprint\n report_type (str): The type of report to be generated\n\nReturns:\n str: The ID of the generated report\n""""""\n']","Retrieve all tasks completed by user ""QAEngineer42"", summarize the completed tasks, and then create a report for the current sprint including these summaries.","var_1 = search_object_by_name(query=""QAEngineer42"")
var_2 = fetch_user_tasks(user_id=var_1, include_completed=True)
var_3 = filter_tasks_by_completion(task_ids=var_2, completed=True)
var_4 = summarize_objects(objects=var_3)
var_5 = get_sprint_id()
var_6 = create_report_for_sprint(sprint_id=var_5, report_type=var_4)"
"['\n\ndef calculate_estimated_completion(project_id):\n""""""\nCalculates the estimated completion date for a project based on current progress\n\nParameters:\n project_id (str): The ID of the project to be analyzed\n\nReturns:\n str: Estimated date of completion\n""""""\n', '\n\ndef retrieve_user_permissions(user_id):\n""""""\nRetrieves the list of permissions for the specified user\n\nParameters:\n user_id (str): The ID of the user whose permissions are to be retrieved\n\nReturns:\n list: The list of permissions for the user\n""""""\n', '\n\ndef check_ticket_status(ticket_id):\n""""""\nChecks the status of a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose status is to be checked\n\nReturns:\n str: The status of the ticket\n""""""\n', 'def update_issue_status(issue_id, new_status):\n""""""\nUpdates the status of an issue\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef remove_object_from_sprint(object_id, sprint_id):\n""""""\nRemoves a specified object from a sprint and returns the new list\n\nParameters:\n object_id (str): The ID of the object to be removed\n sprint_id (str): The ID of the project from which the object should be removed\n\nReturns:\n list: Returns the updated list of sprint objects\n""""""\n', '\n\ndef filter_projects_by_category(category_id, active_only=True):\n""""""\nFilters projects by their category and returns a list of project IDs\n\nParameters:\n category_id (str): The ID of the category to filter projects by\n active_only (bool): Whether to return only active projects\n\nReturns:\n list: List of project IDs matching the category filter\n""""""\n', '\n\ndef calculate_progress(project_id):\n""""""\nCalculates the overall progress of a given project as a percentage\n\nParameters:\n project_id (str): The ID of the project for which progress is being calculated\n\nReturns:\n float: The progress percentage of the project\n""""""\n', '\n\ndef calculate_effort_for_task(task_id):\n""""""\nCalculates the effort spent on a specific task by summing subtasks\n\nParameters:\n task_id (str): The ID of the task for which the effort needs to be calculated\n\nReturns:\n float: Total effort spent on the task\n""""""\n', '\n\ndef retrieve_document_by_keyword(keyword):\n""""""\nRetrieves a document ID containing the specified keyword\n\nParameters:\n keyword (str): The keyword to search for in the documents\n\nReturns:\n str: ID of the document containing the keyword\n""""""', '\n\ndef get_work_item_history(work_id):\n""""""\nRetrieves the history of changes for a given work item\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n list: A chronological list of changes made to the work item\n""""""\n']","Retrieve the estimated completion date for project ""PROJ-42"", calculate its overall progress percentage, and summarize any high-severity tickets related to it.","var_1 = calculate_estimated_completion(project_id=""PROJ-42"")
var_2 = calculate_progress(project_id=""PROJ-42"")
var_3 = works_list(type=[""ticket""], ticket.severity=[""high""], applies_to_part=[""PROJ-42""])
var_4 = summarize_objects(objects=var_3)"
"['\n\ndef calculate_estimated_completion(project_id):\n""""""\nCalculates the estimated completion date for a project based on current progress\n\nParameters:\n project_id (str): The ID of the project to be analyzed\n\nReturns:\n str: Estimated date of completion\n""""""\n', '\n\ndef update_object_status(object_id, new_status, changed_by):\n""""""\nUpdates the status of an object and records the user that made the change\n\nParameters:\n object_id (str): The ID of the object for which the status is updated\n new_status (str): The new status for the object\n changed_by (str): The ID of the user who is changing the status\n\nReturns:\n None\n""""""\n', 'def filter_projects_by_status(project_ids, status=""active""):\n""""""\nFilters a list of project IDs by their status\n\nParameters:\n project_ids (list): A list of project IDs to filter\n status (str): The status to filter by, default is \'active\'\n\nReturns:\n list: Project IDs matching the status\n""""""\n', '\n\ndef calculate_project_completion_rate(project_id):\n""""""\nCalculates the completion rate of tasks for a given project\n\nParameters:\n project_id (str): The ID of the project to calculate the completion rate for\n\nReturns:\n float: The completion rate as a percentage\n""""""\n', '\n\ndef archive_completed_tasks(project_id, completed_since):\n""""""\nArchives tasks that are completed within the given project since the specified time\n\nParameters:\n project_id (str): The ID of the project containing the tasks\n completed_since (str): Archive tasks completed after this timestamp\n\nReturns:\n int: Number of tasks archived\n""""""\n', '\n\ndef deactivate_user_account(user_id, reason):\n""""""\nDeactivates a user account for a specific reason\n\nParameters:\n user_id (str): The ID of the user whose account is to be deactivated\n reason (str): The reason for deactivating the account\n\nReturns:\n bool: True if the account was successfully deactivated; otherwise False\n""""""\n', '\n\ndef check_object_permission(user_id, object_id):\n""""""\nChecks if a user has permission to access a specific object\n\nParameters:\n user_id (str): The ID of the user\n object_id (str): The ID of the object to check permission for\n\nReturns:\n bool: True if the user has permission, False otherwise\n""""""\n', '\n\ndef get_user_permissions(user_id):\n""""""\nReturns a list of permissions for a specified user ID\n\nParameters:\n user_id (str): The ID of the user whose permissions you want to retrieve\n\nReturns:\n list: User permissions\n""""""\n', '\n\ndef list_completed_items_by_user(user_id):\n""""""\nLists items that have been completed by the given user\n\nParameters:\n user_id (str): The ID of the user whose completed items are being requested\n\nReturns:\n list: Completed items by the user\n""""""\n', '\n\ndef get_sprint_history(sprint_id):\n""""""\nRetrieves the change history of a sprint\n\nParameters:\n sprint_id (str): The ID of the ticket\n\nReturns:\n list: A list of changes made to the sprint\n""""""\n']","Calculate the estimated completion date for project ""PRJ-456"", and filter all active projects to include this project if it matches the status. Then, get a list of all work items associated with ""PRJ-456"" and summarize them for a status update meeting.","var_1 = calculate_estimated_completion(project_id=""PRJ-456"")
var_2 = filter_projects_by_status(project_ids=[var_1], status=""active"")
var_3 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[var_1])
var_4 = summarize_objects(objects=var_3)"
"['\n\ndef calculate_project_completion_rate(project_id):\n""""""\nCalculates the completion rate of tasks for a given project\n\nParameters:\n project_id (str): The ID of the project to calculate the completion rate for\n\nReturns:\n float: The completion rate as a percentage\n""""""\n', '\n\ndef update_contact_info(contact_id, new_email=None, new_phone=None):\n""""""\nUpdates the contact information for a given contact ID with new email and/or phone\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_email (str, optional): The new email address; defaults to None\n new_phone (str, optional): The new phone number; defaults to None\n\nReturns:\n bool: True if the update was successful; otherwise False\n""""""\n', '\n\ndef list_recent_activities(user_id, limit=10):\n""""""\nLists the most recent activities performed by a user\n\nParameters:\n user_id (str): The ID of the user whose activities are to be listed\n limit (int): The maximum number of recent activities to return\n\nReturns:\n list: Recent activities of the user\n""""""\n', '\n\ndef list_user_skills(user_id):\n""""""\nLists the skills associated with the specified user\n\nParameters:\n user_id (str): The ID of the user whose skills are being queried\n\nReturns:\n list: The skills of the user\n""""""\n', '\n\ndef filter_projects_by_category(category_id, active_only=True):\n""""""\nFilters projects by their category and returns a list of project IDs\n\nParameters:\n category_id (str): The ID of the category to filter projects by\n active_only (bool): Whether to return only active projects\n\nReturns:\n list: List of project IDs matching the category filter\n""""""\n', '\n\ndef get_sprint_history(sprint_id):\n""""""\nRetrieves the change history of a sprint\n\nParameters:\n sprint_id (str): The ID of the ticket\n\nReturns:\n list: A list of changes made to the sprint\n""""""\n', '\n\ndef mark_task_as_completed(task_id):\n""""""\nMarks a task as completed in the system.\n\nParameters:\n task_id (str): The ID of the task to be marked as complete\n\nReturns:\n bool: True if marked successfully, False otherwise\n""""""\n', 'def link_issues_to_project(issue_ids, project_id):\n""""""\nLinks the given issues to the specified project\n\nParameters:\n issue_ids (list): A list of issue IDs to be linked to the project\n project_id (str): The ID of the project to which the issues should be linked\n\nReturns:\n bool: Status of the linking action\n""""""\n', 'def assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task is assigned\n\nReturns:\n None\n""""""\n', '\n\ndef estimate_cost_for_work(work_id, cost_per_hour=100):\n""""""\nEstimates the cost for completing a work item based on a cost per hour rate\n\nParameters:\n work_id (str): The ID of the work item to estimate cost for\n cost_per_hour (float): The cost per hour. Default is \'100\'\n\nReturns:\n float: Estimated cost\n""""""']","Calculate the project completion rate for project ""PRJ-456"" and update the contact information for the project lead with a new email ""lead@project456.com"".","var_1 = calculate_project_completion_rate(project_id=""PRJ-456"")
var_2 = search_object_by_name(query=""project lead for PRJ-456"")
var_3 = update_contact_info(contact_id=var_2, new_email=""lead@project456.com"")"
"['\n\ndef calculate_project_completion_rate(project_id):\n""""""\nCalculates the completion rate of tasks for a given project\n\nParameters:\n project_id (str): The ID of the project to calculate the completion rate for\n\nReturns:\n float: The completion rate as a percentage\n""""""\n', 'def filter_projects_by_status(project_ids, status=""active""):\n""""""\nFilters a list of project IDs by their status\n\nParameters:\n project_ids (list): A list of project IDs to filter\n status (str): The status to filter by, default is \'active\'\n\nReturns:\n list: Project IDs matching the status\n""""""\n', 'def fetch_user_tasks(user_id, include_completed=False):\n""""""\nRetrieves a list of tasks assigned to a user\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be fetched\n include_completed (bool): Whether to include completed tasks in the list\n\nReturns:\n list: List of tasks assigned to the user\n""""""\n', '\n\ndef filter_tasks_by_completion(task_ids, completed=True):\n""""""\nFilters the list of tasks by their completion status\n\nParameters:\n task_ids (list): List of task IDs to filter\n completed (bool): The completion status to filter by. Default is \'True\'\n\nReturns:\n list: List of task IDs that match the completion status\n""""""\n', '\n\ndef retrieve_user_contact_info(user_id):\n""""""\nRetrieves the contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact info is requested\n\nReturns:\n str: Contact information of the user\n""""""\n', '\n\ndef get_object_history(object_id):\n""""""\nRetrieves the change history of a specified object\n\nParameters:\n object_id (str): The ID of the object for which history is requested\n\nReturns:\n list: A list of changes made to the object\n""""""\n', '\n\ndef create_new_ticket(title, description, reported_by):\n""""""\nCreates a new ticket in the system with the given details\n\nParameters:\n title (str): The title of the new ticket\n description (str): A detailed description of the issue or request\n reported_by (str): The ID of the user reporting the ticket\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', '\n\ndef retrieve_document_by_keyword(keyword):\n""""""\nRetrieves a document ID containing the specified keyword\n\nParameters:\n keyword (str): The keyword to search for in the documents\n\nReturns:\n str: ID of the document containing the keyword\n""""""', '\n\ndef merge_duplicate_tasks(primary_task_id, duplicate_task_ids):\n""""""\nMerges duplicate tasks into a primary task\n\nParameters:\n primary_task_id (str): The ID of the primary task which remains after the merge\n duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged\n\nReturns:\n None\n""""""\n', '\n\ndef reassign_work_item_owner(work_id, new_owner_id):\n""""""\nReassigns the owner of a work item to a new user\n\nParameters:\n work_id (str): The ID of the work item to be reassigned\n new_owner_id (str): The user ID of the new owner\n\nReturns:\n bool: True if reassignment is successful, False otherwise\n""""""\n']","Calculate the project completion rate for project ""PROJ-001"" and filter the tasks by completion status, then prioritize those tasks.","var_1 = calculate_project_completion_rate(project_id=""PROJ-001"")
var_2 = fetch_user_tasks(user_id=var_1, include_completed=False)
var_3 = filter_tasks_by_completion(task_ids=var_2, completed=True)
var_4 = prioritize_objects(objects=var_3)"
"['\n\ndef calculate_workload_for_user(user_id):\n""""""\nCalculates the total number of open work items assigned to a user\n\nParameters:\n user_id (str): The ID of the user for whom to calculate the workload\n\nReturns:\n int: The total number of open work items\n""""""\n', '\n\ndef retrieve_user_contact_info(user_id):\n""""""\nRetrieves the contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact info is requested\n\nReturns:\n str: Contact information of the user\n""""""\n', '\n\ndef retrieve_archived_documents(archive_id, keyword=None):\n""""""\nRetrieves documents from the archive based on optional keyword\n\nParameters:\n archive_id (str): The ID of the archive from which to retrieve documents\n keyword (str): Optional keyword to filter documents, default is \'None\'\n\nReturns:\n list: A list of documents matching the keyword if provided, otherwise all documents from the archive\n""""""', '\n\ndef get_recent_activity_log(user_id, limit=10):\n""""""\nGets the most recent activity log entries for a given user\n\nParameters:\n user_id (str): The ID of the user to get activities for\n limit (int): The maximum number of activity log entries to return\n\nReturns:\n list: Recent activity log entries\n""""""\n', '\n\ndef get_task_dependencies(task_id):\n""""""\nReturns a list of task IDs that are dependencies for the given task\n\nParameters:\n task_id (str): The ID of the task for which dependencies are requested\n\nReturns:\n list: Dependency task IDs\n""""""\n', '\n\ndef calculate_budget_remaining(budget_id):\n""""""\nCalculates the remaining budget for a given budget ID\n\nParameters:\n budget_id (str): The ID of the budget to calculate\n\nReturns:\n float: The amount of remaining budget\n""""""\n', '\n\ndef fetch_users_from_group(group_id):\n""""""\nRetrieves a list of user IDs that belong to the specified group\n\nParameters:\n group_id (str): The ID of the group\n\nReturns:\n list: User IDs belonging to the group\n""""""\n', '\n\ndef calculate_progress(project_id):\n""""""\nCalculates the overall progress of a given project as a percentage\n\nParameters:\n project_id (str): The ID of the project for which progress is being calculated\n\nReturns:\n float: The progress percentage of the project\n""""""\n', 'def assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task is assigned\n\nReturns:\n None\n""""""\n', '\ndef update_user_ID(user_id, status):\n""""""\nUpdates the status of a user account in the system and returns the updated id\n\nParameters:\n user_id (str): The ID of the user whose status is to be updated\n status (str): The new status to apply to the user account\n\nReturns:\n str: updated User Id\n""""""\n']","Calculate the total workload for user ""TeamLead"" and fetch their recent activity log.","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = calculate_workload_for_user(user_id=var_1)
var_3 = get_recent_activity_log(user_id=var_1)"
"['\n\ndef check_availability_of_part(part_id):\n""""""\nChecks if a specific part is available in inventory\n\nParameters:\n part_id (str): The ID of the part to check for availability\n\nReturns:\n bool: True if the part is available, False otherwise\n""""""\n', '\n\ndef link_related_documents(doc_id, related_doc_ids):\n""""""\nLinks related documents to the given document in the system\n\nParameters:\n doc_id (str): The ID of the document to which related documents should be linked\n related_doc_ids (list): A list of IDs for related documents\n\nReturns:\n bool: True if the operation was successful, False otherwise\n""""""\n', '\n\ndef generate_summary_report(object_ids):\n""""""\nGenerates a summary report for the specified objects\n\nParameters:\n object_ids (list): A list of object IDs\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef mark_ticket_as_resolved(ticket_id):\n""""""\nMarks a ticket as resolved in the system\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked as resolved\n\nReturns:\n bool: True if the ticket was marked as resolved, False otherwise\n""""""\n', '\n\ndef generate_report(report_type, subject_id, include_summary=True):\n""""""\nGenerates a report of a specific type for a subject in the system\n\nParameters:\n report_type (str): The type of report to generate\n subject_id (str): The ID of the subject for the report\n include_summary (bool): Whether to include a summary in the report; defaults to True\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef retrieve_user_workload(user_id):\n""""""\nRetrieves the current workload for the specified user\n\nParameters:\n user_id (str): The ID of the user whose workload is to be retrieved\n\nReturns:\n list: A list containing workload details\n""""""\n', '\n\ndef log_user_activity(user_id, activity_description):\n""""""\nLogs a user\'s activity with a description\n\nParameters:\n user_id (str): The ID of the user whose activity is being logged\n activity_description (str): A description of the activity\n\nReturns:\n bool: True if the logging was successful, False otherwise\n""""""\n', '\n\ndef get_user_contact_info(user_id):\n""""""\nRetrieves contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact information is requested\n\nReturns:\n str: The contact information of the user\n""""""\n', '\n\ndef assign_tasks_to_user(task_ids, user_id):\n""""""\nAssigns a list of task IDs to the provided user\n\nParameters:\n task_ids (list): List of task IDs to be assigned\n user_id (str): The ID of the user to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n', '\n\ndef calculate_budget_allocation(project_id, cost_limit):\n""""""\nCalculates and assigns the budget allocation for a project\n\nParameters:\n project_id (str): The ID of the project for which the budget is calculated\n cost_limit (float): The cost limit for the project\'s budget\n\nReturns:\n float: The amount allocated to the project budget\n""""""\n']","Check the availability of part ""ENG-456"", and if it is available, add all work items related to this part to the current sprint.","var_1 = check_availability_of_part(part_id=""ENG-456"")
var_2 = get_sprint_id()
var_3 = works_list(applies_to_part=[""ENG-456""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)"
"['\n\ndef check_inventory_availability(part_id, minimum_quantity=1):\n""""""\nChecks if the inventory has the specified part in at least the minimum quantity\n\nParameters:\n part_id (str): The ID of the part to check in inventory\n minimum_quantity (int): The minimum quantity to check for; defaults to 1\n\nReturns:\n bool: True if the minimum quantity is available; otherwise False\n""""""\n', '\n\ndef estimate_cost_for_work(work_id, cost_per_hour=100):\n""""""\nEstimates the cost for completing a work item based on a cost per hour rate\n\nParameters:\n work_id (str): The ID of the work item to estimate cost for\n cost_per_hour (float): The cost per hour. Default is \'100\'\n\nReturns:\n float: Estimated cost\n""""""', '\n\ndef generate_unique_identifier(prefix, use_timestamp=True):\n""""""\nGenerates a unique identifier with an optional timestamp\n\nParameters:\n prefix (str): A prefix for the identifier\n use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True\n\nReturns:\n str: The generated unique identifier\n""""""\n\n```', '\n\ndef assign_tasks_to_employee(task_ids, employee_id):\n""""""\nAssigns a list of tasks to the specified employee\n\nParameters:\n task_ids (list): A list of task IDs to be assigned\n employee_id (str): The ID of the employee to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment was successful, False otherwise\n""""""\n', '\n\ndef calculate_time_until_deadline(work_item_id):\n""""""\nCalculates the amount of time remaining until the deadline of a work item\n\nParameters:\n work_item_id (str): The ID of the work item\n\nReturns:\n float: The number of hours until the deadline\n""""""\n', '\n\ndef get_user_avatar(user_id):\n""""""\nRetrieves the avatar image URL for the specified user\n\nParameters:\n user_id (str): The ID of the user whose avatar is to be retrieved\n\nReturns:\n str: URL of the user\'s avatar image\n""""""\n', 'def filter_users_by_department(department_id=None, active_only=False):\n""""""\nFilters a list of users that belong to the specified department\n\nParameters:\n department_id (str): The ID of the department to filter users\n active_only (bool): Filters for only active users if set to True\n\nReturns:\n list: Users in the specified department\n""""""\n', '\n\ndef log_user_activity(user_id, activity_description):\n""""""\nLogs a user\'s activity with a description\n\nParameters:\n user_id (str): The ID of the user whose activity is being logged\n activity_description (str): A description of the activity\n\nReturns:\n bool: True if the logging was successful, False otherwise\n""""""\n', 'def update_issue_status(issue_id, new_status):\n""""""\nUpdates the status of an issue\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef list_user_tasks(user_id, completed=False):\n""""""\nLists all tasks assigned to a user, optionally filtering for completed tasks\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be listed\n completed (bool): If True, only completed tasks are returned\n\nReturns:\n list: A list of tasks assigned to the user\n""""""\n']","Check the inventory availability for part ""ENG-456"" and if it is available, assign the task to estimate its restocking cost to employee ""Emp123"".","var_1 = check_inventory_availability(part_id=""ENG-456"")
var_2 = generate_unique_identifier(prefix=""TaskEstimate"")
var_3 = create_actionable_tasks_from_text(text=""Estimate restocking cost for part ENG-456"")
var_4 = assign_tasks_to_employee(task_ids=[var_3], employee_id=""Emp123"")"
"['\n\ndef check_object_permission(user_id, object_id):\n""""""\nChecks if a user has permission to access a specific object\n\nParameters:\n user_id (str): The ID of the user\n object_id (str): The ID of the object to check permission for\n\nReturns:\n bool: True if the user has permission, False otherwise\n""""""\n', '\n\ndef fetch_ticket_history(ticket_id, history_limit=10):\n""""""\nFetches the history of changes to a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket for which the history is requested\n history_limit (int): Maximum number of history entries to retrieve. The default is \'10\'\n\nReturns:\n list: A list of history records for the ticket\n""""""\n', 'def assign_ticket_to_user(ticket_id, user_id):\n""""""\nAssigns a specific ticket to a user\n\nParameters:\n ticket_id (str): The ID of the ticket to be assigned\n user_id (str): The ID of the user to whom the ticket will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n', 'def update_issue_status(issue_id, new_status):\n""""""\nUpdates the status of an issue\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef notify_user_of_overdue_tasks(user_id):\n""""""\nNotifies a user of any overdue tasks assigned to them\n\nParameters:\n user_id (str): The ID of the user to check for overdue tasks\n\nReturns:\n None\n""""""\n', '\n\ndef validate_data_consistency(data_id, schema_id):\n""""""\nValidates if data conforms to a specified schema for consistency\n\nParameters:\n data_id (str): The ID of the data to be validated\n schema_id (str): The ID of the schema to validate the data against\n\nReturns:\n bool: True if data is consistent, False otherwise\n""""""\n', '\n\ndef generate_report_for_sprint(sprint_id):\n""""""\nGenerates a performance report for a specified sprint\n\nParameters:\n sprint_id (str): The ID of the sprint for which to generate the report\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef get_project_timeline(project_id):\n""""""\nRetrieves the timeline and key milestones of a project\n\nParameters:\n project_id (str): The ID of the project for which the timeline is requested\n\nReturns:\n list: Key milestones and dates for the project timeline\n""""""\n', '\n\ndef calculate_progress_percentage(project_id):\n""""""\nCalculates the progress percentage of the given project\n\nParameters:\n project_id (str): The ID of the project for which to calculate progress\n\nReturns:\n float: The percentage of project completion\n""""""\n', '\n\ndef convert_task_to_ticket(task_id):\n""""""\nConverts a task into a ticket in the system\n\nParameters:\n task_id (str): The ID of the task to be converted\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n']","Check if user ""QAAnalyst"" has permission to access ticket ""TICK-001"", fetch the ticket's history, and then assign it to user ""SupportLead"".","var_1 = search_object_by_name(query=""QAAnalyst"")
var_2 = check_object_permission(user_id=var_1, object_id=""TICK-001"")
var_3 = fetch_ticket_history(ticket_id=""TICK-001"")
var_4 = search_object_by_name(query=""SupportLead"")
var_5 = assign_ticket_to_user(ticket_id=""TICK-001"", user_id=var_4)"
"['\n\ndef check_ticket_status(ticket_id):\n""""""\nChecks the status of a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose status is to be checked\n\nReturns:\n str: The status of the ticket\n""""""\n', '\n\ndef deactivate_user_account(user_id, reason):\n""""""\nDeactivates a user account for a specific reason\n\nParameters:\n user_id (str): The ID of the user whose account is to be deactivated\n reason (str): The reason for deactivating the account\n\nReturns:\n bool: True if the account was successfully deactivated; otherwise False\n""""""\n', '\n\ndef estimate_cost_for_work(work_id, cost_per_hour=100):\n""""""\nEstimates the cost for completing a work item based on a cost per hour rate\n\nParameters:\n work_id (str): The ID of the work item to estimate cost for\n cost_per_hour (float): The cost per hour. Default is \'100\'\n\nReturns:\n float: Estimated cost\n""""""', '\n\ndef convert_task_to_ticket(task_id):\n""""""\nConverts a task into a ticket in the system\n\nParameters:\n task_id (str): The ID of the task to be converted\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', '\n\ndef update_object_status(object_id, new_status, changed_by):\n""""""\nUpdates the status of an object and records the user that made the change\n\nParameters:\n object_id (str): The ID of the object for which the status is updated\n new_status (str): The new status for the object\n changed_by (str): The ID of the user who is changing the status\n\nReturns:\n None\n""""""\n', '\n\ndef list_completed_tasks_by_user(user_id):\n""""""\nLists all completed tasks for a specific user\n\nParameters:\n user_id (str): The ID of the user whose completed tasks need to be listed\n\nReturns:\n list: List of completed task IDs\n""""""\n', '\n\ndef validate_work_item_status(work_item_id, status_options):\n""""""\nChecks if the given work item has a status that is among the provided options\n\nParameters:\n work_item_id (str): The ID of the work item to check\n status_options (list): A list of valid status options\n\nReturns:\n bool: True if status is valid, False otherwise\n""""""\n', '\n\ndef assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task will be assigned\n\nReturns:\n bool: True if assignment was successful, otherwise False\n""""""\n', '\n\ndef list_recent_activities(user_id, limit=10):\n""""""\nLists the most recent activities performed by a user\n\nParameters:\n user_id (str): The ID of the user whose activities are to be listed\n limit (int): The maximum number of recent activities to return\n\nReturns:\n list: Recent activities of the user\n""""""\n', '\n\ndef generate_report_from_template(report_template_id, data_source_id):\n""""""\nGenerates a report based on a specified template and data source\n\nParameters:\n report_template_id (str): The ID of the report template to use\n data_source_id (str): The ID of the data source\n\nReturns:\n str: Generated report\n""""""\n']","Check the status of ticket ""TICKET-001"", estimate the cost for the related work item ""WORK-123"", and list all completed tasks by the user who created ""TICKET-001"".","var_1 = check_ticket_status(ticket_id=""TICKET-001"")
var_2 = estimate_cost_for_work(work_id=""WORK-123"")
var_3 = works_list(type=[""ticket""])
var_4 = who_am_i()
var_5 = list_completed_tasks_by_user(user_id=var_4)"
"['\n\ndef check_ticket_status(ticket_id):\n""""""\nChecks the status of a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose status is to be checked\n\nReturns:\n str: The status of the ticket\n""""""\n', '\n\ndef list_completed_items_by_user(user_id):\n""""""\nLists items that have been completed by the given user\n\nParameters:\n user_id (str): The ID of the user whose completed items are being requested\n\nReturns:\n list: Completed items by the user\n""""""\n', '\n\ndef notify_user_of_overdue_tasks(user_id):\n""""""\nNotifies a user of any overdue tasks assigned to them\n\nParameters:\n user_id (str): The ID of the user to check for overdue tasks\n\nReturns:\n None\n""""""\n', '\n\ndef calculate_cost_of_tasks(task_ids):\n""""""\nCalculates the total cost for a list of task IDs\n\nParameters:\n task_ids (list): A list of task IDs to calculate cost for\n\nReturns:\n float: Total cost of the tasks\n""""""\n', '\n\ndef log_system_event(event_type, description, user_id=None):\n""""""\nLogs an event in the system with an optional user ID associated with it\n\nParameters:\n event_type (str): The type of event to log\n description (str): A brief description of the event\n user_id (str): The ID of the user involved in the event, if applicable\n\nReturns:\n str: The ID of the logged event\n""""""\n', '\n\ndef batch_update_user_roles(user_ids, new_role):\n""""""\nUpdates the roles for a batch of users to a new role\n\nParameters:\n user_ids (list): List of user IDs whose roles should be updated\n new_role (str): The new role to assign\n\nReturns:\n int: Number of users successfully updated\n""""""\n', '\n\ndef filter_users_by_skill(skill_name, minimum_proficiency=3):\n""""""\nFilters users by a specific skill and its minimum proficiency level\n\nParameters:\n skill_name (str): The name of the skill to filter by\n minimum_proficiency (int): The minimum proficiency level a user should have in the skill\n\nReturns:\n list: A list of user IDs that match the criteria\n""""""\n', '\n\ndef archive_completed_work(work_ids):\n""""""\nArchives a list of completed work items\n\nParameters:\n work_ids (list): A list of work item IDs that have been completed and need to be archived\n\nReturns:\n int: The number of work items successfully archived\n""""""\n', '\n\ndef retrieve_user_contact_info(user_id):\n""""""\nRetrieves the contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact info is requested\n\nReturns:\n str: Contact information of the user\n""""""\n', '\n\ndef list_department_members(department_id):\n""""""\nReturns a list of user IDs for all members within a specified department\n\nParameters:\n department_id (str): The ID of the department to list members for\n\nReturns:\n list: User IDs of all the members in the department\n""""""\n']","Check the status of ticket ""TICKET-001"", list all completed items by the user ""QAEngineer"", and summarize those items for a weekly review.","var_1 = check_ticket_status(ticket_id=""TICKET-001"")
var_2 = list_completed_items_by_user(user_id=""QAEngineer"")
var_3 = summarize_objects(objects=var_2)"
"['\n\ndef convert_task_to_subtask(task_id, parent_task_id):\n""""""\nConverts a standalone task into a subtask of another task\n\nParameters:\n task_id (str): The ID of the task to be converted\n parent_task_id (str): The ID of the parent task to which the subtask will be linked\n\nReturns:\n bool: True if the conversion was successful, False otherwise\n""""""\n', '\n\ndef estimate_time_for_task(task_id, estimation_hours):\n""""""\nUpdates a task with a time estimation\n\nParameters:\n task_id (str): The ID of the task to be updated with an estimated time\n estimation_hours (float): The estimated time in hours to complete the task\n\nReturns:\n None\n""""""\n', '\n\ndef link_related_tickets(ticket_id, related_ids):\n""""""\nLinks tickets that are related to each other\n\nParameters:\n ticket_id (str): The ID of the ticket that will be linked with related tickets\n related_ids (list): List of IDs for tickets that are related to the original ticket\n\nReturns:\n bool: True if the linking is successful, False otherwise\n""""""\n', '\n\ndef find_user_by_email(email):\n""""""\nFinds a user in the system by their email address\n\nParameters:\n email (str): The email address of the user to find\n\nReturns:\n str: ID of the user\n""""""\n', '\n\ndef update_work_item_status(work_item_id, new_status):\n""""""\nUpdates the status of a given work item\n\nParameters:\n work_item_id (str): The ID of the work item to be updated\n new_status (str): The new status to set for the work item\n""""""\n', '\n\ndef calculate_user_workload(user_id):\n""""""\nCalculates the workload of a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be calculated\n\nReturns:\n float: The calculated workload value\n""""""\n', '\n\ndef extend_sprint_end_date(sprint_id, new_end_date):\n""""""\nExtends the end date of a current sprint to a new date\n\nParameters:\n sprint_id (str): The ID of the sprint to extend\n new_end_date (str): The new end date for the sprint in YYYY-MM-DD format\n\nReturns:\n bool: True if the sprint end date was extended, False otherwise\n""""""\n', 'def assign_issues_to_user(issue_ids, user_id):\n""""""\nAssigns a list of issues to the specified user\n\nParameters:\n issue_ids (list): A list of issue IDs that need to be assigned\n user_id (str): The user ID to whom the issues will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef create_new_ticket(title, description, reported_by):\n""""""\nCreates a new ticket in the system with the given details\n\nParameters:\n title (str): The title of the new ticket\n description (str): A detailed description of the issue or request\n reported_by (str): The ID of the user reporting the ticket\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', '\n\ndef list_completed_tasks_by_user(user_id, project_id=None):\n""""""\nLists all tasks completed by a given user, optionally filtered by project\n\nParameters:\n user_id (str): The ID of the user\n project_id (str, optional): The ID of the project to filter tasks\n\nReturns:\n list: List of task IDs completed by the user\n""""""\n']","Convert the task with ID ""TASK-456"" into a subtask of the parent task ""TASK-123"", then assign this newly created subtask to user ""EngineerEllie"".","var_1 = convert_task_to_subtask(task_id=""TASK-456"", parent_task_id=""TASK-123"")
var_2 = find_user_by_email(email=""EngineerEllie"")
var_3 = assign_issues_to_user(issue_ids=[""TASK-456""], user_id=var_2)"
"['\n\ndef convert_task_to_ticket(task_id):\n""""""\nConverts a task into a ticket in the system\n\nParameters:\n task_id (str): The ID of the task to be converted\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', '\n\ndef list_work_attachments(work_id):\n""""""\nLists all attachments associated with a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n list: Attachment file IDs\n""""""\n', '\n\ndef archive_old_tickets(older_than_date, active_status=False):\n""""""\nArchives tickets that are older than the specified date, optionally filters by active status and returns the IDs\n\nParameters:\n older_than_date (str): A date in the format \'YYYY-MM-DD\', to filter tickets older than this date\n active_status (bool): If True, only archives tickets that are currently active; defaults to False\n\nReturns:\n str: ID of tickets archived\n""""""\n', '\n\ndef generate_project_summary(project_id):\n""""""\nGenerates a summary report for the specified project\n\nParameters:\n project_id (str): The ID of the project to summarize\n\nReturns:\n str: A summary report of the project\n""""""\n', '\n\ndef filter_projects_by_category(category_id, active_only=True):\n""""""\nFilters projects by their category and returns a list of project IDs\n\nParameters:\n category_id (str): The ID of the category to filter projects by\n active_only (bool): Whether to return only active projects\n\nReturns:\n list: List of project IDs matching the category filter\n""""""\n', 'def assign_ticket_to_user(ticket_id, user_id):\n""""""\nAssigns a specific ticket to a user\n\nParameters:\n ticket_id (str): The ID of the ticket to be assigned\n user_id (str): The ID of the user to whom the ticket will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n', '\n\ndef estimate_cost_for_work(work_id, cost_per_hour=100):\n""""""\nEstimates the cost for completing a work item based on a cost per hour rate\n\nParameters:\n work_id (str): The ID of the work item to estimate cost for\n cost_per_hour (float): The cost per hour. Default is \'100\'\n\nReturns:\n float: Estimated cost\n""""""', '\n\ndef filter_contacts_by_organization(organization_id, active_only=True):\n""""""\nReturns a list of contacts associated with the specified organization, optionally filtering only active contacts\n\nParameters:\n organization_id (str): The ID of the organization to filter contacts\n active_only (bool): Flag to filter only active contacts, default value \'True\'\n\nReturns:\n list: Contacts associated with the organization\n""""""\n', '\n\ndef update_contact_info(contact_id, new_email=None, new_phone=None):\n""""""\nUpdates the contact information for a given contact ID with new email and/or phone\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_email (str, optional): The new email address; defaults to None\n new_phone (str, optional): The new phone number; defaults to None\n\nReturns:\n bool: True if the update was successful; otherwise False\n""""""\n', '\n\ndef calculate_work_item_duration(work_id):\n""""""\nCalculates the total time taken to complete a work item\n\nParameters:\n work_id (str): The ID of the work item for which duration is to be calculated\n\nReturns:\n float: The total duration in hours\n""""""\n']","Archive tickets older than ""2022-01-01"" that are active, convert one of the archived tickets to a ticket, and then summarize the details of the newly created ticket.","var_1 = archive_old_tickets(older_than_date=""2022-01-01"", active_status=True)
var_2 = convert_task_to_ticket(task_id=var_1)
var_3 = works_list(type=[""ticket""])
var_4 = summarize_objects(objects=var_3)"
"['\n\ndef deactivate_user_account(user_id, reason):\n""""""\nDeactivates a user account for a specific reason\n\nParameters:\n user_id (str): The ID of the user whose account is to be deactivated\n reason (str): The reason for deactivating the account\n\nReturns:\n bool: True if the account was successfully deactivated; otherwise False\n""""""\n', '\n\ndef fetch_user_created_work(user_id, work_type=None):\n""""""\nRetrieves work items created by a specific user\n\nParameters:\n user_id (str): The ID of the user whose work items are to be retrieved\n work_type (list): Filters for work of the provided types, e.g., [\'issue\', \'ticket\']\n\nReturns:\n list: Work items created by the user\n""""""\n', '\n\ndef calculate_estimate_completion_time(work_id):\n""""""\nCalculates the estimated completion time for the specified work item\n\nParameters:\n work_id (str): The ID of the work item to calculate the estimated time\n\nReturns:\n float: Estimated completion time in hours\n""""""\n', '\n\ndef generate_work_report(work_ids):\n""""""\nGenerates a report for the given work items.\n\nParameters:\n work_ids (list): A list of work item IDs for report generation\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef update_ticket_status(ticket_id, new_status):\n""""""\nUpdates the status of a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket to be updated\n new_status (str): The new status to update the ticket with\n\nReturns:\n bool: True if the update was successful, otherwise False\n""""""\n', '\n\ndef notify_user_of_overdue_tasks(user_id):\n""""""\nNotifies a user of any overdue tasks assigned to them\n\nParameters:\n user_id (str): The ID of the user to check for overdue tasks\n\nReturns:\n None\n""""""\n', 'def assign_issues_to_user(issue_ids, user_id):\n""""""\nAssigns a list of issues to the specified user\n\nParameters:\n issue_ids (list): A list of issue IDs that need to be assigned\n user_id (str): The user ID to whom the issues will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef generate_report_data(report_type, data_set_id):\n""""""\nGenerates report data based on the provided report type and data set\n\nParameters:\n report_type (str): The type of report to generate\n data_set_id (str): The ID of the data set to be used for the report\n\nReturns:\n str: A report data string or ID depending on internal implementation\n""""""\n', '\n\ndef calculate_progress_percentage(project_id):\n""""""\nCalculates the progress percentage of the given project\n\nParameters:\n project_id (str): The ID of the project for which to calculate progress\n\nReturns:\n float: The percentage of project completion\n""""""\n', '\n\ndef validate_user_permissions(user_id, required_permissions):\n""""""\nChecks if the user has the specified permissions\n\nParameters:\n user_id (str): The ID of the user whose permissions need to be checked\n required_permissions (list): A list of permissions to check against the user\'s permissions\n\nReturns:\n bool: True if the user has all the required permissions, False otherwise\n""""""\n']","Deactivate the account of user ""User123"" due to ""Security breach"" and then fetch all work items they created related to ""network maintenance"".","var_1 = deactivate_user_account(user_id=""User123"", reason=""Security breach"")
var_2 = search_object_by_name(query=""network maintenance"")
var_3 = fetch_user_created_work(user_id=""User123"", work_type=[var_2])"
"['\n\ndef delete_objects_by_id(object_ids):\n""""""\nDeletes objects from the system based on their IDs\n\nParameters:\n object_ids (list): List of object IDs to delete\n\nReturns:\n bool: True if objects were successfully deleted, False otherwise\n""""""\n', '\n\ndef link_related_documents(doc_id, related_doc_ids):\n""""""\nLinks related documents to the given document in the system\n\nParameters:\n doc_id (str): The ID of the document to which related documents should be linked\n related_doc_ids (list): A list of IDs for related documents\n\nReturns:\n bool: True if the operation was successful, False otherwise\n""""""\n', '\n\ndef generate_report_by_tag(tag_id, include_archived=False):\n""""""\nGenerates a report for all work items associated with the given tag\n\nParameters:\n tag_id (str): The ID of the tag used to filter work items\n include_archived (bool): Include archived work items if set to True\n\nReturns:\n list: Work items associated with the tag\n""""""\n', '\n\ndef estimate_task_duration(task_id, complexity_level):\n""""""\nEstimates the duration needed to complete a task based on its complexity level\n\nParameters:\n task_id (str): The ID of the task\n complexity_level (str): The complexity level of the task. Allowed values: \'low\', \'medium\', \'high\'\n\nReturns:\n float: Estimated duration in hours\n""""""\n', '\n\ndef remove_object_by_id(object_id):\n""""""\nRemoves an object from the system by its ID\n\nParameters:\n object_id (str): The ID of the object to remove\n\nReturns:\n None\n""""""\n', 'def assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task is assigned\n\nReturns:\n None\n""""""\n', '\n\ndef estimate_time_for_task(task_id, estimation_hours):\n""""""\nUpdates a task with a time estimation\n\nParameters:\n task_id (str): The ID of the task to be updated with an estimated time\n estimation_hours (float): The estimated time in hours to complete the task\n\nReturns:\n None\n""""""\n', '\n\ndef list_user_tasks(user_id, completed=False):\n""""""\nLists all tasks assigned to a user, optionally filtering for completed tasks\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be listed\n completed (bool): If True, only completed tasks are returned\n\nReturns:\n list: A list of tasks assigned to the user\n""""""\n', '\n\ndef log_system_event(event_type, description, user_id=None):\n""""""\nLogs an event in the system with an optional user ID associated with it\n\nParameters:\n event_type (str): The type of event to log\n description (str): A brief description of the event\n user_id (str): The ID of the user involved in the event, if applicable\n\nReturns:\n str: The ID of the logged event\n""""""\n', '\n\ndef generate_progress_report(project_id):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which to generate the report\n\nReturns:\n str: A string summary of the project\'s progress report\n""""""\n']","Estimate the duration for task ""TASK-321"" with high complexity, assign it to user ""EngineerSam"", and log the event with the description ""Task duration estimated and assigned"".","var_1 = estimate_task_duration(task_id=""TASK-321"", complexity_level=""high"")
var_2 = who_am_i()
var_3 = search_object_by_name(query=""EngineerSam"")
var_4 = assign_task_to_user(task_id=""TASK-321"", user_id=var_3)
var_5 = log_system_event(event_type=""task_assignment"", description=""Task duration estimated and assigned"", user_id=var_2)"
"['\n\ndef estimate_task_duration(task_id, complexity_level):\n""""""\nEstimates the duration needed to complete a task based on its complexity level\n\nParameters:\n task_id (str): The ID of the task\n complexity_level (str): The complexity level of the task. Allowed values: \'low\', \'medium\', \'high\'\n\nReturns:\n float: Estimated duration in hours\n""""""\n', '\n\ndef update_ticket_status(ticket_id, new_status):\n""""""\nUpdates the status of a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket to be updated\n new_status (str): The new status to update the ticket with\n\nReturns:\n bool: True if the update was successful, otherwise False\n""""""\n', '\n\ndef calculate_progress(project_id):\n""""""\nCalculates the overall progress of a given project as a percentage\n\nParameters:\n project_id (str): The ID of the project for which progress is being calculated\n\nReturns:\n float: The progress percentage of the project\n""""""\n', '\n\ndef track_project_completion(project_id):\n""""""\nTracks the completion percentage of a project based on completed tasks\n\nParameters:\n project_id (str): The ID of the project to track\n\nReturns:\n float: Percentage of the project completed\n""""""\n', '\n\ndef filter_work_by_date_range(start_date, end_date, work_type=None):\n""""""\nFilters work items based on a specific date range\n\nParameters:\n start_date (str): The start date for the filter range (format: YYYY-MM-DD)\n end_date (str): The end date for the filter range (format: YYYY-MM-DD)\n work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task\n\nReturns:\n list: Work items in the specified date range\n""""""\n', '\n\ndef generate_report_from_data(dataset_id, report_type=""summary""):\n""""""\nGenerates a specific type of report from a dataset\n\nParameters:\n dataset_id (str): The ID of the dataset from which to generate the report\n report_type (str): The type of report to generate, default is \'summary\'\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef validate_data_integrity(data_point_ids):\n""""""\nChecks the integrity of a list of data points in the system\n\nParameters:\n data_point_ids (list): List of data point IDs to validate\n\nReturns:\n list: Validation results with status (True or False) for each data point\n""""""\n', '\n\ndef check_availability_of_part(part_id):\n""""""\nChecks if a specific part is available in inventory\n\nParameters:\n part_id (str): The ID of the part to check for availability\n\nReturns:\n bool: True if the part is available, False otherwise\n""""""\n', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):\n""""""\nMerges multiple notes into a single ticket note\n\nParameters:\n ticket_id (str): The ID of the ticket where the merged note will be added\n note_ids (list): List of note IDs that will be merged into the ticket\n updated_by (str): The ID of the user performing the merge\n\nReturns:\n str: ID of the updated ticket note\n""""""\n', '\n\ndef calculate_estimated_effort(work_id):\n""""""\nCalculates the estimated effort required to complete a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n float: Estimated effort in hours\n""""""\n']","Estimate the duration of task ""TASK-456"" with complexity level ""high"", update its status to ""in_progress"", and calculate the estimated effort required to complete it.","var_1 = estimate_task_duration(task_id=""TASK-456"", complexity_level=""high"")
var_2 = update_ticket_status(ticket_id=""TASK-456"", new_status=""in_progress"")
var_3 = calculate_estimated_effort(work_id=""TASK-456"")"
"['\n\ndef estimate_time_for_task(task_id, estimation_hours):\n""""""\nUpdates a task with a time estimation\n\nParameters:\n task_id (str): The ID of the task to be updated with an estimated time\n estimation_hours (float): The estimated time in hours to complete the task\n\nReturns:\n None\n""""""\n', '\n\ndef archive_completed_work(work_ids):\n""""""\nArchives a list of completed work items\n\nParameters:\n work_ids (list): A list of work item IDs that have been completed and need to be archived\n\nReturns:\n int: The number of work items successfully archived\n""""""\n', '\n\ndef update_object_status(object_id, new_status, changed_by):\n""""""\nUpdates the status of an object and records the user that made the change\n\nParameters:\n object_id (str): The ID of the object for which the status is updated\n new_status (str): The new status for the object\n changed_by (str): The ID of the user who is changing the status\n\nReturns:\n None\n""""""\n', '\n\ndef batch_update_task_status(task_ids, new_status):\n""""""\nUpdates the status of multiple tasks in a batch operation\n\nParameters:\n task_ids (list): A list of task IDs whose status needs updating\n new_status (str): The new status to apply to the tasks\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef merge_duplicate_records(primary_record_id, duplicate_record_id):\n""""""\nMerges a duplicate record into a primary record\n\nParameters:\n primary_record_id (str): The ID of the primary record to keep\n duplicate_record_id (str): The ID of the duplicate record to merge\n\nReturns:\n bool: True if the merge was successful; otherwise False\n""""""\n', '\n\ndef update_ticket_status(ticket_id, new_status):\n""""""\nUpdates the status of a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket to be updated\n new_status (str): The new status to update the ticket with\n\nReturns:\n bool: True if the update was successful, otherwise False\n""""""\n', '\n\ndef allocate_resources_to_project(project_id, resource_ids):\n""""""\nAllocates specified resources to a project\n\nParameters:\n project_id (str): The ID of the project to which resources are allocated\n resource_ids (list): A list of resource IDs to allocate to the project\n\nReturns:\n bool: True if resources could be allocated, False otherwise\n""""""\n', '\n\ndef filter_tickets_by_date(ticket_ids, start_date, end_date=None):\n""""""\nFilters a list of ticket IDs based on a date range\n\nParameters:\n ticket_ids (list): A list of ticket IDs to filter\n start_date (str): The start date for the range\n end_date (str, optional): The end date for the range, defaults to None\n\nReturns:\n list: Filtered list of ticket IDs\n""""""\n', '\n\ndef filter_records_by_date(record_ids, start_date, end_date):\n""""""\nFilters a list of record IDs based on a date range\n\nParameters:\n record_ids (list): List of record IDs to filter\n start_date (str): Start date for the filtering in \'YYYY-MM-DD\' format\n end_date (str): End date for the filtering in \'YYYY-MM-DD\' format\n\nReturns:\n list: Filtered record IDs\n""""""\n', '\n\ndef remove_object_from_archive(object_id):\n""""""\nRemoves an object from the system archive, making it active again\n\nParameters:\n object_id (str): The ID of the object to be removed from the archive\n\nReturns:\n bool: True if the object was successfully removed, False otherwise\n""""""\n']","Retrieve all completed work items owned by ""TeamLead"" and archive them, then update the status of each to ""Archived"".","var_1 = works_list(owned_by=[""TeamLead""], stage.name=[""Completed""])
var_2 = archive_completed_work(work_ids=var_1)
var_3 = batch_update_task_status(task_ids=var_1, new_status=""Archived"")"
"['\n\ndef estimate_work_hours(work_id):\n""""""\nEstimates the number of hours required to complete a specific work item\n\nParameters:\n work_id (str): The ID of the work item for which the estimation is to be made\n\nReturns:\n float: Estimated hours required to complete the work item\n""""""\n', '\n\ndef calculate_expense_totals(expense_ids):\n""""""\nCalculates the total amount from a list of expense IDs\n\nParameters:\n expense_ids (list): List of expense IDs to calculate the total amount\n\nReturns:\n float: The total amount of the expenses\n""""""\n', '\n\ndef filter_tasks_by_completion(task_ids, completed=True):\n""""""\nFilters the list of tasks by their completion status\n\nParameters:\n task_ids (list): List of task IDs to filter\n completed (bool): The completion status to filter by. Default is \'True\'\n\nReturns:\n list: List of task IDs that match the completion status\n""""""\n', '\n\ndef generate_report_by_tag(tag_id, include_archived=False):\n""""""\nGenerates a report for all work items associated with the given tag\n\nParameters:\n tag_id (str): The ID of the tag used to filter work items\n include_archived (bool): Include archived work items if set to True\n\nReturns:\n list: Work items associated with the tag\n""""""\n', '\n\ndef list_department_members(department_id):\n""""""\nReturns a list of user IDs for all members within a specified department\n\nParameters:\n department_id (str): The ID of the department to list members for\n\nReturns:\n list: User IDs of all the members in the department\n""""""\n', 'def assign_tickets_to_user(ticket_ids, user_id):\n""""""\nAssigns a set of tickets to a specified user\n\nParameters:\n ticket_ids (list): A list of ticket IDs to be assigned\n user_id (str): The ID of the user to whom the tickets will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef calculate_estimated_effort(work_id):\n""""""\nCalculates the estimated effort required to complete a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n float: Estimated effort in hours\n""""""\n', '\n\ndef calculate_time_until_deadline(work_item_id):\n""""""\nCalculates the amount of time remaining until the deadline of a work item\n\nParameters:\n work_item_id (str): The ID of the work item\n\nReturns:\n float: The number of hours until the deadline\n""""""\n', '\n\ndef list_user_skills(user_id):\n""""""\nLists the skills associated with the specified user\n\nParameters:\n user_id (str): The ID of the user whose skills are being queried\n\nReturns:\n list: The skills of the user\n""""""\n', 'def retrieve_sprint_workload(sprint_id):\n""""""\nCalculates the total workload for a given sprint based on the work items associated with it\n\nParameters:\n sprint_id (str): The ID of the sprint for workload calculation\n\nReturns:\n float: Total workload in hours\n""""""\n']","Estimate the hours required to complete work items owned by user ""EngineerSam"" and calculate the total expense of the associated tasks.","var_1 = search_object_by_name(query=""EngineerSam"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = list(map(estimate_work_hours, var_2))
var_4 = calculate_expense_totals(expense_ids=var_2)"
"['\n\ndef estimate_work_hours(work_id):\n""""""\nEstimates the number of hours required to complete a specific work item\n\nParameters:\n work_id (str): The ID of the work item for which the estimation is to be made\n\nReturns:\n float: Estimated hours required to complete the work item\n""""""\n', '\n\ndef filter_projects_by_category(category_id, active_only=True):\n""""""\nFilters projects by their category and returns a list of project IDs\n\nParameters:\n category_id (str): The ID of the category to filter projects by\n active_only (bool): Whether to return only active projects\n\nReturns:\n list: List of project IDs matching the category filter\n""""""\n', '\n\ndef filter_users_by_skill(skill_name, minimum_proficiency=3):\n""""""\nFilters users by a specific skill and its minimum proficiency level\n\nParameters:\n skill_name (str): The name of the skill to filter by\n minimum_proficiency (int): The minimum proficiency level a user should have in the skill\n\nReturns:\n list: A list of user IDs that match the criteria\n""""""\n', '\n\ndef generate_work_report(work_ids):\n""""""\nGenerates a report for the given work items.\n\nParameters:\n work_ids (list): A list of work item IDs for report generation\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef create_report_for_sprint(sprint_id, report_type):\n""""""\nGenerates a report for a given sprint\n\nParameters:\n sprint_id (str): The ID of the sprint\n report_type (str): The type of report to be generated\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef log_system_event(event_type, description, user_id=None):\n""""""\nLogs an event in the system with an optional user ID associated with it\n\nParameters:\n event_type (str): The type of event to log\n description (str): A brief description of the event\n user_id (str): The ID of the user involved in the event, if applicable\n\nReturns:\n str: The ID of the logged event\n""""""\n', '\n\ndef track_project_completion(project_id):\n""""""\nTracks the completion percentage of a project based on completed tasks\n\nParameters:\n project_id (str): The ID of the project to track\n\nReturns:\n float: Percentage of the project completed\n""""""\n', '\n\ndef update_contact_info(contact_id, new_email=None, new_phone=None):\n""""""\nUpdates the contact information for a given contact ID with new email and/or phone\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_email (str, optional): The new email address; defaults to None\n new_phone (str, optional): The new phone number; defaults to None\n\nReturns:\n bool: True if the update was successful; otherwise False\n""""""\n', '\n\ndef generate_report_by_tag(tag_id, include_archived=False):\n""""""\nGenerates a report for all work items associated with the given tag\n\nParameters:\n tag_id (str): The ID of the tag used to filter work items\n include_archived (bool): Include archived work items if set to True\n\nReturns:\n list: Work items associated with the tag\n""""""\n', '\n\ndef validate_data_integrity(data_point_ids):\n""""""\nChecks the integrity of a list of data points in the system\n\nParameters:\n data_point_ids (list): List of data point IDs to validate\n\nReturns:\n list: Validation results with status (True or False) for each data point\n""""""\n']","Estimate the hours required to complete work items owned by user ""ArchitectAnna"", filter these by severity ""high"", and generate a work report for them.","var_1 = search_object_by_name(query=""ArchitectAnna"")
var_2 = works_list(owned_by=[var_1], ticket.severity=[""high""], type=[""issue"", ""ticket"", ""task""])
var_3 = generate_work_report(work_ids=var_2)"
"['\n\ndef estimate_work_hours(work_id):\n""""""\nEstimates the number of hours required to complete a specific work item\n\nParameters:\n work_id (str): The ID of the work item for which the estimation is to be made\n\nReturns:\n float: Estimated hours required to complete the work item\n""""""\n', '\n\ndef filter_work_by_date_range(start_date, end_date, work_type=None):\n""""""\nFilters work items based on a specific date range\n\nParameters:\n start_date (str): The start date for the filter range (format: YYYY-MM-DD)\n end_date (str): The end date for the filter range (format: YYYY-MM-DD)\n work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task\n\nReturns:\n list: Work items in the specified date range\n""""""\n', '\n\ndef estimate_completion_time(task_id):\n""""""\nEstimates the completion time for a given task\n\nParameters:\n task_id (str): The ID of the task for which to estimate completion time\n\nReturns:\n float: The estimated number of hours to complete the task\n""""""\n', '\n\ndef get_user_avatar(user_id):\n""""""\nRetrieves the avatar image URL for the specified user\n\nParameters:\n user_id (str): The ID of the user whose avatar is to be retrieved\n\nReturns:\n str: URL of the user\'s avatar image\n""""""\n', '\n\ndef mark_task_as_completed(task_id):\n""""""\nMarks a task as completed in the system.\n\nParameters:\n task_id (str): The ID of the task to be marked as complete\n\nReturns:\n bool: True if marked successfully, False otherwise\n""""""\n', '\n\ndef update_object_status(object_id, new_status, changed_by):\n""""""\nUpdates the status of an object and records the user that made the change\n\nParameters:\n object_id (str): The ID of the object for which the status is updated\n new_status (str): The new status for the object\n changed_by (str): The ID of the user who is changing the status\n\nReturns:\n None\n""""""\n', '\n\ndef filter_tasks_by_due_date(task_ids, due_date):\n""""""\nFilters tasks by their due date\n\nParameters:\n task_ids (list): A list of task IDs to filter\n due_date (str): The due date to filter tasks by\n\nReturns:\n list: List of task IDs that have the specified due date\n""""""\n', '\n\ndef allocate_resources_to_project(project_id, resource_ids):\n""""""\nAllocates specified resources to a project\n\nParameters:\n project_id (str): The ID of the project to which resources are allocated\n resource_ids (list): A list of resource IDs to allocate to the project\n\nReturns:\n bool: True if resources could be allocated, False otherwise\n""""""\n', '\n\ndef retrieve_archived_documents(archive_id, keyword=None):\n""""""\nRetrieves documents from the archive based on optional keyword\n\nParameters:\n archive_id (str): The ID of the archive from which to retrieve documents\n keyword (str): Optional keyword to filter documents, default is \'None\'\n\nReturns:\n list: A list of documents matching the keyword if provided, otherwise all documents from the archive\n""""""', '\n\ndef validate_data_integrity(data_point_ids):\n""""""\nChecks the integrity of a list of data points in the system\n\nParameters:\n data_point_ids (list): List of data point IDs to validate\n\nReturns:\n list: Validation results with status (True or False) for each data point\n""""""\n']","Estimate the hours required to complete work item ""TASK-456"", filter similar tasks by due date ""2023-04-30"", and allocate resources to them based on the estimated hours.","var_1 = estimate_work_hours(work_id=""TASK-456"")
var_2 = get_similar_work_items(work_id=""TASK-456"")
var_3 = filter_tasks_by_due_date(task_ids=var_2, due_date=""2023-04-30"")
var_4 = allocate_resources_to_project(project_id=var_3, resource_ids=[var_1])"
"['\n\ndef extract_contact_info(text_id, entity_type):\n""""""\nExtracts contact information from a text source based on a given entity type\n\nParameters:\n text_id (str): The ID of the text source from which to extract contact information\n entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'\n\nReturns:\n list: Extracted contact information\n""""""', '\n\ndef calculate_budget_remaining(budget_id):\n""""""\nCalculates the remaining budget for a given budget ID\n\nParameters:\n budget_id (str): The ID of the budget to calculate\n\nReturns:\n float: The amount of remaining budget\n""""""\n', '\n\ndef generate_work_report(work_ids):\n""""""\nGenerates a report for the given work items.\n\nParameters:\n work_ids (list): A list of work item IDs for report generation\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef filter_contacts_by_organization(organization_id, active_only=True):\n""""""\nReturns a list of contacts associated with the specified organization, optionally filtering only active contacts\n\nParameters:\n organization_id (str): The ID of the organization to filter contacts\n active_only (bool): Flag to filter only active contacts, default value \'True\'\n\nReturns:\n list: Contacts associated with the organization\n""""""\n', '\n\ndef assign_tasks_to_user(task_ids, user_id):\n""""""\nAssigns a list of task IDs to the provided user\n\nParameters:\n task_ids (list): List of task IDs to be assigned\n user_id (str): The ID of the user to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n', '\n\ndef retrieve_document_by_keyword(keyword):\n""""""\nRetrieves a document ID containing the specified keyword\n\nParameters:\n keyword (str): The keyword to search for in the documents\n\nReturns:\n str: ID of the document containing the keyword\n""""""', '\n\ndef filter_objects_by_type(object_ids, object_type):\n""""""\nFilters a list of objects based on their type\n\nParameters:\n object_ids (list): A list of object IDs to filter\n object_type (str): The type of objects to filter for\n\nReturns:\n list: Filtered object IDs matching the specified type\n""""""\n', '\n\ndef filter_tickets_by_date(ticket_ids, start_date, end_date=None):\n""""""\nFilters a list of ticket IDs based on a date range\n\nParameters:\n ticket_ids (list): A list of ticket IDs to filter\n start_date (str): The start date for the range\n end_date (str, optional): The end date for the range, defaults to None\n\nReturns:\n list: Filtered list of ticket IDs\n""""""\n', 'def assign_tickets_to_user(ticket_ids, user_id):\n""""""\nAssigns a set of tickets to a specified user\n\nParameters:\n ticket_ids (list): A list of ticket IDs to be assigned\n user_id (str): The ID of the user to whom the tickets will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef update_object_status(object_id, new_status, changed_by):\n""""""\nUpdates the status of an object and records the user that made the change\n\nParameters:\n object_id (str): The ID of the object for which the status is updated\n new_status (str): The new status for the object\n changed_by (str): The ID of the user who is changing the status\n\nReturns:\n None\n""""""\n']","Extract contact information for individuals from document ""DOC456"", calculate the remaining budget for budget ID ""BUD123"", and filter the contacts by organization ""ORG789"".","var_1 = retrieve_document_by_keyword(keyword=""DOC456"")
var_2 = extract_contact_info(text_id=var_1, entity_type=""individual"")
var_3 = calculate_budget_remaining(budget_id=""BUD123"")
var_4 = filter_contacts_by_organization(organization_id=""ORG789"")"
"['\n\ndef extract_contact_info(text_id, entity_type):\n""""""\nExtracts contact information from a text source based on a given entity type\n\nParameters:\n text_id (str): The ID of the text source from which to extract contact information\n entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'\n\nReturns:\n list: Extracted contact information\n""""""', '\n\ndef get_sprint_history(sprint_id):\n""""""\nRetrieves the change history of a sprint\n\nParameters:\n sprint_id (str): The ID of the ticket\n\nReturns:\n list: A list of changes made to the sprint\n""""""\n', '\n\ndef generate_project_summary(project_id):\n""""""\nGenerates a summary report for the specified project\n\nParameters:\n project_id (str): The ID of the project to summarize\n\nReturns:\n str: A summary report of the project\n""""""\n', '\n\ndef create_report_for_sprint(sprint_id, report_type):\n""""""\nGenerates a report for a given sprint\n\nParameters:\n sprint_id (str): The ID of the sprint\n report_type (str): The type of report to be generated\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef fetch_user_created_work(user_id, work_type=None):\n""""""\nRetrieves work items created by a specific user\n\nParameters:\n user_id (str): The ID of the user whose work items are to be retrieved\n work_type (list): Filters for work of the provided types, e.g., [\'issue\', \'ticket\']\n\nReturns:\n list: Work items created by the user\n""""""\n', '\n\ndef remove_object_from_archive(object_id):\n""""""\nRemoves an object from the system archive, making it active again\n\nParameters:\n object_id (str): The ID of the object to be removed from the archive\n\nReturns:\n bool: True if the object was successfully removed, False otherwise\n""""""\n', '\n\ndef update_work_item_due_date(work_item_id, due_date):\n""""""\nUpdates the due date for the specified work item\n\nParameters:\n work_item_id (str): The ID of the work item to be updated\n due_date (str): The new due date for the work item\n\nReturns:\n None: Indicates that the operation was executed without returning any value\n""""""\n', '\n\ndef update_work_item_status(work_item_id, new_status):\n""""""\nUpdates the status of a given work item\n\nParameters:\n work_item_id (str): The ID of the work item to be updated\n new_status (str): The new status to set for the work item\n""""""\n', '\n\ndef calculate_estimate_completion_time(work_id):\n""""""\nCalculates the estimated completion time for the specified work item\n\nParameters:\n work_id (str): The ID of the work item to calculate the estimated time\n\nReturns:\n float: Estimated completion time in hours\n""""""\n', '\n\ndef update_stage_of_work_item(work_item_id, new_stage):\n""""""\nUpdates the stage of a work item\n\nParameters:\n work_item_id (str): The ID of the work item to update\n new_stage (str): The new stage to which the work item should be moved\n\nReturns:\n bool: True if the stage is successfully updated, False otherwise\n""""""']","Extract the contact information for all individuals related to the ""TechSupport"" project and create a summary report for that project.","var_1 = search_object_by_name(query=""TechSupport"")
var_2 = extract_contact_info(text_id=var_1, entity_type=""individual"")
var_3 = generate_project_summary(project_id=var_1)"
"['\n\ndef extract_contact_info(text_id, entity_type):\n""""""\nExtracts contact information from a text source based on a given entity type\n\nParameters:\n text_id (str): The ID of the text source from which to extract contact information\n entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'\n\nReturns:\n list: Extracted contact information\n""""""', '\n\ndef merge_duplicate_tasks(primary_task_id, duplicate_task_ids):\n""""""\nMerges duplicate tasks into a primary task\n\nParameters:\n primary_task_id (str): The ID of the primary task which remains after the merge\n duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged\n\nReturns:\n None\n""""""\n', '\n\ndef filter_tasks_by_completion(task_ids, completed=True):\n""""""\nFilters the list of tasks by their completion status\n\nParameters:\n task_ids (list): List of task IDs to filter\n completed (bool): The completion status to filter by. Default is \'True\'\n\nReturns:\n list: List of task IDs that match the completion status\n""""""\n', '\n\ndef create_report_for_sprint(sprint_id, report_type):\n""""""\nGenerates a report for a given sprint\n\nParameters:\n sprint_id (str): The ID of the sprint\n report_type (str): The type of report to be generated\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef get_user_permissions(user_id):\n""""""\nReturns a list of permissions for a specified user ID\n\nParameters:\n user_id (str): The ID of the user whose permissions you want to retrieve\n\nReturns:\n list: User permissions\n""""""\n', '\n\ndef log_system_activity(activity_description, user_id=None):\n""""""\nLogs a system activity with an optional user ID\n\nParameters:\n activity_description (str): A brief description of the activity being logged\n user_id (str, optional): The ID of the user associated with the activity; defaults to None\n\nReturns:\n bool: True if the activity was logged successfully; otherwise False\n""""""\n', '\n\ndef update_contact_information(contact_id, new_phone=None, new_email=None):\n""""""\nUpdates the contact information with new provided phone number or email\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_phone (str): The new phone number for the contact, default is \'None\'\n new_email (str): The new email address for the contact, default is \'None\'\n\nReturns:\n bool: Status of the update operation\n""""""\n', '\n\ndef remove_user_from_project(user_id, project_id):\n""""""\nRemoves a user from a project\n\nParameters:\n user_id (str): The ID of the user to be removed\n project_id (str): The ID of the project from which the user is to be removed\n\nReturns:\n bool: True if the user is successfully removed, False otherwise\n""""""', '\n\ndef log_user_activity(user_id, activity_description):\n""""""\nLogs a user\'s activity with a description\n\nParameters:\n user_id (str): The ID of the user whose activity is being logged\n activity_description (str): A description of the activity\n\nReturns:\n bool: True if the logging was successful, False otherwise\n""""""\n', '\n\ndef generate_report_from_data(dataset_id, report_type=""summary""):\n""""""\nGenerates a specific type of report from a dataset\n\nParameters:\n dataset_id (str): The ID of the dataset from which to generate the report\n report_type (str): The type of report to generate, default is \'summary\'\n\nReturns:\n str: The ID of the generated report\n""""""\n']","Extract contact information for all individuals related to the current sprint and log this activity with the description ""Extracted individual contacts for Sprint Analysis"". Then, generate a summary report for the current sprint focusing on completed tasks.","var_1 = get_sprint_id()
var_2 = extract_contact_info(text_id=var_1, entity_type=""individual"")
var_3 = log_system_activity(activity_description=""Extracted individual contacts for Sprint Analysis"")
var_4 = filter_tasks_by_completion(task_ids=var_2, completed=True)
var_5 = create_report_for_sprint(sprint_id=var_1, report_type=""summary"")"
"['\n\ndef fetch_user_created_work(user_id, work_type=None):\n""""""\nRetrieves work items created by a specific user\n\nParameters:\n user_id (str): The ID of the user whose work items are to be retrieved\n work_type (list): Filters for work of the provided types, e.g., [\'issue\', \'ticket\']\n\nReturns:\n list: Work items created by the user\n""""""\n', '\n\ndef generate_progress_report(project_id):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which to generate the report\n\nReturns:\n str: A string summary of the project\'s progress report\n""""""\n', 'def assign_issues_to_user(issue_ids, user_id):\n""""""\nAssigns a list of issues to the specified user\n\nParameters:\n issue_ids (list): A list of issue IDs that need to be assigned\n user_id (str): The user ID to whom the issues will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef list_all_blocked_tickets():\n""""""\nLists all tickets that are currently blocked\n\nReturns:\n list: Ticket IDs that are currently blocked\n""""""', '\n\ndef remove_object_from_sprint(object_id, sprint_id):\n""""""\nRemoves a specified object from a sprint and returns the new list\n\nParameters:\n object_id (str): The ID of the object to be removed\n sprint_id (str): The ID of the project from which the object should be removed\n\nReturns:\n list: Returns the updated list of sprint objects\n""""""\n', '\n\ndef update_contact_info(contact_id, new_email=None, new_phone=None):\n""""""\nUpdates the contact information for a given contact ID with new email and/or phone\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_email (str, optional): The new email address; defaults to None\n new_phone (str, optional): The new phone number; defaults to None\n\nReturns:\n bool: True if the update was successful; otherwise False\n""""""\n', '\n\ndef update_issue_with_solution(issue_id, solution_text):\n""""""\nUpdates an issue with a solution description\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n solution_text (str): The description of the solution to apply to the issue\n\nReturns:\n None\n""""""\n', '\n\ndef track_time_on_task(task_id, hours_spent):\n""""""\nTracks time spent on a task by logging the number of hours\n\nParameters:\n task_id (str): The ID of the task on which time is spent\n hours_spent (float): The number of hours spent on the task\n\nReturns:\n bool: Status of the time tracking\n""""""\n', '\n\ndef calculate_user_workload(user_id):\n""""""\nCalculates the workload of a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be calculated\n\nReturns:\n float: The calculated workload value\n""""""\n', '\n\ndef filter_tasks_by_completion(task_ids, completed=True):\n""""""\nFilters the list of tasks by their completion status\n\nParameters:\n task_ids (list): List of task IDs to filter\n completed (bool): The completion status to filter by. Default is \'True\'\n\nReturns:\n list: List of task IDs that match the completion status\n""""""\n']","Fetch all blocked tickets, remove them from the current sprint, and generate a progress report for the sprint.","var_1 = list_all_blocked_tickets()
var_2 = get_sprint_id()
var_3 = remove_object_from_sprint(object_id=var_1, sprint_id=var_2)
var_4 = generate_progress_report(project_id=var_2)"
"['\n\ndef filter_projects_by_category(category_id, active_only=True):\n""""""\nFilters projects by their category and returns a list of project IDs\n\nParameters:\n category_id (str): The ID of the category to filter projects by\n active_only (bool): Whether to return only active projects\n\nReturns:\n list: List of project IDs matching the category filter\n""""""\n', 'def retrieve_sprint_workload(sprint_id):\n""""""\nCalculates the total workload for a given sprint based on the work items associated with it\n\nParameters:\n sprint_id (str): The ID of the sprint for workload calculation\n\nReturns:\n float: Total workload in hours\n""""""\n', '\n\ndef toggle_feature_access(feature_id, user_id, enable_access):\n""""""\nToggles access to a specific feature for a user\n\nParameters:\n feature_id (str): The ID of the feature to toggle access\n user_id (str): The ID of the user whose access will be toggled\n enable_access (bool): \'True\' to enable access, \'False\' to disable\n\nReturns:\n bool: The resulting access status\n""""""\n', '\n\ndef update_ticket_status(ticket_id, new_status):\n""""""\nUpdates the status of a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket to be updated\n new_status (str): The new status to update the ticket with\n\nReturns:\n bool: True if the update was successful, otherwise False\n""""""\n', '\n\ndef calculate_time_until_deadline(work_item_id):\n""""""\nCalculates the amount of time remaining until the deadline of a work item\n\nParameters:\n work_item_id (str): The ID of the work item\n\nReturns:\n float: The number of hours until the deadline\n""""""\n', '\n\ndef get_recent_activity_log(user_id, limit=10):\n""""""\nGets the most recent activity log entries for a given user\n\nParameters:\n user_id (str): The ID of the user to get activities for\n limit (int): The maximum number of activity log entries to return\n\nReturns:\n list: Recent activity log entries\n""""""\n', '\n\ndef calculate_progress_percentage(project_id):\n""""""\nCalculates the progress percentage of the given project\n\nParameters:\n project_id (str): The ID of the project for which to calculate progress\n\nReturns:\n float: The percentage of project completion\n""""""\n', '\n\ndef merge_duplicate_work_items(primary_work_id, duplicate_work_ids):\n""""""\nMerges duplicate work items into the primary work item\n\nParameters:\n primary_work_id (str): The ID of the primary work item\n duplicate_work_ids (list): List of IDs of duplicate work items to be merged\n\nReturns:\n bool: True if merge was successful, otherwise False\n""""""\n', '\n\ndef get_project_timeline(project_id):\n""""""\nRetrieves the timeline and key milestones of a project\n\nParameters:\n project_id (str): The ID of the project for which the timeline is requested\n\nReturns:\n list: Key milestones and dates for the project timeline\n""""""\n', '\n\ndef assign_tasks_to_employee(task_ids, employee_id):\n""""""\nAssigns a list of tasks to the specified employee\n\nParameters:\n task_ids (list): A list of task IDs to be assigned\n employee_id (str): The ID of the employee to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment was successful, False otherwise\n""""""\n']","Retrieve the project timeline for project ""PRJ-456"" and calculate the remaining workload for its current sprint.","var_1 = search_object_by_name(query=""PRJ-456"")
var_2 = get_project_timeline(project_id=var_1)
var_3 = get_sprint_id()
var_4 = retrieve_sprint_workload(sprint_id=var_3)"
"['\n\ndef filter_work_by_date_range(start_date, end_date, work_type=None):\n""""""\nFilters work items based on a specific date range\n\nParameters:\n start_date (str): The start date for the filter range (format: YYYY-MM-DD)\n end_date (str): The end date for the filter range (format: YYYY-MM-DD)\n work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task\n\nReturns:\n list: Work items in the specified date range\n""""""\n', '\ndef update_user_ID(user_id, status):\n""""""\nUpdates the status of a user account in the system and returns the updated id\n\nParameters:\n user_id (str): The ID of the user whose status is to be updated\n status (str): The new status to apply to the user account\n\nReturns:\n str: updated User Id\n""""""\n', '\n\ndef filter_contacts_by_organization(organization_id, active_only=True):\n""""""\nReturns a list of contacts associated with the specified organization, optionally filtering only active contacts\n\nParameters:\n organization_id (str): The ID of the organization to filter contacts\n active_only (bool): Flag to filter only active contacts, default value \'True\'\n\nReturns:\n list: Contacts associated with the organization\n""""""\n', '\n\ndef generate_unique_identifier(prefix, use_timestamp=True):\n""""""\nGenerates a unique identifier with an optional timestamp\n\nParameters:\n prefix (str): A prefix for the identifier\n use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True\n\nReturns:\n str: The generated unique identifier\n""""""\n\n```', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):\n""""""\nMerges multiple notes into a single ticket note\n\nParameters:\n ticket_id (str): The ID of the ticket where the merged note will be added\n note_ids (list): List of note IDs that will be merged into the ticket\n updated_by (str): The ID of the user performing the merge\n\nReturns:\n str: ID of the updated ticket note\n""""""\n', '\n\ndef merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):\n""""""\nMerges duplicate tickets into a primary ticket\n\nParameters:\n primary_ticket_id (str): The ID of the primary ticket that remains\n duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary\n\nReturns:\n None\n""""""\n', '\n\ndef create_report_for_sprint(sprint_id, report_type):\n""""""\nGenerates a report for a given sprint\n\nParameters:\n sprint_id (str): The ID of the sprint\n report_type (str): The type of report to be generated\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef generate_report_for_sprint(sprint_id):\n""""""\nGenerates a performance report for a specified sprint\n\nParameters:\n sprint_id (str): The ID of the sprint for which to generate the report\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef calculate_estimated_effort(work_id):\n""""""\nCalculates the estimated effort required to complete a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n float: Estimated effort in hours\n""""""\n', '\n\ndef estimate_work_hours(work_id):\n""""""\nEstimates the number of hours required to complete a specific work item\n\nParameters:\n work_id (str): The ID of the work item for which the estimation is to be made\n\nReturns:\n float: Estimated hours required to complete the work item\n""""""\n']","Retrieve the work items of type ""task"" within the date range ""2023-01-01"" to ""2023-01-31"", update the status of user ""User123"" to ""active"", and generate a report for the current sprint.","var_1 = filter_work_by_date_range(start_date=""2023-01-01"", end_date=""2023-01-31"", work_type=[""task""])
var_2 = update_user_ID(user_id=""User123"", status=""active"")
var_3 = get_sprint_id()
var_4 = generate_report_for_sprint(sprint_id=var_3)"
"['\n\ndef find_user_by_email(email):\n""""""\nFinds a user in the system by their email address\n\nParameters:\n email (str): The email address of the user to find\n\nReturns:\n str: ID of the user\n""""""\n', '\n\ndef validate_work_item_completeness(work_id):\n""""""\nChecks if a work item has all necessary information completed\n\nParameters:\n work_id (str): The ID of the work item to check\n\nReturns:\n bool: True if the work item is complete, False if it lacks information\n""""""\n', '\n\ndef generate_report_from_template(report_template_id, data_source_id):\n""""""\nGenerates a report based on a specified template and data source\n\nParameters:\n report_template_id (str): The ID of the report template to use\n data_source_id (str): The ID of the data source\n\nReturns:\n str: Generated report\n""""""\n', '\n\ndef fetch_users_from_group(group_id):\n""""""\nRetrieves a list of user IDs that belong to the specified group\n\nParameters:\n group_id (str): The ID of the group\n\nReturns:\n list: User IDs belonging to the group\n""""""\n', '\n\ndef log_system_event(event_type, description, user_id=None):\n""""""\nLogs an event in the system with an optional user ID associated with it\n\nParameters:\n event_type (str): The type of event to log\n description (str): A brief description of the event\n user_id (str): The ID of the user involved in the event, if applicable\n\nReturns:\n str: The ID of the logged event\n""""""\n', '\n\ndef merge_duplicate_records(primary_record_id, duplicate_record_id):\n""""""\nMerges a duplicate record into a primary record\n\nParameters:\n primary_record_id (str): The ID of the primary record to keep\n duplicate_record_id (str): The ID of the duplicate record to merge\n\nReturns:\n bool: True if the merge was successful; otherwise False\n""""""\n', '\n\ndef retrieve_user_workload(user_id):\n""""""\nRetrieves the current workload for the specified user\n\nParameters:\n user_id (str): The ID of the user whose workload is to be retrieved\n\nReturns:\n list: A list containing workload details\n""""""\n', '\n\ndef list_all_blocked_tickets():\n""""""\nLists all tickets that are currently blocked\n\nReturns:\n list: Ticket IDs that are currently blocked\n""""""', '\n\ndef filter_tasks_by_due_date(task_ids, due_date):\n""""""\nFilters tasks by their due date\n\nParameters:\n task_ids (list): A list of task IDs to filter\n due_date (str): The due date to filter tasks by\n\nReturns:\n list: List of task IDs that have the specified due date\n""""""\n', '\n\ndef find_work_items_by_tag(work_type, tag):\n""""""\nFinds work items of a certain type with a given tag\n\nParameters:\n work_type (str): The type of the work items to filter by\n tag (str): The tag to filter the work items\n\nReturns:\n list: List of work items with the given tag\n""""""\n']","Find the user ID for ""engineer@example.com"", retrieve their current workload, and create actionable tasks based on the summary of their workload.","var_1 = find_user_by_email(email=""engineer@example.com"")
var_2 = retrieve_user_workload(user_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = create_actionable_tasks_from_text(text=var_3)"
"['\n\ndef generate_progress_report(project_id, report_format=""summary""):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which the progress report is needed\n report_format (str): The format of the report; \'summary\' or \'detailed\'. The default is \'summary\'\n\nReturns:\n str: The generated progress report\n""""""\n', '\n\ndef get_sprint_history(sprint_id):\n""""""\nRetrieves the change history of a sprint\n\nParameters:\n sprint_id (str): The ID of the ticket\n\nReturns:\n list: A list of changes made to the sprint\n""""""\n', '\n\ndef remove_object_from_sprint(object_id, sprint_id):\n""""""\nRemoves a specified object from a sprint and returns the new list\n\nParameters:\n object_id (str): The ID of the object to be removed\n sprint_id (str): The ID of the project from which the object should be removed\n\nReturns:\n list: Returns the updated list of sprint objects\n""""""\n', '\n\ndef estimate_completion_time(task_id):\n""""""\nEstimates the completion time for a given task\n\nParameters:\n task_id (str): The ID of the task for which to estimate completion time\n\nReturns:\n float: The estimated number of hours to complete the task\n""""""\n', '\n\ndef list_user_permissions(user_id):\n""""""\nLists all the permissions that a user has within the system\n\nParameters:\n user_id (str): The ID of the user for whom permissions are being listed\n\nReturns:\n list: A list of permissions that the user possesses\n""""""\n', '\n\ndef check_ticket_status(ticket_id):\n""""""\nChecks the status of a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose status is to be checked\n\nReturns:\n str: The status of the ticket\n""""""\n', '\n\ndef calculate_work_item_duration(work_id):\n""""""\nCalculates the total time taken to complete a work item\n\nParameters:\n work_id (str): The ID of the work item for which duration is to be calculated\n\nReturns:\n float: The total duration in hours\n""""""\n', '\n\ndef fetch_users_from_group(group_id):\n""""""\nRetrieves a list of user IDs that belong to the specified group\n\nParameters:\n group_id (str): The ID of the group\n\nReturns:\n list: User IDs belonging to the group\n""""""\n', '\n\ndef archive_completed_work(work_ids):\n""""""\nArchives a list of completed work items\n\nParameters:\n work_ids (list): A list of work item IDs that have been completed and need to be archived\n\nReturns:\n int: The number of work items successfully archived\n""""""\n', '\n\ndef merge_duplicate_records(primary_record_id, duplicate_record_id):\n""""""\nMerges a duplicate record into a primary record\n\nParameters:\n primary_record_id (str): The ID of the primary record to keep\n duplicate_record_id (str): The ID of the duplicate record to merge\n\nReturns:\n bool: True if the merge was successful; otherwise False\n""""""\n']","Generate a detailed progress report for project ""PRJ-456"" and check the status of ticket ""TICK-789"".","var_1 = generate_progress_report(project_id=""PRJ-456"", report_format=""detailed"")
var_2 = check_ticket_status(ticket_id=""TICK-789"")"
"['\n\ndef generate_progress_report(project_id):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which to generate the report\n\nReturns:\n str: A string summary of the project\'s progress report\n""""""\n', '\n\ndef generate_report_data(report_type, data_set_id):\n""""""\nGenerates report data based on the provided report type and data set\n\nParameters:\n report_type (str): The type of report to generate\n data_set_id (str): The ID of the data set to be used for the report\n\nReturns:\n str: A report data string or ID depending on internal implementation\n""""""\n', '\n\ndef remove_work_item_from_sprint(work_id, sprint_id):\n""""""\nRemoves the specified work item from a sprint\n\nParameters:\n work_id (str): The ID of the work item to be removed\n sprint_id (str): The ID of the sprint from which to remove the work item\n\nReturns:\n bool: True if the removal was successful, False otherwise\n""""""\n', '\n\ndef extend_sprint_end_date(sprint_id, new_end_date):\n""""""\nExtends the end date of a current sprint to a new date\n\nParameters:\n sprint_id (str): The ID of the sprint to extend\n new_end_date (str): The new end date for the sprint in YYYY-MM-DD format\n\nReturns:\n bool: True if the sprint end date was extended, False otherwise\n""""""\n', '\n\ndef calculate_progress_percentage(project_id):\n""""""\nCalculates the progress percentage of the given project\n\nParameters:\n project_id (str): The ID of the project for which to calculate progress\n\nReturns:\n float: The percentage of project completion\n""""""\n', '\n\ndef list_user_skills(user_id):\n""""""\nLists the skills associated with the specified user\n\nParameters:\n user_id (str): The ID of the user whose skills are being queried\n\nReturns:\n list: The skills of the user\n""""""\n', '\n\ndef merge_duplicate_records(primary_record_id, duplicate_record_id):\n""""""\nMerges a duplicate record into a primary record\n\nParameters:\n primary_record_id (str): The ID of the primary record to keep\n duplicate_record_id (str): The ID of the duplicate record to merge\n\nReturns:\n bool: True if the merge was successful; otherwise False\n""""""\n', '\n\ndef retrieve_user_workload(user_id):\n""""""\nRetrieves the current workload for the specified user\n\nParameters:\n user_id (str): The ID of the user whose workload is to be retrieved\n\nReturns:\n list: A list containing workload details\n""""""\n', '\n\ndef check_availability_of_part(part_id):\n""""""\nChecks if a specific part is available in inventory\n\nParameters:\n part_id (str): The ID of the part to check for availability\n\nReturns:\n bool: True if the part is available, False otherwise\n""""""\n', '\n\ndef get_recent_activity_log(user_id, limit=10):\n""""""\nGets the most recent activity log entries for a given user\n\nParameters:\n user_id (str): The ID of the user to get activities for\n limit (int): The maximum number of activity log entries to return\n\nReturns:\n list: Recent activity log entries\n""""""\n']","Generate a progress report for project ""PRJ-986"", calculate its completion percentage, and list recent activities of the user ""LeadArchitect"".","var_1 = generate_progress_report(project_id=""PRJ-986"")
var_2 = calculate_progress_percentage(project_id=""PRJ-986"")
var_3 = search_object_by_name(query=""LeadArchitect"")
var_4 = get_recent_activity_log(user_id=var_3)"
"['\n\ndef generate_project_summary(project_id):\n""""""\nGenerates a summary report for the specified project\n\nParameters:\n project_id (str): The ID of the project to summarize\n\nReturns:\n str: A summary report of the project\n""""""\n', '\n\ndef generate_progress_report(project_id, report_format=""summary""):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which the progress report is needed\n report_format (str): The format of the report; \'summary\' or \'detailed\'. The default is \'summary\'\n\nReturns:\n str: The generated progress report\n""""""\n', '\n\ndef generate_work_report(work_ids):\n""""""\nGenerates a report for the given work items.\n\nParameters:\n work_ids (list): A list of work item IDs for report generation\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef calculate_estimated_completion(project_id):\n""""""\nCalculates the estimated completion date for a project based on current progress\n\nParameters:\n project_id (str): The ID of the project to be analyzed\n\nReturns:\n str: Estimated date of completion\n""""""\n', 'def assign_issues_to_user(issue_ids, user_id):\n""""""\nAssigns a list of issues to the specified user\n\nParameters:\n issue_ids (list): A list of issue IDs that need to be assigned\n user_id (str): The user ID to whom the issues will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef generate_report_data(report_type, data_set_id):\n""""""\nGenerates report data based on the provided report type and data set\n\nParameters:\n report_type (str): The type of report to generate\n data_set_id (str): The ID of the data set to be used for the report\n\nReturns:\n str: A report data string or ID depending on internal implementation\n""""""\n', '\n\ndef archive_completed_work(work_ids):\n""""""\nArchives a list of completed work items\n\nParameters:\n work_ids (list): A list of work item IDs that have been completed and need to be archived\n\nReturns:\n int: The number of work items successfully archived\n""""""\n', '\n\ndef list_user_tasks(user_id, completed=False):\n""""""\nLists all tasks assigned to a user, optionally filtering for completed tasks\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be listed\n completed (bool): If True, only completed tasks are returned\n\nReturns:\n list: A list of tasks assigned to the user\n""""""\n', '\n\ndef calculate_effort_for_task(task_id):\n""""""\nCalculates the effort spent on a specific task by summing subtasks\n\nParameters:\n task_id (str): The ID of the task for which the effort needs to be calculated\n\nReturns:\n float: Total effort spent on the task\n""""""\n', '\n\ndef assign_tasks_to_employee(task_ids, employee_id):\n""""""\nAssigns a list of tasks to the specified employee\n\nParameters:\n task_ids (list): A list of task IDs to be assigned\n employee_id (str): The ID of the employee to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment was successful, False otherwise\n""""""\n']","Generate a progress report for project ""PRJ-009"" in detailed format and calculate the estimated completion date for the same project.","var_1 = generate_progress_report(project_id=""PRJ-009"", report_format=""detailed"")
var_2 = calculate_estimated_completion(project_id=""PRJ-009"")"
"['\n\ndef generate_report_from_data(dataset_id, report_type=""summary""):\n""""""\nGenerates a specific type of report from a dataset\n\nParameters:\n dataset_id (str): The ID of the dataset from which to generate the report\n report_type (str): The type of report to generate, default is \'summary\'\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef archive_completed_tasks(project_id, completed_since):\n""""""\nArchives tasks that are completed within the given project since the specified time\n\nParameters:\n project_id (str): The ID of the project containing the tasks\n completed_since (str): Archive tasks completed after this timestamp\n\nReturns:\n int: Number of tasks archived\n""""""\n', '\n\ndef list_recent_projects(user_id, days_back=30):\n""""""\nLists all projects a user has worked on in the past number of days\n\nParameters:\n user_id (str): The ID of the user\n days_back (int): The number of past days to look for projects. The default is \'30\'\n\nReturns:\n list: Project IDs that the user has worked on\n""""""\n', '\n\ndef generate_progress_report(project_id, report_format=""summary""):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which the progress report is needed\n report_format (str): The format of the report; \'summary\' or \'detailed\'. The default is \'summary\'\n\nReturns:\n str: The generated progress report\n""""""\n', '\n\ndef delete_objects_by_id(object_ids):\n""""""\nDeletes objects from the system based on their IDs\n\nParameters:\n object_ids (list): List of object IDs to delete\n\nReturns:\n bool: True if objects were successfully deleted, False otherwise\n""""""\n', '\n\ndef calculate_budget_allocation(project_id, cost_limit):\n""""""\nCalculates and assigns the budget allocation for a project\n\nParameters:\n project_id (str): The ID of the project for which the budget is calculated\n cost_limit (float): The cost limit for the project\'s budget\n\nReturns:\n float: The amount allocated to the project budget\n""""""\n', '\n\ndef get_recent_activity_log(user_id, limit=10):\n""""""\nGets the most recent activity log entries for a given user\n\nParameters:\n user_id (str): The ID of the user to get activities for\n limit (int): The maximum number of activity log entries to return\n\nReturns:\n list: Recent activity log entries\n""""""\n', '\n\ndef generate_report_for_sprint(sprint_id):\n""""""\nGenerates a performance report for a specified sprint\n\nParameters:\n sprint_id (str): The ID of the sprint for which to generate the report\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef find_work_items_by_tag(work_type, tag):\n""""""\nFinds work items of a certain type with a given tag\n\nParameters:\n work_type (str): The type of the work items to filter by\n tag (str): The tag to filter the work items\n\nReturns:\n list: List of work items with the given tag\n""""""\n', '\n\ndef batch_update_user_roles(user_ids, new_role):\n""""""\nUpdates the roles for a batch of users to a new role\n\nParameters:\n user_ids (list): List of user IDs whose roles should be updated\n new_role (str): The new role to assign\n\nReturns:\n int: Number of users successfully updated\n""""""\n']","Generate a progress report for project ""PRJ-456"" using the detailed format and archive all tasks completed since ""2023-01-01"" within the same project.","var_1 = generate_progress_report(project_id=""PRJ-456"", report_format=""detailed"")
var_2 = archive_completed_tasks(project_id=""PRJ-456"", completed_since=""2023-01-01"")"
"['\n\ndef generate_report_from_data(dataset_id, report_type=""summary""):\n""""""\nGenerates a specific type of report from a dataset\n\nParameters:\n dataset_id (str): The ID of the dataset from which to generate the report\n report_type (str): The type of report to generate, default is \'summary\'\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef link_related_documents(doc_id, related_doc_ids):\n""""""\nLinks related documents to the given document in the system\n\nParameters:\n doc_id (str): The ID of the document to which related documents should be linked\n related_doc_ids (list): A list of IDs for related documents\n\nReturns:\n bool: True if the operation was successful, False otherwise\n""""""\n', '\n\ndef schedule_meeting_with_user(user_id, duration=30, urgent=False):\n""""""\nSchedules a meeting with a specified user\n\nParameters:\n user_id (str): The ID of the user with whom to schedule a meeting\n duration (int): Duration of the meeting in minutes, default is \'30\'\n urgent (bool): Whether the meeting is urgent, defaults to False\n\nReturns:\n str: The ID of the scheduled meeting\n""""""\n', '\n\ndef get_user_workload(user_id):\n""""""\nDetermines the current workload for a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be determined\n\nReturns:\n int: The number of tasks assigned to the user\n""""""\n', '\n\ndef validate_user_permissions(user_id, required_permissions):\n""""""\nChecks if the user has the specified permissions\n\nParameters:\n user_id (str): The ID of the user whose permissions need to be checked\n required_permissions (list): A list of permissions to check against the user\'s permissions\n\nReturns:\n bool: True if the user has all the required permissions, False otherwise\n""""""\n', '\n\ndef get_user_avatar(user_id):\n""""""\nRetrieves the avatar image URL for the specified user\n\nParameters:\n user_id (str): The ID of the user whose avatar is to be retrieved\n\nReturns:\n str: URL of the user\'s avatar image\n""""""\n', '\n\ndef get_project_timeline(project_id):\n""""""\nRetrieves the timeline and key milestones of a project\n\nParameters:\n project_id (str): The ID of the project for which the timeline is requested\n\nReturns:\n list: Key milestones and dates for the project timeline\n""""""\n', '\n\ndef calculate_progress(project_id):\n""""""\nCalculates the overall progress of a given project as a percentage\n\nParameters:\n project_id (str): The ID of the project for which progress is being calculated\n\nReturns:\n float: The progress percentage of the project\n""""""\n', '\n\ndef update_object_status(object_id, new_status, changed_by):\n""""""\nUpdates the status of an object and records the user that made the change\n\nParameters:\n object_id (str): The ID of the object for which the status is updated\n new_status (str): The new status for the object\n changed_by (str): The ID of the user who is changing the status\n\nReturns:\n None\n""""""\n', '\n\ndef calculate_work_left(project_id):\n""""""\nCalculates the estimated amount of work left in a project\n\nParameters:\n project_id (str): The ID of the project to calculate work for\n\nReturns:\n float: Estimated hours of work left\n""""""\n']","Generate a report for all high-severity tickets related to ""RevTech"" organization, then check the workload of the user who created these tickets.","var_1 = search_object_by_name(query=""RevTech"")
var_2 = works_list(ticket.severity=[""high""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = generate_report_from_data(dataset_id=var_2, report_type=""summary"")
var_4 = get_user_workload(user_id=var_2[0][""created_by""])"
"['\n\ndef generate_report(report_type, subject_id, include_summary=True):\n""""""\nGenerates a report of a specific type for a subject in the system\n\nParameters:\n report_type (str): The type of report to generate\n subject_id (str): The ID of the subject for the report\n include_summary (bool): Whether to include a summary in the report; defaults to True\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef mark_ticket_as_resolved(ticket_id):\n""""""\nMarks a ticket as resolved in the system\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked as resolved\n\nReturns:\n bool: True if the ticket was marked as resolved, False otherwise\n""""""\n', '\n\ndef check_ticket_status(ticket_id):\n""""""\nChecks the status of a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose status is to be checked\n\nReturns:\n str: The status of the ticket\n""""""\n', '\n\ndef check_availability_of_part(part_id):\n""""""\nChecks if a specific part is available in inventory\n\nParameters:\n part_id (str): The ID of the part to check for availability\n\nReturns:\n bool: True if the part is available, False otherwise\n""""""\n', '\n\ndef retrieve_user_workload(user_id):\n""""""\nRetrieves the current workload for the specified user\n\nParameters:\n user_id (str): The ID of the user whose workload is to be retrieved\n\nReturns:\n list: A list containing workload details\n""""""\n', 'def filter_work_by_date_range(start_date, end_date, work_type=None):\n""""""\nFilters work items based on a given date range.\n\nParameters:\n start_date (str): The start date of the desired date range\n end_date (str): The end date of the desired date range\n work_type (list): Optional filter for type of work\n\nReturns:\n list: Work items within the specified date range\n""""""\n', '\n\ndef delete_objects_by_id(object_ids):\n""""""\nDeletes objects from the system based on their IDs\n\nParameters:\n object_ids (list): List of object IDs to delete\n\nReturns:\n bool: True if objects were successfully deleted, False otherwise\n""""""\n', '\n\ndef remove_object_from_sprint(object_id, sprint_id):\n""""""\nRemoves a specified object from a sprint and returns the new list\n\nParameters:\n object_id (str): The ID of the object to be removed\n sprint_id (str): The ID of the project from which the object should be removed\n\nReturns:\n list: Returns the updated list of sprint objects\n""""""\n', '\n\ndef remove_work_item_from_sprint(work_id, sprint_id):\n""""""\nRemoves the specified work item from a sprint\n\nParameters:\n work_id (str): The ID of the work item to be removed\n sprint_id (str): The ID of the sprint from which to remove the work item\n\nReturns:\n bool: True if the removal was successful, False otherwise\n""""""\n', '\n\ndef schedule_meeting_with_user(user_id, duration=30, urgent=False):\n""""""\nSchedules a meeting with a specified user\n\nParameters:\n user_id (str): The ID of the user with whom to schedule a meeting\n duration (int): Duration of the meeting in minutes, default is \'30\'\n urgent (bool): Whether the meeting is urgent, defaults to False\n\nReturns:\n str: The ID of the scheduled meeting\n""""""\n']","Check the availability of part ""PART-789"", generate a report for it, and if it's available, retrieve and summarize work items related to this part.","var_1 = check_availability_of_part(part_id=""PART-789"")
var_2 = generate_report(report_type=""part"", subject_id=""PART-789"", include_summary=True)
var_3 = works_list(applies_to_part=[""PART-789""], limit=50)
var_4 = summarize_objects(objects=var_3)"
"['\n\ndef generate_summary_report(object_ids):\n""""""\nGenerates a summary report for the specified objects\n\nParameters:\n object_ids (list): A list of object IDs\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef filter_records_by_date(record_ids, start_date, end_date):\n""""""\nFilters a list of record IDs based on a date range\n\nParameters:\n record_ids (list): List of record IDs to filter\n start_date (str): Start date for the filtering in \'YYYY-MM-DD\' format\n end_date (str): End date for the filtering in \'YYYY-MM-DD\' format\n\nReturns:\n list: Filtered record IDs\n""""""\n', '\n\ndef list_completed_tasks_by_user(user_id, project_id=None):\n""""""\nLists all tasks completed by a given user, optionally filtered by project\n\nParameters:\n user_id (str): The ID of the user\n project_id (str, optional): The ID of the project to filter tasks\n\nReturns:\n list: List of task IDs completed by the user\n""""""\n', '\n\ndef log_system_activity(activity_description, user_id=None):\n""""""\nLogs a system activity with an optional user ID\n\nParameters:\n activity_description (str): A brief description of the activity being logged\n user_id (str, optional): The ID of the user associated with the activity; defaults to None\n\nReturns:\n bool: True if the activity was logged successfully; otherwise False\n""""""\n', '\n\ndef filter_tasks_by_due_date(task_ids, due_date):\n""""""\nFilters tasks by their due date\n\nParameters:\n task_ids (list): A list of task IDs to filter\n due_date (str): The due date to filter tasks by\n\nReturns:\n list: List of task IDs that have the specified due date\n""""""\n', '\n\ndef remove_user_from_project(user_id, project_id):\n""""""\nRemoves a user from a project\n\nParameters:\n user_id (str): The ID of the user to be removed\n project_id (str): The ID of the project from which the user is to be removed\n\nReturns:\n bool: True if the user is successfully removed, False otherwise\n""""""', '\n\ndef list_work_attachments(work_id):\n""""""\nLists all attachments associated with a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n list: Attachment file IDs\n""""""\n', '\n\ndef set_user_permission(user_id, permission_level):\n""""""\nSets a specific permission level for a user account\n\nParameters:\n user_id (str): The ID of the user to set permissions for\n permission_level (str): The level of permission to assign e.g., \'read\', \'write\', \'admin\'\n\nReturns:\n bool: True if the permission was set successfully, False otherwise\n""""""\n', '\n\ndef extract_keywords_from_text(text):\n""""""\nGiven a text, extracts and returns the main keywords\n\nParameters:\n text (str): The text from which keywords are to be extracted\n\nReturns:\n list: A list of extracted keywords\n""""""\n', '\n\ndef toggle_feature_access(feature_id, user_id, enable_access):\n""""""\nToggles access to a specific feature for a user\n\nParameters:\n feature_id (str): The ID of the feature to toggle access\n user_id (str): The ID of the user whose access will be toggled\n enable_access (bool): \'True\' to enable access, \'False\' to disable\n\nReturns:\n bool: The resulting access status\n""""""\n']","Filter completed tasks by user ""User123"" within the ""Project456"", summarize the tasks, and generate a summary report.","var_1 = list_completed_tasks_by_user(user_id=""User123"", project_id=""Project456"")
var_2 = summarize_objects(objects=var_1)
var_3 = generate_summary_report(object_ids=var_1)"
"['\n\ndef generate_unique_identifier(prefix, use_timestamp=True):\n""""""\nGenerates a unique identifier with an optional timestamp\n\nParameters:\n prefix (str): A prefix for the identifier\n use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True\n\nReturns:\n str: The generated unique identifier\n""""""\n\n```', '\n\ndef get_user_contact_info(user_id):\n""""""\nRetrieves contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact information is requested\n\nReturns:\n str: The contact information of the user\n""""""\n', '\n\ndef validate_object_existence(object_id):\n""""""\nChecks if an object with the given ID exists in the system\n\nParameters:\n object_id (str): The ID of the object to check\n\nReturns:\n bool: True if the object exists, otherwise False\n""""""\n', '\n\ndef update_contact_information(contact_id, new_phone=None, new_email=None):\n""""""\nUpdates the contact information with new provided phone number or email\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_phone (str): The new phone number for the contact, default is \'None\'\n new_email (str): The new email address for the contact, default is \'None\'\n\nReturns:\n bool: Status of the update operation\n""""""\n', '\n\ndef generate_work_report(work_ids):\n""""""\nGenerates a report for the given work items.\n\nParameters:\n work_ids (list): A list of work item IDs for report generation\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef list_work_attachments(work_id):\n""""""\nLists all attachments associated with a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n list: Attachment file IDs\n""""""\n', '\n\ndef list_user_skills(user_id):\n""""""\nLists the skills associated with the specified user\n\nParameters:\n user_id (str): The ID of the user whose skills are being queried\n\nReturns:\n list: The skills of the user\n""""""\n', '\n\ndef generate_report_by_tag(tag_id, include_archived=False):\n""""""\nGenerates a report for all work items associated with the given tag\n\nParameters:\n tag_id (str): The ID of the tag used to filter work items\n include_archived (bool): Include archived work items if set to True\n\nReturns:\n list: Work items associated with the tag\n""""""\n', '\n\ndef generate_report_from_data(dataset_id, report_type=""summary""):\n""""""\nGenerates a specific type of report from a dataset\n\nParameters:\n dataset_id (str): The ID of the dataset from which to generate the report\n report_type (str): The type of report to generate, default is \'summary\'\n\nReturns:\n str: The ID of the generated report\n""""""\n', 'def retrieve_sprint_workload(sprint_id):\n""""""\nCalculates the total workload for a given sprint based on the work items associated with it\n\nParameters:\n sprint_id (str): The ID of the sprint for workload calculation\n\nReturns:\n float: Total workload in hours\n""""""\n']","Generate a unique identifier for a new task related to part ""ENG-456"", validate its existence in the system, and then retrieve the contact information of the user who created it.","var_1 = generate_unique_identifier(prefix=""ENG-456"")
var_2 = validate_object_existence(object_id=var_1)
var_3 = works_list(applies_to_part=[""ENG-456""], created_by=[var_2])
var_4 = get_user_contact_info(user_id=var_3)"
"['\n\ndef get_recent_activity_log(user_id, limit=10):\n""""""\nGets the most recent activity log entries for a given user\n\nParameters:\n user_id (str): The ID of the user to get activities for\n limit (int): The maximum number of activity log entries to return\n\nReturns:\n list: Recent activity log entries\n""""""\n', '\n\ndef merge_duplicate_work_items(primary_work_id, duplicate_work_ids):\n""""""\nMerges duplicate work items into the primary work item\n\nParameters:\n primary_work_id (str): The ID of the primary work item\n duplicate_work_ids (list): List of IDs of duplicate work items to be merged\n\nReturns:\n bool: True if merge was successful, otherwise False\n""""""\n', '\n\ndef link_related_objects(object_id, related_object_id):\n""""""\nCreates a link between two related objects in the system\n\nParameters:\n object_id (str): The ID of the primary object\n related_object_id (str): The ID of the object to relate to the primary\n\nReturns:\n bool: True if the objects were successfully linked, False otherwise\n""""""\n', '\n\ndef retrieve_user_contact_info(user_id):\n""""""\nRetrieves the contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact info is requested\n\nReturns:\n str: Contact information of the user\n""""""\n', '\n\ndef allocate_resources_to_project(project_id, resource_ids):\n""""""\nAllocates specified resources to a project\n\nParameters:\n project_id (str): The ID of the project to which resources are allocated\n resource_ids (list): A list of resource IDs to allocate to the project\n\nReturns:\n bool: True if resources could be allocated, False otherwise\n""""""\n', '\n\ndef list_work_attachments(work_id):\n""""""\nLists all attachments associated with a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n list: Attachment file IDs\n""""""\n', 'def retrieve_sprint_workload(sprint_id):\n""""""\nCalculates the total workload for a given sprint based on the work items associated with it\n\nParameters:\n sprint_id (str): The ID of the sprint for workload calculation\n\nReturns:\n float: Total workload in hours\n""""""\n', '\n\ndef extract_keywords_from_text(text):\n""""""\nGiven a text, extracts and returns the main keywords\n\nParameters:\n text (str): The text from which keywords are to be extracted\n\nReturns:\n list: A list of extracted keywords\n""""""\n', '\n\ndef filter_projects_by_category(category_id, active_only=True):\n""""""\nFilters projects by their category and returns a list of project IDs\n\nParameters:\n category_id (str): The ID of the category to filter projects by\n active_only (bool): Whether to return only active projects\n\nReturns:\n list: List of project IDs matching the category filter\n""""""\n', '\n\ndef update_contact_info(contact_id, new_email=None, new_phone=None):\n""""""\nUpdates the contact information for a given contact ID with new email and/or phone\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_email (str, optional): The new email address; defaults to None\n new_phone (str, optional): The new phone number; defaults to None\n\nReturns:\n bool: True if the update was successful; otherwise False\n""""""\n']","Retrieve the contact information for user ""User123"", list their recent activity log, and summarize any work items they have created.","var_1 = search_object_by_name(query=""User123"")
var_2 = retrieve_user_contact_info(user_id=var_1)
var_3 = get_recent_activity_log(user_id=var_1)
var_4 = works_list(created_by=[var_1])
var_5 = summarize_objects(objects=var_4)"
"['\n\ndef get_sprint_history(sprint_id):\n""""""\nRetrieves the change history of a sprint\n\nParameters:\n sprint_id (str): The ID of the ticket\n\nReturns:\n list: A list of changes made to the sprint\n""""""\n', '\n\ndef update_object_status(object_id, new_status, changed_by):\n""""""\nUpdates the status of an object and records the user that made the change\n\nParameters:\n object_id (str): The ID of the object for which the status is updated\n new_status (str): The new status for the object\n changed_by (str): The ID of the user who is changing the status\n\nReturns:\n None\n""""""\n', '\n\ndef estimate_time_for_task(task_id, estimation_hours):\n""""""\nUpdates a task with a time estimation\n\nParameters:\n task_id (str): The ID of the task to be updated with an estimated time\n estimation_hours (float): The estimated time in hours to complete the task\n\nReturns:\n None\n""""""\n', '\n\ndef generate_progress_report(project_id, report_format=""summary""):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which the progress report is needed\n report_format (str): The format of the report; \'summary\' or \'detailed\'. The default is \'summary\'\n\nReturns:\n str: The generated progress report\n""""""\n', '\n\ndef find_user_by_email(email):\n""""""\nFinds a user in the system by their email address\n\nParameters:\n email (str): The email address of the user to find\n\nReturns:\n str: ID of the user\n""""""\n', '\n\ndef remove_object_from_sprint(object_id, sprint_id):\n""""""\nRemoves a specified object from a sprint and returns the new list\n\nParameters:\n object_id (str): The ID of the object to be removed\n sprint_id (str): The ID of the project from which the object should be removed\n\nReturns:\n list: Returns the updated list of sprint objects\n""""""\n', '\n\ndef list_user_skills(user_id):\n""""""\nLists the skills associated with the specified user\n\nParameters:\n user_id (str): The ID of the user whose skills are being queried\n\nReturns:\n list: The skills of the user\n""""""\n', '\n\ndef check_availability_of_part(part_id):\n""""""\nChecks if a specific part is available in inventory\n\nParameters:\n part_id (str): The ID of the part to check for availability\n\nReturns:\n bool: True if the part is available, False otherwise\n""""""\n', '\n\ndef extract_contact_info(text_id, entity_type):\n""""""\nExtracts contact information from a text source based on a given entity type\n\nParameters:\n text_id (str): The ID of the text source from which to extract contact information\n entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'\n\nReturns:\n list: Extracted contact information\n""""""', '\n\ndef calculate_workload_for_user(user_id):\n""""""\nCalculates the total number of open work items assigned to a user\n\nParameters:\n user_id (str): The ID of the user for whom to calculate the workload\n\nReturns:\n int: The total number of open work items\n""""""\n']",Retrieve the history of the current sprint and generate a detailed progress report for it.,"var_1 = get_sprint_id()
var_2 = get_sprint_history(sprint_id=var_1)
var_3 = generate_progress_report(project_id=var_1, report_format=""detailed"")"
"['\n\ndef get_task_dependencies(task_id):\n""""""\nReturns a list of task IDs that are dependencies for the given task\n\nParameters:\n task_id (str): The ID of the task for which dependencies are requested\n\nReturns:\n list: Dependency task IDs\n""""""\n', '\n\ndef update_work_item_due_date(work_item_id, due_date):\n""""""\nUpdates the due date for the specified work item\n\nParameters:\n work_item_id (str): The ID of the work item to be updated\n due_date (str): The new due date for the work item\n\nReturns:\n None: Indicates that the operation was executed without returning any value\n""""""\n', '\n\ndef calculate_work_item_duration(work_id):\n""""""\nCalculates the total time taken to complete a work item\n\nParameters:\n work_id (str): The ID of the work item for which duration is to be calculated\n\nReturns:\n float: The total duration in hours\n""""""\n', '\n\ndef merge_duplicate_work_items(primary_work_id, duplicate_work_ids):\n""""""\nMerges duplicate work items into the primary work item\n\nParameters:\n primary_work_id (str): The ID of the primary work item\n duplicate_work_ids (list): List of IDs of duplicate work items to be merged\n\nReturns:\n bool: True if merge was successful, otherwise False\n""""""\n', '\n\ndef estimate_time_for_task(task_id, estimation_hours):\n""""""\nUpdates a task with a time estimation\n\nParameters:\n task_id (str): The ID of the task to be updated with an estimated time\n estimation_hours (float): The estimated time in hours to complete the task\n\nReturns:\n None\n""""""\n', '\n\ndef calculate_time_until_deadline(work_item_id):\n""""""\nCalculates the amount of time remaining until the deadline of a work item\n\nParameters:\n work_item_id (str): The ID of the work item\n\nReturns:\n float: The number of hours until the deadline\n""""""\n', '\n\ndef get_user_avatar(user_id):\n""""""\nRetrieves the avatar image URL for the specified user\n\nParameters:\n user_id (str): The ID of the user whose avatar is to be retrieved\n\nReturns:\n str: URL of the user\'s avatar image\n""""""\n', '\n\ndef remove_object_from_inventory(object_id):\n""""""\nRemoves an object from the inventory system based on the object ID\n\nParameters:\n object_id (str): The ID of the object to remove from inventory\n\nReturns:\n bool: True if the removal was successful, False otherwise\n""""""\n', '\n\ndef generate_summary_report(object_ids):\n""""""\nGenerates a summary report for the specified objects\n\nParameters:\n object_ids (list): A list of object IDs\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef fetch_ticket_history(ticket_id, history_limit=10):\n""""""\nFetches the history of changes to a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket for which the history is requested\n history_limit (int): Maximum number of history entries to retrieve. The default is \'10\'\n\nReturns:\n list: A list of history records for the ticket\n""""""\n']","Retrieve the dependencies of task ""TASK-456"", calculate the time until the deadline for each, and merge the history of changes into a summary report.","var_1 = get_task_dependencies(task_id=""TASK-456"")
var_2 = calculate_time_until_deadline(work_item_id=var_1[0])
var_3 = calculate_time_until_deadline(work_item_id=var_1[1])
var_4 = fetch_ticket_history(ticket_id=var_1[0])
var_5 = fetch_ticket_history(ticket_id=var_1[1])
var_6 = generate_summary_report(object_ids=[var_1[0], var_1[1]])"
"['\n\ndef get_team_member_list(team_id):\n""""""\nRetrieves a list of team members for the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: List of team member IDs\n""""""\n', '\n\ndef check_availability_of_part(part_id):\n""""""\nChecks if a specific part is available in inventory\n\nParameters:\n part_id (str): The ID of the part to check for availability\n\nReturns:\n bool: True if the part is available, False otherwise\n""""""\n', '\n\ndef filter_contacts_by_organization(organization_id, active_only=True):\n""""""\nReturns a list of contacts associated with the specified organization, optionally filtering only active contacts\n\nParameters:\n organization_id (str): The ID of the organization to filter contacts\n active_only (bool): Flag to filter only active contacts, default value \'True\'\n\nReturns:\n list: Contacts associated with the organization\n""""""\n', '\n\ndef calculate_expense_totals(expense_ids):\n""""""\nCalculates the total amount from a list of expense IDs\n\nParameters:\n expense_ids (list): List of expense IDs to calculate the total amount\n\nReturns:\n float: The total amount of the expenses\n""""""\n', '\n\ndef generate_report(report_type, subject_id, include_summary=True):\n""""""\nGenerates a report of a specific type for a subject in the system\n\nParameters:\n report_type (str): The type of report to generate\n subject_id (str): The ID of the subject for the report\n include_summary (bool): Whether to include a summary in the report; defaults to True\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef archive_completed_work(work_ids):\n""""""\nArchives a list of completed work items\n\nParameters:\n work_ids (list): A list of work item IDs that have been completed and need to be archived\n\nReturns:\n int: The number of work items successfully archived\n""""""\n', '\n\ndef get_recent_activity_log(user_id, limit=10):\n""""""\nGets the most recent activity log entries for a given user\n\nParameters:\n user_id (str): The ID of the user to get activities for\n limit (int): The maximum number of activity log entries to return\n\nReturns:\n list: Recent activity log entries\n""""""\n', '\n\ndef fetch_user_created_work(user_id, work_type=None):\n""""""\nRetrieves work items created by a specific user\n\nParameters:\n user_id (str): The ID of the user whose work items are to be retrieved\n work_type (list): Filters for work of the provided types, e.g., [\'issue\', \'ticket\']\n\nReturns:\n list: Work items created by the user\n""""""\n', '\n\ndef calculate_work_left(project_id):\n""""""\nCalculates the estimated amount of work left in a project\n\nParameters:\n project_id (str): The ID of the project to calculate work for\n\nReturns:\n float: Estimated hours of work left\n""""""\n', '\n\ndef filter_projects_by_category(category_id, active_only=True):\n""""""\nFilters projects by their category and returns a list of project IDs\n\nParameters:\n category_id (str): The ID of the category to filter projects by\n active_only (bool): Whether to return only active projects\n\nReturns:\n list: List of project IDs matching the category filter\n""""""\n']","Check availability of part ""ENG-456"", fetch work items related to this part, and calculate the total expense of related expenses.","var_1 = check_availability_of_part(part_id=""ENG-456"")
var_2 = works_list(applies_to_part=[""ENG-456""])
var_3 = calculate_expense_totals(expense_ids=var_2)"
"['\n\ndef get_user_permissions(user_id):\n""""""\nReturns a list of permissions for a specified user ID\n\nParameters:\n user_id (str): The ID of the user whose permissions you want to retrieve\n\nReturns:\n list: User permissions\n""""""\n', '\n\ndef list_user_tasks(user_id, completed=False):\n""""""\nLists all tasks assigned to a user, optionally filtering for completed tasks\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be listed\n completed (bool): If True, only completed tasks are returned\n\nReturns:\n list: A list of tasks assigned to the user\n""""""\n', 'def assign_issues_to_user(issue_ids, user_id):\n""""""\nAssigns a list of issues to the specified user\n\nParameters:\n issue_ids (list): A list of issue IDs that need to be assigned\n user_id (str): The user ID to whom the issues will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef estimate_work_hours(work_id):\n""""""\nEstimates the number of hours required to complete a specific work item\n\nParameters:\n work_id (str): The ID of the work item for which the estimation is to be made\n\nReturns:\n float: Estimated hours required to complete the work item\n""""""\n', 'def assign_tickets_to_user(ticket_ids, user_id):\n""""""\nAssigns a set of tickets to a specified user\n\nParameters:\n ticket_ids (list): A list of ticket IDs to be assigned\n user_id (str): The ID of the user to whom the tickets will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef validate_user_permissions(user_id, required_permissions):\n""""""\nChecks if the user has the specified permissions\n\nParameters:\n user_id (str): The ID of the user whose permissions need to be checked\n required_permissions (list): A list of permissions to check against the user\'s permissions\n\nReturns:\n bool: True if the user has all the required permissions, False otherwise\n""""""\n', '\n\ndef generate_progress_report(project_id):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which to generate the report\n\nReturns:\n str: A string summary of the project\'s progress report\n""""""\n', '\n\ndef check_object_permission(user_id, object_id):\n""""""\nChecks if a user has permission to access a specific object\n\nParameters:\n user_id (str): The ID of the user\n object_id (str): The ID of the object to check permission for\n\nReturns:\n bool: True if the user has permission, False otherwise\n""""""\n', '\n\ndef generate_report_by_tag(tag_id, include_archived=False):\n""""""\nGenerates a report for all work items associated with the given tag\n\nParameters:\n tag_id (str): The ID of the tag used to filter work items\n include_archived (bool): Include archived work items if set to True\n\nReturns:\n list: Work items associated with the tag\n""""""\n', 'def filter_projects_by_status(project_ids, status=""active""):\n""""""\nFilters a list of project IDs by their status\n\nParameters:\n project_ids (list): A list of project IDs to filter\n status (str): The status to filter by, default is \'active\'\n\nReturns:\n list: Project IDs matching the status\n""""""\n']","Retrieve the permissions for user ""QAAnalyst"" and list all their completed tasks, then generate a progress report for project ""ProjAlpha"".","var_1 = search_object_by_name(query=""QAAnalyst"")
var_2 = get_user_permissions(user_id=var_1)
var_3 = list_user_tasks(user_id=var_1, completed=True)
var_4 = search_object_by_name(query=""ProjAlpha"")
var_5 = generate_progress_report(project_id=var_4)"
"['\n\ndef link_related_documents(doc_id, related_doc_ids):\n""""""\nLinks related documents to the given document in the system\n\nParameters:\n doc_id (str): The ID of the document to which related documents should be linked\n related_doc_ids (list): A list of IDs for related documents\n\nReturns:\n bool: True if the operation was successful, False otherwise\n""""""\n', '\n\ndef filter_work_by_date_range(start_date, end_date, work_type=None):\n""""""\nFilters work items based on a specific date range\n\nParameters:\n start_date (str): The start date for the filter range (format: YYYY-MM-DD)\n end_date (str): The end date for the filter range (format: YYYY-MM-DD)\n work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task\n\nReturns:\n list: Work items in the specified date range\n""""""\n', '\n\ndef generate_work_report(work_ids):\n""""""\nGenerates a report for the given work items.\n\nParameters:\n work_ids (list): A list of work item IDs for report generation\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef get_ticket_comments(ticket_id):\n""""""\nRetrieves the comments attached to a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose comments are being retrieved\n\nReturns:\n list: Comments associated with the ticket\n""""""\n', '\n\ndef check_availability_of_part(part_id):\n""""""\nChecks if a specific part is available in inventory\n\nParameters:\n part_id (str): The ID of the part to check for availability\n\nReturns:\n bool: True if the part is available, False otherwise\n""""""\n', '\n\ndef estimate_task_duration(task_id, complexity_level):\n""""""\nEstimates the duration needed to complete a task based on its complexity level\n\nParameters:\n task_id (str): The ID of the task\n complexity_level (str): The complexity level of the task. Allowed values: \'low\', \'medium\', \'high\'\n\nReturns:\n float: Estimated duration in hours\n""""""\n', '\n\ndef calculate_time_until_deadline(work_item_id):\n""""""\nCalculates the amount of time remaining until the deadline of a work item\n\nParameters:\n work_item_id (str): The ID of the work item\n\nReturns:\n float: The number of hours until the deadline\n""""""\n', '\n\ndef link_related_objects(object_id, related_object_id):\n""""""\nCreates a link between two related objects in the system\n\nParameters:\n object_id (str): The ID of the primary object\n related_object_id (str): The ID of the object to relate to the primary\n\nReturns:\n bool: True if the objects were successfully linked, False otherwise\n""""""\n', '\n\ndef log_system_activity(activity_description, user_id=None):\n""""""\nLogs a system activity with an optional user ID\n\nParameters:\n activity_description (str): A brief description of the activity being logged\n user_id (str, optional): The ID of the user associated with the activity; defaults to None\n\nReturns:\n bool: True if the activity was logged successfully; otherwise False\n""""""\n', '\n\ndef archive_completed_work(work_ids):\n""""""\nArchives a list of completed work items\n\nParameters:\n work_ids (list): A list of work item IDs that have been completed and need to be archived\n\nReturns:\n int: The number of work items successfully archived\n""""""\n']","Filter work items by type ""ticket"" within the date range ""2023-01-01"" to ""2023-01-31"", generate a report for these items, and check the availability of part ""PART-42"" related to these tickets.","var_1 = filter_work_by_date_range(start_date=""2023-01-01"", end_date=""2023-01-31"", work_type=[""ticket""])
var_2 = generate_work_report(work_ids=var_1)
var_3 = check_availability_of_part(part_id=""PART-42"")"
"['\n\ndef list_completed_tasks_by_user(user_id):\n""""""\nLists all completed tasks for a specific user\n\nParameters:\n user_id (str): The ID of the user whose completed tasks need to be listed\n\nReturns:\n list: List of completed task IDs\n""""""\n', '\n\ndef retrieve_user_contact_info(user_id):\n""""""\nRetrieves the contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact info is requested\n\nReturns:\n str: Contact information of the user\n""""""\n', '\n\ndef extract_keywords_from_text(text):\n""""""\nGiven a text, extracts and returns the main keywords\n\nParameters:\n text (str): The text from which keywords are to be extracted\n\nReturns:\n list: A list of extracted keywords\n""""""\n', '\n\ndef get_object_history(object_id):\n""""""\nRetrieves the change history of a specified object\n\nParameters:\n object_id (str): The ID of the object for which history is requested\n\nReturns:\n list: A list of changes made to the object\n""""""\n', '\n\ndef retrieve_document_by_keyword(keyword):\n""""""\nRetrieves a document ID containing the specified keyword\n\nParameters:\n keyword (str): The keyword to search for in the documents\n\nReturns:\n str: ID of the document containing the keyword\n""""""', '\n\ndef track_time_on_task(task_id, hours_spent):\n""""""\nTracks time spent on a task by logging the number of hours\n\nParameters:\n task_id (str): The ID of the task on which time is spent\n hours_spent (float): The number of hours spent on the task\n\nReturns:\n bool: Status of the time tracking\n""""""\n', '\n\ndef assign_tasks_to_employee(task_ids, employee_id):\n""""""\nAssigns a list of tasks to the specified employee\n\nParameters:\n task_ids (list): A list of task IDs to be assigned\n employee_id (str): The ID of the employee to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment was successful, False otherwise\n""""""\n', '\n\ndef get_recent_activity_log(user_id, limit=10):\n""""""\nGets the most recent activity log entries for a given user\n\nParameters:\n user_id (str): The ID of the user to get activities for\n limit (int): The maximum number of activity log entries to return\n\nReturns:\n list: Recent activity log entries\n""""""\n', '\n\ndef validate_work_item_status(work_item_id, status_options):\n""""""\nChecks if the given work item has a status that is among the provided options\n\nParameters:\n work_item_id (str): The ID of the work item to check\n status_options (list): A list of valid status options\n\nReturns:\n bool: True if status is valid, False otherwise\n""""""\n', '\n\ndef get_user_permissions(user_id):\n""""""\nReturns a list of permissions for a specified user ID\n\nParameters:\n user_id (str): The ID of the user whose permissions you want to retrieve\n\nReturns:\n list: User permissions\n""""""\n']","Retrieve the contact information for user ""User123"", list their completed tasks, and then summarize those tasks.","var_1 = search_object_by_name(query=""User123"")
var_2 = retrieve_user_contact_info(user_id=var_1)
var_3 = list_completed_tasks_by_user(user_id=var_1)
var_4 = summarize_objects(objects=var_3)"
"['\n\ndef list_department_members(department_id):\n""""""\nReturns a list of user IDs for all members within a specified department\n\nParameters:\n department_id (str): The ID of the department to list members for\n\nReturns:\n list: User IDs of all the members in the department\n""""""\n', '\n\ndef generate_report_from_data(dataset_id, report_type=""summary""):\n""""""\nGenerates a specific type of report from a dataset\n\nParameters:\n dataset_id (str): The ID of the dataset from which to generate the report\n report_type (str): The type of report to generate, default is \'summary\'\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef generate_project_summary(project_id):\n""""""\nGenerates a summary report for the specified project\n\nParameters:\n project_id (str): The ID of the project to summarize\n\nReturns:\n str: A summary report of the project\n""""""\n', '\n\ndef update_contact_information(contact_id, new_phone=None, new_email=None):\n""""""\nUpdates the contact information with new provided phone number or email\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_phone (str): The new phone number for the contact, default is \'None\'\n new_email (str): The new email address for the contact, default is \'None\'\n\nReturns:\n bool: Status of the update operation\n""""""\n', '\n\ndef retrieve_archived_documents(archive_id, keyword=None):\n""""""\nRetrieves documents from the archive based on optional keyword\n\nParameters:\n archive_id (str): The ID of the archive from which to retrieve documents\n keyword (str): Optional keyword to filter documents, default is \'None\'\n\nReturns:\n list: A list of documents matching the keyword if provided, otherwise all documents from the archive\n""""""', '\n\ndef check_ticket_status(ticket_id):\n""""""\nChecks the status of a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose status is to be checked\n\nReturns:\n str: The status of the ticket\n""""""\n', '\n\ndef calculate_user_workload(user_id):\n""""""\nCalculates the workload of a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be calculated\n\nReturns:\n float: The calculated workload value\n""""""\n', '\n\ndef mark_item_as_duplicated(work_item_id, duplicate_of_id):\n""""""\nMarks a work item as a duplicate of another\n\nParameters:\n work_item_id (str): The ID of the work item that is a duplicate\n duplicate_of_id (str): The ID of the work item of which it is a duplicate\n\nReturns:\n bool: True if the item is successfully marked, False otherwise\n""""""\n', '\n\ndef track_project_completion(project_id):\n""""""\nTracks the completion percentage of a project based on completed tasks\n\nParameters:\n project_id (str): The ID of the project to track\n\nReturns:\n float: Percentage of the project completed\n""""""\n', '\n\ndef list_user_tasks(user_id, completed=False):\n""""""\nLists all tasks assigned to a user, optionally filtering for completed tasks\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be listed\n completed (bool): If True, only completed tasks are returned\n\nReturns:\n list: A list of tasks assigned to the user\n""""""\n']","Check the status of ticket ""TICK-001"", calculate the workload for the user ""Agent007"" who is assigned to this ticket, and then retrieve and summarize all work items owned by this user.","var_1 = check_ticket_status(ticket_id=""TICK-001"")
var_2 = search_object_by_name(query=""Agent007"")
var_3 = calculate_user_workload(user_id=var_2)
var_4 = works_list(owned_by=[var_2])
var_5 = summarize_objects(objects=var_4)"
"['\n\ndef list_recent_activities(user_id, limit=10):\n""""""\nLists the most recent activities performed by a user\n\nParameters:\n user_id (str): The ID of the user whose activities are to be listed\n limit (int): The maximum number of recent activities to return\n\nReturns:\n list: Recent activities of the user\n""""""\n', '\n\ndef retrieve_user_contact_info(user_id):\n""""""\nRetrieves the contact information for a user\n\nParameters:\n user_id (str): The ID of the user whose contact info is requested\n\nReturns:\n str: Contact information of the user\n""""""\n', '\n\ndef archive_completed_tasks(project_id, completed_since):\n""""""\nArchives tasks that are completed within the given project since the specified time\n\nParameters:\n project_id (str): The ID of the project containing the tasks\n completed_since (str): Archive tasks completed after this timestamp\n\nReturns:\n int: Number of tasks archived\n""""""\n', '\n\ndef calculate_budget_allocation(project_id, cost_limit):\n""""""\nCalculates and assigns the budget allocation for a project\n\nParameters:\n project_id (str): The ID of the project for which the budget is calculated\n cost_limit (float): The cost limit for the project\'s budget\n\nReturns:\n float: The amount allocated to the project budget\n""""""\n', '\n\ndef merge_duplicate_objects(primary_object_id, duplicate_object_id):\n""""""\nMerges a duplicate object into a primary object\n\nParameters:\n primary_object_id (str): The ID of the primary object\n duplicate_object_id (str): The ID of the duplicate object to be merged\n\nReturns:\n bool: True if the merge was successful, False otherwise\n""""""\n', '\n\ndef archive_old_tickets(older_than_date, active_status=False):\n""""""\nArchives tickets that are older than the specified date, optionally filters by active status and returns the IDs\n\nParameters:\n older_than_date (str): A date in the format \'YYYY-MM-DD\', to filter tickets older than this date\n active_status (bool): If True, only archives tickets that are currently active; defaults to False\n\nReturns:\n str: ID of tickets archived\n""""""\n', '\n\ndef validate_work_item_completeness(work_id):\n""""""\nChecks if a work item has all necessary information completed\n\nParameters:\n work_id (str): The ID of the work item to check\n\nReturns:\n bool: True if the work item is complete, False if it lacks information\n""""""\n', '\n\ndef validate_object_existence(object_id):\n""""""\nChecks if an object with the given ID exists in the system\n\nParameters:\n object_id (str): The ID of the object to check\n\nReturns:\n bool: True if the object exists, otherwise False\n""""""\n', '\n\ndef calculate_user_workload(user_id):\n""""""\nCalculates the workload of a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be calculated\n\nReturns:\n float: The calculated workload value\n""""""\n', '\n\ndef generate_report_by_tag(tag_id, include_archived=False):\n""""""\nGenerates a report for all work items associated with the given tag\n\nParameters:\n tag_id (str): The ID of the tag used to filter work items\n include_archived (bool): Include archived work items if set to True\n\nReturns:\n list: Work items associated with the tag\n""""""\n']","Retrieve the contact information for user ""User123"", list their recent activities, and then summarize all work items they have created.","var_1 = search_object_by_name(query=""User123"")
var_2 = retrieve_user_contact_info(user_id=var_1)
var_3 = list_recent_activities(user_id=var_1)
var_4 = works_list(created_by=[var_1])
var_5 = summarize_objects(objects=var_4)"
"['\n\ndef list_recent_activities(user_id, limit=10):\n""""""\nLists the most recent activities performed by a user\n\nParameters:\n user_id (str): The ID of the user whose activities are to be listed\n limit (int): The maximum number of recent activities to return\n\nReturns:\n list: Recent activities of the user\n""""""\n', '\n\ndef validate_user_permissions(user_id, required_permissions):\n""""""\nChecks if the user has the specified permissions\n\nParameters:\n user_id (str): The ID of the user whose permissions need to be checked\n required_permissions (list): A list of permissions to check against the user\'s permissions\n\nReturns:\n bool: True if the user has all the required permissions, False otherwise\n""""""\n', '\n\ndef track_project_completion(project_id):\n""""""\nTracks the completion percentage of a project based on completed tasks\n\nParameters:\n project_id (str): The ID of the project to track\n\nReturns:\n float: Percentage of the project completed\n""""""\n', '\n\ndef generate_progress_report(project_id):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which to generate the report\n\nReturns:\n str: A string summary of the project\'s progress report\n""""""\n', '\n\ndef filter_tasks_by_completion(task_ids, completed=True):\n""""""\nFilters the list of tasks by their completion status\n\nParameters:\n task_ids (list): List of task IDs to filter\n completed (bool): The completion status to filter by. Default is \'True\'\n\nReturns:\n list: List of task IDs that match the completion status\n""""""\n', '\n\ndef update_ticket_status(ticket_id, new_status):\n""""""\nUpdates the status of a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket to be updated\n new_status (str): The new status to update the ticket with\n\nReturns:\n bool: True if the update was successful, otherwise False\n""""""\n', '\n\ndef log_user_activity(user_id, activity_description):\n""""""\nLogs a user\'s activity with a description\n\nParameters:\n user_id (str): The ID of the user whose activity is being logged\n activity_description (str): A description of the activity\n\nReturns:\n bool: True if the logging was successful, False otherwise\n""""""\n', '\n\ndef filter_tickets_by_date(ticket_ids, start_date, end_date=None):\n""""""\nFilters a list of ticket IDs based on a date range\n\nParameters:\n ticket_ids (list): A list of ticket IDs to filter\n start_date (str): The start date for the range\n end_date (str, optional): The end date for the range, defaults to None\n\nReturns:\n list: Filtered list of ticket IDs\n""""""\n', 'def link_issues_to_project(issue_ids, project_id):\n""""""\nLinks the given issues to the specified project\n\nParameters:\n issue_ids (list): A list of issue IDs to be linked to the project\n project_id (str): The ID of the project to which the issues should be linked\n\nReturns:\n bool: Status of the linking action\n""""""\n', '\n\ndef get_user_permissions(user_id):\n""""""\nReturns a list of permissions for a specified user ID\n\nParameters:\n user_id (str): The ID of the user whose permissions you want to retrieve\n\nReturns:\n list: User permissions\n""""""\n']","Retrieve the ID of the current sprint, add work items owned by user ""TeamLead"" to it, and then generate a progress report for that sprint.","var_1 = who_am_i()
var_2 = works_list(owned_by=[""TeamLead""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = generate_progress_report(project_id=var_3)"
"['\n\ndef log_system_activity(activity_description, user_id=None):\n""""""\nLogs a system activity with an optional user ID\n\nParameters:\n activity_description (str): A brief description of the activity being logged\n user_id (str, optional): The ID of the user associated with the activity; defaults to None\n\nReturns:\n bool: True if the activity was logged successfully; otherwise False\n""""""\n', '\n\ndef list_all_blocked_tickets():\n""""""\nLists all tickets that are currently blocked\n\nReturns:\n list: Ticket IDs that are currently blocked\n""""""', '\n\ndef update_object_status(object_id, new_status, changed_by):\n""""""\nUpdates the status of an object and records the user that made the change\n\nParameters:\n object_id (str): The ID of the object for which the status is updated\n new_status (str): The new status for the object\n changed_by (str): The ID of the user who is changing the status\n\nReturns:\n None\n""""""\n', '\n\ndef create_new_ticket(title, description, reported_by):\n""""""\nCreates a new ticket in the system with the given details\n\nParameters:\n title (str): The title of the new ticket\n description (str): A detailed description of the issue or request\n reported_by (str): The ID of the user reporting the ticket\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', '\n\ndef estimate_task_duration(task_id, complexity_level):\n""""""\nEstimates the duration needed to complete a task based on its complexity level\n\nParameters:\n task_id (str): The ID of the task\n complexity_level (str): The complexity level of the task. Allowed values: \'low\', \'medium\', \'high\'\n\nReturns:\n float: Estimated duration in hours\n""""""\n', '\n\ndef generate_report_from_template(report_template_id, data_source_id):\n""""""\nGenerates a report based on a specified template and data source\n\nParameters:\n report_template_id (str): The ID of the report template to use\n data_source_id (str): The ID of the data source\n\nReturns:\n str: Generated report\n""""""\n', '\n\ndef calculate_budget_allocation(project_id, cost_limit):\n""""""\nCalculates and assigns the budget allocation for a project\n\nParameters:\n project_id (str): The ID of the project for which the budget is calculated\n cost_limit (float): The cost limit for the project\'s budget\n\nReturns:\n float: The amount allocated to the project budget\n""""""\n', 'def filter_work_by_date_range(start_date, end_date, work_type=None):\n""""""\nFilters work items based on a given date range.\n\nParameters:\n start_date (str): The start date of the desired date range\n end_date (str): The end date of the desired date range\n work_type (list): Optional filter for type of work\n\nReturns:\n list: Work items within the specified date range\n""""""\n', 'def calculate_due_dates(work_item_ids, urgency_level):\n""""""\nCalculates the due dates for given work items based on their urgency\n\nParameters:\n work_item_ids (list): A list of work item IDs for which due dates are required\n urgency_level (str): The urgency level. Allowed values: \'high\', \'medium\', \'low\'\n\nReturns:\n list: Due dates for the specified work items\n""""""\n', '\n\ndef validate_data_consistency(data_id, schema_id):\n""""""\nValidates if data conforms to a specified schema for consistency\n\nParameters:\n data_id (str): The ID of the data to be validated\n schema_id (str): The ID of the schema to validate the data against\n\nReturns:\n bool: True if data is consistent, False otherwise\n""""""\n']","Log the activity of creating a new ticket with the title ""Database Overload"" and description ""The database is experiencing frequent overloads during peak hours"", reported by user ""DBAdmin"". Then, estimate the task duration for the newly created ticket assuming it has a high complexity level.","var_1 = who_am_i()
var_2 = create_new_ticket(title=""Database Overload"", description=""The database is experiencing frequent overloads during peak hours"", reported_by=""DBAdmin"")
var_3 = log_system_activity(activity_description=""Created a new ticket with the title 'Database Overload'"", user_id=var_1)
var_4 = estimate_task_duration(task_id=var_2, complexity_level=""high"")"
"['\n\ndef log_system_event(event_type, description, user_id=None):\n""""""\nLogs an event in the system with an optional user ID associated with it\n\nParameters:\n event_type (str): The type of event to log\n description (str): A brief description of the event\n user_id (str): The ID of the user involved in the event, if applicable\n\nReturns:\n str: The ID of the logged event\n""""""\n', '\n\ndef remove_object_from_sprint(object_id, sprint_id):\n""""""\nRemoves a specified object from a sprint and returns the new list\n\nParameters:\n object_id (str): The ID of the object to be removed\n sprint_id (str): The ID of the project from which the object should be removed\n\nReturns:\n list: Returns the updated list of sprint objects\n""""""\n', '\n\ndef validate_work_item_status(work_item_id, status_options):\n""""""\nChecks if the given work item has a status that is among the provided options\n\nParameters:\n work_item_id (str): The ID of the work item to check\n status_options (list): A list of valid status options\n\nReturns:\n bool: True if status is valid, False otherwise\n""""""\n', '\n\ndef estimate_completion_time(task_id):\n""""""\nEstimates the completion time for a given task\n\nParameters:\n task_id (str): The ID of the task for which to estimate completion time\n\nReturns:\n float: The estimated number of hours to complete the task\n""""""\n', '\n\ndef extract_keywords_from_text(text):\n""""""\nGiven a text, extracts and returns the main keywords\n\nParameters:\n text (str): The text from which keywords are to be extracted\n\nReturns:\n list: A list of extracted keywords\n""""""\n', '\n\ndef validate_object_existence(object_id):\n""""""\nChecks if an object with the given ID exists in the system\n\nParameters:\n object_id (str): The ID of the object to check\n\nReturns:\n bool: True if the object exists, otherwise False\n""""""\n', '\n\ndef batch_update_task_status(task_ids, new_status):\n""""""\nUpdates the status of multiple tasks in a batch operation\n\nParameters:\n task_ids (list): A list of task IDs whose status needs updating\n new_status (str): The new status to apply to the tasks\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef generate_work_report(work_ids):\n""""""\nGenerates a report for the given work items.\n\nParameters:\n work_ids (list): A list of work item IDs for report generation\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef check_inventory_availability(part_id, minimum_quantity=1):\n""""""\nChecks if the inventory has the specified part in at least the minimum quantity\n\nParameters:\n part_id (str): The ID of the part to check in inventory\n minimum_quantity (int): The minimum quantity to check for; defaults to 1\n\nReturns:\n bool: True if the minimum quantity is available; otherwise False\n""""""\n', '\n\ndef reassign_work_item_owner(work_id, new_owner_id):\n""""""\nReassigns the owner of a work item to a new user\n\nParameters:\n work_id (str): The ID of the work item to be reassigned\n new_owner_id (str): The user ID of the new owner\n\nReturns:\n bool: True if reassignment is successful, False otherwise\n""""""\n']","Check the inventory availability for part ""HD-3401"", log the event, and if available, generate a report for work items related to that part.","var_1 = check_inventory_availability(part_id=""HD-3401"")
var_2 = log_system_event(event_type=""Check Inventory"", description=""Checked inventory for part HD-3401"")
var_3 = works_list(applies_to_part=[""HD-3401""])
var_4 = generate_work_report(work_ids=var_3)"
"['\n\ndef mark_item_as_duplicated(work_item_id, duplicate_of_id):\n""""""\nMarks a work item as a duplicate of another\n\nParameters:\n work_item_id (str): The ID of the work item that is a duplicate\n duplicate_of_id (str): The ID of the work item of which it is a duplicate\n\nReturns:\n bool: True if the item is successfully marked, False otherwise\n""""""\n', '\n\ndef update_object_status(object_id, new_status, changed_by):\n""""""\nUpdates the status of an object and records the user that made the change\n\nParameters:\n object_id (str): The ID of the object for which the status is updated\n new_status (str): The new status for the object\n changed_by (str): The ID of the user who is changing the status\n\nReturns:\n None\n""""""\n', '\n\ndef reassign_work_item_owner(work_id, new_owner_id):\n""""""\nReassigns the owner of a work item to a new user\n\nParameters:\n work_id (str): The ID of the work item to be reassigned\n new_owner_id (str): The user ID of the new owner\n\nReturns:\n bool: True if reassignment is successful, False otherwise\n""""""\n', '\n\ndef archive_old_tickets(older_than_date, active_status=False):\n""""""\nArchives tickets that are older than the specified date, optionally filters by active status and returns the IDs\n\nParameters:\n older_than_date (str): A date in the format \'YYYY-MM-DD\', to filter tickets older than this date\n active_status (bool): If True, only archives tickets that are currently active; defaults to False\n\nReturns:\n str: ID of tickets archived\n""""""\n', '\n\ndef generate_progress_report(project_id, report_format=""summary""):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which the progress report is needed\n report_format (str): The format of the report; \'summary\' or \'detailed\'. The default is \'summary\'\n\nReturns:\n str: The generated progress report\n""""""\n', '\n\ndef list_user_skills(user_id):\n""""""\nLists the skills associated with the specified user\n\nParameters:\n user_id (str): The ID of the user whose skills are being queried\n\nReturns:\n list: The skills of the user\n""""""\n', '\n\ndef get_object_history(object_id):\n""""""\nRetrieves the change history of a specified object\n\nParameters:\n object_id (str): The ID of the object for which history is requested\n\nReturns:\n list: A list of changes made to the object\n""""""\n', '\n\ndef calculate_estimate_completion_time(work_id):\n""""""\nCalculates the estimated completion time for the specified work item\n\nParameters:\n work_id (str): The ID of the work item to calculate the estimated time\n\nReturns:\n float: Estimated completion time in hours\n""""""\n', '\n\ndef batch_update_task_status(task_ids, new_status):\n""""""\nUpdates the status of multiple tasks in a batch operation\n\nParameters:\n task_ids (list): A list of task IDs whose status needs updating\n new_status (str): The new status to apply to the tasks\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef get_user_permissions(user_id):\n""""""\nReturns a list of permissions for a specified user ID\n\nParameters:\n user_id (str): The ID of the user whose permissions you want to retrieve\n\nReturns:\n list: User permissions\n""""""\n']","Archive tickets older than ""2022-01-01"" that are active, get the IDs, and generate a summary progress report for each archived ticket.","var_1 = archive_old_tickets(older_than_date=""2022-01-01"", active_status=True)
var_2 = generate_progress_report(project_id=var_1, report_format=""summary"")"
"['\n\ndef merge_duplicate_objects(primary_object_id, duplicate_object_id):\n""""""\nMerges a duplicate object into a primary object\n\nParameters:\n primary_object_id (str): The ID of the primary object\n duplicate_object_id (str): The ID of the duplicate object to be merged\n\nReturns:\n bool: True if the merge was successful, False otherwise\n""""""\n', 'def link_issues_to_project(issue_ids, project_id):\n""""""\nLinks the given issues to the specified project\n\nParameters:\n issue_ids (list): A list of issue IDs to be linked to the project\n project_id (str): The ID of the project to which the issues should be linked\n\nReturns:\n bool: Status of the linking action\n""""""\n', '\n\ndef calculate_estimated_effort(work_id):\n""""""\nCalculates the estimated effort required to complete a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n float: Estimated effort in hours\n""""""\n', '\n\ndef log_user_activity(user_id, activity_description):\n""""""\nLogs a user\'s activity with a description\n\nParameters:\n user_id (str): The ID of the user whose activity is being logged\n activity_description (str): A description of the activity\n\nReturns:\n bool: True if the logging was successful, False otherwise\n""""""\n', '\n\ndef update_contact_information(contact_id, new_phone=None, new_email=None):\n""""""\nUpdates the contact information with new provided phone number or email\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_phone (str): The new phone number for the contact, default is \'None\'\n new_email (str): The new email address for the contact, default is \'None\'\n\nReturns:\n bool: Status of the update operation\n""""""\n', '\n\ndef batch_update_task_status(task_ids, new_status):\n""""""\nUpdates the status of multiple tasks in a batch operation\n\nParameters:\n task_ids (list): A list of task IDs whose status needs updating\n new_status (str): The new status to apply to the tasks\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef calculate_expense_totals(expense_ids):\n""""""\nCalculates the total amount from a list of expense IDs\n\nParameters:\n expense_ids (list): List of expense IDs to calculate the total amount\n\nReturns:\n float: The total amount of the expenses\n""""""\n', '\n\ndef calculate_project_completion_rate(project_id):\n""""""\nCalculates the completion rate of tasks for a given project\n\nParameters:\n project_id (str): The ID of the project to calculate the completion rate for\n\nReturns:\n float: The completion rate as a percentage\n""""""\n', 'def fetch_user_tasks(user_id, include_completed=False):\n""""""\nRetrieves a list of tasks assigned to a user\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be fetched\n include_completed (bool): Whether to include completed tasks in the list\n\nReturns:\n list: List of tasks assigned to the user\n""""""\n', 'def calculate_due_dates(work_item_ids, urgency_level):\n""""""\nCalculates the due dates for given work items based on their urgency\n\nParameters:\n work_item_ids (list): A list of work item IDs for which due dates are required\n urgency_level (str): The urgency level. Allowed values: \'high\', \'medium\', \'low\'\n\nReturns:\n list: Due dates for the specified work items\n""""""\n']","Merge duplicate issues with IDs ""ISSUE-001"" and ""ISSUE-002"" and then calculate the estimated effort for the primary issue ""ISSUE-001"".","var_1 = merge_duplicate_objects(primary_object_id=""ISSUE-001"", duplicate_object_id=""ISSUE-002"")
var_2 = calculate_estimated_effort(work_id=""ISSUE-001"")"
"['\n\ndef merge_duplicate_tasks(primary_task_id, duplicate_task_ids):\n""""""\nMerges duplicate tasks into a primary task\n\nParameters:\n primary_task_id (str): The ID of the primary task which remains after the merge\n duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged\n\nReturns:\n None\n""""""\n', '\n\ndef validate_object_existence(object_id):\n""""""\nChecks if an object with the given ID exists in the system\n\nParameters:\n object_id (str): The ID of the object to check\n\nReturns:\n bool: True if the object exists, otherwise False\n""""""\n', '\n\ndef filter_contacts_by_organization(organization_id, active_only=True):\n""""""\nReturns a list of contacts associated with the specified organization, optionally filtering only active contacts\n\nParameters:\n organization_id (str): The ID of the organization to filter contacts\n active_only (bool): Flag to filter only active contacts, default value \'True\'\n\nReturns:\n list: Contacts associated with the organization\n""""""\n', '\n\ndef notify_user_of_overdue_tasks(user_id):\n""""""\nNotifies a user of any overdue tasks assigned to them\n\nParameters:\n user_id (str): The ID of the user to check for overdue tasks\n\nReturns:\n None\n""""""\n', '\n\ndef filter_records_by_date(record_ids, start_date, end_date):\n""""""\nFilters a list of record IDs based on a date range\n\nParameters:\n record_ids (list): List of record IDs to filter\n start_date (str): Start date for the filtering in \'YYYY-MM-DD\' format\n end_date (str): End date for the filtering in \'YYYY-MM-DD\' format\n\nReturns:\n list: Filtered record IDs\n""""""\n', 'def calculate_due_dates(work_item_ids, urgency_level):\n""""""\nCalculates the due dates for given work items based on their urgency\n\nParameters:\n work_item_ids (list): A list of work item IDs for which due dates are required\n urgency_level (str): The urgency level. Allowed values: \'high\', \'medium\', \'low\'\n\nReturns:\n list: Due dates for the specified work items\n""""""\n', '\n\ndef create_new_ticket(title, description, reported_by):\n""""""\nCreates a new ticket in the system with the given details\n\nParameters:\n title (str): The title of the new ticket\n description (str): A detailed description of the issue or request\n reported_by (str): The ID of the user reporting the ticket\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', '\n\ndef remove_object_from_inventory(object_id):\n""""""\nRemoves an object from the inventory system based on the object ID\n\nParameters:\n object_id (str): The ID of the object to remove from inventory\n\nReturns:\n bool: True if the removal was successful, False otherwise\n""""""\n', '\n\ndef retrieve_archived_documents(archive_id, keyword=None):\n""""""\nRetrieves documents from the archive based on optional keyword\n\nParameters:\n archive_id (str): The ID of the archive from which to retrieve documents\n keyword (str): Optional keyword to filter documents, default is \'None\'\n\nReturns:\n list: A list of documents matching the keyword if provided, otherwise all documents from the archive\n""""""', '\n\ndef get_task_dependencies(task_id):\n""""""\nReturns a list of task IDs that are dependencies for the given task\n\nParameters:\n task_id (str): The ID of the task for which dependencies are requested\n\nReturns:\n list: Dependency task IDs\n""""""\n']","Check if a ticket with ID ""TICKET-001"" exists, and if it does, notify the user with ID ""USR-789"" of any overdue tasks they might have.","var_1 = validate_object_existence(object_id=""TICKET-001"")
var_2 = notify_user_of_overdue_tasks(user_id=""USR-789"")"
"['\n\ndef merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):\n""""""\nMerges duplicate tickets into a primary ticket\n\nParameters:\n primary_ticket_id (str): The ID of the primary ticket that remains\n duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary\n\nReturns:\n None\n""""""\n', '\n\ndef calculate_estimate_completion_time(work_id):\n""""""\nCalculates the estimated completion time for the specified work item\n\nParameters:\n work_id (str): The ID of the work item to calculate the estimated time\n\nReturns:\n float: Estimated completion time in hours\n""""""\n', '\n\ndef create_report_for_sprint(sprint_id, report_type):\n""""""\nGenerates a report for a given sprint\n\nParameters:\n sprint_id (str): The ID of the sprint\n report_type (str): The type of report to be generated\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef remove_users_from_group(user_ids, group_id):\n""""""\nRemoves the specified users from a group\n\nParameters:\n user_ids (list): A list of user IDs to be removed from the group\n group_id (str): The ID of the group from which the users should be removed\n\nReturns:\n bool: Status of the removal\n""""""\n', '\n\ndef get_user_workload(user_id):\n""""""\nDetermines the current workload for a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be determined\n\nReturns:\n int: The number of tasks assigned to the user\n""""""\n', '\n\ndef estimate_ticket_resolution_time(ticket_id):\n""""""\nEstimates the resolution time for a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket to estimate time for\n\nReturns:\n float: Estimated time in hours to resolve the ticket\n""""""\n', '\n\ndef generate_progress_report(project_id):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which to generate the report\n\nReturns:\n str: A string summary of the project\'s progress report\n""""""\n', '\n\ndef log_user_activity(user_id, activity_description):\n""""""\nLogs a user\'s activity with a description\n\nParameters:\n user_id (str): The ID of the user whose activity is being logged\n activity_description (str): A description of the activity\n\nReturns:\n bool: True if the logging was successful, False otherwise\n""""""\n', '\n\ndef check_inventory_availability(part_id, minimum_quantity=1):\n""""""\nChecks if the inventory has the specified part in at least the minimum quantity\n\nParameters:\n part_id (str): The ID of the part to check in inventory\n minimum_quantity (int): The minimum quantity to check for; defaults to 1\n\nReturns:\n bool: True if the minimum quantity is available; otherwise False\n""""""\n', '\n\ndef update_stage_of_work_item(work_item_id, new_stage):\n""""""\nUpdates the stage of a work item\n\nParameters:\n work_item_id (str): The ID of the work item to update\n new_stage (str): The new stage to which the work item should be moved\n\nReturns:\n bool: True if the stage is successfully updated, False otherwise\n""""""']","Estimate the resolution time for ticket ""TICKET-321"", merge any duplicates, and then update the ticket's stage to ""Resolved"".","var_1 = estimate_ticket_resolution_time(ticket_id=""TICKET-321"")
var_2 = get_similar_work_items(work_id=""TICKET-321"")
var_3 = merge_duplicate_tickets(primary_ticket_id=""TICKET-321"", duplicate_ticket_ids=var_2)
var_4 = update_stage_of_work_item(work_item_id=""TICKET-321"", new_stage=""Resolved"")"
"['\n\ndef merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):\n""""""\nMerges duplicate tickets into a primary ticket\n\nParameters:\n primary_ticket_id (str): The ID of the primary ticket that remains\n duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary\n\nReturns:\n None\n""""""\n', '\n\ndef check_object_permission(user_id, object_id):\n""""""\nChecks if a user has permission to access a specific object\n\nParameters:\n user_id (str): The ID of the user\n object_id (str): The ID of the object to check permission for\n\nReturns:\n bool: True if the user has permission, False otherwise\n""""""\n', '\n\ndef calculate_effort_for_task(task_id):\n""""""\nCalculates the effort spent on a specific task by summing subtasks\n\nParameters:\n task_id (str): The ID of the task for which the effort needs to be calculated\n\nReturns:\n float: Total effort spent on the task\n""""""\n', '\n\ndef update_issue_with_solution(issue_id, solution_text):\n""""""\nUpdates an issue with a solution description\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n solution_text (str): The description of the solution to apply to the issue\n\nReturns:\n None\n""""""\n', '\n\ndef calculate_expense_totals(expense_ids):\n""""""\nCalculates the total amount from a list of expense IDs\n\nParameters:\n expense_ids (list): List of expense IDs to calculate the total amount\n\nReturns:\n float: The total amount of the expenses\n""""""\n', 'def assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task is assigned\n\nReturns:\n None\n""""""\n', '\n\ndef check_ticket_status(ticket_id):\n""""""\nChecks the status of a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose status is to be checked\n\nReturns:\n str: The status of the ticket\n""""""\n', '\n\ndef allocate_resources_to_project(project_id, resource_ids):\n""""""\nAllocates specified resources to a project\n\nParameters:\n project_id (str): The ID of the project to which resources are allocated\n resource_ids (list): A list of resource IDs to allocate to the project\n\nReturns:\n bool: True if resources could be allocated, False otherwise\n""""""\n', '\n\ndef calculate_project_completion_rate(project_id):\n""""""\nCalculates the completion rate of tasks for a given project\n\nParameters:\n project_id (str): The ID of the project to calculate the completion rate for\n\nReturns:\n float: The completion rate as a percentage\n""""""\n', '\n\ndef deactivate_user_account(user_id, reason):\n""""""\nDeactivates a user account for a specific reason\n\nParameters:\n user_id (str): The ID of the user whose account is to be deactivated\n reason (str): The reason for deactivating the account\n\nReturns:\n bool: True if the account was successfully deactivated; otherwise False\n""""""\n']","Check if user ""EngineerRanjan"" has permission to access object ""OBJ-9876"", then retrieve and summarize all tickets created by her.","
var_1 = search_object_by_name(query=""EngineerRanjan"")
var_2 = check_object_permission(user_id=var_1, object_id=""OBJ-9876"")
var_3 = works_list(created_by=[var_1], type=[""ticket""])
var_4 = summarize_objects(objects=var_3)"
"['\n\ndef merge_duplicate_work_items(primary_work_id, duplicate_work_ids):\n""""""\nMerges duplicate work items into the primary work item\n\nParameters:\n primary_work_id (str): The ID of the primary work item\n duplicate_work_ids (list): List of IDs of duplicate work items to be merged\n\nReturns:\n bool: True if merge was successful, otherwise False\n""""""\n', '\n\ndef link_related_tickets(ticket_id, related_ids):\n""""""\nLinks tickets that are related to each other\n\nParameters:\n ticket_id (str): The ID of the ticket that will be linked with related tickets\n related_ids (list): List of IDs for tickets that are related to the original ticket\n\nReturns:\n bool: True if the linking is successful, False otherwise\n""""""\n', '\n\ndef calculate_workload_for_user(user_id):\n""""""\nCalculates the total number of open work items assigned to a user\n\nParameters:\n user_id (str): The ID of the user for whom to calculate the workload\n\nReturns:\n int: The total number of open work items\n""""""\n', '\n\ndef list_recent_projects(user_id, days_back=30):\n""""""\nLists all projects a user has worked on in the past number of days\n\nParameters:\n user_id (str): The ID of the user\n days_back (int): The number of past days to look for projects. The default is \'30\'\n\nReturns:\n list: Project IDs that the user has worked on\n""""""\n', '\n\ndef set_user_permission(user_id, permission_level):\n""""""\nSets a specific permission level for a user account\n\nParameters:\n user_id (str): The ID of the user to set permissions for\n permission_level (str): The level of permission to assign e.g., \'read\', \'write\', \'admin\'\n\nReturns:\n bool: True if the permission was set successfully, False otherwise\n""""""\n', '\n\ndef filter_work_by_date_range(start_date, end_date, work_type=None):\n""""""\nFilters work items based on a specific date range\n\nParameters:\n start_date (str): The start date for the filter range (format: YYYY-MM-DD)\n end_date (str): The end date for the filter range (format: YYYY-MM-DD)\n work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task\n\nReturns:\n list: Work items in the specified date range\n""""""\n', '\n\ndef mark_ticket_for_review(ticket_id, reviewer_id):\n""""""\nMarks a ticket for review by a specific user\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked for review\n reviewer_id (str): The ID of the user who should review the ticket\n\nReturns:\n None\n""""""\n', '\n\ndef archive_old_tickets(older_than_date, active_status=False):\n""""""\nArchives tickets that are older than the specified date, optionally filters by active status and returns the IDs\n\nParameters:\n older_than_date (str): A date in the format \'YYYY-MM-DD\', to filter tickets older than this date\n active_status (bool): If True, only archives tickets that are currently active; defaults to False\n\nReturns:\n str: ID of tickets archived\n""""""\n', '\n\ndef get_object_history(object_id):\n""""""\nRetrieves the change history of a specified object\n\nParameters:\n object_id (str): The ID of the object for which history is requested\n\nReturns:\n list: A list of changes made to the object\n""""""\n', 'def assign_ticket_to_user(ticket_id, user_id):\n""""""\nAssigns a specific ticket to a user\n\nParameters:\n ticket_id (str): The ID of the ticket to be assigned\n user_id (str): The ID of the user to whom the ticket will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n']","Calculate the workload for user ""QAAnalyst"" and list all recent projects they have worked on in the past 45 days.","
var_1 = search_object_by_name(query=""QAAnalyst"")
var_2 = calculate_workload_for_user(user_id=var_1)
var_3 = list_recent_projects(user_id=var_1, days_back=45)"
"['\n\ndef remove_object_from_inventory(object_id):\n""""""\nRemoves an object from the inventory system based on the object ID\n\nParameters:\n object_id (str): The ID of the object to remove from inventory\n\nReturns:\n bool: True if the removal was successful, False otherwise\n""""""\n', '\n\ndef check_object_permission(user_id, object_id):\n""""""\nChecks if a user has permission to access a specific object\n\nParameters:\n user_id (str): The ID of the user\n object_id (str): The ID of the object to check permission for\n\nReturns:\n bool: True if the user has permission, False otherwise\n""""""\n', '\n\ndef generate_work_report(work_ids):\n""""""\nGenerates a report for the given work items.\n\nParameters:\n work_ids (list): A list of work item IDs for report generation\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef archive_old_tickets(older_than_date, active_status=False):\n""""""\nArchives tickets that are older than the specified date, optionally filters by active status and returns the IDs\n\nParameters:\n older_than_date (str): A date in the format \'YYYY-MM-DD\', to filter tickets older than this date\n active_status (bool): If True, only archives tickets that are currently active; defaults to False\n\nReturns:\n str: ID of tickets archived\n""""""\n', '\n\ndef delete_objects_by_id(object_ids):\n""""""\nDeletes objects from the system based on their IDs\n\nParameters:\n object_ids (list): List of object IDs to delete\n\nReturns:\n bool: True if objects were successfully deleted, False otherwise\n""""""\n', '\n\ndef merge_duplicate_objects(primary_object_id, duplicate_object_id):\n""""""\nMerges a duplicate object into a primary object\n\nParameters:\n primary_object_id (str): The ID of the primary object\n duplicate_object_id (str): The ID of the duplicate object to be merged\n\nReturns:\n bool: True if the merge was successful, False otherwise\n""""""\n', '\n\ndef generate_report_by_tag(tag_id, include_archived=False):\n""""""\nGenerates a report for all work items associated with the given tag\n\nParameters:\n tag_id (str): The ID of the tag used to filter work items\n include_archived (bool): Include archived work items if set to True\n\nReturns:\n list: Work items associated with the tag\n""""""\n', '\n\ndef create_new_ticket(title, description, reported_by):\n""""""\nCreates a new ticket in the system with the given details\n\nParameters:\n title (str): The title of the new ticket\n description (str): A detailed description of the issue or request\n reported_by (str): The ID of the user reporting the ticket\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', '\n\ndef extract_contact_info(text_id, entity_type):\n""""""\nExtracts contact information from a text source based on a given entity type\n\nParameters:\n text_id (str): The ID of the text source from which to extract contact information\n entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'\n\nReturns:\n list: Extracted contact information\n""""""', '\n\ndef list_all_blocked_tickets():\n""""""\nLists all tickets that are currently blocked\n\nReturns:\n list: Ticket IDs that are currently blocked\n""""""']","Archive tickets older than ""2021-01-01"" that are active, then check if user ""AuditorAmy"" has permission to access the archived ticket with ID ""TICKET-456"".","var_1 = archive_old_tickets(older_than_date=""2021-01-01"", active_status=True)
var_2 = check_object_permission(user_id=""AuditorAmy"", object_id=""TICKET-456"")"
"['\n\ndef remove_object_from_inventory(object_id):\n""""""\nRemoves an object from the inventory system based on the object ID\n\nParameters:\n object_id (str): The ID of the object to remove from inventory\n\nReturns:\n bool: True if the removal was successful, False otherwise\n""""""\n', '\n\ndef get_task_dependencies(task_id):\n""""""\nReturns a list of task IDs that are dependencies for the given task\n\nParameters:\n task_id (str): The ID of the task for which dependencies are requested\n\nReturns:\n list: Dependency task IDs\n""""""\n', '\n\ndef validate_project_completion(project_id):\n""""""\nValidates if all tasks within a project are completed\n\nParameters:\n project_id (str): The ID of the project to validate\n\nReturns:\n bool: True if completed, False otherwise\n""""""\n', '\n\ndef filter_work_by_date_range(start_date, end_date, work_type=None):\n""""""\nFilters work items based on a specific date range\n\nParameters:\n start_date (str): The start date for the filter range (format: YYYY-MM-DD)\n end_date (str): The end date for the filter range (format: YYYY-MM-DD)\n work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task\n\nReturns:\n list: Work items in the specified date range\n""""""\n', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):\n""""""\nMerges multiple notes into a single ticket note\n\nParameters:\n ticket_id (str): The ID of the ticket where the merged note will be added\n note_ids (list): List of note IDs that will be merged into the ticket\n updated_by (str): The ID of the user performing the merge\n\nReturns:\n str: ID of the updated ticket note\n""""""\n', '\n\ndef convert_task_to_subtask(task_id, parent_task_id):\n""""""\nConverts a standalone task into a subtask of another task\n\nParameters:\n task_id (str): The ID of the task to be converted\n parent_task_id (str): The ID of the parent task to which the subtask will be linked\n\nReturns:\n bool: True if the conversion was successful, False otherwise\n""""""\n', '\n\ndef list_user_skills(user_id):\n""""""\nLists the skills associated with the specified user\n\nParameters:\n user_id (str): The ID of the user whose skills are being queried\n\nReturns:\n list: The skills of the user\n""""""\n', '\n\ndef estimate_completion_time(task_id):\n""""""\nEstimates the completion time for a given task\n\nParameters:\n task_id (str): The ID of the task for which to estimate completion time\n\nReturns:\n float: The estimated number of hours to complete the task\n""""""\n', '\n\ndef list_department_members(department_id):\n""""""\nReturns a list of user IDs for all members within a specified department\n\nParameters:\n department_id (str): The ID of the department to list members for\n\nReturns:\n list: User IDs of all the members in the department\n""""""\n', '\n\ndef filter_contacts_by_organization(organization_id, active_only=True):\n""""""\nReturns a list of contacts associated with the specified organization, optionally filtering only active contacts\n\nParameters:\n organization_id (str): The ID of the organization to filter contacts\n active_only (bool): Flag to filter only active contacts, default value \'True\'\n\nReturns:\n list: Contacts associated with the organization\n""""""\n']","Validate if the project with ID ""PROJ-42"" is completed and then summarize all the tasks within this project.","var_1 = validate_project_completion(project_id=""PROJ-42"")
var_2 = works_list(type=[""task""], applies_to_part=[""PROJ-42""])
var_3 = summarize_objects(objects=var_2)"
"['\n\ndef remove_object_from_sprint(object_id, sprint_id):\n""""""\nRemoves a specified object from a sprint and returns the new list\n\nParameters:\n object_id (str): The ID of the object to be removed\n sprint_id (str): The ID of the project from which the object should be removed\n\nReturns:\n list: Returns the updated list of sprint objects\n""""""\n', '\n\ndef archive_completed_work(work_ids):\n""""""\nArchives a list of completed work items\n\nParameters:\n work_ids (list): A list of work item IDs that have been completed and need to be archived\n\nReturns:\n int: The number of work items successfully archived\n""""""\n', '\n\ndef mark_item_as_duplicated(work_item_id, duplicate_of_id):\n""""""\nMarks a work item as a duplicate of another\n\nParameters:\n work_item_id (str): The ID of the work item that is a duplicate\n duplicate_of_id (str): The ID of the work item of which it is a duplicate\n\nReturns:\n bool: True if the item is successfully marked, False otherwise\n""""""\n', '\n\ndef create_report_for_sprint(sprint_id, report_type):\n""""""\nGenerates a report for a given sprint\n\nParameters:\n sprint_id (str): The ID of the sprint\n report_type (str): The type of report to be generated\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef extract_contact_info(text_id, entity_type):\n""""""\nExtracts contact information from a text source based on a given entity type\n\nParameters:\n text_id (str): The ID of the text source from which to extract contact information\n entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'\n\nReturns:\n list: Extracted contact information\n""""""', '\n\ndef find_user_by_email(email):\n""""""\nFinds a user in the system by their email address\n\nParameters:\n email (str): The email address of the user to find\n\nReturns:\n str: ID of the user\n""""""\n', '\n\ndef list_completed_items_by_user(user_id):\n""""""\nLists items that have been completed by the given user\n\nParameters:\n user_id (str): The ID of the user whose completed items are being requested\n\nReturns:\n list: Completed items by the user\n""""""\n', '\n\ndef assign_tasks_to_employee(task_ids, employee_id):\n""""""\nAssigns a list of tasks to the specified employee\n\nParameters:\n task_ids (list): A list of task IDs to be assigned\n employee_id (str): The ID of the employee to whom the tasks will be assigned\n\nReturns:\n bool: True if the assignment was successful, False otherwise\n""""""\n', '\n\ndef list_all_blocked_tickets():\n""""""\nLists all tickets that are currently blocked\n\nReturns:\n list: Ticket IDs that are currently blocked\n""""""', '\n\ndef get_ticket_comments(ticket_id):\n""""""\nRetrieves the comments attached to a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose comments are being retrieved\n\nReturns:\n list: Comments associated with the ticket\n""""""\n']","Extract contact information from text source ""DOC-789"" for individual entities, archive the completed work items related to these contacts, and summarize the archived items.","var_1 = extract_contact_info(text_id=""DOC-789"", entity_type=""individual"")
var_2 = archive_completed_work(work_ids=var_1)
var_3 = summarize_objects(objects=var_2)"
"['\n\ndef remove_user_from_project(user_id, project_id):\n""""""\nRemoves a user from a project\n\nParameters:\n user_id (str): The ID of the user to be removed\n project_id (str): The ID of the project from which the user is to be removed\n\nReturns:\n bool: True if the user is successfully removed, False otherwise\n""""""', '\n\ndef list_user_tasks(user_id, completed=False):\n""""""\nLists all tasks assigned to a user, optionally filtering for completed tasks\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be listed\n completed (bool): If True, only completed tasks are returned\n\nReturns:\n list: A list of tasks assigned to the user\n""""""\n', '\n\ndef validate_user_permissions(user_id, required_permissions):\n""""""\nChecks if the user has the specified permissions\n\nParameters:\n user_id (str): The ID of the user whose permissions need to be checked\n required_permissions (list): A list of permissions to check against the user\'s permissions\n\nReturns:\n bool: True if the user has all the required permissions, False otherwise\n""""""\n', '\n\ndef estimate_task_duration(task_id, complexity_level):\n""""""\nEstimates the duration needed to complete a task based on its complexity level\n\nParameters:\n task_id (str): The ID of the task\n complexity_level (str): The complexity level of the task. Allowed values: \'low\', \'medium\', \'high\'\n\nReturns:\n float: Estimated duration in hours\n""""""\n', '\n\ndef filter_tasks_by_completion(task_ids, completed=True):\n""""""\nFilters the list of tasks by their completion status\n\nParameters:\n task_ids (list): List of task IDs to filter\n completed (bool): The completion status to filter by. Default is \'True\'\n\nReturns:\n list: List of task IDs that match the completion status\n""""""\n', '\n\ndef get_object_history(object_id):\n""""""\nRetrieves the change history of a specified object\n\nParameters:\n object_id (str): The ID of the object for which history is requested\n\nReturns:\n list: A list of changes made to the object\n""""""\n', '\n\ndef validate_object_existence(object_id):\n""""""\nChecks if an object with the given ID exists in the system\n\nParameters:\n object_id (str): The ID of the object to check\n\nReturns:\n bool: True if the object exists, otherwise False\n""""""\n', '\n\ndef estimate_work_hours(work_id):\n""""""\nEstimates the number of hours required to complete a specific work item\n\nParameters:\n work_id (str): The ID of the work item for which the estimation is to be made\n\nReturns:\n float: Estimated hours required to complete the work item\n""""""\n', '\n\ndef list_recent_projects(user_id, days_back=30):\n""""""\nLists all projects a user has worked on in the past number of days\n\nParameters:\n user_id (str): The ID of the user\n days_back (int): The number of past days to look for projects. The default is \'30\'\n\nReturns:\n list: Project IDs that the user has worked on\n""""""\n', '\n\ndef estimate_cost_for_work(work_id, cost_per_hour=100):\n""""""\nEstimates the cost for completing a work item based on a cost per hour rate\n\nParameters:\n work_id (str): The ID of the work item to estimate cost for\n cost_per_hour (float): The cost per hour. Default is \'100\'\n\nReturns:\n float: Estimated cost\n""""""']","Check if user ""QAAnalyst42"" has the required permissions to access sensitive data, then list and summarize all high-severity tickets they created.","var_1 = search_object_by_name(query=""QAAnalyst42"")
var_2 = validate_user_permissions(user_id=var_1, required_permissions=[""access_sensitive_data""])
var_3 = works_list(created_by=[var_1], ticket.severity=[""high""], type=[""ticket""])
var_4 = summarize_objects(objects=var_3)"
"['\n\ndef retrieve_document_by_keyword(keyword):\n""""""\nRetrieves a document ID containing the specified keyword\n\nParameters:\n keyword (str): The keyword to search for in the documents\n\nReturns:\n str: ID of the document containing the keyword\n""""""', '\n\ndef archive_completed_tasks(project_id, completed_since):\n""""""\nArchives tasks that are completed within the given project since the specified time\n\nParameters:\n project_id (str): The ID of the project containing the tasks\n completed_since (str): Archive tasks completed after this timestamp\n\nReturns:\n int: Number of tasks archived\n""""""\n', '\n\ndef calculate_progress(project_id):\n""""""\nCalculates the overall progress of a given project as a percentage\n\nParameters:\n project_id (str): The ID of the project for which progress is being calculated\n\nReturns:\n float: The progress percentage of the project\n""""""\n', '\n\ndef link_related_objects(object_id, related_object_id):\n""""""\nCreates a link between two related objects in the system\n\nParameters:\n object_id (str): The ID of the primary object\n related_object_id (str): The ID of the object to relate to the primary\n\nReturns:\n bool: True if the objects were successfully linked, False otherwise\n""""""\n', '\n\ndef link_related_documents(doc_id, related_doc_ids):\n""""""\nLinks related documents to the given document in the system\n\nParameters:\n doc_id (str): The ID of the document to which related documents should be linked\n related_doc_ids (list): A list of IDs for related documents\n\nReturns:\n bool: True if the operation was successful, False otherwise\n""""""\n', '\n\ndef generate_report_data(report_type, data_set_id):\n""""""\nGenerates report data based on the provided report type and data set\n\nParameters:\n report_type (str): The type of report to generate\n data_set_id (str): The ID of the data set to be used for the report\n\nReturns:\n str: A report data string or ID depending on internal implementation\n""""""\n', '\n\ndef extract_keywords_from_text(text):\n""""""\nGiven a text, extracts and returns the main keywords\n\nParameters:\n text (str): The text from which keywords are to be extracted\n\nReturns:\n list: A list of extracted keywords\n""""""\n', '\n\ndef generate_unique_identifier(prefix, use_timestamp=True):\n""""""\nGenerates a unique identifier with an optional timestamp\n\nParameters:\n prefix (str): A prefix for the identifier\n use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True\n\nReturns:\n str: The generated unique identifier\n""""""\n\n```', '\n\ndef update_issue_with_solution(issue_id, solution_text):\n""""""\nUpdates an issue with a solution description\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n solution_text (str): The description of the solution to apply to the issue\n\nReturns:\n None\n""""""\n', '\n\ndef validate_work_item_status(work_item_id, status_options):\n""""""\nChecks if the given work item has a status that is among the provided options\n\nParameters:\n work_item_id (str): The ID of the work item to check\n status_options (list): A list of valid status options\n\nReturns:\n bool: True if status is valid, False otherwise\n""""""\n']","Retrieve the document ID for the keyword ""SecurityProtocol"" using `retrieve_document_by_keyword`, then extract all keywords from the document's text with `extract_keywords_from_text`, and finally, generate a report using these keywords with `generate_report_data` using the report type ""KeywordAnalysis"".","var_1 = retrieve_document_by_keyword(keyword=""SecurityProtocol"")
var_2 = extract_keywords_from_text(text=var_1)
var_3 = generate_report_data(report_type=""KeywordAnalysis"", data_set_id=var_2)"
"['\n\ndef retrieve_user_workload(user_id):\n""""""\nRetrieves the current workload for the specified user\n\nParameters:\n user_id (str): The ID of the user whose workload is to be retrieved\n\nReturns:\n list: A list containing workload details\n""""""\n', '\n\ndef calculate_budget_allocation(project_id, cost_limit):\n""""""\nCalculates and assigns the budget allocation for a project\n\nParameters:\n project_id (str): The ID of the project for which the budget is calculated\n cost_limit (float): The cost limit for the project\'s budget\n\nReturns:\n float: The amount allocated to the project budget\n""""""\n', '\n\ndef find_user_by_email(email):\n""""""\nFinds a user in the system by their email address\n\nParameters:\n email (str): The email address of the user to find\n\nReturns:\n str: ID of the user\n""""""\n', 'def assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task is assigned\n\nReturns:\n None\n""""""\n', '\n\ndef calculate_cost_of_tasks(task_ids):\n""""""\nCalculates the total cost for a list of task IDs\n\nParameters:\n task_ids (list): A list of task IDs to calculate cost for\n\nReturns:\n float: Total cost of the tasks\n""""""\n', '\n\ndef convert_task_to_subtask(task_id, parent_task_id):\n""""""\nConverts a standalone task into a subtask of another task\n\nParameters:\n task_id (str): The ID of the task to be converted\n parent_task_id (str): The ID of the parent task to which the subtask will be linked\n\nReturns:\n bool: True if the conversion was successful, False otherwise\n""""""\n', '\n\ndef get_team_member_list(team_id):\n""""""\nRetrieves a list of team members for the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: List of team member IDs\n""""""\n', '\n\ndef generate_unique_identifier(prefix, use_timestamp=True):\n""""""\nGenerates a unique identifier with an optional timestamp\n\nParameters:\n prefix (str): A prefix for the identifier\n use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True\n\nReturns:\n str: The generated unique identifier\n""""""\n\n```', '\n\ndef toggle_feature_access(feature_id, user_id, enable_access):\n""""""\nToggles access to a specific feature for a user\n\nParameters:\n feature_id (str): The ID of the feature to toggle access\n user_id (str): The ID of the user whose access will be toggled\n enable_access (bool): \'True\' to enable access, \'False\' to disable\n\nReturns:\n bool: The resulting access status\n""""""\n', '\n\ndef merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):\n""""""\nMerges duplicate tickets into a primary ticket\n\nParameters:\n primary_ticket_id (str): The ID of the primary ticket that remains\n duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary\n\nReturns:\n None\n""""""\n']","Retrieve the workload for user ""Analyst42"", calculate the total cost of their tasks, and summarize the tasks for a weekly review.","var_1 = find_user_by_email(email=""Analyst42"")
var_2 = retrieve_user_workload(user_id=var_1)
var_3 = calculate_cost_of_tasks(task_ids=var_2)
var_4 = summarize_objects(objects=var_2)"
"['\n\ndef toggle_feature_access(feature_id, user_id, enable_access):\n""""""\nToggles access to a specific feature for a user\n\nParameters:\n feature_id (str): The ID of the feature to toggle access\n user_id (str): The ID of the user whose access will be toggled\n enable_access (bool): \'True\' to enable access, \'False\' to disable\n\nReturns:\n bool: The resulting access status\n""""""\n', '\n\ndef list_recent_activities(user_id, limit=10):\n""""""\nLists the most recent activities performed by a user\n\nParameters:\n user_id (str): The ID of the user whose activities are to be listed\n limit (int): The maximum number of recent activities to return\n\nReturns:\n list: Recent activities of the user\n""""""\n', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):\n""""""\nMerges multiple notes into a single ticket note\n\nParameters:\n ticket_id (str): The ID of the ticket where the merged note will be added\n note_ids (list): List of note IDs that will be merged into the ticket\n updated_by (str): The ID of the user performing the merge\n\nReturns:\n str: ID of the updated ticket note\n""""""\n', '\n\ndef reassign_work_item_owner(work_id, new_owner_id):\n""""""\nReassigns the owner of a work item to a new user\n\nParameters:\n work_id (str): The ID of the work item to be reassigned\n new_owner_id (str): The user ID of the new owner\n\nReturns:\n bool: True if reassignment is successful, False otherwise\n""""""\n', '\n\ndef extract_contact_info(text_id, entity_type):\n""""""\nExtracts contact information from a text source based on a given entity type\n\nParameters:\n text_id (str): The ID of the text source from which to extract contact information\n entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'\n\nReturns:\n list: Extracted contact information\n""""""', '\n\ndef remove_work_item_from_sprint(work_id, sprint_id):\n""""""\nRemoves the specified work item from a sprint\n\nParameters:\n work_id (str): The ID of the work item to be removed\n sprint_id (str): The ID of the sprint from which to remove the work item\n\nReturns:\n bool: True if the removal was successful, False otherwise\n""""""\n', '\n\ndef calculate_estimated_effort(work_id):\n""""""\nCalculates the estimated effort required to complete a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n float: Estimated effort in hours\n""""""\n', '\n\ndef check_ticket_status(ticket_id):\n""""""\nChecks the status of a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose status is to be checked\n\nReturns:\n str: The status of the ticket\n""""""\n', '\n\ndef validate_data_integrity(data_point_ids):\n""""""\nChecks the integrity of a list of data points in the system\n\nParameters:\n data_point_ids (list): List of data point IDs to validate\n\nReturns:\n list: Validation results with status (True or False) for each data point\n""""""\n', '\n\ndef set_user_permission(user_id, permission_level):\n""""""\nSets a specific permission level for a user account\n\nParameters:\n user_id (str): The ID of the user to set permissions for\n permission_level (str): The level of permission to assign e.g., \'read\', \'write\', \'admin\'\n\nReturns:\n bool: True if the permission was set successfully, False otherwise\n""""""\n']","Check the status of ticket ""TICKET-001"", then extract and summarize contact information for entity type ""company"" from the ticket's text source.","var_1 = check_ticket_status(ticket_id=""TICKET-001"")
var_2 = extract_contact_info(text_id=""TICKET-001"", entity_type=""company"")
var_3 = summarize_objects(objects=var_2)"
"['\n\ndef update_issue_with_solution(issue_id, solution_text):\n""""""\nUpdates an issue with a solution description\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n solution_text (str): The description of the solution to apply to the issue\n\nReturns:\n None\n""""""\n', '\n\ndef create_new_ticket(title, description, reported_by):\n""""""\nCreates a new ticket in the system with the given details\n\nParameters:\n title (str): The title of the new ticket\n description (str): A detailed description of the issue or request\n reported_by (str): The ID of the user reporting the ticket\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', '\n\ndef link_related_objects(object_id, related_object_id):\n""""""\nCreates a link between two related objects in the system\n\nParameters:\n object_id (str): The ID of the primary object\n related_object_id (str): The ID of the object to relate to the primary\n\nReturns:\n bool: True if the objects were successfully linked, False otherwise\n""""""\n', '\n\ndef list_completed_items_by_user(user_id):\n""""""\nLists items that have been completed by the given user\n\nParameters:\n user_id (str): The ID of the user whose completed items are being requested\n\nReturns:\n list: Completed items by the user\n""""""\n', '\n\ndef estimate_cost_for_work(work_id, cost_per_hour=100):\n""""""\nEstimates the cost for completing a work item based on a cost per hour rate\n\nParameters:\n work_id (str): The ID of the work item to estimate cost for\n cost_per_hour (float): The cost per hour. Default is \'100\'\n\nReturns:\n float: Estimated cost\n""""""', '\n\ndef estimate_time_for_task(task_id, estimation_hours):\n""""""\nUpdates a task with a time estimation\n\nParameters:\n task_id (str): The ID of the task to be updated with an estimated time\n estimation_hours (float): The estimated time in hours to complete the task\n\nReturns:\n None\n""""""\n', '\n\ndef list_completed_tasks_by_user(user_id, project_id=None):\n""""""\nLists all tasks completed by a given user, optionally filtered by project\n\nParameters:\n user_id (str): The ID of the user\n project_id (str, optional): The ID of the project to filter tasks\n\nReturns:\n list: List of task IDs completed by the user\n""""""\n', '\n\ndef validate_work_item_completeness(work_id):\n""""""\nChecks if a work item has all necessary information completed\n\nParameters:\n work_id (str): The ID of the work item to check\n\nReturns:\n bool: True if the work item is complete, False if it lacks information\n""""""\n', '\n\ndef update_work_item_due_date(work_item_id, due_date):\n""""""\nUpdates the due date for the specified work item\n\nParameters:\n work_item_id (str): The ID of the work item to be updated\n due_date (str): The new due date for the work item\n\nReturns:\n None: Indicates that the operation was executed without returning any value\n""""""\n', '\n\ndef fetch_users_from_group(group_id):\n""""""\nRetrieves a list of user IDs that belong to the specified group\n\nParameters:\n group_id (str): The ID of the group\n\nReturns:\n list: User IDs belonging to the group\n""""""\n']","List all completed tasks by user ""TeamLead"", estimate the cost for each task, and then create a summarized report of these tasks.","var_1 = who_am_i()
var_2 = list_completed_tasks_by_user(user_id=""TeamLead"")
var_3 = estimate_cost_for_work(work_id=var_2[0])
var_4 = estimate_cost_for_work(work_id=var_2[1])
var_5 = summarize_objects(objects=var_2)"
"['\n\ndef update_issue_with_solution(issue_id, solution_text):\n""""""\nUpdates an issue with a solution description\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n solution_text (str): The description of the solution to apply to the issue\n\nReturns:\n None\n""""""\n', '\n\ndef validate_work_item_completeness(work_id):\n""""""\nChecks if a work item has all necessary information completed\n\nParameters:\n work_id (str): The ID of the work item to check\n\nReturns:\n bool: True if the work item is complete, False if it lacks information\n""""""\n', '\n\ndef calculate_progress_percentage(project_id):\n""""""\nCalculates the progress percentage of the given project\n\nParameters:\n project_id (str): The ID of the project for which to calculate progress\n\nReturns:\n float: The percentage of project completion\n""""""\n', '\n\ndef extract_keywords_from_text(text):\n""""""\nGiven a text, extracts and returns the main keywords\n\nParameters:\n text (str): The text from which keywords are to be extracted\n\nReturns:\n list: A list of extracted keywords\n""""""\n', 'def assign_ticket_to_user(ticket_id, user_id):\n""""""\nAssigns a specific ticket to a user\n\nParameters:\n ticket_id (str): The ID of the ticket to be assigned\n user_id (str): The ID of the user to whom the ticket will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n', '\n\ndef merge_duplicate_tasks(primary_task_id, duplicate_task_ids):\n""""""\nMerges duplicate tasks into a primary task\n\nParameters:\n primary_task_id (str): The ID of the primary task which remains after the merge\n duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged\n\nReturns:\n None\n""""""\n', '\n\ndef filter_users_by_skill(skill_name, minimum_proficiency=3):\n""""""\nFilters users by a specific skill and its minimum proficiency level\n\nParameters:\n skill_name (str): The name of the skill to filter by\n minimum_proficiency (int): The minimum proficiency level a user should have in the skill\n\nReturns:\n list: A list of user IDs that match the criteria\n""""""\n', '\n\ndef merge_duplicate_work_items(primary_work_id, duplicate_work_ids):\n""""""\nMerges duplicate work items into the primary work item\n\nParameters:\n primary_work_id (str): The ID of the primary work item\n duplicate_work_ids (list): List of IDs of duplicate work items to be merged\n\nReturns:\n bool: True if merge was successful, otherwise False\n""""""\n', '\n\ndef get_team_member_list(team_id):\n""""""\nRetrieves a list of team members for the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: List of team member IDs\n""""""\n', '\n\ndef remove_object_by_id(object_id):\n""""""\nRemoves an object from the system by its ID\n\nParameters:\n object_id (str): The ID of the object to remove\n\nReturns:\n None\n""""""\n']","Assign all complete work items related to part ""ENG-456"" to user ""EngineerEmma"" and calculate the progress percentage of project ""PRJ-789"".","var_1 = works_list(applies_to_part=[""ENG-456""])
var_2 = filter_users_by_skill(skill_name=""EngineerEmma"")
var_3 = get_team_member_list(team_id=var_2)
var_4 = calculate_progress_percentage(project_id=""PRJ-789"")
var_5 = assign_ticket_to_user(ticket_id=var_1, user_id=var_3)"
"['\n\ndef update_object_status(object_id, new_status, changed_by):\n""""""\nUpdates the status of an object and records the user that made the change\n\nParameters:\n object_id (str): The ID of the object for which the status is updated\n new_status (str): The new status for the object\n changed_by (str): The ID of the user who is changing the status\n\nReturns:\n None\n""""""\n', '\n\ndef get_recent_activity_log(user_id, limit=10):\n""""""\nGets the most recent activity log entries for a given user\n\nParameters:\n user_id (str): The ID of the user to get activities for\n limit (int): The maximum number of activity log entries to return\n\nReturns:\n list: Recent activity log entries\n""""""\n', '\n\ndef calculate_workload_for_user(user_id):\n""""""\nCalculates the total number of open work items assigned to a user\n\nParameters:\n user_id (str): The ID of the user for whom to calculate the workload\n\nReturns:\n int: The total number of open work items\n""""""\n', 'def assign_tickets_to_user(ticket_ids, user_id):\n""""""\nAssigns a set of tickets to a specified user\n\nParameters:\n ticket_ids (list): A list of ticket IDs to be assigned\n user_id (str): The ID of the user to whom the tickets will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef validate_data_integrity(data_point_ids):\n""""""\nChecks the integrity of a list of data points in the system\n\nParameters:\n data_point_ids (list): List of data point IDs to validate\n\nReturns:\n list: Validation results with status (True or False) for each data point\n""""""\n', '\n\ndef generate_report_by_tag(tag_id, include_archived=False):\n""""""\nGenerates a report for all work items associated with the given tag\n\nParameters:\n tag_id (str): The ID of the tag used to filter work items\n include_archived (bool): Include archived work items if set to True\n\nReturns:\n list: Work items associated with the tag\n""""""\n', '\n\ndef fetch_ticket_history(ticket_id, history_limit=10):\n""""""\nFetches the history of changes to a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket for which the history is requested\n history_limit (int): Maximum number of history entries to retrieve. The default is \'10\'\n\nReturns:\n list: A list of history records for the ticket\n""""""\n', '\n\ndef remove_object_from_archive(object_id):\n""""""\nRemoves an object from the system archive, making it active again\n\nParameters:\n object_id (str): The ID of the object to be removed from the archive\n\nReturns:\n bool: True if the object was successfully removed, False otherwise\n""""""\n', '\n\ndef calculate_work_item_duration(work_id):\n""""""\nCalculates the total time taken to complete a work item\n\nParameters:\n work_id (str): The ID of the work item for which duration is to be calculated\n\nReturns:\n float: The total duration in hours\n""""""\n', '\n\ndef validate_object_existence(object_id):\n""""""\nChecks if an object with the given ID exists in the system\n\nParameters:\n object_id (str): The ID of the object to check\n\nReturns:\n bool: True if the object exists, otherwise False\n""""""\n']","Calculate the workload for user ""AgentSmith"", fetch their recent activity log, and validate the existence of their assigned work items.","var_1 = search_object_by_name(query=""AgentSmith"")
var_2 = calculate_workload_for_user(user_id=var_1)
var_3 = get_recent_activity_log(user_id=var_1)
var_4 = validate_data_integrity(data_point_ids=var_3)"
"['\n\ndef update_work_item_due_date(work_item_id, due_date):\n""""""\nUpdates the due date for the specified work item\n\nParameters:\n work_item_id (str): The ID of the work item to be updated\n due_date (str): The new due date for the work item\n\nReturns:\n None: Indicates that the operation was executed without returning any value\n""""""\n', '\n\ndef check_object_permission(user_id, object_id):\n""""""\nChecks if a user has permission to access a specific object\n\nParameters:\n user_id (str): The ID of the user\n object_id (str): The ID of the object to check permission for\n\nReturns:\n bool: True if the user has permission, False otherwise\n""""""\n', '\n\ndef retrieve_archived_documents(archive_id, keyword=None):\n""""""\nRetrieves documents from the archive based on optional keyword\n\nParameters:\n archive_id (str): The ID of the archive from which to retrieve documents\n keyword (str): Optional keyword to filter documents, default is \'None\'\n\nReturns:\n list: A list of documents matching the keyword if provided, otherwise all documents from the archive\n""""""', '\n\ndef log_user_activity(user_id, activity_description):\n""""""\nLogs a user\'s activity with a description\n\nParameters:\n user_id (str): The ID of the user whose activity is being logged\n activity_description (str): A description of the activity\n\nReturns:\n bool: True if the logging was successful, False otherwise\n""""""\n', '\n\ndef convert_task_to_subtask(task_id, parent_task_id):\n""""""\nConverts a standalone task into a subtask of another task\n\nParameters:\n task_id (str): The ID of the task to be converted\n parent_task_id (str): The ID of the parent task to which the subtask will be linked\n\nReturns:\n bool: True if the conversion was successful, False otherwise\n""""""\n', '\n\ndef archive_completed_work(work_ids):\n""""""\nArchives a list of completed work items\n\nParameters:\n work_ids (list): A list of work item IDs that have been completed and need to be archived\n\nReturns:\n int: The number of work items successfully archived\n""""""\n', '\n\ndef list_department_members(department_id):\n""""""\nReturns a list of user IDs for all members within a specified department\n\nParameters:\n department_id (str): The ID of the department to list members for\n\nReturns:\n list: User IDs of all the members in the department\n""""""\n', '\n\ndef list_recent_activities(user_id, limit=10):\n""""""\nLists the most recent activities performed by a user\n\nParameters:\n user_id (str): The ID of the user whose activities are to be listed\n limit (int): The maximum number of recent activities to return\n\nReturns:\n list: Recent activities of the user\n""""""\n', '\n\ndef get_recent_activity_log(user_id, limit=10):\n""""""\nGets the most recent activity log entries for a given user\n\nParameters:\n user_id (str): The ID of the user to get activities for\n limit (int): The maximum number of activity log entries to return\n\nReturns:\n list: Recent activity log entries\n""""""\n', '\n\ndef update_contact_information(contact_id, new_phone=None, new_email=None):\n""""""\nUpdates the contact information with new provided phone number or email\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_phone (str): The new phone number for the contact, default is \'None\'\n new_email (str): The new email address for the contact, default is \'None\'\n\nReturns:\n bool: Status of the update operation\n""""""\n']","Check if user ""TeamLead"" has permission to access work item ""TASK-456"", update its due date to ""2023-05-10"", and then log this activity.","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = check_object_permission(user_id=var_1, object_id=""TASK-456"")
var_3 = update_work_item_due_date(work_item_id=""TASK-456"", due_date=""2023-05-10"")
var_4 = log_user_activity(user_id=var_1, activity_description=""Checked permissions and updated due date for TASK-456"")"
"['\n\ndef update_work_item_due_date(work_item_id, due_date):\n""""""\nUpdates the due date for the specified work item\n\nParameters:\n work_item_id (str): The ID of the work item to be updated\n due_date (str): The new due date for the work item\n\nReturns:\n None: Indicates that the operation was executed without returning any value\n""""""\n', '\n\ndef get_work_item_history(work_id):\n""""""\nRetrieves the history of changes for a given work item\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n list: A chronological list of changes made to the work item\n""""""\n', '\n\ndef retrieve_user_permissions(user_id):\n""""""\nRetrieves the list of permissions for the specified user\n\nParameters:\n user_id (str): The ID of the user whose permissions are to be retrieved\n\nReturns:\n list: The list of permissions for the user\n""""""\n', '\n\ndef get_user_workload(user_id):\n""""""\nDetermines the current workload for a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be determined\n\nReturns:\n int: The number of tasks assigned to the user\n""""""\n', 'def calculate_due_dates(work_item_ids, urgency_level):\n""""""\nCalculates the due dates for given work items based on their urgency\n\nParameters:\n work_item_ids (list): A list of work item IDs for which due dates are required\n urgency_level (str): The urgency level. Allowed values: \'high\', \'medium\', \'low\'\n\nReturns:\n list: Due dates for the specified work items\n""""""\n', '\n\ndef update_stage_of_work_item(work_item_id, new_stage):\n""""""\nUpdates the stage of a work item\n\nParameters:\n work_item_id (str): The ID of the work item to update\n new_stage (str): The new stage to which the work item should be moved\n\nReturns:\n bool: True if the stage is successfully updated, False otherwise\n""""""', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):\n""""""\nMerges multiple notes into a single ticket note\n\nParameters:\n ticket_id (str): The ID of the ticket where the merged note will be added\n note_ids (list): List of note IDs that will be merged into the ticket\n updated_by (str): The ID of the user performing the merge\n\nReturns:\n str: ID of the updated ticket note\n""""""\n', '\n\ndef calculate_expense_totals(expense_ids):\n""""""\nCalculates the total amount from a list of expense IDs\n\nParameters:\n expense_ids (list): List of expense IDs to calculate the total amount\n\nReturns:\n float: The total amount of the expenses\n""""""\n', '\n\ndef extract_contact_info(text_id, entity_type):\n""""""\nExtracts contact information from a text source based on a given entity type\n\nParameters:\n text_id (str): The ID of the text source from which to extract contact information\n entity_type (str): The type of entity to extract info from. Allowed values: \'individual\', \'company\'\n\nReturns:\n list: Extracted contact information\n""""""', '\n\ndef assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task will be assigned\n\nReturns:\n bool: True if assignment was successful, otherwise False\n""""""\n']",Update the due date for all high-severity tickets to next Monday and retrieve their change history.,"var_1 = works_list(type=[""ticket""], ticket.severity=[""high""])
var_2 = calculate_due_dates(work_item_ids=var_1, urgency_level=""high"")
var_3 = update_work_item_due_date(work_item_id=var_1[0], due_date=var_2[0])
var_4 = update_work_item_due_date(work_item_id=var_1[1], due_date=var_2[1])
var_5 = update_work_item_due_date(work_item_id=var_1[2], due_date=var_2[2])
var_6 = get_work_item_history(work_id=var_1[0])
var_7 = get_work_item_history(work_id=var_1[1])
var_8 = get_work_item_history(work_id=var_1[2])"
"['\n\ndef update_work_item_status(work_item_id, new_status):\n""""""\nUpdates the status of a given work item\n\nParameters:\n work_item_id (str): The ID of the work item to be updated\n new_status (str): The new status to set for the work item\n""""""\n', '\n\ndef validate_data_integrity(data_point_ids):\n""""""\nChecks the integrity of a list of data points in the system\n\nParameters:\n data_point_ids (list): List of data point IDs to validate\n\nReturns:\n list: Validation results with status (True or False) for each data point\n""""""\n', '\n\ndef generate_report_from_template(report_template_id, data_source_id):\n""""""\nGenerates a report based on a specified template and data source\n\nParameters:\n report_template_id (str): The ID of the report template to use\n data_source_id (str): The ID of the data source\n\nReturns:\n str: Generated report\n""""""\n', '\n\ndef mark_task_as_completed(task_id):\n""""""\nMarks a task as completed in the system.\n\nParameters:\n task_id (str): The ID of the task to be marked as complete\n\nReturns:\n bool: True if marked successfully, False otherwise\n""""""\n', '\n\ndef generate_report(report_type, subject_id, include_summary=True):\n""""""\nGenerates a report of a specific type for a subject in the system\n\nParameters:\n report_type (str): The type of report to generate\n subject_id (str): The ID of the subject for the report\n include_summary (bool): Whether to include a summary in the report; defaults to True\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef reassign_work_item_owner(work_id, new_owner_id):\n""""""\nReassigns the owner of a work item to a new user\n\nParameters:\n work_id (str): The ID of the work item to be reassigned\n new_owner_id (str): The user ID of the new owner\n\nReturns:\n bool: True if reassignment is successful, False otherwise\n""""""\n', '\n\ndef set_user_permission(user_id, permission_level):\n""""""\nSets a specific permission level for a user account\n\nParameters:\n user_id (str): The ID of the user to set permissions for\n permission_level (str): The level of permission to assign e.g., \'read\', \'write\', \'admin\'\n\nReturns:\n bool: True if the permission was set successfully, False otherwise\n""""""\n', '\n\ndef deactivate_user_account(user_id, reason):\n""""""\nDeactivates a user account for a specific reason\n\nParameters:\n user_id (str): The ID of the user whose account is to be deactivated\n reason (str): The reason for deactivating the account\n\nReturns:\n bool: True if the account was successfully deactivated; otherwise False\n""""""\n', '\n\ndef filter_objects_by_type(object_ids, object_type):\n""""""\nFilters a list of objects based on their type\n\nParameters:\n object_ids (list): A list of object IDs to filter\n object_type (str): The type of objects to filter for\n\nReturns:\n list: Filtered object IDs matching the specified type\n""""""\n', '\n\ndef assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task will be assigned\n\nReturns:\n bool: True if assignment was successful, otherwise False\n""""""\n']","Identify work items with severity ""high"" and reassign their ownership to user ""TechLead"", then update their status to ""In Progress"".","var_1 = works_list(ticket.severity=[""high""])
var_2 = search_object_by_name(query=""TechLead"")
var_3 = reassign_work_item_owner(work_id=var_1[0], new_owner_id=var_2)
var_4 = update_work_item_status(work_item_id=var_1[0], new_status=""In Progress"")"
"['\n\ndef validate_data_consistency(data_id, schema_id):\n""""""\nValidates if data conforms to a specified schema for consistency\n\nParameters:\n data_id (str): The ID of the data to be validated\n schema_id (str): The ID of the schema to validate the data against\n\nReturns:\n bool: True if data is consistent, False otherwise\n""""""\n', '\n\ndef get_user_workload(user_id):\n""""""\nDetermines the current workload for a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be determined\n\nReturns:\n int: The number of tasks assigned to the user\n""""""\n', '\n\ndef mark_ticket_as_resolved(ticket_id):\n""""""\nMarks a ticket as resolved in the system\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked as resolved\n\nReturns:\n bool: True if the ticket was marked as resolved, False otherwise\n""""""\n', '\ndef update_user_ID(user_id, status):\n""""""\nUpdates the status of a user account in the system and returns the updated id\n\nParameters:\n user_id (str): The ID of the user whose status is to be updated\n status (str): The new status to apply to the user account\n\nReturns:\n str: updated User Id\n""""""\n', '\n\ndef calculate_effort_for_task(task_id):\n""""""\nCalculates the effort spent on a specific task by summing subtasks\n\nParameters:\n task_id (str): The ID of the task for which the effort needs to be calculated\n\nReturns:\n float: Total effort spent on the task\n""""""\n', '\n\ndef update_contact_info(contact_id, new_email=None, new_phone=None):\n""""""\nUpdates the contact information for a given contact ID with new email and/or phone\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_email (str, optional): The new email address; defaults to None\n new_phone (str, optional): The new phone number; defaults to None\n\nReturns:\n bool: True if the update was successful; otherwise False\n""""""\n', '\n\ndef validate_data_integrity(data_point_ids):\n""""""\nChecks the integrity of a list of data points in the system\n\nParameters:\n data_point_ids (list): List of data point IDs to validate\n\nReturns:\n list: Validation results with status (True or False) for each data point\n""""""\n', '\n\ndef get_task_dependencies(task_id):\n""""""\nReturns a list of task IDs that are dependencies for the given task\n\nParameters:\n task_id (str): The ID of the task for which dependencies are requested\n\nReturns:\n list: Dependency task IDs\n""""""\n', '\n\ndef get_user_permissions(user_id):\n""""""\nReturns a list of permissions for a specified user ID\n\nParameters:\n user_id (str): The ID of the user whose permissions you want to retrieve\n\nReturns:\n list: User permissions\n""""""\n', '\n\ndef remove_object_from_archive(object_id):\n""""""\nRemoves an object from the system archive, making it active again\n\nParameters:\n object_id (str): The ID of the object to be removed from the archive\n\nReturns:\n bool: True if the object was successfully removed, False otherwise\n""""""\n']","Validate the data consistency of user ""QAAnalyst""'s workload and summarize all tickets they own with high severity.","var_1 = search_object_by_name(query=""QAAnalyst"")
var_2 = get_user_workload(user_id=var_1)
var_3 = validate_data_consistency(data_id=var_2, schema_id=""workload_schema"")
var_4 = works_list(type=[""ticket""], owned_by=[var_1], ticket.severity=[""high""])
var_5 = summarize_objects(objects=var_4)"
"['\n\ndef validate_data_integrity(data_point_ids):\n""""""\nChecks the integrity of a list of data points in the system\n\nParameters:\n data_point_ids (list): List of data point IDs to validate\n\nReturns:\n list: Validation results with status (True or False) for each data point\n""""""\n', '\n\ndef estimate_completion_time(task_id):\n""""""\nEstimates the completion time for a given task\n\nParameters:\n task_id (str): The ID of the task for which to estimate completion time\n\nReturns:\n float: The estimated number of hours to complete the task\n""""""\n', '\n\ndef merge_duplicate_tasks(primary_task_id, duplicate_task_ids):\n""""""\nMerges duplicate tasks into a primary task\n\nParameters:\n primary_task_id (str): The ID of the primary task which remains after the merge\n duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged\n\nReturns:\n None\n""""""\n', '\n\ndef get_project_timeline(project_id):\n""""""\nRetrieves the timeline and key milestones of a project\n\nParameters:\n project_id (str): The ID of the project for which the timeline is requested\n\nReturns:\n list: Key milestones and dates for the project timeline\n""""""\n', '\n\ndef calculate_expense_totals(expense_ids):\n""""""\nCalculates the total amount from a list of expense IDs\n\nParameters:\n expense_ids (list): List of expense IDs to calculate the total amount\n\nReturns:\n float: The total amount of the expenses\n""""""\n', '\n\ndef get_recent_activity_log(user_id, limit=10):\n""""""\nGets the most recent activity log entries for a given user\n\nParameters:\n user_id (str): The ID of the user to get activities for\n limit (int): The maximum number of activity log entries to return\n\nReturns:\n list: Recent activity log entries\n""""""\n', '\n\ndef list_all_blocked_tickets():\n""""""\nLists all tickets that are currently blocked\n\nReturns:\n list: Ticket IDs that are currently blocked\n""""""', '\n\ndef check_inventory_availability(part_id, minimum_quantity=1):\n""""""\nChecks if the inventory has the specified part in at least the minimum quantity\n\nParameters:\n part_id (str): The ID of the part to check in inventory\n minimum_quantity (int): The minimum quantity to check for; defaults to 1\n\nReturns:\n bool: True if the minimum quantity is available; otherwise False\n""""""\n', '\n\ndef deactivate_user_account(user_id, reason):\n""""""\nDeactivates a user account for a specific reason\n\nParameters:\n user_id (str): The ID of the user whose account is to be deactivated\n reason (str): The reason for deactivating the account\n\nReturns:\n bool: True if the account was successfully deactivated; otherwise False\n""""""\n', 'def assign_ticket_to_user(ticket_id, user_id):\n""""""\nAssigns a specific ticket to a user\n\nParameters:\n ticket_id (str): The ID of the ticket to be assigned\n user_id (str): The ID of the user to whom the ticket will be assigned\n\nReturns:\n bool: True if the assignment is successful, False otherwise\n""""""\n']","Check the data integrity of expense IDs ""EXP-321"", ""EXP-654"", and ""EXP-987"", then calculate the total expense amount.","var_1 = validate_data_integrity(data_point_ids=[""EXP-321"", ""EXP-654"", ""EXP-987""])
var_2 = calculate_expense_totals(expense_ids=[""EXP-321"", ""EXP-654"", ""EXP-987""])"
"['\n\ndef validate_object_existence(object_id):\n""""""\nChecks if an object with the given ID exists in the system\n\nParameters:\n object_id (str): The ID of the object to check\n\nReturns:\n bool: True if the object exists, otherwise False\n""""""\n', '\n\ndef assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task will be assigned\n\nReturns:\n bool: True if assignment was successful, otherwise False\n""""""\n', '\n\ndef archive_completed_tasks(project_id, completed_since):\n""""""\nArchives tasks that are completed within the given project since the specified time\n\nParameters:\n project_id (str): The ID of the project containing the tasks\n completed_since (str): Archive tasks completed after this timestamp\n\nReturns:\n int: Number of tasks archived\n""""""\n', '\n\ndef update_work_item_status(work_item_id, new_status):\n""""""\nUpdates the status of a given work item\n\nParameters:\n work_item_id (str): The ID of the work item to be updated\n new_status (str): The new status to set for the work item\n""""""\n', '\n\ndef find_work_items_by_tag(work_type, tag):\n""""""\nFinds work items of a certain type with a given tag\n\nParameters:\n work_type (str): The type of the work items to filter by\n tag (str): The tag to filter the work items\n\nReturns:\n list: List of work items with the given tag\n""""""\n', '\n\ndef estimate_time_for_task(task_id, estimation_hours):\n""""""\nUpdates a task with a time estimation\n\nParameters:\n task_id (str): The ID of the task to be updated with an estimated time\n estimation_hours (float): The estimated time in hours to complete the task\n\nReturns:\n None\n""""""\n', '\n\ndef get_user_workload(user_id):\n""""""\nDetermines the current workload for a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be determined\n\nReturns:\n int: The number of tasks assigned to the user\n""""""\n', '\n\ndef estimate_cost_for_work(work_id, cost_per_hour=100):\n""""""\nEstimates the cost for completing a work item based on a cost per hour rate\n\nParameters:\n work_id (str): The ID of the work item to estimate cost for\n cost_per_hour (float): The cost per hour. Default is \'100\'\n\nReturns:\n float: Estimated cost\n""""""', 'def filter_work_by_date_range(start_date, end_date, work_type=None):\n""""""\nFilters work items based on a given date range.\n\nParameters:\n start_date (str): The start date of the desired date range\n end_date (str): The end date of the desired date range\n work_type (list): Optional filter for type of work\n\nReturns:\n list: Work items within the specified date range\n""""""\n', '\n\ndef calculate_user_workload(user_id):\n""""""\nCalculates the workload of a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be calculated\n\nReturns:\n float: The calculated workload value\n""""""\n']","Check if a work item with ID ""TASK-456"" exists, estimate the time for completion, and then assign it to user ""EngineerEmma"".","var_1 = validate_object_existence(object_id=""TASK-456"")
var_2 = estimate_time_for_task(task_id=""TASK-456"", estimation_hours=5)
var_3 = search_object_by_name(query=""EngineerEmma"")
var_4 = assign_task_to_user(task_id=""TASK-456"", user_id=var_3)"
"['\n\ndef validate_object_existence(object_id):\n""""""\nChecks if an object with the given ID exists in the system\n\nParameters:\n object_id (str): The ID of the object to check\n\nReturns:\n bool: True if the object exists, otherwise False\n""""""\n', '\n\ndef batch_update_user_roles(user_ids, new_role):\n""""""\nUpdates the roles for a batch of users to a new role\n\nParameters:\n user_ids (list): List of user IDs whose roles should be updated\n new_role (str): The new role to assign\n\nReturns:\n int: Number of users successfully updated\n""""""\n', '\n\ndef calculate_budget_remaining(budget_id):\n""""""\nCalculates the remaining budget for a given budget ID\n\nParameters:\n budget_id (str): The ID of the budget to calculate\n\nReturns:\n float: The amount of remaining budget\n""""""\n', '\n\ndef validate_data_consistency(data_id, schema_id):\n""""""\nValidates if data conforms to a specified schema for consistency\n\nParameters:\n data_id (str): The ID of the data to be validated\n schema_id (str): The ID of the schema to validate the data against\n\nReturns:\n bool: True if data is consistent, False otherwise\n""""""\n', '\n\ndef update_contact_information(contact_id, new_phone=None, new_email=None):\n""""""\nUpdates the contact information with new provided phone number or email\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_phone (str): The new phone number for the contact, default is \'None\'\n new_email (str): The new email address for the contact, default is \'None\'\n\nReturns:\n bool: Status of the update operation\n""""""\n', '\n\ndef calculate_cost_of_tasks(task_ids):\n""""""\nCalculates the total cost for a list of task IDs\n\nParameters:\n task_ids (list): A list of task IDs to calculate cost for\n\nReturns:\n float: Total cost of the tasks\n""""""\n', '\n\ndef mark_task_as_completed(task_id):\n""""""\nMarks a task as completed in the system.\n\nParameters:\n task_id (str): The ID of the task to be marked as complete\n\nReturns:\n bool: True if marked successfully, False otherwise\n""""""\n', '\n\ndef remove_object_from_inventory(object_id):\n""""""\nRemoves an object from the inventory system based on the object ID\n\nParameters:\n object_id (str): The ID of the object to remove from inventory\n\nReturns:\n bool: True if the removal was successful, False otherwise\n""""""\n', '\n\ndef generate_progress_report(project_id, report_format=""summary""):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which the progress report is needed\n report_format (str): The format of the report; \'summary\' or \'detailed\'. The default is \'summary\'\n\nReturns:\n str: The generated progress report\n""""""\n', '\n\ndef update_contact_info(contact_id, new_email=None, new_phone=None):\n""""""\nUpdates the contact information for a given contact ID with new email and/or phone\n\nParameters:\n contact_id (str): The ID of the contact to update\n new_email (str, optional): The new email address; defaults to None\n new_phone (str, optional): The new phone number; defaults to None\n\nReturns:\n bool: True if the update was successful; otherwise False\n""""""\n']","Check if the object with ID ""OBJ-5467"" exists, calculate the remaining budget for budget ID ""BUD-9910"", and then retrieve and summarize all tickets created by user ""BudgetManager"".","var_1 = validate_object_existence(object_id=""OBJ-5467"")
var_2 = calculate_budget_remaining(budget_id=""BUD-9910"")
var_3 = search_object_by_name(query=""BudgetManager"")
var_4 = works_list(created_by=[var_3], type=[""ticket""])
var_5 = summarize_objects(objects=var_4)"
"['\n\ndef validate_object_existence(object_id):\n""""""\nChecks if an object with the given ID exists in the system\n\nParameters:\n object_id (str): The ID of the object to check\n\nReturns:\n bool: True if the object exists, otherwise False\n""""""\n', '\n\ndef generate_report_data(report_type, data_set_id):\n""""""\nGenerates report data based on the provided report type and data set\n\nParameters:\n report_type (str): The type of report to generate\n data_set_id (str): The ID of the data set to be used for the report\n\nReturns:\n str: A report data string or ID depending on internal implementation\n""""""\n', '\n\ndef convert_task_to_ticket(task_id):\n""""""\nConverts a task into a ticket in the system\n\nParameters:\n task_id (str): The ID of the task to be converted\n\nReturns:\n str: The ID of the newly created ticket\n""""""\n', '\n\ndef check_availability_of_part(part_id):\n""""""\nChecks if a specific part is available in inventory\n\nParameters:\n part_id (str): The ID of the part to check for availability\n\nReturns:\n bool: True if the part is available, False otherwise\n""""""\n', '\n\ndef delete_objects_by_id(object_ids):\n""""""\nDeletes objects from the system based on their IDs\n\nParameters:\n object_ids (list): List of object IDs to delete\n\nReturns:\n bool: True if objects were successfully deleted, False otherwise\n""""""\n', '\n\ndef convert_task_to_subtask(task_id, parent_task_id):\n""""""\nConverts a standalone task into a subtask of another task\n\nParameters:\n task_id (str): The ID of the task to be converted\n parent_task_id (str): The ID of the parent task to which the subtask will be linked\n\nReturns:\n bool: True if the conversion was successful, False otherwise\n""""""\n', 'def fetch_user_tasks(user_id, include_completed=False):\n""""""\nRetrieves a list of tasks assigned to a user\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be fetched\n include_completed (bool): Whether to include completed tasks in the list\n\nReturns:\n list: List of tasks assigned to the user\n""""""\n', '\n\ndef get_object_history(object_id):\n""""""\nRetrieves the change history of a specified object\n\nParameters:\n object_id (str): The ID of the object for which history is requested\n\nReturns:\n list: A list of changes made to the object\n""""""\n', '\n\ndef update_work_item_due_date(work_item_id, due_date):\n""""""\nUpdates the due date for the specified work item\n\nParameters:\n work_item_id (str): The ID of the work item to be updated\n due_date (str): The new due date for the work item\n\nReturns:\n None: Indicates that the operation was executed without returning any value\n""""""\n', 'def link_issues_to_project(issue_ids, project_id):\n""""""\nLinks the given issues to the specified project\n\nParameters:\n issue_ids (list): A list of issue IDs to be linked to the project\n project_id (str): The ID of the project to which the issues should be linked\n\nReturns:\n bool: Status of the linking action\n""""""\n']","Check if the user ""QAAnalyst"" exists in the system, fetch all tasks assigned to them, and prioritize these tasks.","var_1 = search_object_by_name(query=""QAAnalyst"")
var_2 = fetch_user_tasks(user_id=var_1)
var_3 = prioritize_objects(objects=var_2)"
"['\n\ndef validate_work_item_completeness(work_id):\n""""""\nChecks if a work item has all necessary information completed\n\nParameters:\n work_id (str): The ID of the work item to check\n\nReturns:\n bool: True if the work item is complete, False if it lacks information\n""""""\n', '\n\ndef log_system_event(event_type, description, user_id=None):\n""""""\nLogs an event in the system with an optional user ID associated with it\n\nParameters:\n event_type (str): The type of event to log\n description (str): A brief description of the event\n user_id (str): The ID of the user involved in the event, if applicable\n\nReturns:\n str: The ID of the logged event\n""""""\n', '\n\ndef generate_progress_report(project_id, report_format=""summary""):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which the progress report is needed\n report_format (str): The format of the report; \'summary\' or \'detailed\'. The default is \'summary\'\n\nReturns:\n str: The generated progress report\n""""""\n', '\n\ndef estimate_completion_time(task_id):\n""""""\nEstimates the completion time for a given task\n\nParameters:\n task_id (str): The ID of the task for which to estimate completion time\n\nReturns:\n float: The estimated number of hours to complete the task\n""""""\n', '\n\ndef assign_task_to_user(task_id, user_id):\n""""""\nAssigns a specific task to a user\n\nParameters:\n task_id (str): The ID of the task to be assigned\n user_id (str): The ID of the user to whom the task will be assigned\n\nReturns:\n bool: True if assignment was successful, otherwise False\n""""""\n', '\n\ndef list_department_members(department_id):\n""""""\nReturns a list of user IDs for all members within a specified department\n\nParameters:\n department_id (str): The ID of the department to list members for\n\nReturns:\n list: User IDs of all the members in the department\n""""""\n', '\n\ndef calculate_user_workload(user_id):\n""""""\nCalculates the workload of a user based on assigned tasks\n\nParameters:\n user_id (str): The ID of the user whose workload is to be calculated\n\nReturns:\n float: The calculated workload value\n""""""\n', '\n\ndef check_inventory_availability(part_id, minimum_quantity=1):\n""""""\nChecks if the inventory has the specified part in at least the minimum quantity\n\nParameters:\n part_id (str): The ID of the part to check in inventory\n minimum_quantity (int): The minimum quantity to check for; defaults to 1\n\nReturns:\n bool: True if the minimum quantity is available; otherwise False\n""""""\n', '\n\ndef allocate_resources_to_project(project_id, resource_ids):\n""""""\nAllocates specified resources to a project\n\nParameters:\n project_id (str): The ID of the project to which resources are allocated\n resource_ids (list): A list of resource IDs to allocate to the project\n\nReturns:\n bool: True if resources could be allocated, False otherwise\n""""""\n', '\n\ndef generate_work_report(work_ids):\n""""""\nGenerates a report for the given work items.\n\nParameters:\n work_ids (list): A list of work item IDs for report generation\n\nReturns:\n str: The ID of the generated report\n""""""\n']","Check if work item ""TASK-789"" is complete and generate a detailed progress report for the project associated with this work item.","var_1 = validate_work_item_completeness(work_id=""TASK-789"")
var_2 = search_object_by_name(query=""TASK-789"")
var_3 = generate_progress_report(project_id=var_2, report_format=""detailed"")"
"['def assign_tickets_to_user(ticket_ids, user_id):\n""""""\nAssigns a set of tickets to a specified user\n\nParameters:\n ticket_ids (list): A list of ticket IDs to be assigned\n user_id (str): The ID of the user to whom the tickets will be assigned\n\nReturns:\n None\n""""""\n', '\n\ndef generate_project_summary(project_id):\n""""""\nGenerates a summary report for the specified project\n\nParameters:\n project_id (str): The ID of the project to summarize\n\nReturns:\n str: A summary report of the project\n""""""\n', '\n\ndef get_task_dependencies(task_id):\n""""""\nReturns a list of task IDs that are dependencies for the given task\n\nParameters:\n task_id (str): The ID of the task for which dependencies are requested\n\nReturns:\n list: Dependency task IDs\n""""""\n', '\n\ndef update_stage_of_work_item(work_item_id, new_stage):\n""""""\nUpdates the stage of a work item\n\nParameters:\n work_item_id (str): The ID of the work item to update\n new_stage (str): The new stage to which the work item should be moved\n\nReturns:\n bool: True if the stage is successfully updated, False otherwise\n""""""', '\n\ndef update_work_item_due_date(work_item_id, due_date):\n""""""\nUpdates the due date for the specified work item\n\nParameters:\n work_item_id (str): The ID of the work item to be updated\n due_date (str): The new due date for the work item\n\nReturns:\n None: Indicates that the operation was executed without returning any value\n""""""\n', '\n\ndef calculate_project_completion_rate(project_id):\n""""""\nCalculates the completion rate of tasks for a given project\n\nParameters:\n project_id (str): The ID of the project to calculate the completion rate for\n\nReturns:\n float: The completion rate as a percentage\n""""""\n', '\n\ndef filter_records_by_date(record_ids, start_date, end_date):\n""""""\nFilters a list of record IDs based on a date range\n\nParameters:\n record_ids (list): List of record IDs to filter\n start_date (str): Start date for the filtering in \'YYYY-MM-DD\' format\n end_date (str): End date for the filtering in \'YYYY-MM-DD\' format\n\nReturns:\n list: Filtered record IDs\n""""""\n', '\n\ndef calculate_progress(project_id):\n""""""\nCalculates the overall progress of a given project as a percentage\n\nParameters:\n project_id (str): The ID of the project for which progress is being calculated\n\nReturns:\n float: The progress percentage of the project\n""""""\n', '\n\ndef retrieve_archived_documents(archive_id, keyword=None):\n""""""\nRetrieves documents from the archive based on optional keyword\n\nParameters:\n archive_id (str): The ID of the archive from which to retrieve documents\n keyword (str): Optional keyword to filter documents, default is \'None\'\n\nReturns:\n list: A list of documents matching the keyword if provided, otherwise all documents from the archive\n""""""', '\n\ndef set_user_permission(user_id, permission_level):\n""""""\nSets a specific permission level for a user account\n\nParameters:\n user_id (str): The ID of the user to set permissions for\n permission_level (str): The level of permission to assign e.g., \'read\', \'write\', \'admin\'\n\nReturns:\n bool: True if the permission was set successfully, False otherwise\n""""""\n']","Assign tickets with severity ""high"" to user ""TechLead"" and calculate the project completion rate for project ""PRJ-456"".","var_1 = search_object_by_name(query=""TechLead"")
var_2 = works_list(type=[""ticket""], ticket.severity=[""high""])
var_3 = assign_tickets_to_user(ticket_ids=var_2, user_id=var_1)
var_4 = calculate_project_completion_rate(project_id=""PRJ-456"")"
"['def fetch_user_tasks(user_id, include_completed=False):\n""""""\nRetrieves a list of tasks assigned to a user\n\nParameters:\n user_id (str): The ID of the user whose tasks are to be fetched\n include_completed (bool): Whether to include completed tasks in the list\n\nReturns:\n list: List of tasks assigned to the user\n""""""\n', '\n\ndef toggle_feature_access(feature_id, user_id, enable_access):\n""""""\nToggles access to a specific feature for a user\n\nParameters:\n feature_id (str): The ID of the feature to toggle access\n user_id (str): The ID of the user whose access will be toggled\n enable_access (bool): \'True\' to enable access, \'False\' to disable\n\nReturns:\n bool: The resulting access status\n""""""\n', '\n\ndef retrieve_document_by_keyword(keyword):\n""""""\nRetrieves a document ID containing the specified keyword\n\nParameters:\n keyword (str): The keyword to search for in the documents\n\nReturns:\n str: ID of the document containing the keyword\n""""""', '\n\ndef get_project_timeline(project_id):\n""""""\nRetrieves the timeline and key milestones of a project\n\nParameters:\n project_id (str): The ID of the project for which the timeline is requested\n\nReturns:\n list: Key milestones and dates for the project timeline\n""""""\n', '\n\ndef generate_report_from_data(dataset_id, report_type=""summary""):\n""""""\nGenerates a specific type of report from a dataset\n\nParameters:\n dataset_id (str): The ID of the dataset from which to generate the report\n report_type (str): The type of report to generate, default is \'summary\'\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef update_object_status(object_id, new_status, changed_by):\n""""""\nUpdates the status of an object and records the user that made the change\n\nParameters:\n object_id (str): The ID of the object for which the status is updated\n new_status (str): The new status for the object\n changed_by (str): The ID of the user who is changing the status\n\nReturns:\n None\n""""""\n', '\n\ndef calculate_expense_totals(expense_ids):\n""""""\nCalculates the total amount from a list of expense IDs\n\nParameters:\n expense_ids (list): List of expense IDs to calculate the total amount\n\nReturns:\n float: The total amount of the expenses\n""""""\n', '\n\ndef delete_objects_by_id(object_ids):\n""""""\nDeletes objects from the system based on their IDs\n\nParameters:\n object_ids (list): List of object IDs to delete\n\nReturns:\n bool: True if objects were successfully deleted, False otherwise\n""""""\n', '\n\ndef get_task_dependencies(task_id):\n""""""\nReturns a list of task IDs that are dependencies for the given task\n\nParameters:\n task_id (str): The ID of the task for which dependencies are requested\n\nReturns:\n list: Dependency task IDs\n""""""\n', '\n\ndef update_ticket_status(ticket_id, new_status):\n""""""\nUpdates the status of a given ticket\n\nParameters:\n ticket_id (str): The ID of the ticket to be updated\n new_status (str): The new status to update the ticket with\n\nReturns:\n bool: True if the update was successful, otherwise False\n""""""\n']","Fetch all tasks assigned to user ""User123"", calculate the total expenses related to these tasks, and then summarize the tasks for a report.","var_1 = who_am_i()
var_2 = search_object_by_name(query=""User123"")
var_3 = fetch_user_tasks(user_id=var_2)
var_4 = calculate_expense_totals(expense_ids=var_3)
var_5 = summarize_objects(objects=var_3)"
"['def filter_projects_by_status(project_ids, status=""active""):\n""""""\nFilters a list of project IDs by their status\n\nParameters:\n project_ids (list): A list of project IDs to filter\n status (str): The status to filter by, default is \'active\'\n\nReturns:\n list: Project IDs matching the status\n""""""\n', '\n\ndef estimate_work_hours(work_id):\n""""""\nEstimates the number of hours required to complete a specific work item\n\nParameters:\n work_id (str): The ID of the work item for which the estimation is to be made\n\nReturns:\n float: Estimated hours required to complete the work item\n""""""\n', '\n\ndef validate_data_consistency(data_id, schema_id):\n""""""\nValidates if data conforms to a specified schema for consistency\n\nParameters:\n data_id (str): The ID of the data to be validated\n schema_id (str): The ID of the schema to validate the data against\n\nReturns:\n bool: True if data is consistent, False otherwise\n""""""\n', '\n\ndef mark_ticket_as_resolved(ticket_id):\n""""""\nMarks a ticket as resolved in the system\n\nParameters:\n ticket_id (str): The ID of the ticket to be marked as resolved\n\nReturns:\n bool: True if the ticket was marked as resolved, False otherwise\n""""""\n', '\n\ndef list_completed_items_by_user(user_id):\n""""""\nLists items that have been completed by the given user\n\nParameters:\n user_id (str): The ID of the user whose completed items are being requested\n\nReturns:\n list: Completed items by the user\n""""""\n', '\n\ndef get_task_dependencies(task_id):\n""""""\nReturns a list of task IDs that are dependencies for the given task\n\nParameters:\n task_id (str): The ID of the task for which dependencies are requested\n\nReturns:\n list: Dependency task IDs\n""""""\n', '\n\ndef calculate_cost_of_tasks(task_ids):\n""""""\nCalculates the total cost for a list of task IDs\n\nParameters:\n task_ids (list): A list of task IDs to calculate cost for\n\nReturns:\n float: Total cost of the tasks\n""""""\n', '\n\ndef notify_user_of_overdue_tasks(user_id):\n""""""\nNotifies a user of any overdue tasks assigned to them\n\nParameters:\n user_id (str): The ID of the user to check for overdue tasks\n\nReturns:\n None\n""""""\n', '\n\ndef generate_progress_report(project_id, report_format=""summary""):\n""""""\nGenerates a progress report for the specified project\n\nParameters:\n project_id (str): The ID of the project for which the progress report is needed\n report_format (str): The format of the report; \'summary\' or \'detailed\'. The default is \'summary\'\n\nReturns:\n str: The generated progress report\n""""""\n', '\n\ndef reassign_work_item_owner(work_id, new_owner_id):\n""""""\nReassigns the owner of a work item to a new user\n\nParameters:\n work_id (str): The ID of the work item to be reassigned\n new_owner_id (str): The user ID of the new owner\n\nReturns:\n bool: True if reassignment is successful, False otherwise\n""""""\n']","Retrieve all work items with severity ""high"" related to the ""Engineering"" Rev organization, calculate the total cost for these tasks, and generate a detailed progress report for the project with ID ""PROJ-456"".","var_1 = search_object_by_name(query=""Engineering"")
var_2 = works_list(issue.rev_orgs=[var_1], ticket.severity=[""high""], type=[""issue"", ""ticket"", ""task""])
var_3 = calculate_cost_of_tasks(task_ids=var_2)
var_4 = generate_progress_report(project_id=""PROJ-456"", report_format=""detailed"")"
"['def filter_users_by_department(department_id=None, active_only=False):\n""""""\nFilters a list of users that belong to the specified department\n\nParameters:\n department_id (str): The ID of the department to filter users\n active_only (bool): Filters for only active users if set to True\n\nReturns:\n list: Users in the specified department\n""""""\n', '\n\ndef find_team_members(team_id):\n""""""\nReturns a list of user IDs that are members of the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: User IDs of the team members\n""""""\n', '\n\ndef validate_user_permissions(user_id, required_permissions):\n""""""\nChecks if the user has the specified permissions\n\nParameters:\n user_id (str): The ID of the user whose permissions need to be checked\n required_permissions (list): A list of permissions to check against the user\'s permissions\n\nReturns:\n bool: True if the user has all the required permissions, False otherwise\n""""""\n', '\n\ndef get_team_member_list(team_id):\n""""""\nRetrieves a list of team members for the specified team\n\nParameters:\n team_id (str): The ID of the team\n\nReturns:\n list: List of team member IDs\n""""""\n', '\n\ndef generate_report_from_data(dataset_id, report_type=""summary""):\n""""""\nGenerates a specific type of report from a dataset\n\nParameters:\n dataset_id (str): The ID of the dataset from which to generate the report\n report_type (str): The type of report to generate, default is \'summary\'\n\nReturns:\n str: The ID of the generated report\n""""""\n', '\n\ndef calculate_project_completion_rate(project_id):\n""""""\nCalculates the completion rate of tasks for a given project\n\nParameters:\n project_id (str): The ID of the project to calculate the completion rate for\n\nReturns:\n float: The completion rate as a percentage\n""""""\n', 'def link_issues_to_project(issue_ids, project_id):\n""""""\nLinks the given issues to the specified project\n\nParameters:\n issue_ids (list): A list of issue IDs to be linked to the project\n project_id (str): The ID of the project to which the issues should be linked\n\nReturns:\n bool: Status of the linking action\n""""""\n', '\n\ndef merge_duplicate_objects(primary_object_id, duplicate_object_id):\n""""""\nMerges a duplicate object into a primary object\n\nParameters:\n primary_object_id (str): The ID of the primary object\n duplicate_object_id (str): The ID of the duplicate object to be merged\n\nReturns:\n bool: True if the merge was successful, False otherwise\n""""""\n', '\n\ndef merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):\n""""""\nMerges duplicate tickets into a primary ticket\n\nParameters:\n primary_ticket_id (str): The ID of the primary ticket that remains\n duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary\n\nReturns:\n None\n""""""\n', '\n\ndef calculate_estimated_effort(work_id):\n""""""\nCalculates the estimated effort required to complete a work item.\n\nParameters:\n work_id (str): The ID of the work item\n\nReturns:\n float: Estimated effort in hours\n""""""\n']","Filter users from the ""Engineering"" department who are active, check if they have ""edit_work_items"" permission, and then retrieve and summarize work items created by these users.","var_1 = search_object_by_name(query=""Engineering"")
var_2 = filter_users_by_department(department_id=var_1, active_only=True)
var_3 = validate_user_permissions(user_id=var_2, required_permissions=[""edit_work_items""])
var_4 = works_list(created_by=var_2, type=[""issue"", ""ticket"", ""task""])
var_5 = summarize_objects(objects=var_4)"
"['def update_issue_status(issue_id, new_status):\n""""""\nUpdates the status of an issue\n\nParameters:\n issue_id (str): The ID of the issue to be updated\n new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed\n\nReturns:\n bool: True if the update was successful, False otherwise\n""""""\n', '\n\ndef get_ticket_comments(ticket_id):\n""""""\nRetrieves the comments attached to a ticket\n\nParameters:\n ticket_id (str): The ID of the ticket whose comments are being retrieved\n\nReturns:\n list: Comments associated with the ticket\n""""""\n', '\n\ndef calculate_work_left(project_id):\n""""""\nCalculates the estimated amount of work left in a project\n\nParameters:\n project_id (str): The ID of the project to calculate work for\n\nReturns:\n float: Estimated hours of work left\n""""""\n', '\n\ndef retrieve_archived_documents(archive_id, keyword=None):\n""""""\nRetrieves documents from the archive based on optional keyword\n\nParameters:\n archive_id (str): The ID of the archive from which to retrieve documents\n keyword (str): Optional keyword to filter documents, default is \'None\'\n\nReturns:\n list: A list of documents matching the keyword if provided, otherwise all documents from the archive\n""""""', '\n\ndef calculate_estimated_completion(project_id):\n""""""\nCalculates the estimated completion date for a project based on current progress\n\nParameters:\n project_id (str): The ID of the project to be analyzed\n\nReturns:\n str: Estimated date of completion\n""""""\n', '\n\ndef filter_projects_by_category(category_id, active_only=True):\n""""""\nFilters projects by their category and returns a list of project IDs\n\nParameters:\n category_id (str): The ID of the category to filter projects by\n active_only (bool): Whether to return only active projects\n\nReturns:\n list: List of project IDs matching the category filter\n""""""\n', '\n\ndef filter_tasks_by_completion(task_ids, completed=True):\n""""""\nFilters the list of tasks by their completion status\n\nParameters:\n task_ids (list): List of task IDs to filter\n completed (bool): The completion status to filter by. Default is \'True\'\n\nReturns:\n list: List of task IDs that match the completion status\n""""""\n', '\n\ndef merge_duplicate_records(primary_record_id, duplicate_record_id):\n""""""\nMerges a duplicate record into a primary record\n\nParameters:\n primary_record_id (str): The ID of the primary record to keep\n duplicate_record_id (str): The ID of the duplicate record to merge\n\nReturns:\n bool: True if the merge was successful; otherwise False\n""""""\n', '\n\ndef get_user_permissions(user_id):\n""""""\nReturns a list of permissions for a specified user ID\n\nParameters:\n user_id (str): The ID of the user whose permissions you want to retrieve\n\nReturns:\n list: User permissions\n""""""\n', '\n\ndef archive_completed_tasks(project_id, completed_since):\n""""""\nArchives tasks that are completed within the given project since the specified time\n\nParameters:\n project_id (str): The ID of the project containing the tasks\n completed_since (str): Archive tasks completed after this timestamp\n\nReturns:\n int: Number of tasks archived\n""""""\n']","Retrieve all comments from ticket ID ""TICKET-456"", calculate the estimated work left on the project associated with this ticket, and create actionable tasks from the comments.","var_1 = get_ticket_comments(ticket_id=""TICKET-456"")
var_2 = search_object_by_name(query=""TICKET-456"")
var_3 = calculate_work_left(project_id=var_2)
var_4 = create_actionable_tasks_from_text(text=var_1)"
