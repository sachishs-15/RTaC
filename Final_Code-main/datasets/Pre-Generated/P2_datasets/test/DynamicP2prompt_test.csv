Prompt,Output
"
        <s>
        [INST]
        Added Tools: 

        def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""


def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""


def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""

 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

        Query:  For user ""Tina"", list her tasks, filter work items related to these tasks by issue priority ""p2"", prioritize the filtered items, and summarize them for the monthly performance review. [/INST]

        ```
        var_1 = list_user_tasks(user_id=""Tina"")
var_2 = works_list(type=[""issue""], issue.priority=[""p2""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = list_user_tasks(user_id=""Tina"")
var_2 = works_list(type=[""issue""], issue.priority=[""p2""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""

 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 


def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""

        Query: Find the current sprint ID, list all tasks assigned to user ""DevLead"" whether completed or not, summarize these tasks, and add them to the current sprint. [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""DevLead"")
var_3 = list_user_tasks(user_id=var_2)
var_4 = summarize_objects(objects=var_3)
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""DevLead"")
var_3 = list_user_tasks(user_id=var_2)
var_4 = summarize_objects(objects=var_3)
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""

 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

        Query: Search for the user ID of ""ManagerMike,"" list all tasks assigned to this user and prioritize them, including the completed ones. [/INST]

        ```
        var_1 = search_object_by_name(query=""ManagerMike"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""ManagerMike"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""

 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

        Query: Use the ID of the current user, list all tasks assigned to them, prioritize the tasks, and summarize them for a weekly review. [/INST]

        ```
        var_1 = who_am_i()
var_2 = list_user_tasks(user_id=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = list_user_tasks(user_id=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""

 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""

        Query: Retrieve the ID of the current sprint, list all tasks assigned to user ""QAEngineer"" including completed tasks, summarize, and add them to the current sprint. [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""QAEngineer"")
var_3 = list_user_tasks(user_id=var_2, completed=True)
var_4 = summarize_objects(objects=var_3)
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""QAEngineer"")
var_3 = list_user_tasks(user_id=var_2, completed=True)
var_4 = summarize_objects(objects=var_3)
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""


 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 


def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""


def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""

        Query: Search for the user ID of ""FrontEndDev,"" list all completed tasks assigned to this user, prioritize them, and summarize for performance evaluation. [/INST]

        ```
        var_1 = search_object_by_name(query=""FrontEndDev"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""FrontEndDev"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""

 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""


def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""

        Query: Identify the user ID of ""BackEndDev,"" list their tasks, summarize the completed ones, and prioritize the list for sprint planning. [/INST]

        ```
        var_1 = search_object_by_name(query=""BackEndDev"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""BackEndDev"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""

 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 


def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""


def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""


def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""


def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

        Query: Find the current user's ID, list all their tasks, prioritize, and summarize the completed tasks for daily stand-up preparation. [/INST]

        ```
        var_1 = who_am_i()
var_2 = list_user_tasks(user_id=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = list_user_tasks(user_id=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""

 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

        Query: Search for the user ID of ""ProductOwner,"" list all tasks assigned to this user, summarize the tasks, and prioritize for sprint retrospective. [/INST]

        ```
        var_1 = search_object_by_name(query=""ProductOwner"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""ProductOwner"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""

 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 


def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""
def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""


def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""

        Query:  Retrieve the user ID of ""DataAnalyst,"" list all tasks assigned to them, prioritize, and summarize the completed tasks for a progress report. [/INST]

        ```
        var_1 = search_object_by_name(query=""DataAnalyst"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""DataAnalyst"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""

 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

        Query:  Locate the user ID of ""ClientSupport,"" list all tasks assigned to them, summarize, and prioritize for end-of-day report. [/INST]

        ```
        var_1 = search_object_by_name(query=""ClientSupport"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""ClientSupport"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""

 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""


def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""

        Query:  Search for the user ID of ""SysAdmin,"" list all tasks assigned to this user, prioritize both completed and completed tasks, and summarize for system audit preparation. [/INST]

        ```
        var_1 = search_object_by_name(query=""SysAdmin"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""SysAdmin"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 
def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""

        Query:  Get the user ID of ""DevOpsLead,"" list all tasks assigned to them, summarize the tasks, and prioritize for deployment planning. [/INST]

        ```
        var_1 = search_object_by_name(query=""DevOpsLead"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""DevOpsLead"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""

 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 


def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""


def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""


def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""

        Query:  Search for the user ID of ""NetworkEngineer,"" list all tasks assigned to this user, summarize the completed tasks, and prioritize for network optimization planning. [/INST]

        ```
        var_1 = search_object_by_name(query=""NetworkEngineer"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""NetworkEngineer"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 


def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""


def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""

        Query:  Locate the user ID of ""TechSupportLead,"" list all tasks assigned to them, prioritize, and summarize for customer support enhancement. [/INST]

        ```
        var_1 = search_object_by_name(query=""TechSupportLead"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""TechSupportLead"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""

 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 


def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""


def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""

        Query:  Identify the user ID of ""DatabaseAdmin,"" list all tasks assigned to them, prioritize, and summarize the completed tasks for database maintenance scheduling. [/INST]

        ```
        var_1 = search_object_by_name(query=""DatabaseAdmin"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""DatabaseAdmin"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""


def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""


def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""

        Query:  Get the sprint ID, list all tasks for user ""CloudSpecialist,"" prioritize the tasks, summarize, and add the completed ones to the current sprint for cloud migration project tracking. [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""CloudSpecialist"")
var_3 = list_user_tasks(user_id=var_2, completed=True)
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)
var_6 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""CloudSpecialist"")
var_3 = list_user_tasks(user_id=var_2, completed=True)
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)
var_6 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""

 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""

        Query: Find all work items owned by a user with ID ""USR123"", update their status to ""active"", and summarize the items. [/INST]

        ```
        var_1 = works_list(owned_by=[""USR123""])
var_2 = update_user_status(user_id=""USR123"", status=""active"")
var_3 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(owned_by=[""USR123""])
var_2 = update_user_status(user_id=""USR123"", status=""active"")
var_3 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""

 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""


def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""


def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""


def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""

        Query: Prioritize work items created by a user with ID ""USR456"", change the user's status to ""on leave"", and add the prioritized items to the current sprint. [/INST]

        ```
        var_1 = works_list(created_by=[""USR456""])
var_2 = prioritize_objects(objects=var_1)
var_3 = update_user_status(user_id=""USR456"", status=""on leave"")
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)

        ```
        </s>
        ","var_1 = works_list(created_by=[""USR456""])
var_2 = prioritize_objects(objects=var_1)
var_3 = update_user_status(user_id=""USR456"", status=""on leave"")
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""


def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""

 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""


def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

        Query: Retrieve work items with a severity of ""blocker"", update the status of the user with ID ""USR789"" to ""busy"", and summarize the items. [/INST]

        ```
        var_1 = works_list(ticket.severity=[""blocker""])
var_2 = update_user_status(user_id=""USR789"", status=""busy"")
var_3 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.severity=[""blocker""])
var_2 = update_user_status(user_id=""USR789"", status=""busy"")
var_3 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""

 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

        Query: Search for work items related to the part name ""WidgetA"", update the status of the user with ID ""USR101"" to ""available"", and prioritize the items. [/INST]

        ```
        var_1 = search_object_by_name(query=""WidgetA"")
var_2 = works_list(applies_to_part=[var_1])
var_3 = update_user_status(user_id=""USR101"", status=""available"")
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""WidgetA"")
var_2 = works_list(applies_to_part=[var_1])
var_3 = update_user_status(user_id=""USR101"", status=""available"")
var_4 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""
def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""


def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

        Query: Get similar work items to ""TASK-321"", update the status of the user with ID ""USR202"" to ""offline"", and add the similar items to the current sprint. [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""TASK-321"")
var_2 = update_user_status(user_id=""USR202"", status=""offline"")
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)

        ```
        </s>
        ","var_1 = get_similar_work_items(work_id=""TASK-321"")
var_2 = update_user_status(user_id=""USR202"", status=""offline"")
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""

        Query: Summarize all tickets that need a response from the ""Support"" channel, update the status of the user with ID ""USR303"" to ""active"", and prioritize the tickets. [/INST]

        ```
        var_1 = works_list(ticket.needs_response=True, ticket.source_channel=[""Support""])
var_2 = update_user_status(user_id=""USR303"", status=""active"")
var_3 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.needs_response=True, ticket.source_channel=[""Support""])
var_2 = update_user_status(user_id=""USR303"", status=""active"")
var_3 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""

 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""

        Query: Retrieve work items of type ""issue"" with priority ""p2"", update the status of the user with ID ""USR404"" to ""in a meeting"", and add the items to the current sprint. [/INST]

        ```
        var_1 = works_list(type=[""issue""], issue.priority=[""p2""])
var_2 = update_user_status(user_id=""USR404"", status=""in a meeting"")
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)

        ```
        </s>
        ","var_1 = works_list(type=[""issue""], issue.priority=[""p2""])
var_2 = update_user_status(user_id=""USR404"", status=""in a meeting"")
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

        Query: Locate all tasks created by ""TeamLead"", update their status to ""completed"", and summarize the tasks for a progress report. [/INST]

        ```
        var_1 = search_object_by_name(query=""TeamLead"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = update_user_status(user_id=var_1, status=""completed"")
var_4 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = update_user_status(user_id=var_1, status=""completed"")
var_4 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 
def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""


def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""

        Query: Find all tickets from the source channel ""EMAIL"" with severity ""high"", update the status of the user with ID ""USR505"" to ""on break"", and prioritize the tickets. [/INST]

        ```
        var_1 = works_list(ticket.source_channel=[""EMAIL""], ticket.severity=[""high""])
var_2 = update_user_status(user_id=""USR505"", status=""on break"")
var_3 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.source_channel=[""EMAIL""], ticket.severity=[""high""])
var_2 = update_user_status(user_id=""USR505"", status=""on break"")
var_3 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 

        Query:  Retrieve work items that apply to part ""XJZ-300"", update the status of the user with ID ""USR606"" to ""active"", and summarize the items for inventory review. [/INST]

        ```
        var_1 = works_list(applies_to_part=[""XJZ-300""])
var_2 = update_user_status(user_id=""USR606"", status=""active"")
var_3 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(applies_to_part=[""XJZ-300""])
var_2 = update_user_status(user_id=""USR606"", status=""active"")
var_3 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""


def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

        Query:  Prioritize all issues from the ""Development"" stage with priority ""p3"", update the status of the user with ID ""USR707"" to ""away"", and add the prioritized issues to the current sprint. [/INST]

        ```
        var_1 = works_list(stage.name=[""Development""], type=[""issue""], issue.priority=[""p3""])
var_2 = update_user_status(user_id=""USR707"", status=""away"")
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)

        ```
        </s>
        ","var_1 = works_list(stage.name=[""Development""], type=[""issue""], issue.priority=[""p3""])
var_2 = update_user_status(user_id=""USR707"", status=""away"")
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""

        Query:  Summarize all tasks owned by user ""EngineerEllie"", update her status to ""working remotely"", and add the tasks to the current sprint. [/INST]

        ```
        var_1 = search_object_by_name(query=""EngineerEllie"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = update_user_status(user_id=var_1, status=""working remotely"")
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""EngineerEllie"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = update_user_status(user_id=var_1, status=""working remotely"")
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""

        Query:  Locate work items created by ""DesignerDan"", update his status to ""on vacation"", and summarize the items for a design review meeting. [/INST]

        ```
        var_1 = search_object_by_name(query=""DesignerDan"")
var_2 = works_list(created_by=[var_1])
var_3 = update_user_status(user_id=var_1, status=""on vacation"")
var_4 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""DesignerDan"")
var_2 = works_list(created_by=[var_1])
var_3 = update_user_status(user_id=var_1, status=""on vacation"")
var_4 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""


def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""


def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""

        Query:  Find all tasks related to part ""GFX-450"", update the status of the user with ID ""USR808"" to ""busy"", and prioritize the tasks for the production team. [/INST]

        ```
        var_1 = search_object_by_name(query=""GFX-450"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = update_user_status(user_id=""USR808"", status=""busy"")
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""GFX-450"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = update_user_status(user_id=""USR808"", status=""busy"")
var_4 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 

        Query:  Get similar work items to ""TICKET-987"", update the status of the user with ID ""USR909"" to ""available"", and add the similar items to the current sprint for resolution. [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""TICKET-987"")
var_2 = update_user_status(user_id=""USR909"", status=""available"")
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)

        ```
        </s>
        ","var_1 = get_similar_work_items(work_id=""TICKET-987"")
var_2 = update_user_status(user_id=""USR909"", status=""available"")
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""

        Query:  Retrieve work items with issue priority ""p1"" from the ""Customer Service"" stage, update the status of the user with ID ""USR010"" to ""engaged"", and summarize the items for a service quality report. [/INST]

        ```
        var_1 = works_list(stage.name=[""Customer Service""], type=[""issue""], issue.priority=[""p1""])
var_2 = update_user_status(user_id=""USR010"", status=""engaged"")
var_3 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(stage.name=[""Customer Service""], type=[""issue""], issue.priority=[""p1""])
var_2 = update_user_status(user_id=""USR010"", status=""engaged"")
var_3 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""


def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""

def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""

        Query:  Prioritize all tickets from source channel ""APP"" that need a response, update the status of the user with ID ""USR111"" to ""active"", and add the prioritized tickets to the current sprint. [/INST]

        ```
        var_1 = works_list(ticket.source_channel=[""APP""], ticket.needs_response=True)
var_2 = update_user_status(user_id=""USR111"", status=""active"")
var_3 = prioritize_objects(objects=var_1)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = works_list(ticket.source_channel=[""APP""], ticket.needs_response=True)
var_2 = update_user_status(user_id=""USR111"", status=""active"")
var_3 = prioritize_objects(objects=var_1)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""

        Query:  Summarize all issues owned by ""AdminAndy"", update his status to ""in training"", and prioritize the issues for administrative follow-up. [/INST]

        ```
        var_1 = search_object_by_name(query=""AdminAndy"")
var_2 = works_list(owned_by=[var_1], type=[""issue""])
var_3 = update_user_status(user_id=var_1, status=""in training"")
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""AdminAndy"")
var_2 = works_list(owned_by=[var_1], type=[""issue""])
var_3 = update_user_status(user_id=var_1, status=""in training"")
var_4 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""


def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""

 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""

def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""

        Query:  Locate work items of type ""ticket"" with severity ""medium"", update the status of the user with ID ""USR212"" to ""active"", and summarize the items for customer follow-up. [/INST]

        ```
        var_1 = works_list(type=[""ticket""], ticket.severity=[""medium""])
var_2 = update_user_status(user_id=""USR212"", status=""active"")
var_3 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(type=[""ticket""], ticket.severity=[""medium""])
var_2 = update_user_status(user_id=""USR212"", status=""active"")
var_3 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""

 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""
def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""


def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

        Query:  Find all tasks created by ""CoordinatorCathy"", update her status to ""present"", and prioritize the tasks for the upcoming team meeting. [/INST]

        ```
        var_1 = search_object_by_name(query=""CoordinatorCathy"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = update_user_status(user_id=var_1, status=""present"")
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""CoordinatorCathy"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = update_user_status(user_id=var_1, status=""present"")
var_4 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""

        Query: Filter work items by date range from ""2023-01-01"" to ""2023-01-31"", retrieve those created by user ""UserA"", and summarize them. [/INST]

        ```
        var_1 = filter_work_by_date_range(start_date=""2023-01-01"", end_date=""2023-01-31"", type=None)
var_2 = works_list(created_by=[""UserA""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = filter_work_by_date_range(start_date=""2023-01-01"", end_date=""2023-01-31"", type=None)
var_2 = works_list(created_by=[""UserA""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""
def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 


def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""


def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""

        Query: Within the date range ""2023-02-01"" to ""2023-02-28"", find all tasks related to part ""PartB"", prioritize them, and add them to the current sprint. [/INST]

        ```
        var_1 = filter_work_by_date_range(start_date=""2023-02-01"", end_date=""2023-02-28"", type=[""task""])
var_2 = works_list(applies_to_part=[""PartB""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = filter_work_by_date_range(start_date=""2023-02-01"", end_date=""2023-02-28"", type=[""task""])
var_2 = works_list(applies_to_part=[""PartB""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 


def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
    object_ids (list): A list of object IDs

Returns:
    str: The ID of the generated report
""""""


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""

        Query: Summarize and prioritize all issues with priority P2 from the ""Development"" stage that fall between ""2023-03-01"" and ""2023-03-15"". [/INST]

        ```
        var_1 = filter_work_by_date_range(start_date=""2023-03-01"", end_date=""2023-03-15"", type=[""issue""])
var_2 = works_list(stage.name=[""Development""], issue.priority=[""p2""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = filter_work_by_date_range(start_date=""2023-03-01"", end_date=""2023-03-15"", type=[""issue""])
var_2 = works_list(stage.name=[""Development""], issue.priority=[""p2""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""

        Query: Locate all tickets from source channel ""EMAIL"" that need a response, filter them by the date range ""2023-04-01"" to ""2023-04-30"", and summarize them. [/INST]

        ```
        var_1 = filter_work_by_date_range(start_date=""2023-04-01"", end_date=""2023-04-30"", type=[""ticket""])
var_2 = works_list(ticket.source_channel=[""EMAIL""], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = filter_work_by_date_range(start_date=""2023-04-01"", end_date=""2023-04-30"", type=[""ticket""])
var_2 = works_list(ticket.source_channel=[""EMAIL""], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""
def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""


def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""



def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
    object_ids (list): A list of object IDs

Returns:
    str: The ID of the generated report
""""""


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""

        Query: Filter work items from ""2023-05-01"" to ""2023-05-20"", prioritize all tasks owned by user ""UserC"", and add them to the current sprint. [/INST]

        ```
        var_1 = filter_work_by_date_range(start_date=""2023-05-01"", end_date=""2023-05-20"", type=[""task""])
var_2 = works_list(owned_by=[""UserC""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = filter_work_by_date_range(start_date=""2023-05-01"", end_date=""2023-05-20"", type=[""task""])
var_2 = works_list(owned_by=[""UserC""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""
def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 


def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""


def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""

        Query: Retrieve similar work items to ""TASK-456"" that were created between ""2023-06-10"" and ""2023-06-24"", and summarize them for a report. [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""TASK-456"")
var_2 = filter_work_by_date_range(start_date=""2023-06-10"", end_date=""2023-06-24"", type=None)
var_3 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = get_similar_work_items(work_id=""TASK-456"")
var_2 = filter_work_by_date_range(start_date=""2023-06-10"", end_date=""2023-06-24"", type=None)
var_3 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 


def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""

        Query: From ""2023-07-01"" to ""2023-07-31"", filter and summarize work items created by ""TeamLeadD"", then prioritize them. [/INST]

        ```
        var_1 = filter_work_by_date_range(start_date=""2023-07-01"", end_date=""2023-07-31"", type=None)
var_2 = works_list(created_by=[""TeamLeadD""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = filter_work_by_date_range(start_date=""2023-07-01"", end_date=""2023-07-31"", type=None)
var_2 = works_list(created_by=[""TeamLeadD""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 


def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""

        Query: Find and prioritize all tasks related to part ""PartE"" within the date range ""2023-08-01"" to ""2023-08-15"", and add them to the current sprint. [/INST]

        ```
        var_1 = filter_work_by_date_range(start_date=""2023-08-01"", end_date=""2023-08-15"", type=[""task""])
var_2 = works_list(applies_to_part=[""PartE""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = filter_work_by_date_range(start_date=""2023-08-01"", end_date=""2023-08-15"", type=[""task""])
var_2 = works_list(applies_to_part=[""PartE""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 


def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""


        Query: Summarize and prioritize all issues with priority P3 from the ""Support"" stage between ""2023-09-01"" and ""2023-09-30"". [/INST]

        ```
        var_1 = filter_work_by_date_range(start_date=""2023-09-01"", end_date=""2023-09-30"", type=[""issue""])
var_2 = works_list(stage.name=[""Support""], issue.priority=[""p3""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = filter_work_by_date_range(start_date=""2023-09-01"", end_date=""2023-09-30"", type=[""issue""])
var_2 = works_list(stage.name=[""Support""], issue.priority=[""p3""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

        Query:  Filter work items by date range ""2023-10-01"" to ""2023-10-31"", locate all tickets from source channel ""CHAT"" that need a response, and summarize them. [/INST]

        ```
        var_1 = filter_work_by_date_range(start_date=""2023-10-01"", end_date=""2023-10-31"", type=[""ticket""])
var_2 = works_list(ticket.source_channel=[""CHAT""], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = filter_work_by_date_range(start_date=""2023-10-01"", end_date=""2023-10-31"", type=[""ticket""])
var_2 = works_list(ticket.source_channel=[""CHAT""], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""


def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""


        Query:  Prioritize all tasks owned by user ""UserF"" that fall within the date range ""2023-11-01"" to ""2023-11-15"", and add them to the current sprint. [/INST]

        ```
        var_1 = filter_work_by_date_range(start_date=""2023-11-01"", end_date=""2023-11-15"", type=[""task""])
var_2 = works_list(owned_by=[""UserF""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = filter_work_by_date_range(start_date=""2023-11-01"", end_date=""2023-11-15"", type=[""task""])
var_2 = works_list(owned_by=[""UserF""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""
def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""


def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""

        Query:  Retrieve similar work items to ""ISSUE-789"" from ""2023-12-01"" to ""2023-12-31"", and provide a summarized report. [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""ISSUE-789"")
var_2 = filter_work_by_date_range(start_date=""2023-12-01"", end_date=""2023-12-31"", type=None)
var_3 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = get_similar_work_items(work_id=""ISSUE-789"")
var_2 = filter_work_by_date_range(start_date=""2023-12-01"", end_date=""2023-12-31"", type=None)
var_3 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 


def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""

        Query:  Filter work items by date range ""2023-01-15"" to ""2023-01-22"", retrieve those created by user ""UserG"", prioritize them, and add them to the current sprint. [/INST]

        ```
        var_1 = filter_work_by_date_range(start_date=""2023-01-15"", end_date=""2023-01-22"", type=None)
var_2 = works_list(created_by=[""UserG""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = filter_work_by_date_range(start_date=""2023-01-15"", end_date=""2023-01-22"", type=None)
var_2 = works_list(created_by=[""UserG""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""

        Query:  Summarize and prioritize all issues with priority P0 from the ""Testing"" stage that fall between ""2023-03-15"" and ""2023-03-31"". [/INST]

        ```
        var_1 = filter_work_by_date_range(start_date=""2023-03-15"", end_date=""2023-03-31"", type=[""issue""])
var_2 = works_list(stage.name=[""Testing""], issue.priority=[""p0""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = filter_work_by_date_range(start_date=""2023-03-15"", end_date=""2023-03-31"", type=[""issue""])
var_2 = works_list(stage.name=[""Testing""], issue.priority=[""p0""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""
def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 


def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""


def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""

        Query:  Locate all tickets from source channel ""MOBILE"" that need a response, filter them by the date range ""2023-04-01"" to ""2023-04-15"", and prioritize them. [/INST]

        ```
        var_1 = filter_work_by_date_range(start_date=""2023-04-01"", end_date=""2023-04-15"", type=[""ticket""])
var_2 = works_list(ticket.source_channel=[""MOBILE""], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = filter_work_by_date_range(start_date=""2023-04-01"", end_date=""2023-04-15"", type=[""ticket""])
var_2 = works_list(ticket.source_channel=[""MOBILE""], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

        Query:  Filter work items from ""2023-05-10"" to ""2023-05-25"", summarize all tasks owned by user ""UserI"", and add them to the current sprint. [/INST]

        ```
        var_1 = filter_work_by_date_range(start_date=""2023-05-10"", end_date=""2023-05-25"", type=[""task""])
var_2 = works_list(owned_by=[""UserI""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = filter_work_by_date_range(start_date=""2023-05-10"", end_date=""2023-05-25"", type=[""task""])
var_2 = works_list(owned_by=[""UserI""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""
def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""

        Query:  Retrieve similar work items to ""TASK-101"" that were created between ""2023-06-15"" and ""2023-06-30"", summarize them, and prioritize them. [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""TASK-101"")
var_2 = filter_work_by_date_range(start_date=""2023-06-15"", end_date=""2023-06-30"", type=None)
var_3 = summarize_objects(objects=var_1)
var_4 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = get_similar_work_items(work_id=""TASK-101"")
var_2 = filter_work_by_date_range(start_date=""2023-06-15"", end_date=""2023-06-30"", type=None)
var_3 = summarize_objects(objects=var_1)
var_4 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 


def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""


def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""

        Query:  From ""2023-07-15"" to ""2023-07-29"", filter and prioritize work items created by ""TeamLeadJ"", then summarize them. [/INST]

        ```
        var_1 = filter_work_by_date_range(start_date=""2023-07-15"", end_date=""2023-07-29"", type=None)
var_2 = works_list(created_by=[""TeamLeadJ""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = filter_work_by_date_range(start_date=""2023-07-15"", end_date=""2023-07-29"", type=None)
var_2 = works_list(created_by=[""TeamLeadJ""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""

        Query:  Find and summarize all tasks related to part ""PartK"" within the date range ""2023-08-05"" to ""2023-08-20"", and add them to the current sprint. [/INST]

        ```
        var_1 = filter_work_by_date_range(start_date=""2023-08-05"", end_date=""2023-08-20"", type=[""task""])
var_2 = works_list(applies_to_part=[""PartK""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = filter_work_by_date_range(start_date=""2023-08-05"", end_date=""2023-08-20"", type=[""task""])
var_2 = works_list(applies_to_part=[""PartK""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def delete_objects_by_id(object_ids):
 """"""
 Deletes objects from the system based on their IDs
 
 Parameters:
  object_ids (list): List of object IDs to delete
 
 Returns:
  bool: True if objects were successfully deleted, False otherwise
 """"""
 

        Query: Search for the sprint ID, add prioritized tasks related to part ""ENG-101"" to the sprint, and delete the original tasks using their IDs. [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(type=[""task""], applies_to_part=[""ENG-101""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
var_5 = delete_objects_by_id(object_ids=var_2)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(type=[""task""], applies_to_part=[""ENG-101""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
var_5 = delete_objects_by_id(object_ids=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""

 
 def delete_objects_by_id(object_ids):
 """"""
 Deletes objects from the system based on their IDs
 
 Parameters:
  object_ids (list): List of object IDs to delete
 
 Returns:
  bool: True if objects were successfully deleted, False otherwise
 """"""
 


def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""


def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""

        Query: Search for work items owned by ""TeamLeadTom"", prioritize them, add them to the current sprint, and delete the original work items using their IDs. [/INST]

        ```
        var_1 = search_object_by_name(query=""TeamLeadTom"")
var_2 = works_list(owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = delete_objects_by_id(object_ids=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""TeamLeadTom"")
var_2 = works_list(owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = delete_objects_by_id(object_ids=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""

 
 def delete_objects_by_id(object_ids):
 """"""
 Deletes objects from the system based on their IDs
 
 Parameters:
  object_ids (list): List of object IDs to delete
 
 Returns:
  bool: True if objects were successfully deleted, False otherwise
 """"""
 

def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""

        Query: Create actionable tasks from the text of a recent meeting, prioritize these tasks, and then delete the original text entries using their IDs. [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""Recent meeting text"")
var_2 = prioritize_objects(objects=var_1)
var_3 = delete_objects_by_id(object_ids=var_1)

        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""Recent meeting text"")
var_2 = prioritize_objects(objects=var_1)
var_3 = delete_objects_by_id(object_ids=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""

 
 def delete_objects_by_id(object_ids):
 """"""
 Deletes objects from the system based on their IDs
 
 Parameters:
  object_ids (list): List of object IDs to delete
 
 Returns:
  bool: True if objects were successfully deleted, False otherwise
 """"""
 

        Query:  Find all work items created by ""DesignerDana"", add them to the current sprint after prioritizing, and delete the original work items using their IDs. [/INST]

        ```
        var_1 = search_object_by_name(query=""DesignerDana"")
var_2 = works_list(created_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = delete_objects_by_id(object_ids=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""DesignerDana"")
var_2 = works_list(created_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = delete_objects_by_id(object_ids=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""

 
 def delete_objects_by_id(object_ids):
 """"""
 Deletes objects from the system based on their IDs
 
 Parameters:
  object_ids (list): List of object IDs to delete
 
 Returns:
  bool: True if objects were successfully deleted, False otherwise
 """"""
 

        Query:  Locate all work items owned by ""ProductPat"", add them to the current sprint after summarizing and prioritizing, and delete the original work items using their IDs. [/INST]

        ```
        var_1 = search_object_by_name(query=""ProductPat"")
var_2 = works_list(owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
var_7 = delete_objects_by_id(object_ids=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""ProductPat"")
var_2 = works_list(owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
var_7 = delete_objects_by_id(object_ids=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def retrieve_user_permissions(user_id):
 """"""
 Retrieves the list of permissions for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose permissions are to be retrieved
 
 Returns:
  list: The list of permissions for the user
 """"""
 ', '
 
 def list_user_skills(user_id):
 """"""
 Lists the skills associated with the specified user
 
 Parameters:
  user_id (str): The ID of the user whose skills are being queried
 
 Returns:
  list: The skills of the user
 """"""
 


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""

        Query: Get the list of skills for user ""USR456"", find all tasks related to those skills, prioritize the tasks, and add them to the current sprint. [/INST]

        ```
        var_1 = list_user_skills(user_id=""USR456"")
var_2 = works_list(type=[""task""], type=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = list_user_skills(user_id=""USR456"")
var_2 = works_list(type=[""task""], type=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""


def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""


def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""

 
 def retrieve_user_permissions(user_id):
 """"""
 Retrieves the list of permissions for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose permissions are to be retrieved
 
 Returns:
  list: The list of permissions for the user
 """"""
 ', '
 
 def list_user_skills(user_id):
 """"""
 Lists the skills associated with the specified user
 
 Parameters:
  user_id (str): The ID of the user whose skills are being queried
 
 Returns:
  list: The skills of the user
 """"""
 

        Query: Check the permissions for user ""USR202"", then find all issues created by them with priority P2 and summarize the issues. [/INST]

        ```
        var_1 = retrieve_user_permissions(user_id=""USR202"")
var_2 = works_list(created_by=[""USR202""], issue.priority=[""p2""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = retrieve_user_permissions(user_id=""USR202"")
var_2 = works_list(created_by=[""USR202""], issue.priority=[""p2""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def retrieve_user_permissions(user_id):
 """"""
 Retrieves the list of permissions for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose permissions are to be retrieved
 
 Returns:
  list: The list of permissions for the user
 """"""
 ', '
 
 def list_user_skills(user_id):
 """"""
 Lists the skills associated with the specified user
 
 Parameters:
  user_id (str): The ID of the user whose skills are being queried
 
 Returns:
  list: The skills of the user
 """"""
 

        Query: List the skills for user ""USR303"", search for similar work items related to a task they completed, prioritize, and summarize those items. [/INST]

        ```
        var_1 = list_user_skills(user_id=""USR303"")
var_2 = get_similar_work_items(work_id=""USR303"")
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = list_user_skills(user_id=""USR303"")
var_2 = get_similar_work_items(work_id=""USR303"")
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""


def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""

 
 def retrieve_user_permissions(user_id):
 """"""
 Retrieves the list of permissions for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose permissions are to be retrieved
 
 Returns:
  list: The list of permissions for the user
 """"""
 ', '
 
 def list_user_skills(user_id):
 """"""
 Lists the skills associated with the specified user
 
 Parameters:
  user_id (str): The ID of the user whose skills are being queried
 
 Returns:
  list: The skills of the user
 """"""
 


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""

        Query:  Get the skills for user ""USR121"", find all tasks with those skills as a requirement, prioritize them, and add them to the current sprint. [/INST]

        ```
        var_1 = list_user_skills(user_id=""USR121"")
var_2 = works_list(type=[""task""], type=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = list_user_skills(user_id=""USR121"")
var_2 = works_list(type=[""task""], type=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""

 
 def retrieve_user_permissions(user_id):
 """"""
 Retrieves the list of permissions for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose permissions are to be retrieved
 
 Returns:
  list: The list of permissions for the user
 """"""
 ', '
 
 def list_user_skills(user_id):
 """"""
 Lists the skills associated with the specified user
 
 Parameters:
  user_id (str): The ID of the user whose skills are being queried
 
 Returns:
  list: The skills of the user
 """"""
 

        Query:  For user ""USR141"", list their skills, find all work items related to a part they are working on, prioritize, and summarize the work items. [/INST]

        ```
        var_1 = list_user_skills(user_id=""USR141"")
var_2 = search_object_by_name(query=""USR141"")  
var_3 = works_list(applies_to_part=[var_2], type=var_1)
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)

        ```
        </s>
        ","var_1 = list_user_skills(user_id=""USR141"")
var_2 = search_object_by_name(query=""USR141"")  
var_3 = works_list(applies_to_part=[var_2], type=var_1)
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""


def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""


def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""

 
 def get_ticket_comments(ticket_id):
 """"""
 Retrieves the comments attached to a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose comments are being retrieved
 
 Returns:
  list: Comments associated with the ticket
 """"""
 ', '
 
 def calculate_budget_remaining(budget_id):
 """"""
 Calculates the remaining budget for a given budget ID
 
 Parameters:
  budget_id (str): The ID of the budget to calculate
 
 Returns:
  float: The amount of remaining budget
 """"""
 

        Query:  Take the comments from ticket ""TICKET-012"", summarize the work items owned by the users mentioned in the comments, and calculate the remaining budget for budget ID ""BUD-1012"". [/INST]

        ```
        var_1 = get_ticket_comments(ticket_id=""TICKET-012"")
var_2 = search_object_by_name(query=var_1[0])
var_3 = works_list(owned_by=[var_2])
var_4 = summarize_objects(objects=var_3)
var_5 = calculate_budget_remaining(budget_id=""BUD-1012"")

        ```
        </s>
        ","var_1 = get_ticket_comments(ticket_id=""TICKET-012"")
var_2 = search_object_by_name(query=var_1[0])
var_3 = works_list(owned_by=[var_2])
var_4 = summarize_objects(objects=var_3)
var_5 = calculate_budget_remaining(budget_id=""BUD-1012"")
"
"
        <s>
        [INST]
        Added Tools: 

        

def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""


def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""


def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""

 
 def get_ticket_comments(ticket_id):
 """"""
 Retrieves the comments attached to a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose comments are being retrieved
 
 Returns:
  list: Comments associated with the ticket
 """"""
 ', '
 
 def calculate_budget_remaining(budget_id):
 """"""
 Calculates the remaining budget for a given budget ID
 
 Parameters:
  budget_id (str): The ID of the budget to calculate
 
 Returns:
  float: The amount of remaining budget
 """"""
 

        Query: Prioritize all issues with priority ""p2"" and get comments for ticket ID ""TICK-707"", add them to the current sprint, and determine the remaining budget for budget ID ""BUD-789"". [/INST]

        ```
        var_1 = works_list(issue.priority=[""p2""], type=[""issue""])
var_2 = get_ticket_comments(ticket_id=""TICK-707"")
var_3 = prioritize_objects(objects=var_1)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = calculate_budget_remaining(budget_id=""BUD-789"")

        ```
        </s>
        ","var_1 = works_list(issue.priority=[""p2""], type=[""issue""])
var_2 = get_ticket_comments(ticket_id=""TICK-707"")
var_3 = prioritize_objects(objects=var_1)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = calculate_budget_remaining(budget_id=""BUD-789"")
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def archive_old_tickets(older_than_date, active_status=False):
 """"""
 Archives tickets that are older than the specified date and optionally filters by active status
 
 Parameters:
  older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
  active_status (bool): If True, only archives tickets that are currently active; defaults to False
 
 Returns:
  str: The ID of the tickets
 """"""
 ', '
 
 def generate_report_from_data(dataset_id, report_type=""summary""):
 """"""
 Generates a specific type of report from a dataset
 
 Parameters:
  dataset_id (str): The ID of the dataset from which to generate the report
  report_type (str): The type of report to generate, default is 'summary'
 
 Returns:
  str: The ID of the generated report
 """"""
 

        Query: Archive tickets older than ""2022-01-01"", generate a summary report from the archived data, and retrieve work items created by user ""DevLead"" to summarize them. [/INST]

        ```
        var_1 = archive_old_tickets(older_than_date=""2022-01-01"")
var_2 = generate_report_from_data(dataset_id=var_1, report_type=""summary"")
var_3 = search_object_by_name(query=""DevLead"")
var_4 = works_list(created_by=[var_3], type=[""ticket"", ""issue"", ""task""])
var_5 = summarize_objects(objects=var_4)

        ```
        </s>
        ","var_1 = archive_old_tickets(older_than_date=""2022-01-01"")
var_2 = generate_report_from_data(dataset_id=var_1, report_type=""summary"")
var_3 = search_object_by_name(query=""DevLead"")
var_4 = works_list(created_by=[var_3], type=[""ticket"", ""issue"", ""task""])
var_5 = summarize_objects(objects=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""

 
 def archive_old_tickets(older_than_date, active_status=False):
 """"""
 Archives tickets that are older than the specified date and optionally filters by active status
 
 Parameters:
  older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
  active_status (bool): If True, only archives tickets that are currently active; defaults to False
 
 Returns:
  str: The ID of the tickets
 """"""
 ', '
 
 def generate_report_from_data(dataset_id, report_type=""summary""):
 """"""
 Generates a specific type of report from a dataset
 
 Parameters:
  dataset_id (str): The ID of the dataset from which to generate the report
  report_type (str): The type of report to generate, default is 'summary'
 
 Returns:
  str: The ID of the generated report
 """"""
 

        Query: Prioritize all tasks owned by user ""TeamLeadTom"", add them to the current sprint, archive tickets older than ""2022-03-01"", and generate a report from the archived tickets. [/INST]

        ```
        var_1 = search_object_by_name(query=""TeamLeadTom"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = archive_old_tickets(older_than_date=""2022-03-01"")
var_7 = generate_report_from_data(dataset_id=var_6, report_type=""summary"")

        ```
        </s>
        ","var_1 = search_object_by_name(query=""TeamLeadTom"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = archive_old_tickets(older_than_date=""2022-03-01"")
var_7 = generate_report_from_data(dataset_id=var_6, report_type=""summary"")
"
"
        <s>
        [INST]
        Added Tools: 

        
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""

 
 def archive_old_tickets(older_than_date, active_status=False):
 """"""
 Archives tickets that are older than the specified date and optionally filters by active status
 
 Parameters:
  older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
  active_status (bool): If True, only archives tickets that are currently active; defaults to False
 
 Returns:
  str: The ID of the tickets
 """"""
 ', '
 
 def generate_report_from_data(dataset_id, report_type=""summary""):
 """"""
 Generates a specific type of report from a dataset
 
 Parameters:
  dataset_id (str): The ID of the dataset from which to generate the report
  report_type (str): The type of report to generate, default is 'summary'
 
 Returns:
  str: The ID of the generated report
 """"""
 


def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""

        Query: Archive all active tickets older than ""2022-07-01"", generate a report from these tickets, and then summarize and prioritize all tickets from the ""Support"" stage. [/INST]

        ```
        var_1 = archive_old_tickets(older_than_date=""2022-07-01"", active_status=True)
var_2 = generate_report_from_data(dataset_id=var_1, report_type=""summary"")
var_3 = works_list(stage.name=[""Support""], type=[""ticket""])
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = archive_old_tickets(older_than_date=""2022-07-01"", active_status=True)
var_2 = generate_report_from_data(dataset_id=var_1, report_type=""summary"")
var_3 = works_list(stage.name=[""Support""], type=[""ticket""])
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""


def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""


def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""

 
 def archive_old_tickets(older_than_date, active_status=False):
 """"""
 Archives tickets that are older than the specified date and optionally filters by active status
 
 Parameters:
  older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
  active_status (bool): If True, only archives tickets that are currently active; defaults to False
 
 Returns:
  str: The ID of the tickets
 """"""
 ', '
 
 def generate_report_from_data(dataset_id, report_type=""summary""):
 """"""
 Generates a specific type of report from a dataset
 
 Parameters:
  dataset_id (str): The ID of the dataset from which to generate the report
  report_type (str): The type of report to generate, default is 'summary'
 
 Returns:
  str: The ID of the generated report
 """"""
 

        Query:  Summarize all issues created by user ""CoderCarl"", prioritize them, archive tickets older than ""2022-08-01"", and generate a summary report from the data. [/INST]

        ```
        var_1 = search_object_by_name(query=""CoderCarl"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = archive_old_tickets(older_than_date=""2022-08-01"")
var_6 = generate_report_from_data(dataset_id=var_5, report_type=""summary"")

        ```
        </s>
        ","var_1 = search_object_by_name(query=""CoderCarl"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = archive_old_tickets(older_than_date=""2022-08-01"")
var_6 = generate_report_from_data(dataset_id=var_5, report_type=""summary"")
"
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""

 
 def archive_old_tickets(older_than_date, active_status=False):
 """"""
 Archives tickets that are older than the specified date and optionally filters by active status
 
 Parameters:
  older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
  active_status (bool): If True, only archives tickets that are currently active; defaults to False
 
 Returns:
  str: The ID of the tickets
 """"""
 ', '
 
 def generate_report_from_data(dataset_id, report_type=""summary""):
 """"""
 Generates a specific type of report from a dataset
 
 Parameters:
  dataset_id (str): The ID of the dataset from which to generate the report
  report_type (str): The type of report to generate, default is 'summary'
 
 Returns:
  str: The ID of the generated report
 """"""
 

        Query:  Retrieve similar work items to ""ISSUE-789"", summarize them for a report, archive tickets older than ""2022-12-01"", and generate a detailed report from the archived tickets. [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""ISSUE-789"")
var_2 = summarize_objects(objects=var_1)
var_3 = archive_old_tickets(older_than_date=""2022-12-01"")
var_4 = generate_report_from_data(dataset_id=var_3, report_type=""detailed"")

        ```
        </s>
        ","var_1 = get_similar_work_items(work_id=""ISSUE-789"")
var_2 = summarize_objects(objects=var_1)
var_3 = archive_old_tickets(older_than_date=""2022-12-01"")
var_4 = generate_report_from_data(dataset_id=var_3, report_type=""detailed"")
"
"
        <s>
        [INST]
        Added Tools: 

        

def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""


def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""

 
 def archive_old_tickets(older_than_date, active_status=False):
 """"""
 Archives tickets that are older than the specified date and optionally filters by active status
 
 Parameters:
  older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
  active_status (bool): If True, only archives tickets that are currently active; defaults to False
 
 Returns:
  str: The ID of the tickets
 """"""
 ', '
 
 def generate_report_from_data(dataset_id, report_type=""summary""):
 """"""
 Generates a specific type of report from a dataset
 
 Parameters:
  dataset_id (str): The ID of the dataset from which to generate the report
  report_type (str): The type of report to generate, default is 'summary'
 
 Returns:
  str: The ID of the generated report
 """"""
 

        Query:  Archive all active tickets older than ""2023-02-01"", generate a report from these tickets, and then summarize and prioritize all work items owned by ""AdminAndy"". [/INST]

        ```
        var_1 = archive_old_tickets(older_than_date=""2023-02-01"", active_status=True)
var_2 = generate_report_from_data(dataset_id=""var_1"", report_type=""summary"")
var_3 = search_object_by_name(query=""AdminAndy"")
var_4 = works_list(owned_by=[var_3], type=[""ticket"", ""issue"", ""task""])
var_5 = summarize_objects(objects=var_4)
var_6 = prioritize_objects(objects=var_4)

        ```
        </s>
        ","var_1 = archive_old_tickets(older_than_date=""2023-02-01"", active_status=True)
var_2 = generate_report_from_data(dataset_id=""var_1"", report_type=""summary"")
var_3 = search_object_by_name(query=""AdminAndy"")
var_4 = works_list(owned_by=[var_3], type=[""ticket"", ""issue"", ""task""])
var_5 = summarize_objects(objects=var_4)
var_6 = prioritize_objects(objects=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""

 
 def remove_users_from_group(user_ids, group_id):
 """"""
 Removes the specified users from a group
 
 Parameters:
  user_ids (list): A list of user IDs to be removed from the group
  group_id (str): The ID of the group from which the users should be removed
 
 Returns:
  bool: Status of the removal
 """"""
 ', '
 
 def mark_ticket_as_resolved(ticket_id):
 """"""
 Marks a ticket as resolved in the system
 
 Parameters:
  ticket_id (str): The ID of the ticket to be marked as resolved
 
 Returns:
  bool: True if the ticket was marked as resolved, False otherwise
 """"""
 


def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""
def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

        Query: Find all tasks associated with part ""UX-101"", remove users ""AJones"" and ""MBrown"" from group ""UX-Team"", mark ticket ""TICK234"" as resolved, and then prioritize the tasks. [/INST]

        ```
        var_1 = works_list(applies_to_part=[""UX-101""], type=[""task""])
var_2 = remove_users_from_group(user_ids=[""AJones"", ""MBrown""], group_id=""UX-Team"")
var_3 = mark_ticket_as_resolved(ticket_id=""TICK234"")
var_4 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(applies_to_part=[""UX-101""], type=[""task""])
var_2 = remove_users_from_group(user_ids=[""AJones"", ""MBrown""], group_id=""UX-Team"")
var_3 = mark_ticket_as_resolved(ticket_id=""TICK234"")
var_4 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""


def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""


def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""


def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""


def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

 
 def remove_users_from_group(user_ids, group_id):
 """"""
 Removes the specified users from a group
 
 Parameters:
  user_ids (list): A list of user IDs to be removed from the group
  group_id (str): The ID of the group from which the users should be removed
 
 Returns:
  bool: Status of the removal
 """"""
 ', '
 
 def mark_ticket_as_resolved(ticket_id):
 """"""
 Marks a ticket as resolved in the system
 
 Parameters:
  ticket_id (str): The ID of the ticket to be marked as resolved
 
 Returns:
  bool: True if the ticket was marked as resolved, False otherwise
 """"""
 


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""

        Query: Summarize and prioritize all tickets with severity ""high"" from the ""CustomerSupport"" stage, remove user ""CTech"" from group ""SupportStaff"", and mark ticket ""TICK345"" as resolved. [/INST]

        ```
        var_1 = works_list(stage.name=[""CustomerSupport""], ticket.severity=[""high""], type=[""ticket""])
var_2 = remove_users_from_group(user_ids=[""CTech""], group_id=""SupportStaff"")
var_3 = mark_ticket_as_resolved(ticket_id=""TICK345"")
var_4 = summarize_objects(objects=var_1)
var_5 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(stage.name=[""CustomerSupport""], ticket.severity=[""high""], type=[""ticket""])
var_2 = remove_users_from_group(user_ids=[""CTech""], group_id=""SupportStaff"")
var_3 = mark_ticket_as_resolved(ticket_id=""TICK345"")
var_4 = summarize_objects(objects=var_1)
var_5 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""

 
 def remove_users_from_group(user_ids, group_id):
 """"""
 Removes the specified users from a group
 
 Parameters:
  user_ids (list): A list of user IDs to be removed from the group
  group_id (str): The ID of the group from which the users should be removed
 
 Returns:
  bool: Status of the removal
 """"""
 ', '
 
 def mark_ticket_as_resolved(ticket_id):
 """"""
 Marks a ticket as resolved in the system
 
 Parameters:
  ticket_id (str): The ID of the ticket to be marked as resolved
 
 Returns:
  bool: True if the ticket was marked as resolved, False otherwise
 """"""
 

        Query:  Prioritize all tasks with type ""ticket"" and ticket severity ""low"", add them to the current sprint, remove user ""LowPriorityHandler"" from group ""NonUrgentIssues"", and mark ticket ""TICK4567"" as resolved. [/INST]

        ```
        var_1 = works_list(ticket.severity=[""low""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = remove_users_from_group(user_ids=[""LowPriorityHandler""], group_id=""NonUrgentIssues"")
var_6 = mark_ticket_as_resolved(ticket_id=""TICK4567"")

        ```
        </s>
        ","var_1 = works_list(ticket.severity=[""low""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = remove_users_from_group(user_ids=[""LowPriorityHandler""], group_id=""NonUrgentIssues"")
var_6 = mark_ticket_as_resolved(ticket_id=""TICK4567"")
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def retrieve_user_contact_info(user_id):
 """"""
 Retrieves the contact information for a user
 
 Parameters:
  user_id (str): The ID of the user whose contact info is requested
 
 Returns:
  str: Contact information of the user
 """"""
 ', '
 
 def filter_contacts_by_organization(organization_id, active_only=True):
 """"""
 Returns a list of contacts associated with the specified organization, optionally filtering only active contacts
 
 Parameters:
  organization_id (str): The ID of the organization to filter contacts
  active_only (bool): Flag to filter only active contacts, default value 'True'
 
 Returns:
  list: Contacts associated with the organization
 """"""
 

        Query: Retrieve the contact information for user ""ProductOwner22"", then filter active contacts by organization  ""O"" and summarize all work items created by those contacts. [/INST]

        ```
        var_1 = retrieve_user_contact_info(user_id=""ProductOwner22"")
var_2 = filter_contacts_by_organization(organization_id=""O"")
var_3 = works_list(created_by=[""""ProductOwner22""], type=[""issue"", ""ticket"", ""task""])
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = retrieve_user_contact_info(user_id=""ProductOwner22"")
var_2 = filter_contacts_by_organization(organization_id=""O"")
var_3 = works_list(created_by=[""""ProductOwner22""], type=[""issue"", ""ticket"", ""task""])
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""

 
 def retrieve_user_contact_info(user_id):
 """"""
 Retrieves the contact information for a user
 
 Parameters:
  user_id (str): The ID of the user whose contact info is requested
 
 Returns:
  str: Contact information of the user
 """"""
 ', '
 
 def filter_contacts_by_organization(organization_id, active_only=True):
 """"""
 Returns a list of contacts associated with the specified organization, optionally filtering only active contacts
 
 Parameters:
  organization_id (str): The ID of the organization to filter contacts
  active_only (bool): Flag to filter only active contacts, default value 'True'
 
 Returns:
  list: Contacts associated with the organization
 """"""
 
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""

        Query:  Retrieve the contact information for user ""DataAnalyst1"", then prioritize all tasks owned by ""DataAnalyst1"" and add them to the current sprint. [/INST]

        ```
        var_1 = retrieve_user_contact_info(user_id=""DataAnalyst1"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = retrieve_user_contact_info(user_id=""DataAnalyst1"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def update_stage_of_work_item(work_item_id, new_stage):
 """"""
 Updates the stage of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item to update
  new_stage (str): The new stage to which the work item should be moved
 
 Returns:
  bool: True if the stage is successfully updated, False otherwise
 """"""', '
 
 def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
 """"""
 Merges duplicate tickets into a primary ticket
 
 Parameters:
  primary_ticket_id (str): The ID of the primary ticket that remains
  duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary
 
 Returns:
  None
 """"""
 


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""

        Query: Retrieve all tickets with severity ""High"" created by ""QAEngineer"", summarize the objects, prioritize them, and update the stage of 1st item to ""Testing"". [/INST]

        ```
        var_1 = works_list(created_by=[""QAEngineer""], ticket.severity=[""High""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = update_stage_of_work_item(work_item_id=var_3[0], new_stage=""Testing"")

        ```
        </s>
        ","var_1 = works_list(created_by=[""QAEngineer""], ticket.severity=[""High""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = update_stage_of_work_item(work_item_id=var_3[0], new_stage=""Testing"")
"
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""

 
 def update_stage_of_work_item(work_item_id, new_stage):
 """"""
 Updates the stage of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item to update
  new_stage (str): The new stage to which the work item should be moved
 
 Returns:
  bool: True if the stage is successfully updated, False otherwise
 """"""', '
 
 def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
 """"""
 Merges duplicate tickets into a primary ticket
 
 Parameters:
  primary_ticket_id (str): The ID of the primary ticket that remains
  duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary
 
 Returns:
  None
 """"""
 


def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""


def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""

        Query: Get all tasks created by ""DesignerDana"", update 1st item's stage to ""Completed"", summarize them, and merge any duplicate tickets into 1st one. [/INST]

        ```
        var_1 = works_list(created_by=[""DesignerDana""], type=[""task""])
var_2 = update_stage_of_work_item(work_item_id=var_1[0], new_stage=""Completed"")
var_3 = summarize_objects(objects=var_1)
var_4 = merge_duplicate_tickets(primary_ticket_id=var_1[0], duplicate_ticket_ids=var_1)

        ```
        </s>
        ","var_1 = works_list(created_by=[""DesignerDana""], type=[""task""])
var_2 = update_stage_of_work_item(work_item_id=var_1[0], new_stage=""Completed"")
var_3 = summarize_objects(objects=var_1)
var_4 = merge_duplicate_tickets(primary_ticket_id=var_1[0], duplicate_ticket_ids=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""


def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""


def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""

 
 def update_stage_of_work_item(work_item_id, new_stage):
 """"""
 Updates the stage of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item to update
  new_stage (str): The new stage to which the work item should be moved
 
 Returns:
  bool: True if the stage is successfully updated, False otherwise
 """"""', '
 
 def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
 """"""
 Merges duplicate tickets into a primary ticket
 
 Parameters:
  primary_ticket_id (str): The ID of the primary ticket that remains
  duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary
 
 Returns:
  None
 """"""
 


def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""

        Query: Search for tickets from the source channel ""EMAIL"", summarize the results, prioritize them, and update 2nd item's stage to ""Customer Support"". [/INST]

        ```
        var_1 = works_list(ticket.source_channel=[""EMAIL""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = update_stage_of_work_item(work_item_id=var_3[1], new_stage=""Customer Support"")

        ```
        </s>
        ","var_1 = works_list(ticket.source_channel=[""EMAIL""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = update_stage_of_work_item(work_item_id=var_3[1], new_stage=""Customer Support"")
"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def list_completed_items_by_user(user_id):
 """"""
 Lists items that have been completed by the given user
 
 Parameters:
  user_id (str): The ID of the user whose completed items are being requested
 
 Returns:
  list: Completed items by the user
 """"""
 ', '
 
 def update_contact_information(contact_id, new_phone=None, new_email=None):
 """"""
 Updates the contact information with new provided phone number or email
 
 Parameters:
  contact_id (str): The ID of the contact to update
  new_phone (str): The new phone number for the contact, default is 'None'
  new_email (str): The new email address for the contact, default is 'None'
 
 Returns:
  bool: Status of the update operation
 """"""
 

        Query: Find the list of work items completed by user ""User123"", summarize these items, and update their contact information with a new email. [/INST]

        ```
        var_1 = list_completed_items_by_user(user_id=""User123"")
var_2 = summarize_objects(objects=var_1)
var_3 = search_object_by_name(query=""User123"")
var_4 = update_contact_information(contact_id=var_3, new_email=""new.email@example.com"")

        ```
        </s>
        ","var_1 = list_completed_items_by_user(user_id=""User123"")
var_2 = summarize_objects(objects=var_1)
var_3 = search_object_by_name(query=""User123"")
var_4 = update_contact_information(contact_id=var_3, new_email=""new.email@example.com"")
"
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""

 
 def check_ticket_status(ticket_id):
 """"""
 Checks the status of a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose status is to be checked
 
 Returns:
  str: The status of the ticket
 """"""
 ', '
 
 def schedule_meeting_with_user(user_id, duration=30, urgent=False):
 """"""
 Schedules a meeting with a specified user
 
 Parameters:
  user_id (str): The ID of the user with whom to schedule a meeting
  duration (int): Duration of the meeting in minutes, default is '30'
  urgent (bool): Whether the meeting is urgent, defaults to False
 
 Returns:
  str: The ID of the scheduled meeting
 """"""
 ', '
 
 def validate_project_completion(project_id):
 """"""
 Validates if all tasks within a project are completed
 
 Parameters:
  project_id (str): The ID of the project to validate
 
 Returns:
  bool: True if completed, False otherwise
 """"""
 

        Query: Validate the completion of project ""PROJ-002"", then retrieve and prioritize all tasks related to the part ""PART-123"" associated with that project, and check the status of the main ticket for ""PROJ-002"". [/INST]

        ```
        var_1 = validate_project_completion(project_id=""PROJ-002"")
var_2 = works_list(applies_to_part=[""PART-123""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = search_object_by_name(query=""PROJ-002"")
var_5 = check_ticket_status(ticket_id=var_4)
        ```
        </s>
        ","var_1 = validate_project_completion(project_id=""PROJ-002"")
var_2 = works_list(applies_to_part=[""PART-123""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = search_object_by_name(query=""PROJ-002"")
var_5 = check_ticket_status(ticket_id=var_4)"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def check_ticket_status(ticket_id):
 """"""
 Checks the status of a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose status is to be checked
 
 Returns:
  str: The status of the ticket
 """"""
 ', '
 
 def schedule_meeting_with_user(user_id, duration=30, urgent=False):
 """"""
 Schedules a meeting with a specified user
 
 Parameters:
  user_id (str): The ID of the user with whom to schedule a meeting
  duration (int): Duration of the meeting in minutes, default is '30'
  urgent (bool): Whether the meeting is urgent, defaults to False
 
 Returns:
  str: The ID of the scheduled meeting
 """"""
 ', '
 
 def validate_project_completion(project_id):
 """"""
 Validates if all tasks within a project are completed
 
 Parameters:
  project_id (str): The ID of the project to validate
 
 Returns:
  bool: True if completed, False otherwise
 """"""
 


def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""

        Query: Schedule an urgent meeting with user ""User567"" to discuss the status of their ticket ""TICKET-567"", then summarize and prioritize all issues with priority P2 that the user is involved with. [/INST]

        ```
        var_1 = schedule_meeting_with_user(user_id=""User567"", urgent=True)
var_2 = check_ticket_status(ticket_id=""TICKET-567"")
var_3 = works_list(issue.priority=[""p2""], owned_by=[""User567""], type=[""issue""])
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)
        ```
        </s>
        ","var_1 = schedule_meeting_with_user(user_id=""User567"", urgent=True)
var_2 = check_ticket_status(ticket_id=""TICKET-567"")
var_3 = works_list(issue.priority=[""p2""], owned_by=[""User567""], type=[""issue""])
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)"
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""


def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""

 
 def check_ticket_status(ticket_id):
 """"""
 Checks the status of a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose status is to be checked
 
 Returns:
  str: The status of the ticket
 """"""
 ', '
 
 def schedule_meeting_with_user(user_id, duration=30, urgent=False):
 """"""
 Schedules a meeting with a specified user
 
 Parameters:
  user_id (str): The ID of the user with whom to schedule a meeting
  duration (int): Duration of the meeting in minutes, default is '30'
  urgent (bool): Whether the meeting is urgent, defaults to False
 
 Returns:
  str: The ID of the scheduled meeting
 """"""
 ', '
 
 def validate_project_completion(project_id):
 """"""
 Validates if all tasks within a project are completed
 
 Parameters:
  project_id (str): The ID of the project to validate
 
 Returns:
  bool: True if completed, False otherwise
 """"""
 


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""


def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""

        Query: Validate the completion of project ""PROJ-101"", then retrieve similar work items to ""TASK-101"" related to this project, summarize them, and schedule a meeting with the project manager ""P"" to discuss the findings. [/INST]

        ```
        var_1 = validate_project_completion(project_id=""PROJ-101"")
var_2 = get_similar_work_items(work_id=""TASK-101"")
var_3 = summarize_objects(objects=var_2)
var_4 = search_object_by_name(query=""P"")
var_5 = schedule_meeting_with_user(user_id=var_4)
        ```
        </s>
        ","var_1 = validate_project_completion(project_id=""PROJ-101"")
var_2 = get_similar_work_items(work_id=""TASK-101"")
var_3 = summarize_objects(objects=var_2)
var_4 = search_object_by_name(query=""P"")
var_5 = schedule_meeting_with_user(user_id=var_4)"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def check_ticket_status(ticket_id):
 """"""
 Checks the status of a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose status is to be checked
 
 Returns:
  str: The status of the ticket
 """"""
 ', '
 
 def schedule_meeting_with_user(user_id, duration=30, urgent=False):
 """"""
 Schedules a meeting with a specified user
 
 Parameters:
  user_id (str): The ID of the user with whom to schedule a meeting
  duration (int): Duration of the meeting in minutes, default is '30'
  urgent (bool): Whether the meeting is urgent, defaults to False
 
 Returns:
  str: The ID of the scheduled meeting
 """"""
 ', '
 
 def validate_project_completion(project_id):
 """"""
 Validates if all tasks within a project are completed
 
 Parameters:
  project_id (str): The ID of the project to validate
 
 Returns:
  bool: True if completed, False otherwise
 """"""
 


def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""


def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""


def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""


def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""


def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""

        Query: Check the status of ticket ""TICKET-345"", then find all work items with the type ""issue"" that are in the ""Development"" stage, summarize and prioritize them, and schedule a meeting with the development team lead. [/INST]

        ```
        var_1 = check_ticket_status(ticket_id=""TICKET-345"")
var_2 = works_list(stage.name=[""Development""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = search_object_by_name(query=""Development Team Lead"")
var_6 = schedule_meeting_with_user(user_id=var_5)
        ```
        </s>
        ","var_1 = check_ticket_status(ticket_id=""TICKET-345"")
var_2 = works_list(stage.name=[""Development""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = search_object_by_name(query=""Development Team Lead"")
var_6 = schedule_meeting_with_user(user_id=var_5)"
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""

 
 def check_ticket_status(ticket_id):
 """"""
 Checks the status of a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose status is to be checked
 
 Returns:
  str: The status of the ticket
 """"""
 ', '
 
 def schedule_meeting_with_user(user_id, duration=30, urgent=False):
 """"""
 Schedules a meeting with a specified user
 
 Parameters:
  user_id (str): The ID of the user with whom to schedule a meeting
  duration (int): Duration of the meeting in minutes, default is '30'
  urgent (bool): Whether the meeting is urgent, defaults to False
 
 Returns:
  str: The ID of the scheduled meeting
 """"""
 ', '
 
 def validate_project_completion(project_id):
 """"""
 Validates if all tasks within a project are completed
 
 Parameters:
  project_id (str): The ID of the project to validate
 
 Returns:
  bool: True if completed, False otherwise
 """"""
 

        Query: Schedule a meeting with user ""QA-Expert"" to discuss the urgent ticket ""TICKET-909"", then retrieve all tasks where ""QA-Expert"" is the creator, summarize and prioritize these tasks for the sprint planning. [/INST]

        ```
        var_1 = schedule_meeting_with_user(user_id=""QA-Expert"", urgent=True)
var_2 = check_ticket_status(ticket_id=""TICKET-909"")
var_3 = works_list(created_by=[""QA-Expert""], type=[""task""])
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)
var_6 = get_sprint_id()
var_7 = add_work_items_to_sprint(work_ids=var_5, sprint_id=var_6)
        ```
        </s>
        ","var_1 = schedule_meeting_with_user(user_id=""QA-Expert"", urgent=True)
var_2 = check_ticket_status(ticket_id=""TICKET-909"")
var_3 = works_list(created_by=[""QA-Expert""], type=[""task""])
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)
var_6 = get_sprint_id()
var_7 = add_work_items_to_sprint(work_ids=var_5, sprint_id=var_6)"
"
        <s>
        [INST]
        Added Tools: 

        

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""

 
 def list_completed_tasks_by_user(user_id):
 """"""
 Lists all completed tasks for a specific user
 
 Parameters:
  user_id (str): The ID of the user whose completed tasks need to be listed
 
 Returns:
  list: List of completed task IDs
 """"""
 ', '
 
 def filter_objects_by_type(object_ids, object_type):
 """"""
 Filters a list of objects based on their type
 
 Parameters:
  object_ids (list): A list of object IDs to filter
  object_type (str): The type of objects to filter for
 
 Returns:
  list: Filtered object IDs matching the specified type
 """"""
 ', '
 
 def mark_ticket_for_review(ticket_id, reviewer_id):
 """"""
 Marks a ticket for review by a specific user
 
 Parameters:
  ticket_id (str): The ID of the ticket to be marked for review
  reviewer_id (str): The ID of the user who should review the ticket
 
 Returns:
  None
 """"""
 


def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

        Query: Find the current sprint ID, list all completed tasks by user ""User123"", filter these tasks by type ""issue"", and then summarize and prioritize them. [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = list_completed_tasks_by_user(user_id=""User123"")
var_3 = filter_objects_by_type(object_ids=var_2, object_type=""issue"")
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)
        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = list_completed_tasks_by_user(user_id=""User123"")
var_3 = filter_objects_by_type(object_ids=var_2, object_type=""issue"")
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""

def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""


def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""

 
 def list_completed_tasks_by_user(user_id):
 """"""
 Lists all completed tasks for a specific user
 
 Parameters:
  user_id (str): The ID of the user whose completed tasks need to be listed
 
 Returns:
  list: List of completed task IDs
 """"""
 ', '
 
 def filter_objects_by_type(object_ids, object_type):
 """"""
 Filters a list of objects based on their type
 
 Parameters:
  object_ids (list): A list of object IDs to filter
  object_type (str): The type of objects to filter for
 
 Returns:
  list: Filtered object IDs matching the specified type
 """"""
 ', '
 
 def mark_ticket_for_review(ticket_id, reviewer_id):
 """"""
 Marks a ticket for review by a specific user
 
 Parameters:
  ticket_id (str): The ID of the ticket to be marked for review
  reviewer_id (str): The ID of the user who should review the ticket
 
 Returns:
  None
 """"""
 


def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

        Query: Retrieve the user ID for ""TeamLead"", list their completed tasks, filter these tasks by type ""ticket"", mark them for review by ""Reviewer456"", and then summarize the tasks. [/INST]

        ```
        var_1 = search_object_by_name(query=""TeamLead"")
var_2 = list_completed_tasks_by_user(user_id=var_1)
var_3 = filter_objects_by_type(object_ids=var_2, object_type=""ticket"")
var_4 = search_object_by_name(query=""Reviewer456"")
var_5 = mark_ticket_for_review(ticket_id=var_3, reviewer_id=var_4)
var_6 = summarize_objects(objects=var_3)
        ```
        </s>
        ","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = list_completed_tasks_by_user(user_id=var_1)
var_3 = filter_objects_by_type(object_ids=var_2, object_type=""ticket"")
var_4 = search_object_by_name(query=""Reviewer456"")
var_5 = mark_ticket_for_review(ticket_id=var_3, reviewer_id=var_4)
var_6 = summarize_objects(objects=var_3)"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def list_completed_tasks_by_user(user_id):
 """"""
 Lists all completed tasks for a specific user
 
 Parameters:
  user_id (str): The ID of the user whose completed tasks need to be listed
 
 Returns:
  list: List of completed task IDs
 """"""
 ', '
 
 def filter_objects_by_type(object_ids, object_type):
 """"""
 Filters a list of objects based on their type
 
 Parameters:
  object_ids (list): A list of object IDs to filter
  object_type (str): The type of objects to filter for
 
 Returns:
  list: Filtered object IDs matching the specified type
 """"""
 ', '
 
 def mark_ticket_for_review(ticket_id, reviewer_id):
 """"""
 Marks a ticket for review by a specific user
 
 Parameters:
  ticket_id (str): The ID of the ticket to be marked for review
  reviewer_id (str): The ID of the user who should review the ticket
 
 Returns:
  None
 """"""
 


def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""

        Query: Search for the object ID by name ""ProjectX"", list all completed tasks by the user associated with this object, filter these tasks by type ""task"", and then prioritize and summarize them. [/INST]

        ```
        var_1 = search_object_by_name(query=""ProjectX"")
var_2 = list_completed_tasks_by_user(user_id=var_1)
var_3 = filter_objects_by_type(object_ids=var_2, object_type=""task"")
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)
        ```
        </s>
        ","var_1 = search_object_by_name(query=""ProjectX"")
var_2 = list_completed_tasks_by_user(user_id=var_1)
var_3 = filter_objects_by_type(object_ids=var_2, object_type=""task"")
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)"
"
        <s>
        [INST]
        Added Tools: 

        

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""


def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""


def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""

 
 def list_recent_activities(user_id, limit=10):
 """"""
 Lists the most recent activities performed by a user
 
 Parameters:
  user_id (str): The ID of the user whose activities are to be listed
  limit (int): The maximum number of recent activities to return
 
 Returns:
  list: Recent activities of the user
 """"""
 ', '
 
 def deactivate_user_account(user_id, reason):
 """"""
 Deactivates a user account for a specific reason
 
 Parameters:
  user_id (str): The ID of the user whose account is to be deactivated
  reason (str): The reason for deactivating the account
 
 Returns:
  bool: True if the account was successfully deactivated; otherwise False
 """"""
 ', '
 
 def remove_object_from_inventory(object_id):
 """"""
 Removes an object from the inventory system based on the object ID
 
 Parameters:
  object_id (str): The ID of the object to remove from inventory
 
 Returns:
  bool: True if the removal was successful, False otherwise
 """"""
 


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""

        Query: For user ""QAEngineer"", list their recent activities, deactivate their account with the reason ""Contract End"", and remove their test device from inventory. Summarize and prioritize all issues with priority P1 from the ""Development"" stage. [/INST]

        ```
        var_1 = list_recent_activities(user_id=""QAEngineer"", limit=10)
var_2 = deactivate_user_account(user_id=""QAEngineer"", reason=""Contract End"")
var_3 = search_object_by_name(query=""QAEngineer's test device"")
var_4 = remove_object_from_inventory(object_id=var_3)
var_5 = works_list(issue.priority=[""p1""], stage.name=[""Development""], type=[""issue""])
var_6 = summarize_objects(objects=var_5)
var_7 = prioritize_objects(objects=var_5)
        ```
        </s>
        ","var_1 = list_recent_activities(user_id=""QAEngineer"", limit=10)
var_2 = deactivate_user_account(user_id=""QAEngineer"", reason=""Contract End"")
var_3 = search_object_by_name(query=""QAEngineer's test device"")
var_4 = remove_object_from_inventory(object_id=var_3)
var_5 = works_list(issue.priority=[""p1""], stage.name=[""Development""], type=[""issue""])
var_6 = summarize_objects(objects=var_5)
var_7 = prioritize_objects(objects=var_5)"
"
        <s>
        [INST]
        Added Tools: 

        

def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""

 
 def list_recent_activities(user_id, limit=10):
 """"""
 Lists the most recent activities performed by a user
 
 Parameters:
  user_id (str): The ID of the user whose activities are to be listed
  limit (int): The maximum number of recent activities to return
 
 Returns:
  list: Recent activities of the user
 """"""
 ', '
 
 def deactivate_user_account(user_id, reason):
 """"""
 Deactivates a user account for a specific reason
 
 Parameters:
  user_id (str): The ID of the user whose account is to be deactivated
  reason (str): The reason for deactivating the account
 
 Returns:
  bool: True if the account was successfully deactivated; otherwise False
 """"""
 ', '
 
 def remove_object_from_inventory(object_id):
 """"""
 Removes an object from the inventory system based on the object ID
 
 Parameters:
  object_id (str): The ID of the object to remove from inventory
 
 Returns:
  bool: True if the removal was successful, False otherwise
 """"""
 


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""


def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""

        Query: Retrieve recent activities for user ""ManagerMike"", deactivate their account for ""Role Change"", and remove their old business cards from inventory. Prioritize all tasks owned by ""ManagerMike"" and add them to the current sprint. [/INST]

        ```
        var_1 = list_recent_activities(user_id=""ManagerMike"", limit=10)
var_2 = deactivate_user_account(user_id=""ManagerMike"", reason=""Role Change"")
var_3 = search_object_by_name(query=""ManagerMike's old business cards"")
var_4 = remove_object_from_inventory(object_id=var_3)
var_5 = works_list(owned_by=[""ManagerMike""], type=[""task""])
var_6 = prioritize_objects(objects=var_5)
var_7 = get_sprint_id()
var_8 = add_work_items_to_sprint(work_ids=var_6, sprint_id=var_7)
        ```
        </s>
        ","var_1 = list_recent_activities(user_id=""ManagerMike"", limit=10)
var_2 = deactivate_user_account(user_id=""ManagerMike"", reason=""Role Change"")
var_3 = search_object_by_name(query=""ManagerMike's old business cards"")
var_4 = remove_object_from_inventory(object_id=var_3)
var_5 = works_list(owned_by=[""ManagerMike""], type=[""task""])
var_6 = prioritize_objects(objects=var_5)
var_7 = get_sprint_id()
var_8 = add_work_items_to_sprint(work_ids=var_6, sprint_id=var_7)"
"
        <s>
        [INST]
        Added Tools: 

        

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""


def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""



def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""
def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""
def update_issue_status(issue_id, new_status):
 """"""
 Updates the status of an issue
 
 Parameters:
  issue_id (str): The ID of the issue to be updated
  new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ', '
 
 def generate_summary_report(object_ids):
 """"""
 Generates a summary report for the specified objects
 
 Parameters:
  object_ids (list): A list of object IDs
 
 Returns:
  str: The ID of the generated report
 """"""
 ', '
 
 def filter_tasks_by_completion(task_ids, completed=True):
 """"""
 Filters the list of tasks by their completion status
 
 Parameters:
  task_ids (list): List of task IDs to filter
  completed (bool): The completion status to filter by. Default is 'True'
 
 Returns:
  list: List of task IDs that match the completion status
 """"""
 


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""

        Query: Retrieve similar work items to ""ISSUE-789"" that need a response, update their status to ""closed"", generate a summary report, and filter out the ones that have been completed. [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""ISSUE-789"")
var_2 = works_list(ticket.needs_response=True, type=[""issue""])
var_3 = update_issue_status(issue_id=var_2, new_status=""closed"")
var_4 = generate_summary_report(object_ids=var_2)
var_5 = filter_tasks_by_completion(task_ids=var_2, completed=False)
        ```
        </s>
        ","var_1 = get_similar_work_items(work_id=""ISSUE-789"")
var_2 = works_list(ticket.needs_response=True, type=[""issue""])
var_3 = update_issue_status(issue_id=var_2, new_status=""closed"")
var_4 = generate_summary_report(object_ids=var_2)
var_5 = filter_tasks_by_completion(task_ids=var_2, completed=False)"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def assign_tasks_to_user(task_ids, user_id):
 """"""
 Assigns a list of task IDs to the provided user
 
 Parameters:
  task_ids (list): List of task IDs to be assigned
  user_id (str): The ID of the user to whom the tasks will be assigned
 
 Returns:
  bool: True if the assignment is successful, False otherwise
 """"""
 ', 'def fetch_user_tasks(user_id, include_completed=False):
 """"""
 Retrieves a list of tasks assigned to a user
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be fetched
  include_completed (bool): Whether to include completed tasks in the list
 
 Returns:
  list: List of tasks assigned to the user
 """"""
 ', '
 
 def update_issue_with_solution(issue_id, solution_text):
 """"""
 Updates an issue with a solution description
 
 Parameters:
  issue_id (str): The ID of the issue to be updated
  solution_text (str): The description of the solution to apply to the issue
 
 Returns:
  None
 """"""
 

        Query: Find all work items owned by user ""QA_Analyst"" and summarize them. Then, assign the summarized tasks to user ""TeamLead"" and fetch all tasks assigned to ""TeamLead"", including the completed ones. [/INST]

        ```
        var_1 = works_list(owned_by=[""QA_Analyst""])
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)
var_4 = search_object_by_name(query=""TeamLead"")
var_5 = assign_tasks_to_user(task_ids=var_3, user_id=var_4)
var_6 = fetch_user_tasks(user_id=var_4, include_completed=True)
        ```
        </s>
        ","var_1 = works_list(owned_by=[""QA_Analyst""])
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)
var_4 = search_object_by_name(query=""TeamLead"")
var_5 = assign_tasks_to_user(task_ids=var_3, user_id=var_4)
var_6 = fetch_user_tasks(user_id=var_4, include_completed=True)"
"
        <s>
        [INST]
        Added Tools: 

        

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""
def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""


def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""

 
 def assign_tasks_to_user(task_ids, user_id):
 """"""
 Assigns a list of task IDs to the provided user
 
 Parameters:
  task_ids (list): List of task IDs to be assigned
  user_id (str): The ID of the user to whom the tasks will be assigned
 
 Returns:
  bool: True if the assignment is successful, False otherwise
 """"""
 ', 'def fetch_user_tasks(user_id, include_completed=False):
 """"""
 Retrieves a list of tasks assigned to a user
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be fetched
  include_completed (bool): Whether to include completed tasks in the list
 
 Returns:
  list: List of tasks assigned to the user
 """"""
 ', '
 
 def update_issue_with_solution(issue_id, solution_text):
 """"""
 Updates an issue with a solution description
 
 Parameters:
  issue_id (str): The ID of the issue to be updated
  solution_text (str): The description of the solution to apply to the issue
 
 Returns:
  None
 """"""
 


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""

        Query: Get similar work items to ""TICKET-456"" and prioritize them. Assign the prioritized tasks to user ""SupportLead"" and fetch all tasks for ""SupportLead"", including completed ones to review their workload. [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""TICKET-456"")
var_2 = prioritize_objects(objects=var_1)
var_3 = search_object_by_name(query=""SupportLead"")
var_4 = assign_tasks_to_user(task_ids=var_2, user_id=var_3)
var_5 = fetch_user_tasks(user_id=var_3, include_completed=True)
        ```
        </s>
        ","var_1 = get_similar_work_items(work_id=""TICKET-456"")
var_2 = prioritize_objects(objects=var_1)
var_3 = search_object_by_name(query=""SupportLead"")
var_4 = assign_tasks_to_user(task_ids=var_2, user_id=var_3)
var_5 = fetch_user_tasks(user_id=var_3, include_completed=True)"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def assign_tasks_to_user(task_ids, user_id):
 """"""
 Assigns a list of task IDs to the provided user
 
 Parameters:
  task_ids (list): List of task IDs to be assigned
  user_id (str): The ID of the user to whom the tasks will be assigned
 
 Returns:
  bool: True if the assignment is successful, False otherwise
 """"""
 ', 'def fetch_user_tasks(user_id, include_completed=False):
 """"""
 Retrieves a list of tasks assigned to a user
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be fetched
  include_completed (bool): Whether to include completed tasks in the list
 
 Returns:
  list: List of tasks assigned to the user
 """"""
 ', '
 
 def update_issue_with_solution(issue_id, solution_text):
 """"""
 Updates an issue with a solution description
 
 Parameters:
  issue_id (str): The ID of the issue to be updated
  solution_text (str): The description of the solution to apply to the issue
 
 Returns:
  None
 """"""
 

        Query: Summarize all tickets created by ""CustomerRep"" and prioritize them. Assign the most urgent tasks to user ""SupervisorJoe"" and fetch all tasks for ""SupervisorJoe"" to ensure proper delegation. [/INST]

        ```
        var_1 = works_list(created_by=[""CustomerRep""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = search_object_by_name(query=""SupervisorJoe"")
var_5 = assign_tasks_to_user(task_ids=[var_3[0]], user_id=var_4)
var_6 = fetch_user_tasks(user_id=var_4)
        ```
        </s>
        ","var_1 = works_list(created_by=[""CustomerRep""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = search_object_by_name(query=""SupervisorJoe"")
var_5 = assign_tasks_to_user(task_ids=[var_3[0]], user_id=var_4)
var_6 = fetch_user_tasks(user_id=var_4)"
"
        <s>
        [INST]
        Added Tools: 

        

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""

 
 def create_report_for_sprint(sprint_id, report_type):
 """"""
 Generates a report for a given sprint
 
 Parameters:
  sprint_id (str): The ID of the sprint
  report_type (str): The type of report to be generated
 
 Returns:
  str: The ID of the generated report
 """"""
 ', '
 
 def filter_tasks_by_due_date(task_ids, due_date):
 """"""
 Filters tasks by their due date
 
 Parameters:
  task_ids (list): A list of task IDs to filter
  due_date (str): The due date to filter tasks by
 
 Returns:
  list: List of task IDs that have the specified due date
 """"""
 ', '
 
 def filter_records_by_date(record_ids, start_date, end_date):
 """"""
 Filters a list of record IDs based on a date range
 
 Parameters:
  record_ids (list): List of record IDs to filter
  start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
  end_date (str): End date for the filtering in 'YYYY-MM-DD' format
 
 Returns:
  list: Filtered record IDs
 """"""
 


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""

        Query: Summarize and prioritize all tickets with severity ""blocker"" from the ""Development"" stage, create a report for the current sprint, and filter these records by the date range ""2023-04-10"" to ""2023-04-17"". [/INST]

        ```
        var_1 = works_list(stage.name=[""Development""], ticket.severity=[""blocker""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = create_report_for_sprint(sprint_id=var_2, report_type=""ticket_summary"")
var_4 = filter_records_by_date(record_ids=var_1, start_date=""2023-04-10"", end_date=""2023-04-17"")
var_5 = prioritize_objects(objects=var_4)
var_6 = summarize_objects(objects=var_5)
        ```
        </s>
        ","var_1 = works_list(stage.name=[""Development""], ticket.severity=[""blocker""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = create_report_for_sprint(sprint_id=var_2, report_type=""ticket_summary"")
var_4 = filter_records_by_date(record_ids=var_1, start_date=""2023-04-10"", end_date=""2023-04-17"")
var_5 = prioritize_objects(objects=var_4)
var_6 = summarize_objects(objects=var_5)"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def generate_report(report_type, subject_id, include_summary=True):
 """"""
 Generates a report of a specific type for a subject in the system
 
 Parameters:
  report_type (str): The type of report to generate
  subject_id (str): The ID of the subject for the report
  include_summary (bool): Whether to include a summary in the report; defaults to True
 
 Returns:
  str: The ID of the generated report
 """"""
 ', '
 
 def estimate_work_hours(work_id):
 """"""
 Estimates the number of hours required to complete a specific work item
 
 Parameters:
  work_id (str): The ID of the work item for which the estimation is to be made
 
 Returns:
  float: Estimated hours required to complete the work item
 """"""
 ', '
 
 def assign_task_to_user(task_id, user_id):
 """"""
 Assigns a specific task to a user
 
 Parameters:
  task_id (str): The ID of the task to be assigned
  user_id (str): The ID of the user to whom the task will be assigned
 
 Returns:
  bool: True if assignment was successful, otherwise False
 """"""
 

        Query: Find all tickets with severity ""high"" related to Rev organization ""AcmeCorp"", summarize them, generate a report, estimate the work hours for each ticket, and assign the task with the highest priority to user ""SeniorSupport"". [/INST]

        ```
        var_1 = search_object_by_name(query=""AcmeCorp"")
var_2 = works_list(ticket.severity=[""high""], ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = generate_report(report_type=""tickets"", subject_id=var_1)
var_5 = estimate_work_hours(work_id=var_2[0])
var_6 = prioritize_objects(objects=var_2)
var_7 = assign_task_to_user(task_id=var_6[0], user_id=""SeniorSupport"")
        ```
        </s>
        ","var_1 = search_object_by_name(query=""AcmeCorp"")
var_2 = works_list(ticket.severity=[""high""], ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = generate_report(report_type=""tickets"", subject_id=var_1)
var_5 = estimate_work_hours(work_id=var_2[0])
var_6 = prioritize_objects(objects=var_2)
var_7 = assign_task_to_user(task_id=var_6[0], user_id=""SeniorSupport"")"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def generate_report(report_type, subject_id, include_summary=True):
 """"""
 Generates a report of a specific type for a subject in the system
 
 Parameters:
  report_type (str): The type of report to generate
  subject_id (str): The ID of the subject for the report
  include_summary (bool): Whether to include a summary in the report; defaults to True
 
 Returns:
  str: The ID of the generated report
 """"""
 ', '
 
 def estimate_work_hours(work_id):
 """"""
 Estimates the number of hours required to complete a specific work item
 
 Parameters:
  work_id (str): The ID of the work item for which the estimation is to be made
 
 Returns:
  float: Estimated hours required to complete the work item
 """"""
 ', '
 
 def assign_task_to_user(task_id, user_id):
 """"""
 Assigns a specific task to a user
 
 Parameters:
  task_id (str): The ID of the task to be assigned
  user_id (str): The ID of the user to whom the task will be assigned
 
 Returns:
  bool: True if assignment was successful, otherwise False
 """"""
 


def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""

        Query: Retrieve all issues from stage ""Development"" with priority ""p2"", prioritize them, generate a report including a summary, estimate the work hours for the most critical issue, and assign it to user ""DevOps"". [/INST]

        ```
        var_1 = works_list(stage.name=[""Development""], issue.priority=[""p2""])
var_2 = prioritize_objects(objects=var_1)
var_3 = generate_report(report_type=""issues"", subject_id=""Development"", include_summary=True)
var_4 = estimate_work_hours(work_id=var_2[0])
var_5 = assign_task_to_user(task_id=var_2[0], user_id=""DevOps"")
        ```
        </s>
        ","var_1 = works_list(stage.name=[""Development""], issue.priority=[""p2""])
var_2 = prioritize_objects(objects=var_1)
var_3 = generate_report(report_type=""issues"", subject_id=""Development"", include_summary=True)
var_4 = estimate_work_hours(work_id=var_2[0])
var_5 = assign_task_to_user(task_id=var_2[0], user_id=""DevOps"")"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def generate_report(report_type, subject_id, include_summary=True):
 """"""
 Generates a report of a specific type for a subject in the system
 
 Parameters:
  report_type (str): The type of report to generate
  subject_id (str): The ID of the subject for the report
  include_summary (bool): Whether to include a summary in the report; defaults to True
 
 Returns:
  str: The ID of the generated report
 """"""
 ', '
 
 def estimate_work_hours(work_id):
 """"""
 Estimates the number of hours required to complete a specific work item
 
 Parameters:
  work_id (str): The ID of the work item for which the estimation is to be made
 
 Returns:
  float: Estimated hours required to complete the work item
 """"""
 ', '
 
 def assign_task_to_user(task_id, user_id):
 """"""
 Assigns a specific task to a user
 
 Parameters:
  task_id (str): The ID of the task to be assigned
  user_id (str): The ID of the user to whom the task will be assigned
 
 Returns:
  bool: True if assignment was successful, otherwise False
 """"""
 

        Query: Retrieve work items owned by ""ProjectManager"", prioritize them, generate a report with a summary, estimate the work hours for the task that will take the longest, and assign it to user ""LeadDeveloper"". [/INST]

        ```
        var_1 = search_object_by_name(query=""ProjectManager"")
var_2 = works_list(owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = generate_report(report_type=""work_items"", subject_id=var_1, include_summary=True)
var_5 = estimate_work_hours(work_id=var_3[0])
var_6 = assign_task_to_user(task_id=var_3[0], user_id=""LeadDeveloper"")
        ```
        </s>
        ","var_1 = search_object_by_name(query=""ProjectManager"")
var_2 = works_list(owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = generate_report(report_type=""work_items"", subject_id=var_1, include_summary=True)
var_5 = estimate_work_hours(work_id=var_3[0])
var_6 = assign_task_to_user(task_id=var_3[0], user_id=""LeadDeveloper"")"
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""

 
 def list_department_members(department_id):
 """"""
 Returns a list of user IDs for all members within a specified department
 
 Parameters:
  department_id (str): The ID of the department to list members for
 
 Returns:
  list: User IDs of all the members in the department
 """"""
 ', '
 
 def generate_report_for_sprint(sprint_id):
 """"""
 Generates a performance report for a specified sprint
 
 Parameters:
  sprint_id (str): The ID of the sprint for which to generate the report
 
 Returns:
  str: The ID of the generated report
 """"""
 ', '
 
 def create_new_ticket(title, description, reported_by):
 """"""
 Creates a new ticket in the system with the given details
 
 Parameters:
  title (str): The title of the new ticket
  description (str): A detailed description of the issue or request
  reported_by (str): The ID of the user reporting the ticket
 
 Returns:
  str: The ID of the newly created ticket
 """"""
 

        Query: Retrieve all tickets reported by the ""Support"" department members, summarize these tickets, prioritize them, and then create a new ticket to track the resolution process in the current sprint. [/INST]

        ```
        var_1 = list_department_members(department_id=""Support"")
var_2 = works_list(created_by=var_1, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = create_new_ticket(title=""Track Resolution Process"", description=""Summarize and prioritize tickets reported by Support department for resolution in the current sprint."", reported_by=who_am_i())
        ```
        </s>
        ","var_1 = list_department_members(department_id=""Support"")
var_2 = works_list(created_by=var_1, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = create_new_ticket(title=""Track Resolution Process"", description=""Summarize and prioritize tickets reported by Support department for resolution in the current sprint."", reported_by=who_am_i())"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def filter_projects_by_category(category_id, active_only=True):
 """"""
 Filters projects by their category and returns a list of project IDs
 
 Parameters:
  category_id (str): The ID of the category to filter projects by
  active_only (bool): Whether to return only active projects
 
 Returns:
  list: List of project IDs matching the category filter
 """"""
 ', 'def assign_task_to_user(task_id, user_id):
 """"""
 Assigns a specific task to a user
 
 Parameters:
  task_id (str): The ID of the task to be assigned
  user_id (str): The ID of the user to whom the task is assigned
 
 Returns:
  None
 """"""
 ', '
 
 def check_inventory_availability(part_id, minimum_quantity=1):
 """"""
 Checks if the inventory has the specified part in at least the minimum quantity
 
 Parameters:
  part_id (str): The ID of the part to check in inventory
  minimum_quantity (int): The minimum quantity to check for; defaults to 1
 
 Returns:
  bool: True if the minimum quantity is available; otherwise False
 """"""
 


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""

        Query: Filter projects by category ""CAT-003"" that are active, summarize the project details, check inventory for part ""PART-102"", and assign the most critical task to user ""User789"". [/INST]

        ```
        var_1 = filter_projects_by_category(category_id=""CAT-003"", active_only=True)
var_2 = works_list(applies_to_part=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = check_inventory_availability(part_id=""PART-102"")
var_5 = prioritize_objects(objects=var_2)
var_6 = assign_task_to_user(task_id=var_5[0], user_id=""User789"")
        ```
        </s>
        ","var_1 = filter_projects_by_category(category_id=""CAT-003"", active_only=True)
var_2 = works_list(applies_to_part=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = check_inventory_availability(part_id=""PART-102"")
var_5 = prioritize_objects(objects=var_2)
var_6 = assign_task_to_user(task_id=var_5[0], user_id=""User789"")"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def log_user_activity(user_id, activity_description):
 """"""
 Logs a user's activity with a description
 
 Parameters:
  user_id (str): The ID of the user whose activity is being logged
  activity_description (str): A description of the activity
 
 Returns:
  bool: True if the logging was successful, False otherwise
 """"""
 ', '
 
 def log_system_event(event_type, description, user_id=None):
 """"""
 Logs an event in the system with an optional user ID associated with it
 
 Parameters:
  event_type (str): The type of event to log
  description (str): A brief description of the event
  user_id (str): The ID of the user involved in the event, if applicable
 
 Returns:
  str: The ID of the logged event
 """"""
 ', '
 
 def extract_keywords_from_text(text):
 """"""
 Given a text, extracts and returns the main keywords
 
 Parameters:
  text (str): The text from which keywords are to be extracted
 
 Returns:
  list: A list of extracted keywords
 """"""
 ', '
 
 def check_object_permission(user_id, object_id):
 """"""
 Checks if a user has permission to access a specific object
 
 Parameters:
  user_id (str): The ID of the user
  object_id (str): The ID of the object to check permission for
 
 Returns:
  bool: True if the user has permission, False otherwise
 """"""
 


def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""


def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""

        Query:  Find all tasks associated with ""RevOrgX"", prioritize them for the current sprint, log the user's activity of sprint planning, log the event of RevOrgX-related task retrieval, extract keywords from the task descriptions, and check if the user has permission to access these tasks. [/INST]

        ```
        var_1 = who_am_i()
var_2 = search_object_by_name(query=""RevOrgX"")
var_3 = works_list(ticket.rev_org=[var_2], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
var_7 = log_user_activity(user_id=var_1, activity_description=""Planning sprint with tasks associated with RevOrgX"")
var_8 = log_system_event(event_type=""RevOrgXRelatedTaskRetrieval"", description=""Retrieved tasks associated with RevOrgX"")
var_9 = extract_keywords_from_text(text=var_4)
var_10 = check_object_permission(user_id=var_1, object_id=var_3)
        ```
        </s>
        ","var_1 = who_am_i()
var_2 = search_object_by_name(query=""RevOrgX"")
var_3 = works_list(ticket.rev_org=[var_2], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
var_7 = log_user_activity(user_id=var_1, activity_description=""Planning sprint with tasks associated with RevOrgX"")
var_8 = log_system_event(event_type=""RevOrgXRelatedTaskRetrieval"", description=""Retrieved tasks associated with RevOrgX"")
var_9 = extract_keywords_from_text(text=var_4)
var_10 = check_object_permission(user_id=var_1, object_id=var_3)"
"
        <s>
        [INST]
        Added Tools: 

        

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""


def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""

def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""

 
 def update_ticket_status(ticket_id, new_status):
 """"""
 Updates the status of a given ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket to be updated
  new_status (str): The new status to update the ticket with
 
 Returns:
  bool: True if the update was successful, otherwise False
 """"""
 ', '
 
 def get_object_history(object_id):
 """"""
 Retrieves the change history of a specified object
 
 Parameters:
  object_id (str): The ID of the object for which history is requested
 
 Returns:
  list: A list of changes made to the object
 """"""
 ', '
 
 def calculate_estimated_effort(work_id):
 """"""
 Calculates the estimated effort required to complete a work item.
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  float: Estimated effort in hours
 """"""
 ', '
 
 def calculate_budget_allocation(project_id, cost_limit):
 """"""
 Calculates and assigns the budget allocation for a project
 
 Parameters:
  project_id (str): The ID of the project for which the budget is calculated
  cost_limit (float): The cost limit for the project's budget
 
 Returns:
  float: The amount allocated to the project budget
 """"""
 


def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""


def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""


def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""

        Query: Summarize and prioritize all tickets from the ""Development"" stage, update their status to ""Open"", get the object history, and calculate the estimated effort for each ticket. [/INST]

        ```
        var_1 = works_list(stage.name=[""Development""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = update_ticket_status(ticket_id=var_3[0], new_status=""Open"")
var_5 = get_object_history(object_id=var_3[0])
var_6 = calculate_estimated_effort(work_id=var_3[0])
        ```
        </s>
        ","var_1 = works_list(stage.name=[""Development""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = update_ticket_status(ticket_id=var_3[0], new_status=""Open"")
var_5 = get_object_history(object_id=var_3[0])
var_6 = calculate_estimated_effort(work_id=var_3[0])"
"
        <s>
        [INST]
        Added Tools: 

        def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""


def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""


def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""


def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""

 
 def fetch_ticket_history(ticket_id, history_limit=10):
 """"""
 Fetches the history of changes to a given ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket for which the history is requested
  history_limit (int): Maximum number of history entries to retrieve. The default is '10'
 
 Returns:
  list: A list of history records for the ticket
 """"""
 ', '
 
 def generate_work_report(work_ids):
 """"""
 Generates a report for the given work items.
 
 Parameters:
  work_ids (list): A list of work item IDs for report generation
 
 Returns:
  str: The ID of the generated report
 """"""
 ', 'def calculate_due_dates(work_item_ids, urgency_level):
 """"""
 Calculates the due dates for given work items based on their urgency
 
 Parameters:
  work_item_ids (list): A list of work item IDs for which due dates are required
  urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'
 
 Returns:
  list: Due dates for the specified work items
 """"""
 ', '
 
 def batch_update_user_roles(user_ids, new_role):
 """"""
 Updates the roles for a batch of users to a new role
 
 Parameters:
  user_ids (list): List of user IDs whose roles should be updated
  new_role (str): The new role to assign
 
 Returns:
  int: Number of users successfully updated
 """"""
 

        Query: Search for an object by name ""ProjectX"", use the returned ID to fetch the ticket history, summarize the associated work items, generate a report, and batch update the user roles of all users involved to ""Project Manager"". [/INST]

        ```
        var_1 = search_object_by_name(query=""ProjectX"")
var_2 = fetch_ticket_history(ticket_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = generate_work_report(work_ids=var_2)
var_5 = batch_update_user_roles(user_ids=var_2, new_role=""Project Manager"")
        ```
        </s>
        ","var_1 = search_object_by_name(query=""ProjectX"")
var_2 = fetch_ticket_history(ticket_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = generate_work_report(work_ids=var_2)
var_5 = batch_update_user_roles(user_ids=var_2, new_role=""Project Manager"")"
"
        <s>
        [INST]
        Added Tools: 

        
 
 def fetch_ticket_history(ticket_id, history_limit=10):
 """"""
 Fetches the history of changes to a given ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket for which the history is requested
  history_limit (int): Maximum number of history entries to retrieve. The default is '10'
 
 Returns:
  list: A list of history records for the ticket
 """"""
 ', '
 
 def generate_work_report(work_ids):
 """"""
 Generates a report for the given work items.
 
 Parameters:
  work_ids (list): A list of work item IDs for report generation
 
 Returns:
  str: The ID of the generated report
 """"""
 ', 'def calculate_due_dates(work_item_ids, urgency_level):
 """"""
 Calculates the due dates for given work items based on their urgency
 
 Parameters:
  work_item_ids (list): A list of work item IDs for which due dates are required
  urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'
 
 Returns:
  list: Due dates for the specified work items
 """"""
 ', '
 
 def batch_update_user_roles(user_ids, new_role):
 """"""
 Updates the roles for a batch of users to a new role
 
 Parameters:
  user_ids (list): List of user IDs whose roles should be updated
  new_role (str): The new role to assign
 
 Returns:
  int: Number of users successfully updated
 """"""
 


def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""

        Query: Create actionable tasks from the text ""Update server configurations"", fetch the ticket history for the ticket ""TICKET-004"", generate a report for these tasks, prioritize them, and calculate their due dates with a high urgency level. [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""Update server configurations"")
var_2 = fetch_ticket_history(ticket_id=""TICKET-004"")
var_3 = generate_work_report(work_ids=var_1)
var_4 = prioritize_objects(objects=var_1)
var_5 = calculate_due_dates(work_item_ids=var_1, urgency_level=""high"")
        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""Update server configurations"")
var_2 = fetch_ticket_history(ticket_id=""TICKET-004"")
var_3 = generate_work_report(work_ids=var_1)
var_4 = prioritize_objects(objects=var_1)
var_5 = calculate_due_dates(work_item_ids=var_1, urgency_level=""high"")"
