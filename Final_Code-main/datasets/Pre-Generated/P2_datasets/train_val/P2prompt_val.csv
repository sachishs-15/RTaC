Prompt,Output
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Find the current sprint, list all tasks within it, and summarize those tasks for me [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""

        Query: What are the historical events that happened on this day? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""

        Query: Identify work created by user ""USR-99"", check for any response needed, and prioritize those items [/INST]

        ```
        var_1 = works_list(created_by=[""USR-99""], ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(created_by=[""USR-99""], ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""
def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

        Query: Find P2 issues related to project Alpha and summarize them [/INST]

        ```
        var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(type=[""issue""], issue.priority=[""p2""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(type=[""issue""], issue.priority=[""p2""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""


def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""


def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

        Query: Retrieve and summarize my p0 issues for a quick review [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p0""], owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p0""], owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
 ticket_id (str): The ID of the ticket where the merged note will be added
 note_ids (list): List of note IDs that will be merged into the ticket
 updated_by (str): The ID of the user performing the merge

Returns:
 str: ID of the updated ticket note
""""""
', '

def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
 ticket_id (str): The ID of the ticket to be marked for review
 reviewer_id (str): The ID of the user who should review the ticket

Returns:
 None
""""""
', '

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
 user_id (str): The ID of the user
 object_id (str): The ID of the object to check permission for

Returns:
 bool: True if the user has permission, False otherwise
""""""
', '

def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
 user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
 list: The list of permissions for the user
""""""
', '

def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
 project_id (str): The ID of the project for which the timeline is requested

Returns:
 list: Key milestones and dates for the project timeline
""""""
', '

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
 user_id (str): The ID of the user whose tasks are to be listed
 completed (bool): If True, only completed tasks are returned

Returns:
 list: A list of tasks assigned to the user
""""""
', '

def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
 prefix (str): A prefix for the identifier
 use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
 str: The generated unique identifier
""""""

```', '

def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
 work_item_id (str): The ID of the work item to check
 status_options (list): A list of valid status options

Returns:
 bool: True if status is valid, False otherwise
""""""
', '

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
 object_id (str): The ID of the object to check

Returns:
 bool: True if the object exists, otherwise False
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""


        Query: Retrieve the list of tasks assigned to user ""EngineerPatwa"" that are marked for review by ""SeniorQANisarg"", summarize these tasks, and check if ""EngineerPatwa"" has permission to access the project timeline for project ""PRJ-456"". [/INST]

        ```
        var_1 = search_object_by_name(query=""EngineerPatwa"")
var_2 = search_object_by_name(query=""SeniorQANisarg"")
var_3 = works_list(created_by=[var_1], type=[""task""], owned_by=[var_2])
var_4 = summarize_objects(objects=var_3)
var_5 = search_object_by_name(query=""PRJ-456"")
var_6 = check_object_permission(user_id=var_1, object_id=var_5)
        ```
        </s>
        ","var_1 = search_object_by_name(query=""EngineerPatwa"")
var_2 = search_object_by_name(query=""SeniorQANisarg"")
var_3 = works_list(created_by=[var_1], type=[""task""], owned_by=[var_2])
var_4 = summarize_objects(objects=var_3)
var_5 = search_object_by_name(query=""PRJ-456"")
var_6 = check_object_permission(user_id=var_1, object_id=var_5)"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Identify work items created by user ""USR-321"" and add them to sprint with ID ""SPRINT-101"" [/INST]

        ```
        var_1 = search_object_by_name(query=""USR-321"")
var_2 = works_list(created_by=[var_1])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-101"")

        ```
        </s>
        ","var_1 = search_object_by_name(query=""USR-321"")
var_2 = works_list(created_by=[var_1])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-101"")
"
"
        <s>
        [INST]
        Added Tools: 

        def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""

        Query: Find tickets from user DEVU-456 that need a response and summarize them [/INST]

        ```
        var_1 = works_list(created_by=[""DEVU-456""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(created_by=[""DEVU-456""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""


def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""


def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""


def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""


def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""


def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""


def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""

        Query: Identify all tickets needing a response for the service SERV-789 and assign them to the current sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""SERV-789"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""SERV-789"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""



def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""


def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""


def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""

        Query: Assign p3 priority issues to the current sprint for the ""frontend"" team [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p3""], owned_by=[""frontend""], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p3""], owned_by=[""frontend""], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""

        Query: Find tasks related to feature Y and update their progress in the system [/INST]

        ```
        var_1 = search_object_by_name(query=""feature Y"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])

        ```
        </s>
        ","var_1 = search_object_by_name(query=""feature Y"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
"
"
        <s>
        [INST]
        Added Tools: 

        

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""
def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""


def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""


def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""

        Query: Generate a list of tickets needing response from ""TechSupport"" organization and summarize them [/INST]

        ```
        var_1 = search_object_by_name(query=""TechSupport"")
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""TechSupport"")
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""


def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""


def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""

        Query: Add all tasks related to ""ProjectZ"" into the current sprint after prioritization [/INST]

        ```
        var_1 = search_object_by_name(query=""ProjectZ"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""ProjectZ"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Find tickets from the 'support' channel for REV-789 organization and prioritize them [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-789"")
var_2 = works_list(type=[""ticket""], ticket.source_channel=[""support""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""REV-789"")
var_2 = works_list(type=[""ticket""], ticket.source_channel=[""support""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""

        Query:  Find issues with priority P1 related to part NET-SEC, summarize them, and limit the results to 28. [/INST]

        ```
        var_1 = works_list(applies_to_part=[""NET-SEC""], issue.priority=[""p1""], type=[""issue""], limit=28)
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(applies_to_part=[""NET-SEC""], issue.priority=[""p1""], type=[""issue""], limit=28)
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

        Query: Identify and list all tasks for the component ""UI-FRAMEWORK"" in the design stage [/INST]

        ```
        var_1 = search_object_by_name(query=""UI-FRAMEWORK"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""design""], type=[""task""])

        ```
        </s>
        ","var_1 = search_object_by_name(query=""UI-FRAMEWORK"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""design""], type=[""task""])
"
"
        <s>
        [INST]
        Added Tools: 

        

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""



def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""


def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""

        Query: What if our thoughts have the power to shape the fabric of reality, influencing the course of events? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        

def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""


def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""

def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""

        Query: Find similar issues to ISSU-123, summarize them, and add them to the current sprint, limiting the number of work items to 10. [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""ISSU-123"")
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        ","var_1 = get_similar_work_items(work_id=""ISSU-123"")
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Find work issues for component `UIX-987` with priority `p2`, summarize them, and then add to the current sprint. [/INST]

        ```
        var_1 = works_list(type=[""issue""], applies_to_part=[""UIX-987""], issue.priority=[""p2""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)

        ```
        </s>
        ","var_1 = works_list(type=[""issue""], applies_to_part=[""UIX-987""], issue.priority=[""p2""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""

        Query: Generate a list of tasks from the meeting notes 'M' and assign to the team members [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""M"")

        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""M"")
"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Summarize the work items for part CAPL-123 that require a response [/INST]

        ```
        var_1 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[""CAPL-123""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[""CAPL-123""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""


def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

        Query: Search for work items created by 'User42' and filter by 'issue' priority = p0, then add to the sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""User42"")
var_2 = works_list(created_by=[var_1], issue.priority=[""p0""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""User42"")
var_2 = works_list(created_by=[var_1], issue.priority=[""p0""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""

        Query: Retrieve and summarize tickets that require a response from support channel ""Email"" [/INST]

        ```
        var_1 = works_list(ticket.needs_response=True, ticket.source_channel=[""Email""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.needs_response=True, ticket.source_channel=[""Email""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""


def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""


def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""



def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""


def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

        Query: Create tasks from meeting notes and assign them to DevTeam123. [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""meeting notes"")
var_2 = search_object_by_name(query=""DevTeam123"")
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)

        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""meeting notes"")
var_2 = search_object_by_name(query=""DevTeam123"")
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""


def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""

        Query: Summarize the current user's tasks related to project Alpha and organize them by priority [/INST]

        ```
        var_1 = who_am_i()
var_2 = search_object_by_name(query=""Alpha"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = search_object_by_name(query=""Alpha"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""

        Query: Summarize my tickets from the 'development' stage and prioritize them [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(stage.name=[""development""], owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(stage.name=[""development""], owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""
def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""


def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""

        Query: Assign all my work that need a response to the current sprint [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], owned_by=[var_1], ticket.needs_response=True)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], owned_by=[var_1], ticket.needs_response=True)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""


def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""
def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""

        Query: Find and summarize tasks related to part 'UIX-456' that I created [/INST]

        ```
        var_1 = who_am_i()
var_2 = search_object_by_name(query=""UIX-456"")
var_3 = works_list(type=[""task""], created_by=[var_1], applies_to_part=[var_2])
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = search_object_by_name(query=""UIX-456"")
var_3 = works_list(type=[""task""], created_by=[var_1], applies_to_part=[var_2])
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""


def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""


def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

        Query: Find work items for part CAPL-123, filter by Rev organization REV-456, and summarize the results. [/INST]

        ```
        var_1 = works_list(applies_to_part=[""CAPL-123""], issue.rev_orgs=[""REV-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(applies_to_part=[""CAPL-123""], issue.rev_orgs=[""REV-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Search for a part named 'Widget123', get all related tasks, and add them to the sprint with ID SPRINT-789 [/INST]

        ```
        var_1 = search_object_by_name(query=""Widget123"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-789"")

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Widget123"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-789"")
"
"
        <s>
        [INST]
        Added Tools: 

        

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""


def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""

        Query: Assign issues created by USER-456 that need a response to the current sprint [/INST]

        ```
        var_1 = works_list(created_by=[""USER-456""], ticket.needs_response=True, type=[""issue""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)

        ```
        </s>
        ","var_1 = works_list(created_by=[""USER-456""], ticket.needs_response=True, type=[""issue""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""


def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""


def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""


def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""

        Query: Identify my tasks that are of p0 priority and add to sprint SPRINT-456 [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(type=[""task""], issue.priority=[""p0""], owned_by=[var_1])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-456"")

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(type=[""task""], issue.priority=[""p0""], owned_by=[var_1])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-456"")
"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: What if consciousness is a fundamental aspect of the universe, akin to space and time? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""


def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
    object_ids (list): A list of object IDs

Returns:
    str: The ID of the generated report
""""""


def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""

        Query: Get tickets needing response and prioritize them for 'Team-A' [/INST]

        ```
        var_1 = search_object_by_name(query=""Team-A"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Team-A"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""


def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""

        Query: Summarize issues from ""RevOrg-Main"" and give a summary of the p3 issues [/INST]

        ```
        var_1 = works_list(issue.rev_orgs=[""RevOrg-Main""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = works_list(issue.priority=[""p3""], issue.rev_orgs=[""RevOrg-Main""], type=[""issue""])
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = works_list(issue.rev_orgs=[""RevOrg-Main""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = works_list(issue.priority=[""p3""], issue.rev_orgs=[""RevOrg-Main""], type=[""issue""])
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""
def assign_issues_to_user(issue_ids, user_id):
 """"""
 Assigns a list of issues to the specified user
 
 Parameters:
  issue_ids (list): A list of issue IDs that need to be assigned
  user_id (str): The user ID to whom the issues will be assigned
 
 Returns:
  None
 """"""
 ', '
 
 def fetch_user_created_work(user_id, type=None):
 """"""
 Retrieves work items created by a specific user
 
 Parameters:
  user_id (str): The ID of the user whose work items are to be retrieved
  type (list): Filters for work of the provided types, e.g., ['issue', 'ticket''']
 
 Returns:
  list: Work items created by the user
 """"""
 ', '
 
 def batch_update_task_status(task_ids, new_status):
 """"""
 Updates the status of multiple tasks in a batch operation
 
 Parameters:
  task_ids (list): A list of task IDs whose status needs updating
  new_status (str): The new status to apply to the tasks
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ', '
 
 def archive_completed_tasks(project_id, completed_since):
 """"""
 Archives tasks that are completed within the given project since the specified time
 
 Parameters:
  project_id (str): The ID of the project containing the tasks
  completed_since (str): Archive tasks completed after this timestamp
 
 Returns:
  int: Number of tasks archived
 """"""
 ', '
 
 def retrieve_user_workload(user_id):
 """"""
 Retrieves the current workload for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose workload is to be retrieved
 
 Returns:
  list: A list containing workload details
 """"""
 


def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""
def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""

        Query: Assign all tickets needing a response to ""ResponderRita"", fetch work items created by ""ResponderRita"", prioritize the tickets, update their status to ""Waiting on Customer"", archive completed tasks in ""ProjectG"" since ""2023-01-25"", and retrieve ""ResponderRita""'s workload to manage her queue. [/INST]

        ```
        var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = search_object_by_name(query=""ResponderRita"")
var_3 = assign_issues_to_user(issue_ids=var_1, user_id=var_2)
var_4 = fetch_user_created_work(user_id=var_2)
var_5 = prioritize_objects(objects=var_4)
var_6 = batch_update_task_status(task_ids=var_4, new_status=""Waiting on Customer"")
var_7 = archive_completed_tasks(project_id=""ProjectG"", completed_since=""2023-01-25"")
var_8 = retrieve_user_workload(user_id=var_2)
        ```
        </s>
        ","var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = search_object_by_name(query=""ResponderRita"")
var_3 = assign_issues_to_user(issue_ids=var_1, user_id=var_2)
var_4 = fetch_user_created_work(user_id=var_2)
var_5 = prioritize_objects(objects=var_4)
var_6 = batch_update_task_status(task_ids=var_4, new_status=""Waiting on Customer"")
var_7 = archive_completed_tasks(project_id=""ProjectG"", completed_since=""2023-01-25"")
var_8 = retrieve_user_workload(user_id=var_2)"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
 work_id (str): The ID of the work item for which the estimation is to be made

Returns:
 float: Estimated hours required to complete the work item
""""""
', '

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
 expense_ids (list): List of expense IDs to calculate the total amount

Returns:
 float: The total amount of the expenses
""""""
', '

def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
 task_ids (list): List of task IDs to filter
 completed (bool): The completion status to filter by. Default is 'True'

Returns:
 list: List of task IDs that match the completion status
""""""
', '

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""
', '

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
 department_id (str): The ID of the department to list members for

Returns:
 list: User IDs of all the members in the department
""""""
', 'def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
 ticket_ids (list): A list of ticket IDs to be assigned
 user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
 None
""""""
', '

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 float: Estimated effort in hours
""""""
', '

def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
 work_item_id (str): The ID of the work item

Returns:
 float: The number of hours until the deadline
""""""
', '

def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
 user_id (str): The ID of the user whose skills are being queried

Returns:
 list: The skills of the user
""""""
', 'def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
 sprint_id (str): The ID of the sprint for workload calculation

Returns:
 float: Total workload in hours
""""""



def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""

        Query: Estimate the hours required to complete work items owned by user ""EngineerSam"" and calculate the total expense of the associated tasks. [/INST]

        ```
        var_1 = search_object_by_name(query=""EngineerSam"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = list(map(estimate_work_hours, var_2))
var_4 = calculate_expense_totals(expense_ids=var_2)
        ```
        </s>
        ","var_1 = search_object_by_name(query=""EngineerSam"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = list(map(estimate_work_hours, var_2))
var_4 = calculate_expense_totals(expense_ids=var_2)"
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""


def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""


def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""

        Query: Search for a work item with the name ""QuickFix"" and then summarize all work items related to the found item [/INST]

        ```
        var_1 = search_object_by_name(query=""QuickFix"")
var_2 = get_similar_work_items(work_id=var_1)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""QuickFix"")
var_2 = get_similar_work_items(work_id=var_1)
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""


def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""


def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""


def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""

        Query: List all issues related to the ""Networking"" project and filter them by priority P2 [/INST]

        ```
        var_1 = search_object_by_name(query=""Networking"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p2""], type=[""issue""])

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Networking"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p2""], type=[""issue""])
"
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""

        Query: Could the universe itself be conscious, experiencing its existence through the multitude of living beings? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        

def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""


def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""

        Query: Find tasks related to REV-456, list them by priority, and add them to the sprint identified by ID SPRINT-789 [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-789"")

        ```
        </s>
        ","var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-789"")
"
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
 object_id (str): The ID of the object to remove from inventory

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
 task_id (str): The ID of the task for which dependencies are requested

Returns:
 list: Dependency task IDs
""""""
', '

def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
 project_id (str): The ID of the project to validate

Returns:
 bool: True if completed, False otherwise
""""""
', '

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
 start_date (str): The start date for the filter range (format: YYYY-MM-DD)
 end_date (str): The end date for the filter range (format: YYYY-MM-DD)
 work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
 list: Work items in the specified date range
""""""
', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
 ticket_id (str): The ID of the ticket where the merged note will be added
 note_ids (list): List of note IDs that will be merged into the ticket
 updated_by (str): The ID of the user performing the merge

Returns:
 str: ID of the updated ticket note
""""""
', '

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
 task_id (str): The ID of the task to be converted
 parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
 bool: True if the conversion was successful, False otherwise
""""""
', '

def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
 user_id (str): The ID of the user whose skills are being queried

Returns:
 list: The skills of the user
""""""
', '

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
 task_id (str): The ID of the task for which to estimate completion time

Returns:
 float: The estimated number of hours to complete the task
""""""
', '

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
 department_id (str): The ID of the department to list members for

Returns:
 list: User IDs of all the members in the department
""""""
', '

def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
 organization_id (str): The ID of the organization to filter contacts
 active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
 list: Contacts associated with the organization
""""""



def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""


def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""

        Query: Validate if the project with ID ""PROJ-42"" is completed and then summarize all the tasks within this project. [/INST]

        ```
        var_1 = validate_project_completion(project_id=""PROJ-42"")
var_2 = works_list(type=[""task""], applies_to_part=[""PROJ-42""])
var_3 = summarize_objects(objects=var_2)
        ```
        </s>
        ","var_1 = validate_project_completion(project_id=""PROJ-42"")
var_2 = works_list(type=[""task""], applies_to_part=[""PROJ-42""])
var_3 = summarize_objects(objects=var_2)"
"
        <s>
        [INST]
        Added Tools: 

        

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""


def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

        Query: Summarize all the tasks that need a response and are in the ""development"" stage. [/INST]

        ```
        var_1 = works_list(stage.name=[""development""], ticket.needs_response=True, type=[""task""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(stage.name=[""development""], ticket.needs_response=True, type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""

        Query: Retrieve work items of type ""task"" and summarize [/INST]

        ```
        var_1 = works_list(type=[""task""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""


def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""


def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""


def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""


def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""

        Query: Create a summary of tickets for the 'BackendTeam' and prioritize by filtering for severity [/INST]

        ```
        var_1 = search_object_by_name(query=""BackendTeam"")
var_2 = works_list(ticket.severity=[""blocker"", ""high"", ""medium"", ""low""], owned_by=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""BackendTeam"")
var_2 = works_list(ticket.severity=[""blocker"", ""high"", ""medium"", ""low""], owned_by=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""


def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""



def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""

        Query: Find and list all tasks in the 'development' stage for component 'COMP-321' [/INST]

        ```
        var_1 = search_object_by_name(query=""COMP-321"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""development""], type=[""task""])

        ```
        </s>
        ","var_1 = search_object_by_name(query=""COMP-321"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""development""], type=[""task""])
"
"
        <s>
        [INST]
        Added Tools: 

        

def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""


def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""


def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""

        Query: Find tickets related to part ENH-789 and categorize them by severity [/INST]

        ```
        var_1 = works_list(applies_to_part=[""ENH-789""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(applies_to_part=[""ENH-789""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
 primary_work_id (str): The ID of the primary work item
 duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
 bool: True if merge was successful, otherwise False
""""""
', '

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
 ticket_id (str): The ID of the ticket that will be linked with related tickets
 related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
 bool: True if the linking is successful, False otherwise
""""""
', '

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
 user_id (str): The ID of the user for whom to calculate the workload

Returns:
 int: The total number of open work items
""""""
', '

def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
 user_id (str): The ID of the user
 days_back (int): The number of past days to look for projects. The default is '30'

Returns:
 list: Project IDs that the user has worked on
""""""
', '

def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
 user_id (str): The ID of the user to set permissions for
 permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
 bool: True if the permission was set successfully, False otherwise
""""""
', '

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
 start_date (str): The start date for the filter range (format: YYYY-MM-DD)
 end_date (str): The end date for the filter range (format: YYYY-MM-DD)
 work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
 list: Work items in the specified date range
""""""
', '

def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
 ticket_id (str): The ID of the ticket to be marked for review
 reviewer_id (str): The ID of the user who should review the ticket

Returns:
 None
""""""
', '

def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
 older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
 active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
 str: ID of tickets archived
""""""
', '

def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
 object_id (str): The ID of the object for which history is requested

Returns:
 list: A list of changes made to the object
""""""
', 'def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
 ticket_id (str): The ID of the ticket to be assigned
 user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""


        Query: Calculate the workload for user ""QAAnalyst"" and list all recent projects they have worked on in the past 45 days. [/INST]

        ```
        
var_1 = search_object_by_name(query=""QAAnalyst"")
var_2 = calculate_workload_for_user(user_id=var_1)
var_3 = list_recent_projects(user_id=var_1, days_back=45)
        ```
        </s>
        ","
var_1 = search_object_by_name(query=""QAAnalyst"")
var_2 = calculate_workload_for_user(user_id=var_1)
var_3 = list_recent_projects(user_id=var_1, days_back=45)"
"
        <s>
        [INST]
        Added Tools: 

        

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""


def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""


def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""

        Query: Retrieve work items owned by USER-456, prioritize them, and summarize the top priorities [/INST]

        ```
        var_1 = works_list(type=[""issue"", ""ticket"", ""task""], owned_by=[""USER-456""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = works_list(type=[""issue"", ""ticket"", ""task""], owned_by=[""USER-456""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""


def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""


def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""

        Query: Summarize all open tasks for the ""Alpha"" project and identify those that require immediate attention. [/INST]

        ```
        var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""


def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""


def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""

        Query: Identify my tickets that need a response and prioritize [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""



def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""

        Query: Find work items related to CAPL-123 that need a response and are owned by user DEVU-456 [/INST]

        ```
        var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], owned_by=[""DEVU-456""], ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])

        ```
        </s>
        ","var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], owned_by=[""DEVU-456""], ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])
"
"
        <s>
        [INST]
        Added Tools: 

        

def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""


def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""

        Query: For customer ""InnovCorp"", get all issues and tasks, then create a list of tasks based on their requirements. [/INST]

        ```
        var_1 = search_object_by_name(query=""InnovCorp"")
var_2 = works_list(type=[""issue"", ""task""], ticket.rev_org=[var_1])
var_3 = create_actionable_tasks_from_text(text=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""InnovCorp"")
var_2 = works_list(type=[""issue"", ""task""], ticket.rev_org=[var_1])
var_3 = create_actionable_tasks_from_text(text=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""

        Query: Find P1 issues and summarize them [/INST]

        ```
        var_1 = works_list(issue.priority=[""p1""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(issue.priority=[""p1""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

        Query: Prioritize tasks related to project Alpha and present a summary [/INST]

        ```
        var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""


def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""


def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""

        Query: Find the current sprint's ID and then add all ""task"" type work items to it [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Prioritize the list of tasks for the ""BetaFeature"" and add high priority tasks to the sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""BetaFeature"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""BetaFeature"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""

        Query: List issues with the source channel 'email' for the user currently logged in [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], ticket.source_channel=[""email""], type=[""issue""])

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], ticket.source_channel=[""email""], type=[""issue""])
"
"
        <s>
        [INST]
        Added Tools: 

        

def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""

        Query: Identify my tasks of type 'issue', summarize and prioritize them [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(type=[""issue""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(type=[""issue""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""

        Query: Check my ownership of issues and get a summary for issues in 'test' stage [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""test""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""test""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""
def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

        Query: Generate a list of issues for REV-456 department, summarize them, and then search for the sprint ID to add them [/INST]

        ```
        var_1 = works_list(issue.rev_orgs=[""REV-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)

        ```
        </s>
        ","var_1 = works_list(issue.rev_orgs=[""REV-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""


def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""


def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""

        Query: Find tickets related to the ""DevOps"" project and give the ""high"" and ""blocker"" severity ones  [/INST]

        ```
        var_1 = search_object_by_name(query=""DevOps"")
var_2 = works_list(ticket.severity=[""high"", ""blocker""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""DevOps"")
var_2 = works_list(ticket.severity=[""high"", ""blocker""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""

        Query: Find issues related to the REV-Engineering department and summarize them. [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-Engineering"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""REV-Engineering"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""


def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""

        Query: Create actionable tasks from the notes of ""ThetaMeeting"" and add them to my dashboard [/INST]

        ```
        var_1 = search_object_by_name(query=""ThetaMeeting"")
var_2 = create_actionable_tasks_from_text(text=var_1)
var_3 = who_am_i()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""ThetaMeeting"")
var_2 = create_actionable_tasks_from_text(text=var_1)
var_3 = who_am_i()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""



def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""


def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""

        Query: What are the side effects of the medication ibuprofen? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""


def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""
def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""


def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""

        Query: List all tasks labeled as ""task"" for the ""ENH-999"" enhancement and summarize the list. [/INST]

        ```
        var_1 = search_object_by_name(query=""ENH-999"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""ENH-999"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""

        Query: Add CAPL-123 related p2 tickets to the sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p2""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p2""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""



def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""


def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""


def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""

        Query: Identify and summarize issues that need a response and are in the 'testing' stage [/INST]

        ```
        var_1 = works_list(stage.name=[""testing""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(stage.name=[""testing""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""


def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""

        Query: Prioritize tickets from REV-321 that need a response and are marked as 'blocker' [/INST]

        ```
        var_1 = works_list(issue.rev_orgs=[""REV-321""], ticket.needs_response=True, ticket.severity=[""blocker""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(issue.rev_orgs=[""REV-321""], ticket.needs_response=True, ticket.severity=[""blocker""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""


def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""

        Query: Fetch all work items related to the product code PROD-321, prioritize them by severity, and summarize the top 5 for review [/INST]

        ```
        var_1 = search_object_by_name(query=""PROD-321"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = var_3[:5]
var_5 = summarize_objects(objects=var_4)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""PROD-321"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = var_3[:5]
var_5 = summarize_objects(objects=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""


        Query:  Prioritize and summarize tickets that need a response with severity high, limiting the results to 22. [/INST]

        ```
        var_1 = works_list(ticket.needs_response=True, ticket.severity=[""high""], type=[""ticket""], limit=22)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = works_list(ticket.needs_response=True, ticket.severity=[""high""], type=[""ticket""], limit=22)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""


def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""


def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""
def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""


def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""

        Query: Extract tasks from project update notes N and summarize them. [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""N"")
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""N"")
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""

        Query: Organize work items by type for the 'Neptune' project and display them in a summarized form [/INST]

        ```
        var_1 = search_object_by_name(query=""Neptune"")
var_2 = works_list(applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Neptune"")
var_2 = works_list(applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""


def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""


def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""

        Query: Return the ID of the current user and list all of their issues with the stage name ""in-progress"" [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(stage.name=[""in-progress""], owned_by=[var_1], type=[""issue""])

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(stage.name=[""in-progress""], owned_by=[var_1], type=[""issue""])
"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Add all P1 tickets to the sprint for the Rev organization REV-TEAM [/INST]

        ```
        var_1 = works_list(issue.priority=[""p1""], ticket.rev_org=[""REV-TEAM""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)

        ```
        </s>
        ","var_1 = works_list(issue.priority=[""p1""], ticket.rev_org=[""REV-TEAM""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Identify work items related to the ""Hardware Upgrade"" task and summarize the tickets within it [/INST]

        ```
        var_1 = search_object_by_name(query=""Hardware Upgrade"")
var_2 = works_list(applies_to_part=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Hardware Upgrade"")
var_2 = works_list(applies_to_part=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""

        Query: List my issues tagged as 'p0', summarize, and get current sprint ID [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(type=[""issue""], issue.priority=[""p0""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(type=[""issue""], issue.priority=[""p0""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Prioritize tickets with severity 'blocker' and associate them with sprint SPRINT-456 [/INST]

        ```
        var_1 = works_list(type=[""ticket""], ticket.severity=[""blocker""])
var_2 = prioritize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-456"")

        ```
        </s>
        ","var_1 = works_list(type=[""ticket""], ticket.severity=[""blocker""])
var_2 = prioritize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-456"")
"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Is beauty an objective reality, or does it exist only in the eye of the beholder? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        

def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""

        Query:  Retrieve all low severity tickets from the CHAT source channel, prioritize them, and summarize them, limiting the number of work items to 23. [/INST]

        ```
        var_1 = works_list(ticket.severity=[""low""], ticket.source_channel=[""CHAT""], limit=23)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = works_list(ticket.severity=[""low""], ticket.source_channel=[""CHAT""], limit=23)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
 issue_id (str): The ID of the issue to be updated
 solution_text (str): The description of the solution to apply to the issue

Returns:
 None
""""""
', '

def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
 title (str): The title of the new ticket
 description (str): A detailed description of the issue or request
 reported_by (str): The ID of the user reporting the ticket

Returns:
 str: The ID of the newly created ticket
""""""
', '

def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
 object_id (str): The ID of the primary object
 related_object_id (str): The ID of the object to relate to the primary

Returns:
 bool: True if the objects were successfully linked, False otherwise
""""""
', '

def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
 user_id (str): The ID of the user whose completed items are being requested

Returns:
 list: Completed items by the user
""""""
', '

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
 work_id (str): The ID of the work item to estimate cost for
 cost_per_hour (float): The cost per hour. Default is '100'

Returns:
 float: Estimated cost
""""""', '

def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
 task_id (str): The ID of the task to be updated with an estimated time
 estimation_hours (float): The estimated time in hours to complete the task

Returns:
 None
""""""
', '

def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
 user_id (str): The ID of the user
 project_id (str, optional): The ID of the project to filter tasks

Returns:
 list: List of task IDs completed by the user
""""""
', '

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
 work_id (str): The ID of the work item to check

Returns:
 bool: True if the work item is complete, False if it lacks information
""""""
', '

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 due_date (str): The new due date for the work item

Returns:
 None: Indicates that the operation was executed without returning any value
""""""
', '

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
 group_id (str): The ID of the group

Returns:
 list: User IDs belonging to the group
""""""



def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""
def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

        Query: List all completed tasks by user ""TeamLead"", estimate the cost for each task, and then create a summarized report of these tasks. [/INST]

        ```
        var_1 = who_am_i()
var_2 = list_completed_tasks_by_user(user_id=""TeamLead"")
var_3 = estimate_cost_for_work(work_id=var_2[0])
var_4 = estimate_cost_for_work(work_id=var_2[1])
var_5 = summarize_objects(objects=var_2)
        ```
        </s>
        ","var_1 = who_am_i()
var_2 = list_completed_tasks_by_user(user_id=""TeamLead"")
var_3 = estimate_cost_for_work(work_id=var_2[0])
var_4 = estimate_cost_for_work(work_id=var_2[1])
var_5 = summarize_objects(objects=var_2)"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Fetch work items for part ENH-789 and filter for issues created by user USER-XYZ [/INST]

        ```
        var_1 = search_object_by_name(query=""USER-XYZ"")
var_2 = works_list(type=[""issue""], applies_to_part=[""ENH-789""], created_by=[var_1])

        ```
        </s>
        ","var_1 = search_object_by_name(query=""USER-XYZ"")
var_2 = works_list(type=[""issue""], applies_to_part=[""ENH-789""], created_by=[var_1])
"
"
        <s>
        [INST]
        Added Tools: 

        def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""

        Query: Identify and summarize work items needing a response for Rev organization REV-ENGINEERING. [/INST]

        ```
        var_1 = works_list(ticket.needs_response=True, ticket.rev_org=[""REV-ENGINEERING""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.needs_response=True, ticket.rev_org=[""REV-ENGINEERING""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""


def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""
def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""

        Query: Find my tasks that need a response, prioritize them, and add them to the sprint I'm working on [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

 
 def track_project_completion(project_id):
 """"""
 Tracks the completion percentage of a project based on completed tasks
 
 Parameters:
  project_id (str): The ID of the project to track
 
 Returns:
  float: Percentage of the project completed
 """"""
 ', '
 
 def find_work_items_by_tag(type, tag):
 """"""
 Finds work items of a certain type with a given tag
 
 Parameters:
  type (str): The type of the work items to filter by
  tag (str): The tag to filter the work items
 
 Returns:
  list: List of work items with the given tag
 """"""
 ', 'def filter_users_by_department(department_id=None, active_only=False):
 """"""
 Filters a list of users that belong to the specified department
 
 Parameters:
  department_id (str): The ID of the department to filter users
  active_only (bool): Filters for only active users if set to True
 
 Returns:
  list: Users in the specified department
 """"""
 ', '
 
 def find_user_by_email(email):
 """"""
 Finds a user in the system by their email address
 
 Parameters:
  email (str): The email address of the user to find
 
 Returns:
  str: ID of the user
 """"""
 ', '
 
 def list_recent_projects(user_id, days_back=30):
 """"""
 Lists all projects a user has worked on in the past number of days
 
 Parameters:
  user_id (str): The ID of the user
  days_back (int): The number of past days to look for projects. The default is '30'
 
 Returns:
  list: Project IDs that the user has worked on
 """"""
 


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""


def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""

        Query: Calculate the completion percentage of project ""PRJ-009"", find all tickets with the tag ""escalated"", filter for users in the ""Finance"" department, locate the user by email ""finance_director@company.com"", and add the work items they own to the current sprint for expedited handling. [/INST]

        ```
        var_1 = track_project_completion(project_id=""PRJ-009"")
var_2 = find_work_items_by_tag(type=""ticket"", tag=""escalated"")
var_3 = filter_users_by_department(department_id=""Finance"")
var_4 = find_user_by_email(email=""finance_director@company.com"")
var_5 = works_list(owned_by=[var_4])
var_6 = get_sprint_id()
var_7 = add_work_items_to_sprint(work_ids=var_5, sprint_id=var_6)
        ```
        </s>
        ","var_1 = track_project_completion(project_id=""PRJ-009"")
var_2 = find_work_items_by_tag(type=""ticket"", tag=""escalated"")
var_3 = filter_users_by_department(department_id=""Finance"")
var_4 = find_user_by_email(email=""finance_director@company.com"")
var_5 = works_list(owned_by=[var_4])
var_6 = get_sprint_id()
var_7 = add_work_items_to_sprint(work_ids=var_5, sprint_id=var_6)"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Find tasks related to the ""Backlog"" stage for projects ""PROJ-321"" and ""PROJ-XYZ"" [/INST]

        ```
        var_1 = works_list(stage.name=[""Backlog""], applies_to_part=[""PROJ-321"", ""PROJ-XYZ""], type=[""task""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(stage.name=[""Backlog""], applies_to_part=[""PROJ-321"", ""PROJ-XYZ""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
 work_id (str): The ID of the work item for which the estimation is to be made

Returns:
 float: Estimated hours required to complete the work item
""""""
', '

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
 start_date (str): The start date for the filter range (format: YYYY-MM-DD)
 end_date (str): The end date for the filter range (format: YYYY-MM-DD)
 work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
 list: Work items in the specified date range
""""""
', '

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
 task_id (str): The ID of the task for which to estimate completion time

Returns:
 float: The estimated number of hours to complete the task
""""""
', '

def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
 user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
 str: URL of the user's avatar image
""""""
', '

def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
 task_id (str): The ID of the task to be marked as complete

Returns:
 bool: True if marked successfully, False otherwise
""""""
', '

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""
', '

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
 task_ids (list): A list of task IDs to filter
 due_date (str): The due date to filter tasks by

Returns:
 list: List of task IDs that have the specified due date
""""""
', '

def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
 project_id (str): The ID of the project to which resources are allocated
 resource_ids (list): A list of resource IDs to allocate to the project

Returns:
 bool: True if resources could be allocated, False otherwise
""""""
', '

def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
 archive_id (str): The ID of the archive from which to retrieve documents
 keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
 list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""', '

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
 data_point_ids (list): List of data point IDs to validate

Returns:
 list: Validation results with status (True or False) for each data point
""""""


        Query: Estimate the hours required to complete work item ""TASK-456"", filter similar tasks by due date ""2023-04-30"", and allocate resources to them based on the estimated hours. [/INST]

        ```
        var_1 = estimate_work_hours(work_id=""TASK-456"")
var_2 = get_similar_work_items(work_id=""TASK-456"")
var_3 = filter_tasks_by_due_date(task_ids=var_2, due_date=""2023-04-30"")
var_4 = allocate_resources_to_project(project_id=var_3, resource_ids=[var_1])
        ```
        </s>
        ","var_1 = estimate_work_hours(work_id=""TASK-456"")
var_2 = get_similar_work_items(work_id=""TASK-456"")
var_3 = filter_tasks_by_due_date(task_ids=var_2, due_date=""2023-04-30"")
var_4 = allocate_resources_to_project(project_id=var_3, resource_ids=[var_1])"
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""


def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""

        Query: Identify and summarize high priority tasks that need a response [/INST]

        ```
        var_1 = works_list(issue.priority=[""high""], ticket.needs_response=True, type=[""task""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(issue.priority=[""high""], ticket.needs_response=True, type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""

def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""


def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""

        Query: Summarize the issues related to REV-456 and filter for P2 priority [/INST]

        ```
        var_1 = works_list(issue.rev_orgs=[""REV-456""], issue.priority=[""p2""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(issue.rev_orgs=[""REV-456""], issue.priority=[""p2""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Summarize my tasks with ""medium"" severity and find similar work items [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""medium""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_similar_work_items(work_id=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""medium""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_similar_work_items(work_id=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""
def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""


def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
 work_id (str): The ID of the work item to check

Returns:
 bool: True if the work item is complete, False if it lacks information
""""""
', '

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
 event_type (str): The type of event to log
 description (str): A brief description of the event
 user_id (str): The ID of the user involved in the event, if applicable

Returns:
 str: The ID of the logged event
""""""
', '

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which the progress report is needed
 report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
 str: The generated progress report
""""""
', '

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
 task_id (str): The ID of the task for which to estimate completion time

Returns:
 float: The estimated number of hours to complete the task
""""""
', '

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task will be assigned

Returns:
 bool: True if assignment was successful, otherwise False
""""""
', '

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
 department_id (str): The ID of the department to list members for

Returns:
 list: User IDs of all the members in the department
""""""
', '

def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be calculated

Returns:
 float: The calculated workload value
""""""
', '

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
 part_id (str): The ID of the part to check in inventory
 minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
 bool: True if the minimum quantity is available; otherwise False
""""""
', '

def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
 project_id (str): The ID of the project to which resources are allocated
 resource_ids (list): A list of resource IDs to allocate to the project

Returns:
 bool: True if resources could be allocated, False otherwise
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""



def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""

        Query: Check if work item ""TASK-789"" is complete and generate a detailed progress report for the project associated with this work item. [/INST]

        ```
        var_1 = validate_work_item_completeness(work_id=""TASK-789"")
var_2 = search_object_by_name(query=""TASK-789"")
var_3 = generate_progress_report(project_id=var_2, report_format=""detailed"")
        ```
        </s>
        ","var_1 = validate_work_item_completeness(work_id=""TASK-789"")
var_2 = search_object_by_name(query=""TASK-789"")
var_3 = generate_progress_report(project_id=var_2, report_format=""detailed"")"
"
        <s>
        [INST]
        Added Tools: 

        

def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""

        Query: What are the most common phobias people have? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""

        Query: Discover current sprint ID and return it [/INST]

        ```
        var_1 = get_sprint_id()

        ```
        </s>
        ","var_1 = get_sprint_id()
"
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""

        Query: Retrieve the sprint ID for my team's sprint called 'SuperSprint' [/INST]

        ```
        var_1 = search_object_by_name(query=""SuperSprint"")

        ```
        </s>
        ","var_1 = search_object_by_name(query=""SuperSprint"")
"
"
        <s>
        [INST]
        Added Tools: 

        

def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""

        Query: Identify and prioritize issues created by user USER-XYZ [/INST]

        ```
        var_1 = works_list(type=[""issue""], created_by=[""USER-XYZ""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(type=[""issue""], created_by=[""USER-XYZ""])
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""

        Query: Summarize and prioritize issues created by user USER-XYZ [/INST]

        ```
        var_1 = works_list(created_by=[""USER-XYZ""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = works_list(created_by=[""USER-XYZ""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""


def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""


def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""


def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""

        Query: Create a list of action items from the meeting notes and add to my 'To-Do' tasks [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""meeting notes"")

        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""meeting notes"")
"
"
        <s>
        [INST]
        Added Tools: 

        

def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""

        Query:  Retrieve and summarize work items of type issue for the LEGAL rev organization, limiting the results to 18. [/INST]

        ```
        var_1 = works_list(issue.rev_orgs=[""LEGAL""], type=[""issue""], limit=18)
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(issue.rev_orgs=[""LEGAL""], type=[""issue""], limit=18)
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
    object_ids (list): A list of object IDs

Returns:
    str: The ID of the generated report
""""""


def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""


def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""

        Query: Find work items for component ABC-123 and summarize them [/INST]

        ```
        var_1 = search_object_by_name(query=""component ABC-123"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""component ABC-123"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""

        Query: Retrieve and prioritize all tasks related to the 'UX' part that need a response [/INST]

        ```
        var_1 = works_list(applies_to_part=[""UX""], ticket.needs_response=True, type=[""task""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(applies_to_part=[""UX""], ticket.needs_response=True, type=[""task""])
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""

        Query: Can you provide the schedule for the upcoming FIFA World Cup? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        

def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""


def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""


def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""

        Query: Find work items associated with REV-Engineering, prioritize and add them to the sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-Engineering"")
var_2 = works_list(issue.rev_orgs=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""REV-Engineering"")
var_2 = works_list(issue.rev_orgs=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Retrieve the ID of the current user, find issues with 'medium' priority that need a response, and summarize them. [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""medium""], ticket.needs_response=True, type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""medium""], ticket.needs_response=True, type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Could the universe be a vast, intricate simulation created by a higher intelligence? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""


def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""

        Query: Get the current sprint ID and list all medium severity tickets assigned to it [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(ticket.severity=[""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(ticket.severity=[""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
    object_ids (list): A list of object IDs

Returns:
    str: The ID of the generated report
""""""


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""


def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""

        Query: Find tasks related to the ""AlphaProject"" and arrange them by their due dates. [/INST]

        ```
        var_1 = search_object_by_name(query=""AlphaProject"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])

        ```
        </s>
        ","var_1 = search_object_by_name(query=""AlphaProject"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
"
"
        <s>
        [INST]
        Added Tools: 

        

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""



def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""


def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""
def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""


def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""

        Query: Identify tickets related to ""Server Crash"" incident, prioritize them by impact and list the IDs. [/INST]

        ```
        var_1 = search_object_by_name(query=""Server Crash"")
var_2 = works_list(type=[""ticket""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Server Crash"")
var_2 = works_list(type=[""ticket""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""


def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""

        Query: Look up the ID of the user 'UserX' and summarize all their owned work items [/INST]

        ```
        var_1 = search_object_by_name(query=""UserX"")
var_2 = works_list(owned_by=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""UserX"")
var_2 = works_list(owned_by=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""

        Query: Find and prioritize tasks for part ""PROD-789"" [/INST]

        ```
        var_1 = search_object_by_name(query=""PROD-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""PROD-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""


def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""
def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""


def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""

        Query: Extract actionable tasks from meeting notes 'MeetingNotesA' and prioritize them. [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""MeetingNotesA"")
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""MeetingNotesA"")
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""


def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""


def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""



def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""

        Query: Find work items related to ""CAPL-123"" that need a response, and list them in order of priority [/INST]

        ```
        var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""


def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""


def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""
def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""


def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""

        Query: Find all tasks related to the Epic EPIC-321 and sort them by priority. [/INST]

        ```
        var_1 = search_object_by_name(query=""EPIC-321"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""EPIC-321"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Summarize all P2 issues from Rev organization 'ORG-678' and assign them to developer 'DEVA-456'. [/INST]

        ```
        var_1 = search_object_by_name(query=""ORG-678"")
var_2 = works_list(issue.priority=[""p2""], issue.rev_orgs=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = search_object_by_name(query=""DEVA-456"")
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""ORG-678"")
var_2 = works_list(issue.priority=[""p2""], issue.rev_orgs=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = search_object_by_name(query=""DEVA-456"")
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""
def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""


def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""


def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""

        Query: For part PROD-456, summarize issues, create tasks and add to sprint [/INST]

        ```
        var_1 = works_list(applies_to_part=[""PROD-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = works_list(applies_to_part=[""PROD-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""



def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""

        Query: Summarize the current sprint's tasks for my team [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""
def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""

        Query: Summarize new issues created by user USER-321 [/INST]

        ```
        var_1 = works_list(created_by=[""USER-321""], issue.priority=[""p0"", ""p1"", ""p2"", ""p3""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(created_by=[""USER-321""], issue.priority=[""p0"", ""p1"", ""p2"", ""p3""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""


def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""
def assign_issues_to_user(issue_ids, user_id):
 """"""
 Assigns a list of issues to the specified user
 
 Parameters:
  issue_ids (list): A list of issue IDs that need to be assigned
  user_id (str): The user ID to whom the issues will be assigned
 
 Returns:
  None
 """"""
 ', '
 
 def fetch_user_created_work(user_id, type=None):
 """"""
 Retrieves work items created by a specific user
 
 Parameters:
  user_id (str): The ID of the user whose work items are to be retrieved
  type (list): Filters for work of the provided types, e.g., ['issue', 'ticket''']
 
 Returns:
  list: Work items created by the user
 """"""
 ', '
 
 def batch_update_task_status(task_ids, new_status):
 """"""
 Updates the status of multiple tasks in a batch operation
 
 Parameters:
  task_ids (list): A list of task IDs whose status needs updating
  new_status (str): The new status to apply to the tasks
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ', '
 
 def archive_completed_tasks(project_id, completed_since):
 """"""
 Archives tasks that are completed within the given project since the specified time
 
 Parameters:
  project_id (str): The ID of the project containing the tasks
  completed_since (str): Archive tasks completed after this timestamp
 
 Returns:
  int: Number of tasks archived
 """"""
 ', '
 
 def retrieve_user_workload(user_id):
 """"""
 Retrieves the current workload for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose workload is to be retrieved
 
 Returns:
  list: A list containing workload details
 """"""
 


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""

        Query: Locate all tickets from the ""Email"" source channel, assign them to ""AgentAlex"", summarize the tickets, batch update their status to ""Closed"", archive completed tasks in ""ProjectD"" since ""2023-01-15"", and retrieve ""AgentAlex""'s workload for planning. [/INST]

        ```
        var_1 = works_list(ticket.source_channel=[""Email""], type=[""ticket""])
var_2 = search_object_by_name(query=""AgentAlex"")
var_3 = assign_issues_to_user(issue_ids=var_1, user_id=var_2)
var_4 = summarize_objects(objects=var_1)
var_5 = batch_update_task_status(task_ids=var_1, new_status=""Closed"")
var_6 = archive_completed_tasks(project_id=""ProjectD"", completed_since=""2023-01-15"")
var_7 = retrieve_user_workload(user_id=var_2)
        ```
        </s>
        ","var_1 = works_list(ticket.source_channel=[""Email""], type=[""ticket""])
var_2 = search_object_by_name(query=""AgentAlex"")
var_3 = assign_issues_to_user(issue_ids=var_1, user_id=var_2)
var_4 = summarize_objects(objects=var_1)
var_5 = batch_update_task_status(task_ids=var_1, new_status=""Closed"")
var_6 = archive_completed_tasks(project_id=""ProjectD"", completed_since=""2023-01-15"")
var_7 = retrieve_user_workload(user_id=var_2)"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""


def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""
def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""

        Query: What if our perception of time is a construct, and past, present, and future exist simultaneously? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""


def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""


def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""

        Query: Retrieve current sprint's ID and list all P2 issues [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p2""], type=[""issue""])

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p2""], type=[""issue""])
"
"
        <s>
        [INST]
        Added Tools: 

        

def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""


def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""

        Query: For ""Gamma"" feature, get the issues, summarize, and add to my sprint if they are high priority [/INST]

        ```
        var_1 = search_object_by_name(query=""Gamma"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""high""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = who_am_i()
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_5)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Gamma"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""high""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = who_am_i()
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_5)
"
"
        <s>
        [INST]
        Added Tools: 

        

def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""


def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""

        Query: Generate a list of P1 priority issues for user USER-XYZ and summarize the result [/INST]

        ```
        var_1 = works_list(created_by=[""USER-XYZ""], issue.priority=[""p1""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(created_by=[""USER-XYZ""], issue.priority=[""p1""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""

        Query: Find work items related to multiple parts and determine if any need responses [/INST]

        ```
        var_1 = works_list(ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])

        ```
        </s>
        ","var_1 = works_list(ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])
"
"
        <s>
        [INST]
        Added Tools: 

        

def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""


def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""

        Query: How many calories are burned by running for 30 minutes? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""


def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""

        Query: Retrieve my tasks awaiting response and organize them by urgency [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""



def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""


def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""

        Query: Is reality a stable construct, or does it shift based on our observations and beliefs? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""

        Query: Identify work items related to the 'Customer Engagement' project and create a prioritized list [/INST]

        ```
        var_1 = search_object_by_name(query=""Customer Engagement"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Customer Engagement"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""


def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""

        Query: How do I improve my credit score? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""


def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""


def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""

        Query: Could reality be a collective dream shared by all living beings? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        

def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""


def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""

        Query: Summarize all tickets that need a response from the WEB source channel and limit the number of work items to 45. [/INST]

        ```
        var_1 = works_list(ticket.source_channel=[""WEB""], ticket.needs_response=True, limit=45, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.source_channel=[""WEB""], ticket.needs_response=True, limit=45, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""

        Query: Create tasks from meeting notes Notes and prioritize them [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""Notes"")
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""Notes"")
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""


def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""


def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""


def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""


def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""

        Query: Retrieve the current sprint's ID and add newly created tickets by 'DEVU-456' to it. [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(created_by=[""DEVU-456""], type=[""ticket""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(created_by=[""DEVU-456""], type=[""ticket""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""

        Query: Find work items related to part CAPL-456, summarize them, and determine the current sprint [/INST]

        ```
        var_1 = works_list(applies_to_part=[""CAPL-456""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()

        ```
        </s>
        ","var_1 = works_list(applies_to_part=[""CAPL-456""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""


def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""

        Query: Retrieve and prioritize tickets from channel 'email' for analysis. [/INST]

        ```
        var_1 = works_list(ticket.source_channel=[""email""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.source_channel=[""email""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
 issue_id (str): The ID of the issue to be updated
 solution_text (str): The description of the solution to apply to the issue

Returns:
 None
""""""
', '

def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
 ticket_id (str): The ID of the ticket to be updated
 new_status (str): The new status to update the ticket with

Returns:
 bool: True if the update was successful, otherwise False
""""""
', '

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
 text (str): The text from which keywords are to be extracted

Returns:
 list: A list of extracted keywords
""""""
', '

def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
 primary_task_id (str): The ID of the primary task which remains after the merge
 duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
 None
""""""
', '

def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
 str: The status of the ticket
""""""
', '

def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
 user_id (str): The ID of the user to check for overdue tasks

Returns:
 None
""""""
', '

def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
 organization_id (str): The ID of the organization to filter contacts
 active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
 list: Contacts associated with the organization
""""""
', '

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', 'def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
 project_ids (list): A list of project IDs to filter
 status (str): The status to filter by, default is 'active'

Returns:
 list: Project IDs matching the status
""""""
', '

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
 work_id (str): The ID of the work item to be reassigned
 new_owner_id (str): The user ID of the new owner

Returns:
 bool: True if reassignment is successful, False otherwise
""""""


        Query: Check the status of tickets created by user ""SupportAgent1"", update the status to ""Resolved"" for those that are still open, and notify the user of any overdue tasks. [/INST]

        ```
        var_1 = search_object_by_name(query=""SupportAgent1"")
var_2 = works_list(created_by=[var_1], type=[""ticket""])
var_3 = check_ticket_status(ticket_id=var_2)
var_4 = update_ticket_status(ticket_id=var_2, new_status=""Resolved"")
var_5 = notify_user_of_overdue_tasks(user_id=var_1)
        ```
        </s>
        ","var_1 = search_object_by_name(query=""SupportAgent1"")
var_2 = works_list(created_by=[var_1], type=[""ticket""])
var_3 = check_ticket_status(ticket_id=var_2)
var_4 = update_ticket_status(ticket_id=var_2, new_status=""Resolved"")
var_5 = notify_user_of_overdue_tasks(user_id=var_1)"
"
        <s>
        [INST]
        Added Tools: 

        

def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""


def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""

        Query: Summarize work items related to ENH-456 by Developer X [/INST]

        ```
        var_1 = search_object_by_name(query=""Developer X"")
var_2 = works_list(created_by=[var_1], applies_to_part=[""ENH-456""], type=[""work""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Developer X"")
var_2 = works_list(created_by=[var_1], applies_to_part=[""ENH-456""], type=[""work""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
 prefix (str): A prefix for the identifier
 use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
 str: The generated unique identifier
""""""

```', '

def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
 sprint_id (str): The ID of the ticket

Returns:
 list: A list of changes made to the sprint
""""""
', 'def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
 issue_id (str): The ID of the issue to be updated
 new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
 primary_task_id (str): The ID of the primary task which remains after the merge
 duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
 None
""""""
', '

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
 user_id (str): The ID of the user whose tasks are to be listed
 completed (bool): If True, only completed tasks are returned

Returns:
 list: A list of tasks assigned to the user
""""""
', '

def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
 user_id (str): The ID of the user whose activity is being logged
 activity_description (str): A description of the activity

Returns:
 bool: True if the logging was successful, False otherwise
""""""
', '

def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
 project_id (str): The ID of the project containing the tasks
 completed_since (str): Archive tasks completed after this timestamp

Returns:
 int: Number of tasks archived
""""""
', '

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
 expense_ids (list): List of expense IDs to calculate the total amount

Returns:
 float: The total amount of the expenses
""""""
', '

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
 work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
 int: The number of work items successfully archived
""""""
', '

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
 task_ids (list): A list of task IDs to filter
 due_date (str): The due date to filter tasks by

Returns:
 list: List of task IDs that have the specified due date
""""""



def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""


def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""


def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""


def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""

        Query: Generate a unique identifier for a new project, log this activity for user ""AdminUser"", and then archive all completed work items related to this project. [/INST]

        ```
        var_1 = generate_unique_identifier(prefix=""project"")
var_2 = who_am_i()
var_3 = log_user_activity(user_id=""AdminUser"", activity_description=""Generated unique identifier for new project: "" + var_1)
var_4 = search_object_by_name(query=var_1)
var_5 = works_list(type=[""issue"", ""ticket"", ""task""], owned_by=[var_4], stage.name=[""closed"", ""resolved"", ""done"", ""completed""])
var_6 = archive_completed_work(work_ids=var_5)
        ```
        </s>
        ","var_1 = generate_unique_identifier(prefix=""project"")
var_2 = who_am_i()
var_3 = log_user_activity(user_id=""AdminUser"", activity_description=""Generated unique identifier for new project: "" + var_1)
var_4 = search_object_by_name(query=var_1)
var_5 = works_list(type=[""issue"", ""ticket"", ""task""], owned_by=[var_4], stage.name=[""closed"", ""resolved"", ""done"", ""completed""])
var_6 = archive_completed_work(work_ids=var_5)"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Summarize the tasks related to the ""AlphaProject"" and identify them after prioritizing [/INST]

        ```
        var_1 = search_object_by_name(query=""AlphaProject"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""AlphaProject"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""

 
 def validate_work_item_status(work_item_id, status_options):
 """"""
 Checks if the given work item has a status that is among the provided options
 
 Parameters:
  work_item_id (str): The ID of the work item to check
  status_options (list): A list of valid status options
 
 Returns:
  bool: True if status is valid, False otherwise
 """"""
 ', '
 
 def list_all_blocked_tickets():
 """"""
 Lists all tickets that are currently blocked
 
 Returns:
  list: Ticket IDs that are currently blocked
 """"""', '
 
 def get_user_contact_info(user_id):
 """"""
 Retrieves contact information for a user
 
 Parameters:
  user_id (str): The ID of the user whose contact information is requested
 
 Returns:
  str: The contact information of the user
 """"""
 ', '
 
 def calculate_progress(project_id):
 """"""
 Calculates the overall progress of a given project as a percentage
 
 Parameters:
  project_id (str): The ID of the project for which progress is being calculated
 
 Returns:
  float: The progress percentage of the project
 """"""
 ', '
 
 def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
 """"""
 Filters a list of ticket IDs based on a date range
 
 Parameters:
  ticket_ids (list): A list of ticket IDs to filter
  start_date (str): The start date for the range
  end_date (str, optional): The end date for the range, defaults to None
 
 Returns:
  list: Filtered list of ticket IDs
 """"""
 


def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""

        Query: Validate the status of work item ""TASK-456"" to ensure it's either ""Open"" or ""Blocked"", list all blocked tickets, and then prioritize and summarize any common items between the two lists. [/INST]

        ```
        var_1 = validate_work_item_status(work_item_id=""TASK-456"", status_options=[""Open"", ""Blocked""])
var_2 = list_all_blocked_tickets()
var_3 = filter_tickets_by_date(ticket_ids=var_2, start_date=""start_of_current_sprint"", end_date=""end_of_current_sprint"")
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)
        ```
        </s>
        ","var_1 = validate_work_item_status(work_item_id=""TASK-456"", status_options=[""Open"", ""Blocked""])
var_2 = list_all_blocked_tickets()
var_3 = filter_tickets_by_date(ticket_ids=var_2, start_date=""start_of_current_sprint"", end_date=""end_of_current_sprint"")
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)"
"
        <s>
        [INST]
        Added Tools: 

        

def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""


def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""

        Query: Summarize my tasks and filter for those in ""development"" stage [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""


def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""
def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

        Query: Summarize all tickets marked as 'needs response' from the customer service channel [/INST]

        ```
        var_1 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.source_channel=[""customer service""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.source_channel=[""customer service""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""


def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""

        Query: Create a summary of issues in 'QA Testing' stage for part 'UIX-456'. [/INST]

        ```
        var_1 = works_list(type=[""issue""], stage.name=[""QA Testing""], applies_to_part=[""UIX-456""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(type=[""issue""], stage.name=[""QA Testing""], applies_to_part=[""UIX-456""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""


def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""



def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""

        Query: Check for any unresolved issues from ""Critical-Subsystem"" and prioritize them for the current sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""Critical-Subsystem"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Critical-Subsystem"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""


def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""

        Query: Is there a limit to human progress, beyond which our advancements become a detriment? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        

def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""
def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""


def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""

        Query: Summarize all p2 priority issues and identify those related to the product PROD-789. [/INST]

        ```
        var_1 = works_list(issue.priority=[""p2""], type=[""issue""])
var_2 = search_object_by_name(query=""PROD-789"")
var_3 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(issue.priority=[""p2""], type=[""issue""])
var_2 = search_object_by_name(query=""PROD-789"")
var_3 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""


def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""


def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""


def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""

        Query: Find tickets needing a response and list them by priority [/INST]

        ```
        var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""

        Query: Create a summary of my tasks that are overdue and prioritize them for completion [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""

        Query: Find tasks associated with product PROD-456 and categorize them by priority [/INST]

        ```
        var_1 = search_object_by_name(query=""PROD-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""PROD-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""


def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""

        Query: Is there a purpose to the vastness of the cosmos, or is it a canvas for the expression of infinite possibilities? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        

def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""


def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""


def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""


def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""

        Query: What if our understanding of reality is limited by the capacity of our sensory perception? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""



def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""

        Query: Prioritize all tasks related to CAPL-789 and add them to the sprint with ID SPRINT-456 [/INST]

        ```
        var_1 = search_object_by_name(query=""CAPL-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-456"")

        ```
        </s>
        ","var_1 = search_object_by_name(query=""CAPL-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-456"")
"
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""

        Query: Summarize works of type 'issue' for user USER-123 [/INST]

        ```
        var_1 = works_list(created_by=[""USER-123""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(created_by=[""USER-123""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""

        Query: Can you provide the biography of Marie Curie? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        

        Query: List all tasks for the current user and organize them by priority [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""


def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

        Query: Retrieve the current sprint's ID and list all P2 tickets that need a response [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p2""], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p2""], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Organize my P2 tickets by priority and add them to the sprint [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], issue.priority=[""p2""], owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], issue.priority=[""p2""], owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""


def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""


def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""

        Query: Find tickets related to the ""Billing"" feature, prioritize by severity, and summarize for the team meeting [/INST]

        ```
        var_1 = search_object_by_name(query=""Billing"")
var_2 = works_list(applies_to_part=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Billing"")
var_2 = works_list(applies_to_part=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""

        Query: Retrieve the current sprint ID and add all tasks labeled as ""documentation"" to it [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(type=[""documentation""], type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(type=[""documentation""], type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""
def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""


def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""


def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""

        Query: Find and summarize all P2 tickets that require a response [/INST]

        ```
        var_1 = works_list(issue.priority=[""p2""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(issue.priority=[""p2""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""

        Query: Summarize my tasks, prioritize them and add them to the sprint [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""

        Query: Locate tasks with the work type ticket owned by HelpdeskAgent and summarize them with a limit of 35 work items. [/INST]

        ```
        var_1 = search_object_by_name(query=""HelpdeskAgent"")
var_2 = works_list(owned_by=[var_1], type=[""ticket""], limit=35)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""HelpdeskAgent"")
var_2 = works_list(owned_by=[var_1], type=[""ticket""], limit=35)
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""


def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""


def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""

        Query: Retrieve and summarize tasks related to Project Alpha [/INST]

        ```
        var_1 = search_object_by_name(query=""Project Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Project Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""



def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""
def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""


def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""


def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""


def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

        Query: flimit [/INST]

        ```
        #Unanswerable_Invalid_Query_Error

        ```
        </s>
        ","#Unanswerable_Invalid_Query_Error
"
"
        <s>
        [INST]
        Added Tools: 

        def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""

        Query: Find work items related to project PROJ-456 that need a response and are in the 'development' stage [/INST]

        ```
        var_1 = search_object_by_name(query=""PROJ-456"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, stage.name=[""development""], type=[""work""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""PROJ-456"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, stage.name=[""development""], type=[""work""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""


def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""


def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""


def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""

        Query: Generate a list of tasks for the ""Product Launch"" project and summarize them [/INST]

        ```
        var_1 = search_object_by_name(query=""Product Launch"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Product Launch"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""


def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""

        Query: Prioritize tasks related to the 'Frontend' part and summarize them [/INST]

        ```
        var_1 = search_object_by_name(query=""Frontend"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Frontend"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""


def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""


def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""

        Query: Find and prioritize work items for ""Engineering"" department and summarize them [/INST]

        ```
        var_1 = search_object_by_name(query=""Engineering"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], issue.rev_orgs=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Engineering"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], issue.rev_orgs=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
 issue_id (str): The ID of the issue to be updated
 new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
 project_id (str): The ID of the project for which the budget is calculated
 cost_limit (float): The cost limit for the project's budget

Returns:
 float: The amount allocated to the project budget
""""""
', '

def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
 user_ids (list): A list of user IDs to be removed from the group
 group_id (str): The ID of the group from which the users should be removed

Returns:
 bool: Status of the removal
""""""
', '

def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
 report_template_id (str): The ID of the report template to use
 data_source_id (str): The ID of the data source

Returns:
 str: Generated report
""""""
', 'def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
 project_ids (list): A list of project IDs to filter
 status (str): The status to filter by, default is 'active'

Returns:
 list: Project IDs matching the status
""""""
', '

def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
 project_id (str): The ID of the project to track

Returns:
 float: Percentage of the project completed
""""""
', '

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
 object_id (str): The ID of the object to be removed
 sprint_id (str): The ID of the project from which the object should be removed

Returns:
 list: Returns the updated list of sprint objects
""""""
', '

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
 event_type (str): The type of event to log
 description (str): A brief description of the event
 user_id (str): The ID of the user involved in the event, if applicable

Returns:
 str: The ID of the logged event
""""""
', '

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
 department_id (str): The ID of the department to list members for

Returns:
 list: User IDs of all the members in the department
""""""
', '

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
 work_id (str): The ID of the work item to check

Returns:
 bool: True if the work item is complete, False if it lacks information
""""""



def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""

        Query: Update the status of issue ""ISSUE-456"" to ""resolved"", validate its completeness, and if complete, log the event with the description ""Issue ISSUE-456 resolved and verified for completeness"". [/INST]

        ```
        var_1 = update_issue_status(issue_id=""ISSUE-456"", new_status=""resolved"")
var_2 = validate_work_item_completeness(work_id=""ISSUE-456"")
var_3 = log_system_event(event_type=""issue_update"", description=""Issue ISSUE-456 resolved and verified for completeness"", user_id=None)
        ```
        </s>
        ","var_1 = update_issue_status(issue_id=""ISSUE-456"", new_status=""resolved"")
var_2 = validate_work_item_completeness(work_id=""ISSUE-456"")
var_3 = log_system_event(event_type=""issue_update"", description=""Issue ISSUE-456 resolved and verified for completeness"", user_id=None)"
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""
def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""

def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
 user_id (str): The ID of the user whose status is to be updated
 status (str): The new status to apply to the user account

Returns:
 str: updated User Id
""""""
', '

def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
 project_id (str): The ID of the project containing the tasks
 completed_since (str): Archive tasks completed after this timestamp

Returns:
 int: Number of tasks archived
""""""
', 'def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
 issue_ids (list): A list of issue IDs to be linked to the project
 project_id (str): The ID of the project to which the issues should be linked

Returns:
 bool: Status of the linking action
""""""
', '

def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
 project_id (str): The ID of the project to validate

Returns:
 bool: True if completed, False otherwise
""""""
', '

def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
 primary_record_id (str): The ID of the primary record to keep
 duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
 bool: True if the merge was successful; otherwise False
""""""
', '

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 float: Estimated effort in hours
""""""
', 'def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
 work_item_ids (list): A list of work item IDs for which due dates are required
 urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
 list: Due dates for the specified work items
""""""
', '

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
 task_id (str): The ID of the task
 complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
 float: Estimated duration in hours
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""
', '

def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
 task_id (str): The ID of the task to be marked as complete

Returns:
 bool: True if marked successfully, False otherwise
""""""



def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""

        Query: Retrieve the latest sprint report for completed tasks in project ""PRJ-456"" and update the user ID ""usr_789"" to status ""active"". [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = create_report_for_sprint(sprint_id=var_1, report_type=""completed_tasks"")
var_3 = search_object_by_name(query=""PRJ-456"")
var_4 = update_user_ID(user_id=""usr_789"", status=""active"")
        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = create_report_for_sprint(sprint_id=var_1, report_type=""completed_tasks"")
var_3 = search_object_by_name(query=""PRJ-456"")
var_4 = update_user_ID(user_id=""usr_789"", status=""active"")"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""

        Query: List all tasks owned by DEVU-321 that are in the 'in-progress' stage and summarize them. [/INST]

        ```
        var_1 = works_list(owned_by=[""DEVU-321""], stage.name=[""in-progress""], type=[""task""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(owned_by=[""DEVU-321""], stage.name=[""in-progress""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""


def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""

        Query:  Retrieve and prioritize tasks created by QA-LEAD, and add them to the current sprint, limiting the results to 33. [/INST]

        ```
        var_1 = works_list(created_by=[""QA-LEAD""], type=[""task""], limit=33)
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        ","var_1 = works_list(created_by=[""QA-LEAD""], type=[""task""], limit=33)
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""


def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""


def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""

        Query: Find and summarize tickets that need a response and are of medium severity [/INST]

        ```
        var_1 = works_list(ticket.needs_response=True, ticket.severity=[""medium""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.needs_response=True, ticket.severity=[""medium""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""

        Query: Find and prioritize all tickets needing response from user ID USER-456 [/INST]

        ```
        var_1 = search_object_by_name(query=""USER-456"")
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""USER-456"")
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""


def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""


def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""


def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""


def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""

        Query:  Locate and summarize tickets from the PHONE source channel with severity high, limiting the results to 40. [/INST]

        ```
        var_1 = works_list(ticket.source_channel=[""PHONE""], ticket.severity=[""high""], type=[""ticket""], limit=40)
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.source_channel=[""PHONE""], ticket.severity=[""high""], type=[""ticket""], limit=40)
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""


def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""

        Query: List all items of type 'issue' I own and summarize them for the current sprint [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(type=[""issue""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(type=[""issue""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Create actionable tasks from the meeting notes ""M"" and assign them to the current sprint [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)

        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""

        Query: Create tasks for P1 issues related to CAPL-456 and add them to sprint SPRINT-456 [/INST]

        ```
        var_1 = search_object_by_name(query=""CAPL-456"")
var_2 = works_list(issue.priority=[""p1""], applies_to_part=[var_1], type=[""issue""])
var_3 = create_actionable_tasks_from_text(text=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-456"")

        ```
        </s>
        ","var_1 = search_object_by_name(query=""CAPL-456"")
var_2 = works_list(issue.priority=[""p1""], applies_to_part=[var_1], type=[""issue""])
var_3 = create_actionable_tasks_from_text(text=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-456"")
"
"
        <s>
        [INST]
        Added Tools: 

        

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""


def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""

        Query: Could the concept of good and evil be fluid, evolving with the changing dynamics of society? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""
def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""


def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""

def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""

        Query: Find work items by part identifiers and summarize [/INST]

        ```
        var_1 = works_list(type=[""issue"", ""ticket"", ""task""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(type=[""issue"", ""ticket"", ""task""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
 event_type (str): The type of event to log
 description (str): A brief description of the event
 user_id (str): The ID of the user involved in the event, if applicable

Returns:
 str: The ID of the logged event
""""""
', '

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact info is requested

Returns:
 str: Contact information of the user
""""""
', '

def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
 email (str): The email address of the user to find

Returns:
 str: ID of the user
""""""
', '

def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
 object_ids (list): A list of object IDs

Returns:
 str: The ID of the generated report
""""""
', '

def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
 archive_id (str): The ID of the archive from which to retrieve documents
 keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
 list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""', '

def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
 title (str): The title of the new ticket
 description (str): A detailed description of the issue or request
 reported_by (str): The ID of the user reporting the ticket

Returns:
 str: The ID of the newly created ticket
""""""
', '

def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
 ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
 bool: True if the ticket was marked as resolved, False otherwise
""""""
', '

def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
 primary_record_id (str): The ID of the primary record to keep
 duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
 bool: True if the merge was successful; otherwise False
""""""
', '

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 due_date (str): The new due date for the work item

Returns:
 None: Indicates that the operation was executed without returning any value
""""""
', '

def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
 user_id (str): The ID of the user to be removed
 project_id (str): The ID of the project from which the user is to be removed

Returns:
 bool: True if the user is successfully removed, False otherwise
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""

        Query: Retrieve the contact information for user ""User123"", then use it to create a new ticket describing a system issue they reported, and log the event in the system. [/INST]

        ```
        var_1 = find_user_by_email(email=""User123"")
var_2 = retrieve_user_contact_info(user_id=var_1)
var_3 = create_new_ticket(title=""System Issue Reported"", description=""A system issue has been reported by the user."", reported_by=var_1)
var_4 = log_system_event(event_type=""Ticket Creation"", description=""A new ticket was created for a system issue reported by the user."", user_id=var_1)
        ```
        </s>
        ","var_1 = find_user_by_email(email=""User123"")
var_2 = retrieve_user_contact_info(user_id=var_1)
var_3 = create_new_ticket(title=""System Issue Reported"", description=""A system issue has been reported by the user."", reported_by=var_1)
var_4 = log_system_event(event_type=""Ticket Creation"", description=""A new ticket was created for a system issue reported by the user."", user_id=var_1)"
"
        <s>
        [INST]
        Added Tools: 

        

def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""

        Query: Retrieve all tasks created by user USER-999, prioritize them, and add to my sprint. [/INST]

        ```
        var_1 = works_list(created_by=[""USER-999""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = who_am_i()
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)

        ```
        </s>
        ","var_1 = works_list(created_by=[""USER-999""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = who_am_i()
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""


def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""


def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""

        Query: Retrieve the current user's ID and summarize all tickets they own. [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""


def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""


def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""

        Query: Find and summarize all tasks assigned to me that need a response [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""

        Query: For the 'CustomerX' issue, get similar work items, add them to a new task list, and prioritize it based on severity [/INST]

        ```
        var_1 = search_object_by_name(query=""CustomerX"")
var_2 = get_similar_work_items(work_id=var_1)
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""CustomerX"")
var_2 = get_similar_work_items(work_id=var_1)
var_3 = prioritize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Extract tasks from the development team discussions and classify them by type [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""development team discussions"")
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = create_actionable_tasks_from_text(text=""development team discussions"")
var_2 = prioritize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""
def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""
def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""

        Query: Identify work items of type 'issue' for part 'CAPL-456' and then summarize them for a quick report [/INST]

        ```
        var_1 = works_list(applies_to_part=[""CAPL-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(applies_to_part=[""CAPL-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""


def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""


def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""
def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""


def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""

        Query: Summarize the current sprint's tasks and issues assigned to ""TEAM-ABC"" [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], owned_by=[""TEAM-ABC""], type=[""task"", ""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], owned_by=[""TEAM-ABC""], type=[""task"", ""issue""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

        Query: What if our existence is a result of a cosmic coincidence, and life is a rare anomaly in the universe? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        

def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""


def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""


def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""


def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""

        Query: Retrieve my work items that need a response, prioritize them, and summarize [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket"", ""issue"", ""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket"", ""issue"", ""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
 user_id (str): The ID of the user for whom to calculate the workload

Returns:
 int: The total number of open work items
""""""
', '

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact info is requested

Returns:
 str: Contact information of the user
""""""
', '

def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
 archive_id (str): The ID of the archive from which to retrieve documents
 keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
 list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""', '

def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
 user_id (str): The ID of the user to get activities for
 limit (int): The maximum number of activity log entries to return

Returns:
 list: Recent activity log entries
""""""
', '

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
 task_id (str): The ID of the task for which dependencies are requested

Returns:
 list: Dependency task IDs
""""""
', '

def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
 budget_id (str): The ID of the budget to calculate

Returns:
 float: The amount of remaining budget
""""""
', '

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
 group_id (str): The ID of the group

Returns:
 list: User IDs belonging to the group
""""""
', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""
', 'def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task is assigned

Returns:
 None
""""""
', '
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
 user_id (str): The ID of the user whose status is to be updated
 status (str): The new status to apply to the user account

Returns:
 str: updated User Id
""""""



def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""

        Query: Calculate the total workload for user ""TeamLead"" and fetch their recent activity log. [/INST]

        ```
        var_1 = search_object_by_name(query=""TeamLead"")
var_2 = calculate_workload_for_user(user_id=var_1)
var_3 = get_recent_activity_log(user_id=var_1)
        ```
        </s>
        ","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = calculate_workload_for_user(user_id=var_1)
var_3 = get_recent_activity_log(user_id=var_1)"
"
        <s>
        [INST]
        Added Tools: 

        

def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""


def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""


def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""


def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""

        Query: What are the visa requirements for traveling to Japan? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        ",#Unanswerable_Invalid_Query_Error
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""

def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""


def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""


def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""

        Query: Summarize the current sprint's tasks related to Project X [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""Project X"")
var_3 = works_list(applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""Project X"")
var_3 = works_list(applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""


def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""

        Query: Retrieve current sprint ID and add all my tasks with ""medium"" severity to it. [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(type=[""task""], ticket.severity=[""medium""], owned_by=[var_1])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(type=[""task""], ticket.severity=[""medium""], owned_by=[var_1])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""


def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""

        Query: Summarize the current sprint's work items for ""MobileApp"" part and then add a new task ""Update UI"" [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(applies_to_part=[""MobileApp""], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = create_actionable_tasks_from_text(text=""Update UI"")

        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = works_list(applies_to_part=[""MobileApp""], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = create_actionable_tasks_from_text(text=""Update UI"")
"
"
        <s>
        [INST]
        Added Tools: 

        

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""
def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
 sprint_id (str): The ID of the sprint for workload calculation

Returns:
 float: Total workload in hours
""""""
', 'def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
 issue_ids (list): A list of issue IDs to be linked to the project
 project_id (str): The ID of the project to which the issues should be linked

Returns:
 bool: Status of the linking action
""""""
', '

def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
 ticket_id (str): The ID of the ticket for which the history is requested
 history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
 list: A list of history records for the ticket
""""""
', '

def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: A chronological list of changes made to the work item
""""""
', '

def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
 sprint_id (str): The ID of the sprint to extend
 new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
 bool: True if the sprint end date was extended, False otherwise
""""""
', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""
', '

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
 user_id (str): The ID of the user
 object_id (str): The ID of the object to check permission for

Returns:
 bool: True if the user has permission, False otherwise
""""""
', 'def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
 issue_id (str): The ID of the issue to be updated
 new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
 list: Comments associated with the ticket
""""""
', '

def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be determined

Returns:
 int: The number of tasks assigned to the user
""""""



def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""

        Query: Calculate the total workload for the current sprint, and then check if user ""QAEngineer"" has permission to extend the sprint end date. [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = retrieve_sprint_workload(sprint_id=var_1)
var_3 = search_object_by_name(query=""QAEngineer"")
var_4 = check_object_permission(user_id=var_3, object_id=var_1)
        ```
        </s>
        ","var_1 = get_sprint_id()
var_2 = retrieve_sprint_workload(sprint_id=var_1)
var_3 = search_object_by_name(query=""QAEngineer"")
var_4 = check_object_permission(user_id=var_3, object_id=var_1)"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Get similar work items to ""OMEGA-321"", summarize, and prioritize them for the current sprint [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""OMEGA-321"")
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = get_similar_work_items(work_id=""OMEGA-321"")
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""

        Query: Prioritize issues by ""High Impact"" users and add them to my workload [/INST]

        ```
        var_1 = search_object_by_name(query=""High Impact"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = who_am_i()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""High Impact"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = who_am_i()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Add all my P2 tickets related to REV-456 to the current sprint [/INST]

        ```
        var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], issue.priority=[""p2""], issue.rev_orgs=[""REV-456""], type=[""ticket""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], issue.priority=[""p2""], issue.rev_orgs=[""REV-456""], type=[""ticket""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""


def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""


def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""



def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""


def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
 task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
 float: Total effort spent on the task
""""""
', '

def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
 task_ids (list): List of task IDs to filter
 completed (bool): The completion status to filter by. Default is 'True'

Returns:
 list: List of task IDs that match the completion status
""""""
', '

def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
 user_id (str): The ID of the user with whom to schedule a meeting
 duration (int): Duration of the meeting in minutes, default is '30'
 urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
 str: The ID of the scheduled meeting
""""""
', '

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
 user_id (str): The ID of the user whose workload is to be retrieved

Returns:
 list: A list containing workload details
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""
', '
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
 user_id (str): The ID of the user whose status is to be updated
 status (str): The new status to apply to the user account

Returns:
 str: updated User Id
""""""
', '

def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
 task_id (str): The ID of the task to be marked as complete

Returns:
 bool: True if marked successfully, False otherwise
""""""
', '

def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
 part_id (str): The ID of the part to check for availability

Returns:
 bool: True if the part is available, False otherwise
""""""
', '

def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
 user_id (str): The ID of the user to set permissions for
 permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
 bool: True if the permission was set successfully, False otherwise
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""

def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""

        Query: Retrieve all tasks completed by user ""QAEngineer42"", summarize the completed tasks, and then create a report for the current sprint including these summaries. [/INST]

        ```
        var_1 = search_object_by_name(query=""QAEngineer42"")
var_2 = fetch_user_tasks(user_id=var_1, include_completed=True)
var_3 = filter_tasks_by_completion(task_ids=var_2, completed=True)
var_4 = summarize_objects(objects=var_3)
var_5 = get_sprint_id()
var_6 = create_report_for_sprint(sprint_id=var_5, report_type=var_4)
        ```
        </s>
        ","var_1 = search_object_by_name(query=""QAEngineer42"")
var_2 = fetch_user_tasks(user_id=var_1, include_completed=True)
var_3 = filter_tasks_by_completion(task_ids=var_2, completed=True)
var_4 = summarize_objects(objects=var_3)
var_5 = get_sprint_id()
var_6 = create_report_for_sprint(sprint_id=var_5, report_type=var_4)"
"
        <s>
        [INST]
        Added Tools: 

        

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""


def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""

        Query: Retrieve my tasks, summarize them, and prioritize issues for this week [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = works_list(owned_by=[var_1], type=[""issue""])
var_5 = prioritize_objects(objects=var_4)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = works_list(owned_by=[var_1], type=[""issue""])
var_5 = prioritize_objects(objects=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Find and prioritize issues reported by user User123 add to my current sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""User123"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""User123"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
"
"
        <s>
        [INST]
        Added Tools: 

        def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""


def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""

        Query: Find work items in 'development' stage for part PROD-123, sort them by priority, and summarize [/INST]

        ```
        var_1 = works_list(type=[""issue"", ""ticket"", ""task""], stage.name=[""development""], applies_to_part=[""PROD-123""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = works_list(type=[""issue"", ""ticket"", ""task""], stage.name=[""development""], applies_to_part=[""PROD-123""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""


def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""


def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
 project_id (str): The ID of the project to summarize

Returns:
 str: A summary report of the project
""""""
', '

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which the progress report is needed
 report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
 str: The generated progress report
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""
', '

def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
 project_id (str): The ID of the project to be analyzed

Returns:
 str: Estimated date of completion
""""""
', 'def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
 issue_ids (list): A list of issue IDs that need to be assigned
 user_id (str): The user ID to whom the issues will be assigned

Returns:
 None
""""""
', '

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
 report_type (str): The type of report to generate
 data_set_id (str): The ID of the data set to be used for the report

Returns:
 str: A report data string or ID depending on internal implementation
""""""
', '

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
 work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
 int: The number of work items successfully archived
""""""
', '

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
 user_id (str): The ID of the user whose tasks are to be listed
 completed (bool): If True, only completed tasks are returned

Returns:
 list: A list of tasks assigned to the user
""""""
', '

def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
 task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
 float: Total effort spent on the task
""""""
', '

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""



def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""


def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""


def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""

        Query: Generate a progress report for project ""PRJ-009"" in detailed format and calculate the estimated completion date for the same project. [/INST]

        ```
        var_1 = generate_progress_report(project_id=""PRJ-009"", report_format=""detailed"")
var_2 = calculate_estimated_completion(project_id=""PRJ-009"")
        ```
        </s>
        ","var_1 = generate_progress_report(project_id=""PRJ-009"", report_format=""detailed"")
var_2 = calculate_estimated_completion(project_id=""PRJ-009"")"
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""


def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""

        Query: Find work related to the ""ProjectX"" enhancement and get a summary [/INST]

        ```
        var_1 = search_object_by_name(query=""ProjectX"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""ProjectX"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""



def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""

        Query:  Find and summarize tickets with severity medium that need a response, limiting the results to 50. [/INST]

        ```
        var_1 = works_list(ticket.severity=[""medium""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.severity=[""medium""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""


def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""

def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""


def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""

        Query: For the upcoming release, filter all issues tagged with ""UX-Update"", prioritize and summarize [/INST]

        ```
        var_1 = works_list(applies_to_part=[""UX-Update""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = works_list(applies_to_part=[""UX-Update""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""


def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""

        Query: Summarize issues created by me with 'p0' priority for reporting [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(type=[""issue""], created_by=[var_1], issue.priority=[""p0""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(type=[""issue""], created_by=[var_1], issue.priority=[""p0""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""

        Query: Find and summarize issues for a specific Rev organization [/INST]

        ```
        var_1 = search_object_by_name(query=""specific Rev organization"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""specific Rev organization"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""


def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""

        Query: Summarize and prioritize tasks created by user ""DevLeader"" for the ""Frontend Overhaul"" [/INST]

        ```
        var_1 = search_object_by_name(query=""Frontend Overhaul"")
var_2 = works_list(created_by=[""DevLeader""], applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_3)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""Frontend Overhaul"")
var_2 = works_list(created_by=[""DevLeader""], applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_3)
"
"
        <s>
        [INST]
        Added Tools: 

        

def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""

        Query: Prioritize my tasks, get similar ones for cross-reference, and add new insights from notes T as tasks to the current sprint [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_similar_work_items(work_id=var_2[0])
var_5 = create_actionable_tasks_from_text(text=""T"")
var_6 = get_sprint_id()
var_7 = add_work_items_to_sprint(work_ids=var_5, sprint_id=var_6)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_similar_work_items(work_id=var_2[0])
var_5 = create_actionable_tasks_from_text(text=""T"")
var_6 = get_sprint_id()
var_7 = add_work_items_to_sprint(work_ids=var_5, sprint_id=var_6)
"
"
        <s>
        [INST]
        Added Tools: 

        

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""

        Query: Identify and summarize work items similar to 'TASK-789' [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""TASK-789"")
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = get_similar_work_items(work_id=""TASK-789"")
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""

        Query: Find and summarize new tickets from 'WebPortal' channel for analysis [/INST]

        ```
        var_1 = works_list(ticket.source_channel=[""WebPortal""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        ","var_1 = works_list(ticket.source_channel=[""WebPortal""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
"
"
        <s>
        [INST]
        Added Tools: 

        

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""


def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""


def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""


def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""


def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""

        Query: For the user DEVU-456, filter issues related to part PROD-789 and summarize them [/INST]

        ```
        var_1 = search_object_by_name(query=""PROD-789"")
var_2 = works_list(applies_to_part=[var_1], created_by=[""DEVU-456""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = search_object_by_name(query=""PROD-789"")
var_2 = works_list(applies_to_part=[var_1], created_by=[""DEVU-456""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""

        Query: Retrieve my tasks with priority P1 and summarize them [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p1""], owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        ","var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p1""], owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
"
"
        <s>
        [INST]
        Added Tools: 

        

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""
def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""

        Query: Summarize the tasks for the Rev organization ORG-321 and list any tickets requiring response [/INST]

        ```
        var_1 = search_object_by_name(query=""ORG-321"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])

        ```
        </s>
        ","var_1 = search_object_by_name(query=""ORG-321"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
"
